// MIT License
//
// Copyright (c) 2025 asv-soft (https://github.com/asv-soft)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This code was generate by tool Asv.Mavlink.Shell version 4.0.11+05423b76b208fe780abe1cef9f7beeacb19cba77 25-08-04.

using System;
using System.Text;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Collections.Immutable;
using Asv.Mavlink.Common;
using Asv.Mavlink.Minimal;
using Asv.Mavlink.AsvAudio;
using System.Linq;
using System.Collections.Generic;
using Asv.IO;

namespace Asv.Mavlink.Common
{

    public static class CommonHelper
    {
        public static void RegisterCommonDialect(this ImmutableDictionary<int,Func<MavlinkMessage>>.Builder src)
        {
            src.Add(SysStatusPacket.MessageId, ()=>new SysStatusPacket());
            src.Add(SystemTimePacket.MessageId, ()=>new SystemTimePacket());
            src.Add(PingPacket.MessageId, ()=>new PingPacket());
            src.Add(ChangeOperatorControlPacket.MessageId, ()=>new ChangeOperatorControlPacket());
            src.Add(ChangeOperatorControlAckPacket.MessageId, ()=>new ChangeOperatorControlAckPacket());
            src.Add(AuthKeyPacket.MessageId, ()=>new AuthKeyPacket());
            src.Add(LinkNodeStatusPacket.MessageId, ()=>new LinkNodeStatusPacket());
            src.Add(SetModePacket.MessageId, ()=>new SetModePacket());
            src.Add(ParamRequestReadPacket.MessageId, ()=>new ParamRequestReadPacket());
            src.Add(ParamRequestListPacket.MessageId, ()=>new ParamRequestListPacket());
            src.Add(ParamValuePacket.MessageId, ()=>new ParamValuePacket());
            src.Add(ParamSetPacket.MessageId, ()=>new ParamSetPacket());
            src.Add(GpsRawIntPacket.MessageId, ()=>new GpsRawIntPacket());
            src.Add(GpsStatusPacket.MessageId, ()=>new GpsStatusPacket());
            src.Add(ScaledImuPacket.MessageId, ()=>new ScaledImuPacket());
            src.Add(RawImuPacket.MessageId, ()=>new RawImuPacket());
            src.Add(RawPressurePacket.MessageId, ()=>new RawPressurePacket());
            src.Add(ScaledPressurePacket.MessageId, ()=>new ScaledPressurePacket());
            src.Add(AttitudePacket.MessageId, ()=>new AttitudePacket());
            src.Add(AttitudeQuaternionPacket.MessageId, ()=>new AttitudeQuaternionPacket());
            src.Add(LocalPositionNedPacket.MessageId, ()=>new LocalPositionNedPacket());
            src.Add(GlobalPositionIntPacket.MessageId, ()=>new GlobalPositionIntPacket());
            src.Add(RcChannelsScaledPacket.MessageId, ()=>new RcChannelsScaledPacket());
            src.Add(RcChannelsRawPacket.MessageId, ()=>new RcChannelsRawPacket());
            src.Add(ServoOutputRawPacket.MessageId, ()=>new ServoOutputRawPacket());
            src.Add(MissionRequestPartialListPacket.MessageId, ()=>new MissionRequestPartialListPacket());
            src.Add(MissionWritePartialListPacket.MessageId, ()=>new MissionWritePartialListPacket());
            src.Add(MissionItemPacket.MessageId, ()=>new MissionItemPacket());
            src.Add(MissionRequestPacket.MessageId, ()=>new MissionRequestPacket());
            src.Add(MissionSetCurrentPacket.MessageId, ()=>new MissionSetCurrentPacket());
            src.Add(MissionCurrentPacket.MessageId, ()=>new MissionCurrentPacket());
            src.Add(MissionRequestListPacket.MessageId, ()=>new MissionRequestListPacket());
            src.Add(MissionCountPacket.MessageId, ()=>new MissionCountPacket());
            src.Add(MissionClearAllPacket.MessageId, ()=>new MissionClearAllPacket());
            src.Add(MissionItemReachedPacket.MessageId, ()=>new MissionItemReachedPacket());
            src.Add(MissionAckPacket.MessageId, ()=>new MissionAckPacket());
            src.Add(SetGpsGlobalOriginPacket.MessageId, ()=>new SetGpsGlobalOriginPacket());
            src.Add(GpsGlobalOriginPacket.MessageId, ()=>new GpsGlobalOriginPacket());
            src.Add(ParamMapRcPacket.MessageId, ()=>new ParamMapRcPacket());
            src.Add(MissionRequestIntPacket.MessageId, ()=>new MissionRequestIntPacket());
            src.Add(SafetySetAllowedAreaPacket.MessageId, ()=>new SafetySetAllowedAreaPacket());
            src.Add(SafetyAllowedAreaPacket.MessageId, ()=>new SafetyAllowedAreaPacket());
            src.Add(AttitudeQuaternionCovPacket.MessageId, ()=>new AttitudeQuaternionCovPacket());
            src.Add(NavControllerOutputPacket.MessageId, ()=>new NavControllerOutputPacket());
            src.Add(GlobalPositionIntCovPacket.MessageId, ()=>new GlobalPositionIntCovPacket());
            src.Add(LocalPositionNedCovPacket.MessageId, ()=>new LocalPositionNedCovPacket());
            src.Add(RcChannelsPacket.MessageId, ()=>new RcChannelsPacket());
            src.Add(RequestDataStreamPacket.MessageId, ()=>new RequestDataStreamPacket());
            src.Add(DataStreamPacket.MessageId, ()=>new DataStreamPacket());
            src.Add(ManualControlPacket.MessageId, ()=>new ManualControlPacket());
            src.Add(RcChannelsOverridePacket.MessageId, ()=>new RcChannelsOverridePacket());
            src.Add(MissionItemIntPacket.MessageId, ()=>new MissionItemIntPacket());
            src.Add(VfrHudPacket.MessageId, ()=>new VfrHudPacket());
            src.Add(CommandIntPacket.MessageId, ()=>new CommandIntPacket());
            src.Add(CommandLongPacket.MessageId, ()=>new CommandLongPacket());
            src.Add(CommandAckPacket.MessageId, ()=>new CommandAckPacket());
            src.Add(CommandCancelPacket.MessageId, ()=>new CommandCancelPacket());
            src.Add(ManualSetpointPacket.MessageId, ()=>new ManualSetpointPacket());
            src.Add(SetAttitudeTargetPacket.MessageId, ()=>new SetAttitudeTargetPacket());
            src.Add(AttitudeTargetPacket.MessageId, ()=>new AttitudeTargetPacket());
            src.Add(SetPositionTargetLocalNedPacket.MessageId, ()=>new SetPositionTargetLocalNedPacket());
            src.Add(PositionTargetLocalNedPacket.MessageId, ()=>new PositionTargetLocalNedPacket());
            src.Add(SetPositionTargetGlobalIntPacket.MessageId, ()=>new SetPositionTargetGlobalIntPacket());
            src.Add(PositionTargetGlobalIntPacket.MessageId, ()=>new PositionTargetGlobalIntPacket());
            src.Add(LocalPositionNedSystemGlobalOffsetPacket.MessageId, ()=>new LocalPositionNedSystemGlobalOffsetPacket());
            src.Add(HilStatePacket.MessageId, ()=>new HilStatePacket());
            src.Add(HilControlsPacket.MessageId, ()=>new HilControlsPacket());
            src.Add(HilRcInputsRawPacket.MessageId, ()=>new HilRcInputsRawPacket());
            src.Add(HilActuatorControlsPacket.MessageId, ()=>new HilActuatorControlsPacket());
            src.Add(OpticalFlowPacket.MessageId, ()=>new OpticalFlowPacket());
            src.Add(GlobalVisionPositionEstimatePacket.MessageId, ()=>new GlobalVisionPositionEstimatePacket());
            src.Add(VisionPositionEstimatePacket.MessageId, ()=>new VisionPositionEstimatePacket());
            src.Add(VisionSpeedEstimatePacket.MessageId, ()=>new VisionSpeedEstimatePacket());
            src.Add(ViconPositionEstimatePacket.MessageId, ()=>new ViconPositionEstimatePacket());
            src.Add(HighresImuPacket.MessageId, ()=>new HighresImuPacket());
            src.Add(OpticalFlowRadPacket.MessageId, ()=>new OpticalFlowRadPacket());
            src.Add(HilSensorPacket.MessageId, ()=>new HilSensorPacket());
            src.Add(SimStatePacket.MessageId, ()=>new SimStatePacket());
            src.Add(RadioStatusPacket.MessageId, ()=>new RadioStatusPacket());
            src.Add(FileTransferProtocolPacket.MessageId, ()=>new FileTransferProtocolPacket());
            src.Add(TimesyncPacket.MessageId, ()=>new TimesyncPacket());
            src.Add(CameraTriggerPacket.MessageId, ()=>new CameraTriggerPacket());
            src.Add(HilGpsPacket.MessageId, ()=>new HilGpsPacket());
            src.Add(HilOpticalFlowPacket.MessageId, ()=>new HilOpticalFlowPacket());
            src.Add(HilStateQuaternionPacket.MessageId, ()=>new HilStateQuaternionPacket());
            src.Add(ScaledImu2Packet.MessageId, ()=>new ScaledImu2Packet());
            src.Add(LogRequestListPacket.MessageId, ()=>new LogRequestListPacket());
            src.Add(LogEntryPacket.MessageId, ()=>new LogEntryPacket());
            src.Add(LogRequestDataPacket.MessageId, ()=>new LogRequestDataPacket());
            src.Add(LogDataPacket.MessageId, ()=>new LogDataPacket());
            src.Add(LogErasePacket.MessageId, ()=>new LogErasePacket());
            src.Add(LogRequestEndPacket.MessageId, ()=>new LogRequestEndPacket());
            src.Add(GpsInjectDataPacket.MessageId, ()=>new GpsInjectDataPacket());
            src.Add(Gps2RawPacket.MessageId, ()=>new Gps2RawPacket());
            src.Add(PowerStatusPacket.MessageId, ()=>new PowerStatusPacket());
            src.Add(SerialControlPacket.MessageId, ()=>new SerialControlPacket());
            src.Add(GpsRtkPacket.MessageId, ()=>new GpsRtkPacket());
            src.Add(Gps2RtkPacket.MessageId, ()=>new Gps2RtkPacket());
            src.Add(ScaledImu3Packet.MessageId, ()=>new ScaledImu3Packet());
            src.Add(DataTransmissionHandshakePacket.MessageId, ()=>new DataTransmissionHandshakePacket());
            src.Add(EncapsulatedDataPacket.MessageId, ()=>new EncapsulatedDataPacket());
            src.Add(DistanceSensorPacket.MessageId, ()=>new DistanceSensorPacket());
            src.Add(TerrainRequestPacket.MessageId, ()=>new TerrainRequestPacket());
            src.Add(TerrainDataPacket.MessageId, ()=>new TerrainDataPacket());
            src.Add(TerrainCheckPacket.MessageId, ()=>new TerrainCheckPacket());
            src.Add(TerrainReportPacket.MessageId, ()=>new TerrainReportPacket());
            src.Add(ScaledPressure2Packet.MessageId, ()=>new ScaledPressure2Packet());
            src.Add(AttPosMocapPacket.MessageId, ()=>new AttPosMocapPacket());
            src.Add(SetActuatorControlTargetPacket.MessageId, ()=>new SetActuatorControlTargetPacket());
            src.Add(ActuatorControlTargetPacket.MessageId, ()=>new ActuatorControlTargetPacket());
            src.Add(AltitudePacket.MessageId, ()=>new AltitudePacket());
            src.Add(ResourceRequestPacket.MessageId, ()=>new ResourceRequestPacket());
            src.Add(ScaledPressure3Packet.MessageId, ()=>new ScaledPressure3Packet());
            src.Add(FollowTargetPacket.MessageId, ()=>new FollowTargetPacket());
            src.Add(ControlSystemStatePacket.MessageId, ()=>new ControlSystemStatePacket());
            src.Add(BatteryStatusPacket.MessageId, ()=>new BatteryStatusPacket());
            src.Add(AutopilotVersionPacket.MessageId, ()=>new AutopilotVersionPacket());
            src.Add(LandingTargetPacket.MessageId, ()=>new LandingTargetPacket());
            src.Add(FenceStatusPacket.MessageId, ()=>new FenceStatusPacket());
            src.Add(MagCalReportPacket.MessageId, ()=>new MagCalReportPacket());
            src.Add(EfiStatusPacket.MessageId, ()=>new EfiStatusPacket());
            src.Add(EstimatorStatusPacket.MessageId, ()=>new EstimatorStatusPacket());
            src.Add(WindCovPacket.MessageId, ()=>new WindCovPacket());
            src.Add(GpsInputPacket.MessageId, ()=>new GpsInputPacket());
            src.Add(GpsRtcmDataPacket.MessageId, ()=>new GpsRtcmDataPacket());
            src.Add(HighLatencyPacket.MessageId, ()=>new HighLatencyPacket());
            src.Add(HighLatency2Packet.MessageId, ()=>new HighLatency2Packet());
            src.Add(VibrationPacket.MessageId, ()=>new VibrationPacket());
            src.Add(HomePositionPacket.MessageId, ()=>new HomePositionPacket());
            src.Add(SetHomePositionPacket.MessageId, ()=>new SetHomePositionPacket());
            src.Add(MessageIntervalPacket.MessageId, ()=>new MessageIntervalPacket());
            src.Add(ExtendedSysStatePacket.MessageId, ()=>new ExtendedSysStatePacket());
            src.Add(AdsbVehiclePacket.MessageId, ()=>new AdsbVehiclePacket());
            src.Add(CollisionPacket.MessageId, ()=>new CollisionPacket());
            src.Add(V2ExtensionPacket.MessageId, ()=>new V2ExtensionPacket());
            src.Add(MemoryVectPacket.MessageId, ()=>new MemoryVectPacket());
            src.Add(DebugVectPacket.MessageId, ()=>new DebugVectPacket());
            src.Add(NamedValueFloatPacket.MessageId, ()=>new NamedValueFloatPacket());
            src.Add(NamedValueIntPacket.MessageId, ()=>new NamedValueIntPacket());
            src.Add(StatustextPacket.MessageId, ()=>new StatustextPacket());
            src.Add(DebugPacket.MessageId, ()=>new DebugPacket());
            src.Add(SetupSigningPacket.MessageId, ()=>new SetupSigningPacket());
            src.Add(ButtonChangePacket.MessageId, ()=>new ButtonChangePacket());
            src.Add(PlayTunePacket.MessageId, ()=>new PlayTunePacket());
            src.Add(CameraInformationPacket.MessageId, ()=>new CameraInformationPacket());
            src.Add(CameraSettingsPacket.MessageId, ()=>new CameraSettingsPacket());
            src.Add(StorageInformationPacket.MessageId, ()=>new StorageInformationPacket());
            src.Add(CameraCaptureStatusPacket.MessageId, ()=>new CameraCaptureStatusPacket());
            src.Add(CameraImageCapturedPacket.MessageId, ()=>new CameraImageCapturedPacket());
            src.Add(FlightInformationPacket.MessageId, ()=>new FlightInformationPacket());
            src.Add(MountOrientationPacket.MessageId, ()=>new MountOrientationPacket());
            src.Add(LoggingDataPacket.MessageId, ()=>new LoggingDataPacket());
            src.Add(LoggingDataAckedPacket.MessageId, ()=>new LoggingDataAckedPacket());
            src.Add(LoggingAckPacket.MessageId, ()=>new LoggingAckPacket());
            src.Add(VideoStreamInformationPacket.MessageId, ()=>new VideoStreamInformationPacket());
            src.Add(VideoStreamStatusPacket.MessageId, ()=>new VideoStreamStatusPacket());
            src.Add(CameraFovStatusPacket.MessageId, ()=>new CameraFovStatusPacket());
            src.Add(CameraTrackingImageStatusPacket.MessageId, ()=>new CameraTrackingImageStatusPacket());
            src.Add(CameraTrackingGeoStatusPacket.MessageId, ()=>new CameraTrackingGeoStatusPacket());
            src.Add(GimbalManagerInformationPacket.MessageId, ()=>new GimbalManagerInformationPacket());
            src.Add(GimbalManagerStatusPacket.MessageId, ()=>new GimbalManagerStatusPacket());
            src.Add(GimbalManagerSetAttitudePacket.MessageId, ()=>new GimbalManagerSetAttitudePacket());
            src.Add(GimbalDeviceInformationPacket.MessageId, ()=>new GimbalDeviceInformationPacket());
            src.Add(GimbalDeviceSetAttitudePacket.MessageId, ()=>new GimbalDeviceSetAttitudePacket());
            src.Add(GimbalDeviceAttitudeStatusPacket.MessageId, ()=>new GimbalDeviceAttitudeStatusPacket());
            src.Add(AutopilotStateForGimbalDevicePacket.MessageId, ()=>new AutopilotStateForGimbalDevicePacket());
            src.Add(GimbalManagerSetPitchyawPacket.MessageId, ()=>new GimbalManagerSetPitchyawPacket());
            src.Add(GimbalManagerSetManualControlPacket.MessageId, ()=>new GimbalManagerSetManualControlPacket());
            src.Add(EscInfoPacket.MessageId, ()=>new EscInfoPacket());
            src.Add(EscStatusPacket.MessageId, ()=>new EscStatusPacket());
            src.Add(WifiConfigApPacket.MessageId, ()=>new WifiConfigApPacket());
            src.Add(AisVesselPacket.MessageId, ()=>new AisVesselPacket());
            src.Add(UavcanNodeStatusPacket.MessageId, ()=>new UavcanNodeStatusPacket());
            src.Add(UavcanNodeInfoPacket.MessageId, ()=>new UavcanNodeInfoPacket());
            src.Add(ParamExtRequestReadPacket.MessageId, ()=>new ParamExtRequestReadPacket());
            src.Add(ParamExtRequestListPacket.MessageId, ()=>new ParamExtRequestListPacket());
            src.Add(ParamExtValuePacket.MessageId, ()=>new ParamExtValuePacket());
            src.Add(ParamExtSetPacket.MessageId, ()=>new ParamExtSetPacket());
            src.Add(ParamExtAckPacket.MessageId, ()=>new ParamExtAckPacket());
            src.Add(ObstacleDistancePacket.MessageId, ()=>new ObstacleDistancePacket());
            src.Add(OdometryPacket.MessageId, ()=>new OdometryPacket());
            src.Add(TrajectoryRepresentationWaypointsPacket.MessageId, ()=>new TrajectoryRepresentationWaypointsPacket());
            src.Add(TrajectoryRepresentationBezierPacket.MessageId, ()=>new TrajectoryRepresentationBezierPacket());
            src.Add(CellularStatusPacket.MessageId, ()=>new CellularStatusPacket());
            src.Add(IsbdLinkStatusPacket.MessageId, ()=>new IsbdLinkStatusPacket());
            src.Add(CellularConfigPacket.MessageId, ()=>new CellularConfigPacket());
            src.Add(RawRpmPacket.MessageId, ()=>new RawRpmPacket());
            src.Add(UtmGlobalPositionPacket.MessageId, ()=>new UtmGlobalPositionPacket());
            src.Add(DebugFloatArrayPacket.MessageId, ()=>new DebugFloatArrayPacket());
            src.Add(OrbitExecutionStatusPacket.MessageId, ()=>new OrbitExecutionStatusPacket());
            src.Add(SmartBatteryInfoPacket.MessageId, ()=>new SmartBatteryInfoPacket());
            src.Add(GeneratorStatusPacket.MessageId, ()=>new GeneratorStatusPacket());
            src.Add(ActuatorOutputStatusPacket.MessageId, ()=>new ActuatorOutputStatusPacket());
            src.Add(TimeEstimateToTargetPacket.MessageId, ()=>new TimeEstimateToTargetPacket());
            src.Add(TunnelPacket.MessageId, ()=>new TunnelPacket());
            src.Add(CanFramePacket.MessageId, ()=>new CanFramePacket());
            src.Add(OnboardComputerStatusPacket.MessageId, ()=>new OnboardComputerStatusPacket());
            src.Add(ComponentInformationPacket.MessageId, ()=>new ComponentInformationPacket());
            src.Add(ComponentMetadataPacket.MessageId, ()=>new ComponentMetadataPacket());
            src.Add(PlayTuneV2Packet.MessageId, ()=>new PlayTuneV2Packet());
            src.Add(SupportedTunesPacket.MessageId, ()=>new SupportedTunesPacket());
            src.Add(EventPacket.MessageId, ()=>new EventPacket());
            src.Add(CurrentEventSequencePacket.MessageId, ()=>new CurrentEventSequencePacket());
            src.Add(RequestEventPacket.MessageId, ()=>new RequestEventPacket());
            src.Add(ResponseEventErrorPacket.MessageId, ()=>new ResponseEventErrorPacket());
            src.Add(CanfdFramePacket.MessageId, ()=>new CanfdFramePacket());
            src.Add(CanFilterModifyPacket.MessageId, ()=>new CanFilterModifyPacket());
            src.Add(WheelDistancePacket.MessageId, ()=>new WheelDistancePacket());
            src.Add(WinchStatusPacket.MessageId, ()=>new WinchStatusPacket());
            src.Add(OpenDroneIdBasicIdPacket.MessageId, ()=>new OpenDroneIdBasicIdPacket());
            src.Add(OpenDroneIdLocationPacket.MessageId, ()=>new OpenDroneIdLocationPacket());
            src.Add(OpenDroneIdAuthenticationPacket.MessageId, ()=>new OpenDroneIdAuthenticationPacket());
            src.Add(OpenDroneIdSelfIdPacket.MessageId, ()=>new OpenDroneIdSelfIdPacket());
            src.Add(OpenDroneIdSystemPacket.MessageId, ()=>new OpenDroneIdSystemPacket());
            src.Add(OpenDroneIdOperatorIdPacket.MessageId, ()=>new OpenDroneIdOperatorIdPacket());
            src.Add(OpenDroneIdMessagePackPacket.MessageId, ()=>new OpenDroneIdMessagePackPacket());
            src.Add(OpenDroneIdArmStatusPacket.MessageId, ()=>new OpenDroneIdArmStatusPacket());
            src.Add(OpenDroneIdSystemUpdatePacket.MessageId, ()=>new OpenDroneIdSystemUpdatePacket());
            src.Add(HygrometerSensorPacket.MessageId, ()=>new HygrometerSensorPacket());
        }
 
    }

#region Enums

    /// <summary>
    /// These values define the type of firmware release.  These values indicate the first version or release of this type.  For example the first alpha release would be 64, the second would be 65.
    ///  FIRMWARE_VERSION_TYPE
    /// </summary>
    public enum FirmwareVersionType : ulong
    {
        /// <summary>
        /// development release
        /// FIRMWARE_VERSION_TYPE_DEV
        /// </summary>
        FirmwareVersionTypeDev = 0,
        /// <summary>
        /// alpha release
        /// FIRMWARE_VERSION_TYPE_ALPHA
        /// </summary>
        FirmwareVersionTypeAlpha = 64,
        /// <summary>
        /// beta release
        /// FIRMWARE_VERSION_TYPE_BETA
        /// </summary>
        FirmwareVersionTypeBeta = 128,
        /// <summary>
        /// release candidate
        /// FIRMWARE_VERSION_TYPE_RC
        /// </summary>
        FirmwareVersionTypeRc = 192,
        /// <summary>
        /// official stable release
        /// FIRMWARE_VERSION_TYPE_OFFICIAL
        /// </summary>
        FirmwareVersionTypeOfficial = 255,
    }
    public static class FirmwareVersionTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(64);
            yield return converter(128);
            yield return converter(192);
            yield return converter(255);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"FIRMWARE_VERSION_TYPE_DEV");
            yield return new EnumValue<T>(converter(64),"FIRMWARE_VERSION_TYPE_ALPHA");
            yield return new EnumValue<T>(converter(128),"FIRMWARE_VERSION_TYPE_BETA");
            yield return new EnumValue<T>(converter(192),"FIRMWARE_VERSION_TYPE_RC");
            yield return new EnumValue<T>(converter(255),"FIRMWARE_VERSION_TYPE_OFFICIAL");
        }
    }
    /// <summary>
    /// Flags to report failure cases over the high latency telemetry.
    ///  HL_FAILURE_FLAG
    /// </summary>
    public enum HlFailureFlag : ulong
    {
        /// <summary>
        /// GPS failure.
        /// HL_FAILURE_FLAG_GPS
        /// </summary>
        HlFailureFlagGps = 1,
        /// <summary>
        /// Differential pressure sensor failure.
        /// HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE
        /// </summary>
        HlFailureFlagDifferentialPressure = 2,
        /// <summary>
        /// Absolute pressure sensor failure.
        /// HL_FAILURE_FLAG_ABSOLUTE_PRESSURE
        /// </summary>
        HlFailureFlagAbsolutePressure = 4,
        /// <summary>
        /// Accelerometer sensor failure.
        /// HL_FAILURE_FLAG_3D_ACCEL
        /// </summary>
        HlFailureFlag3dAccel = 8,
        /// <summary>
        /// Gyroscope sensor failure.
        /// HL_FAILURE_FLAG_3D_GYRO
        /// </summary>
        HlFailureFlag3dGyro = 16,
        /// <summary>
        /// Magnetometer sensor failure.
        /// HL_FAILURE_FLAG_3D_MAG
        /// </summary>
        HlFailureFlag3dMag = 32,
        /// <summary>
        /// Terrain subsystem failure.
        /// HL_FAILURE_FLAG_TERRAIN
        /// </summary>
        HlFailureFlagTerrain = 64,
        /// <summary>
        /// Battery failure/critical low battery.
        /// HL_FAILURE_FLAG_BATTERY
        /// </summary>
        HlFailureFlagBattery = 128,
        /// <summary>
        /// RC receiver failure/no RC connection.
        /// HL_FAILURE_FLAG_RC_RECEIVER
        /// </summary>
        HlFailureFlagRcReceiver = 256,
        /// <summary>
        /// Offboard link failure.
        /// HL_FAILURE_FLAG_OFFBOARD_LINK
        /// </summary>
        HlFailureFlagOffboardLink = 512,
        /// <summary>
        /// Engine failure.
        /// HL_FAILURE_FLAG_ENGINE
        /// </summary>
        HlFailureFlagEngine = 1024,
        /// <summary>
        /// Geofence violation.
        /// HL_FAILURE_FLAG_GEOFENCE
        /// </summary>
        HlFailureFlagGeofence = 2048,
        /// <summary>
        /// Estimator failure, for example measurement rejection or large variances.
        /// HL_FAILURE_FLAG_ESTIMATOR
        /// </summary>
        HlFailureFlagEstimator = 4096,
        /// <summary>
        /// Mission failure.
        /// HL_FAILURE_FLAG_MISSION
        /// </summary>
        HlFailureFlagMission = 8192,
    }
    public static class HlFailureFlagHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(8192);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"HL_FAILURE_FLAG_GPS");
            yield return new EnumValue<T>(converter(2),"HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE");
            yield return new EnumValue<T>(converter(4),"HL_FAILURE_FLAG_ABSOLUTE_PRESSURE");
            yield return new EnumValue<T>(converter(8),"HL_FAILURE_FLAG_3D_ACCEL");
            yield return new EnumValue<T>(converter(16),"HL_FAILURE_FLAG_3D_GYRO");
            yield return new EnumValue<T>(converter(32),"HL_FAILURE_FLAG_3D_MAG");
            yield return new EnumValue<T>(converter(64),"HL_FAILURE_FLAG_TERRAIN");
            yield return new EnumValue<T>(converter(128),"HL_FAILURE_FLAG_BATTERY");
            yield return new EnumValue<T>(converter(256),"HL_FAILURE_FLAG_RC_RECEIVER");
            yield return new EnumValue<T>(converter(512),"HL_FAILURE_FLAG_OFFBOARD_LINK");
            yield return new EnumValue<T>(converter(1024),"HL_FAILURE_FLAG_ENGINE");
            yield return new EnumValue<T>(converter(2048),"HL_FAILURE_FLAG_GEOFENCE");
            yield return new EnumValue<T>(converter(4096),"HL_FAILURE_FLAG_ESTIMATOR");
            yield return new EnumValue<T>(converter(8192),"HL_FAILURE_FLAG_MISSION");
        }
    }
    /// <summary>
    /// Actions that may be specified in MAV_CMD_OVERRIDE_GOTO to override mission execution.
    ///  MAV_GOTO
    /// </summary>
    public enum MavGoto : ulong
    {
        /// <summary>
        /// Hold at the current position.
        /// MAV_GOTO_DO_HOLD
        /// </summary>
        MavGotoDoHold = 0,
        /// <summary>
        /// Continue with the next item in mission execution.
        /// MAV_GOTO_DO_CONTINUE
        /// </summary>
        MavGotoDoContinue = 1,
        /// <summary>
        /// Hold at the current position of the system
        /// MAV_GOTO_HOLD_AT_CURRENT_POSITION
        /// </summary>
        MavGotoHoldAtCurrentPosition = 2,
        /// <summary>
        /// Hold at the position specified in the parameters of the DO_HOLD action
        /// MAV_GOTO_HOLD_AT_SPECIFIED_POSITION
        /// </summary>
        MavGotoHoldAtSpecifiedPosition = 3,
    }
    public static class MavGotoHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_GOTO_DO_HOLD");
            yield return new EnumValue<T>(converter(1),"MAV_GOTO_DO_CONTINUE");
            yield return new EnumValue<T>(converter(2),"MAV_GOTO_HOLD_AT_CURRENT_POSITION");
            yield return new EnumValue<T>(converter(3),"MAV_GOTO_HOLD_AT_SPECIFIED_POSITION");
        }
    }
    /// <summary>
    /// These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it
    ///                simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override.
    ///  MAV_MODE
    /// </summary>
    public enum MavMode : ulong
    {
        /// <summary>
        /// System is not ready to fly, booting, calibrating, etc. No flag is set.
        /// MAV_MODE_PREFLIGHT
        /// </summary>
        MavModePreflight = 0,
        /// <summary>
        /// System is allowed to be active, under assisted RC control.
        /// MAV_MODE_STABILIZE_DISARMED
        /// </summary>
        MavModeStabilizeDisarmed = 80,
        /// <summary>
        /// System is allowed to be active, under assisted RC control.
        /// MAV_MODE_STABILIZE_ARMED
        /// </summary>
        MavModeStabilizeArmed = 208,
        /// <summary>
        /// System is allowed to be active, under manual (RC) control, no stabilization
        /// MAV_MODE_MANUAL_DISARMED
        /// </summary>
        MavModeManualDisarmed = 64,
        /// <summary>
        /// System is allowed to be active, under manual (RC) control, no stabilization
        /// MAV_MODE_MANUAL_ARMED
        /// </summary>
        MavModeManualArmed = 192,
        /// <summary>
        /// System is allowed to be active, under autonomous control, manual setpoint
        /// MAV_MODE_GUIDED_DISARMED
        /// </summary>
        MavModeGuidedDisarmed = 88,
        /// <summary>
        /// System is allowed to be active, under autonomous control, manual setpoint
        /// MAV_MODE_GUIDED_ARMED
        /// </summary>
        MavModeGuidedArmed = 216,
        /// <summary>
        /// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
        /// MAV_MODE_AUTO_DISARMED
        /// </summary>
        MavModeAutoDisarmed = 92,
        /// <summary>
        /// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
        /// MAV_MODE_AUTO_ARMED
        /// </summary>
        MavModeAutoArmed = 220,
        /// <summary>
        /// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
        /// MAV_MODE_TEST_DISARMED
        /// </summary>
        MavModeTestDisarmed = 66,
        /// <summary>
        /// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
        /// MAV_MODE_TEST_ARMED
        /// </summary>
        MavModeTestArmed = 194,
    }
    public static class MavModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(80);
            yield return converter(208);
            yield return converter(64);
            yield return converter(192);
            yield return converter(88);
            yield return converter(216);
            yield return converter(92);
            yield return converter(220);
            yield return converter(66);
            yield return converter(194);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_MODE_PREFLIGHT");
            yield return new EnumValue<T>(converter(80),"MAV_MODE_STABILIZE_DISARMED");
            yield return new EnumValue<T>(converter(208),"MAV_MODE_STABILIZE_ARMED");
            yield return new EnumValue<T>(converter(64),"MAV_MODE_MANUAL_DISARMED");
            yield return new EnumValue<T>(converter(192),"MAV_MODE_MANUAL_ARMED");
            yield return new EnumValue<T>(converter(88),"MAV_MODE_GUIDED_DISARMED");
            yield return new EnumValue<T>(converter(216),"MAV_MODE_GUIDED_ARMED");
            yield return new EnumValue<T>(converter(92),"MAV_MODE_AUTO_DISARMED");
            yield return new EnumValue<T>(converter(220),"MAV_MODE_AUTO_ARMED");
            yield return new EnumValue<T>(converter(66),"MAV_MODE_TEST_DISARMED");
            yield return new EnumValue<T>(converter(194),"MAV_MODE_TEST_ARMED");
        }
    }
    /// <summary>
    /// These encode the sensors whose status is sent as part of the SYS_STATUS message.
    ///  MAV_SYS_STATUS_SENSOR
    /// </summary>
    public enum MavSysStatusSensor : ulong
    {
        /// <summary>
        /// 0x01 3D gyro
        /// MAV_SYS_STATUS_SENSOR_3D_GYRO
        /// </summary>
        MavSysStatusSensor3dGyro = 1,
        /// <summary>
        /// 0x02 3D accelerometer
        /// MAV_SYS_STATUS_SENSOR_3D_ACCEL
        /// </summary>
        MavSysStatusSensor3dAccel = 2,
        /// <summary>
        /// 0x04 3D magnetometer
        /// MAV_SYS_STATUS_SENSOR_3D_MAG
        /// </summary>
        MavSysStatusSensor3dMag = 4,
        /// <summary>
        /// 0x08 absolute pressure
        /// MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE
        /// </summary>
        MavSysStatusSensorAbsolutePressure = 8,
        /// <summary>
        /// 0x10 differential pressure
        /// MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE
        /// </summary>
        MavSysStatusSensorDifferentialPressure = 16,
        /// <summary>
        /// 0x20 GPS
        /// MAV_SYS_STATUS_SENSOR_GPS
        /// </summary>
        MavSysStatusSensorGps = 32,
        /// <summary>
        /// 0x40 optical flow
        /// MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW
        /// </summary>
        MavSysStatusSensorOpticalFlow = 64,
        /// <summary>
        /// 0x80 computer vision position
        /// MAV_SYS_STATUS_SENSOR_VISION_POSITION
        /// </summary>
        MavSysStatusSensorVisionPosition = 128,
        /// <summary>
        /// 0x100 laser based position
        /// MAV_SYS_STATUS_SENSOR_LASER_POSITION
        /// </summary>
        MavSysStatusSensorLaserPosition = 256,
        /// <summary>
        /// 0x200 external ground truth (Vicon or Leica)
        /// MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH
        /// </summary>
        MavSysStatusSensorExternalGroundTruth = 512,
        /// <summary>
        /// 0x400 3D angular rate control
        /// MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL
        /// </summary>
        MavSysStatusSensorAngularRateControl = 1024,
        /// <summary>
        /// 0x800 attitude stabilization
        /// MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION
        /// </summary>
        MavSysStatusSensorAttitudeStabilization = 2048,
        /// <summary>
        /// 0x1000 yaw position
        /// MAV_SYS_STATUS_SENSOR_YAW_POSITION
        /// </summary>
        MavSysStatusSensorYawPosition = 4096,
        /// <summary>
        /// 0x2000 z/altitude control
        /// MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL
        /// </summary>
        MavSysStatusSensorZAltitudeControl = 8192,
        /// <summary>
        /// 0x4000 x/y position control
        /// MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL
        /// </summary>
        MavSysStatusSensorXyPositionControl = 16384,
        /// <summary>
        /// 0x8000 motor outputs / control
        /// MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS
        /// </summary>
        MavSysStatusSensorMotorOutputs = 32768,
        /// <summary>
        /// 0x10000 RC receiver
        /// MAV_SYS_STATUS_SENSOR_RC_RECEIVER
        /// </summary>
        MavSysStatusSensorRcReceiver = 65536,
        /// <summary>
        /// 0x20000 2nd 3D gyro
        /// MAV_SYS_STATUS_SENSOR_3D_GYRO2
        /// </summary>
        MavSysStatusSensor3dGyro2 = 131072,
        /// <summary>
        /// 0x40000 2nd 3D accelerometer
        /// MAV_SYS_STATUS_SENSOR_3D_ACCEL2
        /// </summary>
        MavSysStatusSensor3dAccel2 = 262144,
        /// <summary>
        /// 0x80000 2nd 3D magnetometer
        /// MAV_SYS_STATUS_SENSOR_3D_MAG2
        /// </summary>
        MavSysStatusSensor3dMag2 = 524288,
        /// <summary>
        /// 0x100000 geofence
        /// MAV_SYS_STATUS_GEOFENCE
        /// </summary>
        MavSysStatusGeofence = 1048576,
        /// <summary>
        /// 0x200000 AHRS subsystem health
        /// MAV_SYS_STATUS_AHRS
        /// </summary>
        MavSysStatusAhrs = 2097152,
        /// <summary>
        /// 0x400000 Terrain subsystem health
        /// MAV_SYS_STATUS_TERRAIN
        /// </summary>
        MavSysStatusTerrain = 4194304,
        /// <summary>
        /// 0x800000 Motors are reversed
        /// MAV_SYS_STATUS_REVERSE_MOTOR
        /// </summary>
        MavSysStatusReverseMotor = 8388608,
        /// <summary>
        /// 0x1000000 Logging
        /// MAV_SYS_STATUS_LOGGING
        /// </summary>
        MavSysStatusLogging = 16777216,
        /// <summary>
        /// 0x2000000 Battery
        /// MAV_SYS_STATUS_SENSOR_BATTERY
        /// </summary>
        MavSysStatusSensorBattery = 33554432,
        /// <summary>
        /// 0x4000000 Proximity
        /// MAV_SYS_STATUS_SENSOR_PROXIMITY
        /// </summary>
        MavSysStatusSensorProximity = 67108864,
        /// <summary>
        /// 0x8000000 Satellite Communication 
        /// MAV_SYS_STATUS_SENSOR_SATCOM
        /// </summary>
        MavSysStatusSensorSatcom = 134217728,
        /// <summary>
        /// 0x10000000 pre-arm check status. Always healthy when armed
        /// MAV_SYS_STATUS_PREARM_CHECK
        /// </summary>
        MavSysStatusPrearmCheck = 268435456,
        /// <summary>
        /// 0x20000000 Avoidance/collision prevention
        /// MAV_SYS_STATUS_OBSTACLE_AVOIDANCE
        /// </summary>
        MavSysStatusObstacleAvoidance = 536870912,
        /// <summary>
        /// 0x40000000 propulsion (actuator, esc, motor or propellor)
        /// MAV_SYS_STATUS_SENSOR_PROPULSION
        /// </summary>
        MavSysStatusSensorPropulsion = 1073741824,
        /// <summary>
        /// 0x80000000 Extended bit-field are used for further sensor status bits (needs to be set in onboard_control_sensors_present only)
        /// MAV_SYS_STATUS_EXTENSION_USED
        /// </summary>
        MavSysStatusExtensionUsed = 2147483648,
    }
    public static class MavSysStatusSensorHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(8192);
            yield return converter(16384);
            yield return converter(32768);
            yield return converter(65536);
            yield return converter(131072);
            yield return converter(262144);
            yield return converter(524288);
            yield return converter(1048576);
            yield return converter(2097152);
            yield return converter(4194304);
            yield return converter(8388608);
            yield return converter(16777216);
            yield return converter(33554432);
            yield return converter(67108864);
            yield return converter(134217728);
            yield return converter(268435456);
            yield return converter(536870912);
            yield return converter(1073741824);
            yield return converter(2147483648);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_SYS_STATUS_SENSOR_3D_GYRO");
            yield return new EnumValue<T>(converter(2),"MAV_SYS_STATUS_SENSOR_3D_ACCEL");
            yield return new EnumValue<T>(converter(4),"MAV_SYS_STATUS_SENSOR_3D_MAG");
            yield return new EnumValue<T>(converter(8),"MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE");
            yield return new EnumValue<T>(converter(16),"MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE");
            yield return new EnumValue<T>(converter(32),"MAV_SYS_STATUS_SENSOR_GPS");
            yield return new EnumValue<T>(converter(64),"MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW");
            yield return new EnumValue<T>(converter(128),"MAV_SYS_STATUS_SENSOR_VISION_POSITION");
            yield return new EnumValue<T>(converter(256),"MAV_SYS_STATUS_SENSOR_LASER_POSITION");
            yield return new EnumValue<T>(converter(512),"MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH");
            yield return new EnumValue<T>(converter(1024),"MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL");
            yield return new EnumValue<T>(converter(2048),"MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION");
            yield return new EnumValue<T>(converter(4096),"MAV_SYS_STATUS_SENSOR_YAW_POSITION");
            yield return new EnumValue<T>(converter(8192),"MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL");
            yield return new EnumValue<T>(converter(16384),"MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL");
            yield return new EnumValue<T>(converter(32768),"MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS");
            yield return new EnumValue<T>(converter(65536),"MAV_SYS_STATUS_SENSOR_RC_RECEIVER");
            yield return new EnumValue<T>(converter(131072),"MAV_SYS_STATUS_SENSOR_3D_GYRO2");
            yield return new EnumValue<T>(converter(262144),"MAV_SYS_STATUS_SENSOR_3D_ACCEL2");
            yield return new EnumValue<T>(converter(524288),"MAV_SYS_STATUS_SENSOR_3D_MAG2");
            yield return new EnumValue<T>(converter(1048576),"MAV_SYS_STATUS_GEOFENCE");
            yield return new EnumValue<T>(converter(2097152),"MAV_SYS_STATUS_AHRS");
            yield return new EnumValue<T>(converter(4194304),"MAV_SYS_STATUS_TERRAIN");
            yield return new EnumValue<T>(converter(8388608),"MAV_SYS_STATUS_REVERSE_MOTOR");
            yield return new EnumValue<T>(converter(16777216),"MAV_SYS_STATUS_LOGGING");
            yield return new EnumValue<T>(converter(33554432),"MAV_SYS_STATUS_SENSOR_BATTERY");
            yield return new EnumValue<T>(converter(67108864),"MAV_SYS_STATUS_SENSOR_PROXIMITY");
            yield return new EnumValue<T>(converter(134217728),"MAV_SYS_STATUS_SENSOR_SATCOM");
            yield return new EnumValue<T>(converter(268435456),"MAV_SYS_STATUS_PREARM_CHECK");
            yield return new EnumValue<T>(converter(536870912),"MAV_SYS_STATUS_OBSTACLE_AVOIDANCE");
            yield return new EnumValue<T>(converter(1073741824),"MAV_SYS_STATUS_SENSOR_PROPULSION");
            yield return new EnumValue<T>(converter(2147483648),"MAV_SYS_STATUS_EXTENSION_USED");
        }
    }
    /// <summary>
    /// These encode the sensors whose status is sent as part of the SYS_STATUS message in the extended fields.
    ///  MAV_SYS_STATUS_SENSOR_EXTENDED
    /// </summary>
    public enum MavSysStatusSensorExtended : ulong
    {
        /// <summary>
        /// 0x01 Recovery system (parachute, balloon, retracts etc)
        /// MAV_SYS_STATUS_RECOVERY_SYSTEM
        /// </summary>
        MavSysStatusRecoverySystem = 1,
    }
    public static class MavSysStatusSensorExtendedHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_SYS_STATUS_RECOVERY_SYSTEM");
        }
    }
    /// <summary>
    /// Coordinate frames used by MAVLink. Not all frames are supported by all commands, messages, or vehicles.
    /// 
    ///       Global frames use the following naming conventions:
    ///       - "GLOBAL": Global coordinate frame with WGS84 latitude/longitude and altitude positive over mean sea level (MSL) by default.
    ///         The following modifiers may be used with "GLOBAL":
    ///         - "RELATIVE_ALT": Altitude is relative to the vehicle home position rather than MSL.
    ///         - "TERRAIN_ALT": Altitude is relative to ground level rather than MSL.
    ///         - "INT": Latitude/longitude (in degrees) are scaled by multiplying by 1E7.
    /// 
    ///       Local frames use the following naming conventions:
    ///       - "LOCAL": Origin of local frame is fixed relative to earth. Unless otherwise specified this origin is the origin of the vehicle position-estimator ("EKF").
    ///       - "BODY": Origin of local frame travels with the vehicle. NOTE, "BODY" does NOT indicate alignment of frame axis with vehicle attitude.
    ///       - "OFFSET": Deprecated synonym for "BODY" (origin travels with the vehicle). Not to be used for new frames.
    /// 
    ///       Some deprecated frames do not follow these conventions (e.g. MAV_FRAME_BODY_NED and MAV_FRAME_BODY_OFFSET_NED).
    ///  
    ///  MAV_FRAME
    /// </summary>
    public enum MavFrame : ulong
    {
        /// <summary>
        /// Global (WGS84) coordinate frame + MSL altitude. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL).
        /// MAV_FRAME_GLOBAL
        /// </summary>
        MavFrameGlobal = 0,
        /// <summary>
        /// NED local tangent frame (x: North, y: East, z: Down) with origin fixed relative to earth.
        /// MAV_FRAME_LOCAL_NED
        /// </summary>
        MavFrameLocalNed = 1,
        /// <summary>
        /// NOT a coordinate frame, indicates a mission command.
        /// MAV_FRAME_MISSION
        /// </summary>
        MavFrameMission = 2,
        /// <summary>
        /// 
        ///           Global (WGS84) coordinate frame + altitude relative to the home position.
        ///           First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home position.
        ///         
        /// MAV_FRAME_GLOBAL_RELATIVE_ALT
        /// </summary>
        MavFrameGlobalRelativeAlt = 3,
        /// <summary>
        /// ENU local tangent frame (x: East, y: North, z: Up) with origin fixed relative to earth.
        /// MAV_FRAME_LOCAL_ENU
        /// </summary>
        MavFrameLocalEnu = 4,
        /// <summary>
        /// Global (WGS84) coordinate frame (scaled) + MSL altitude. First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude over mean sea level (MSL).
        /// MAV_FRAME_GLOBAL_INT
        /// </summary>
        MavFrameGlobalInt = 5,
        /// <summary>
        /// 
        ///           Global (WGS84) coordinate frame (scaled) + altitude relative to the home position.
        ///           First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude with 0 being at the altitude of the home position.
        ///         
        /// MAV_FRAME_GLOBAL_RELATIVE_ALT_INT
        /// </summary>
        MavFrameGlobalRelativeAltInt = 6,
        /// <summary>
        /// NED local tangent frame (x: North, y: East, z: Down) with origin that travels with the vehicle.
        /// MAV_FRAME_LOCAL_OFFSET_NED
        /// </summary>
        MavFrameLocalOffsetNed = 7,
        /// <summary>
        /// Same as MAV_FRAME_LOCAL_NED when used to represent position values. Same as MAV_FRAME_BODY_FRD when used with velocity/acceleration values.
        /// MAV_FRAME_BODY_NED
        /// </summary>
        MavFrameBodyNed = 8,
        /// <summary>
        /// This is the same as MAV_FRAME_BODY_FRD.
        /// MAV_FRAME_BODY_OFFSET_NED
        /// </summary>
        MavFrameBodyOffsetNed = 9,
        /// <summary>
        /// Global (WGS84) coordinate frame with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        /// MAV_FRAME_GLOBAL_TERRAIN_ALT
        /// </summary>
        MavFrameGlobalTerrainAlt = 10,
        /// <summary>
        /// Global (WGS84) coordinate frame (scaled) with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        /// MAV_FRAME_GLOBAL_TERRAIN_ALT_INT
        /// </summary>
        MavFrameGlobalTerrainAltInt = 11,
        /// <summary>
        /// FRD local frame aligned to the vehicle's attitude (x: Forward, y: Right, z: Down) with an origin that travels with vehicle.
        /// MAV_FRAME_BODY_FRD
        /// </summary>
        MavFrameBodyFrd = 12,
        /// <summary>
        /// MAV_FRAME_BODY_FLU - Body fixed frame of reference, Z-up (x: Forward, y: Left, z: Up).
        /// MAV_FRAME_RESERVED_13
        /// </summary>
        MavFrameReserved13 = 13,
        /// <summary>
        /// MAV_FRAME_MOCAP_NED - Odometry local coordinate frame of data given by a motion capture system, Z-down (x: North, y: East, z: Down).
        /// MAV_FRAME_RESERVED_14
        /// </summary>
        MavFrameReserved14 = 14,
        /// <summary>
        /// MAV_FRAME_MOCAP_ENU - Odometry local coordinate frame of data given by a motion capture system, Z-up (x: East, y: North, z: Up).
        /// MAV_FRAME_RESERVED_15
        /// </summary>
        MavFrameReserved15 = 15,
        /// <summary>
        /// MAV_FRAME_VISION_NED - Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: North, y: East, z: Down).
        /// MAV_FRAME_RESERVED_16
        /// </summary>
        MavFrameReserved16 = 16,
        /// <summary>
        /// MAV_FRAME_VISION_ENU - Odometry local coordinate frame of data given by a vision estimation system, Z-up (x: East, y: North, z: Up).
        /// MAV_FRAME_RESERVED_17
        /// </summary>
        MavFrameReserved17 = 17,
        /// <summary>
        /// MAV_FRAME_ESTIM_NED - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: North, y: East, z: Down).
        /// MAV_FRAME_RESERVED_18
        /// </summary>
        MavFrameReserved18 = 18,
        /// <summary>
        /// MAV_FRAME_ESTIM_ENU - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-up (x: East, y: North, z: Up).
        /// MAV_FRAME_RESERVED_19
        /// </summary>
        MavFrameReserved19 = 19,
        /// <summary>
        /// FRD local tangent frame (x: Forward, y: Right, z: Down) with origin fixed relative to earth. The forward axis is aligned to the front of the vehicle in the horizontal plane.
        /// MAV_FRAME_LOCAL_FRD
        /// </summary>
        MavFrameLocalFrd = 20,
        /// <summary>
        /// FLU local tangent frame (x: Forward, y: Left, z: Up) with origin fixed relative to earth. The forward axis is aligned to the front of the vehicle in the horizontal plane.
        /// MAV_FRAME_LOCAL_FLU
        /// </summary>
        MavFrameLocalFlu = 21,
    }
    public static class MavFrameHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
            yield return converter(16);
            yield return converter(17);
            yield return converter(18);
            yield return converter(19);
            yield return converter(20);
            yield return converter(21);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_FRAME_GLOBAL");
            yield return new EnumValue<T>(converter(1),"MAV_FRAME_LOCAL_NED");
            yield return new EnumValue<T>(converter(2),"MAV_FRAME_MISSION");
            yield return new EnumValue<T>(converter(3),"MAV_FRAME_GLOBAL_RELATIVE_ALT");
            yield return new EnumValue<T>(converter(4),"MAV_FRAME_LOCAL_ENU");
            yield return new EnumValue<T>(converter(5),"MAV_FRAME_GLOBAL_INT");
            yield return new EnumValue<T>(converter(6),"MAV_FRAME_GLOBAL_RELATIVE_ALT_INT");
            yield return new EnumValue<T>(converter(7),"MAV_FRAME_LOCAL_OFFSET_NED");
            yield return new EnumValue<T>(converter(8),"MAV_FRAME_BODY_NED");
            yield return new EnumValue<T>(converter(9),"MAV_FRAME_BODY_OFFSET_NED");
            yield return new EnumValue<T>(converter(10),"MAV_FRAME_GLOBAL_TERRAIN_ALT");
            yield return new EnumValue<T>(converter(11),"MAV_FRAME_GLOBAL_TERRAIN_ALT_INT");
            yield return new EnumValue<T>(converter(12),"MAV_FRAME_BODY_FRD");
            yield return new EnumValue<T>(converter(13),"MAV_FRAME_RESERVED_13");
            yield return new EnumValue<T>(converter(14),"MAV_FRAME_RESERVED_14");
            yield return new EnumValue<T>(converter(15),"MAV_FRAME_RESERVED_15");
            yield return new EnumValue<T>(converter(16),"MAV_FRAME_RESERVED_16");
            yield return new EnumValue<T>(converter(17),"MAV_FRAME_RESERVED_17");
            yield return new EnumValue<T>(converter(18),"MAV_FRAME_RESERVED_18");
            yield return new EnumValue<T>(converter(19),"MAV_FRAME_RESERVED_19");
            yield return new EnumValue<T>(converter(20),"MAV_FRAME_LOCAL_FRD");
            yield return new EnumValue<T>(converter(21),"MAV_FRAME_LOCAL_FLU");
        }
    }
    /// <summary>
    ///  MAVLINK_DATA_STREAM_TYPE
    /// </summary>
    public enum MavlinkDataStreamType : ulong
    {
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_JPEG
        /// </summary>
        MavlinkDataStreamImgJpeg = 0,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_BMP
        /// </summary>
        MavlinkDataStreamImgBmp = 1,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_RAW8U
        /// </summary>
        MavlinkDataStreamImgRaw8u = 2,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_RAW32U
        /// </summary>
        MavlinkDataStreamImgRaw32u = 3,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_PGM
        /// </summary>
        MavlinkDataStreamImgPgm = 4,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_PNG
        /// </summary>
        MavlinkDataStreamImgPng = 5,
    }
    public static class MavlinkDataStreamTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAVLINK_DATA_STREAM_IMG_JPEG");
            yield return new EnumValue<T>(converter(1),"MAVLINK_DATA_STREAM_IMG_BMP");
            yield return new EnumValue<T>(converter(2),"MAVLINK_DATA_STREAM_IMG_RAW8U");
            yield return new EnumValue<T>(converter(3),"MAVLINK_DATA_STREAM_IMG_RAW32U");
            yield return new EnumValue<T>(converter(4),"MAVLINK_DATA_STREAM_IMG_PGM");
            yield return new EnumValue<T>(converter(5),"MAVLINK_DATA_STREAM_IMG_PNG");
        }
    }
    /// <summary>
    /// Actions following geofence breach.
    ///  FENCE_ACTION
    /// </summary>
    public enum FenceAction : ulong
    {
        /// <summary>
        /// Disable fenced mode. If used in a plan this would mean the next fence is disabled.
        /// FENCE_ACTION_NONE
        /// </summary>
        FenceActionNone = 0,
        /// <summary>
        /// Fly to geofence MAV_CMD_NAV_FENCE_RETURN_POINT in GUIDED mode. Note: This action is only supported by ArduPlane, and may not be supported in all versions.
        /// FENCE_ACTION_GUIDED
        /// </summary>
        FenceActionGuided = 1,
        /// <summary>
        /// Report fence breach, but don't take action
        /// FENCE_ACTION_REPORT
        /// </summary>
        FenceActionReport = 2,
        /// <summary>
        /// Fly to geofence MAV_CMD_NAV_FENCE_RETURN_POINT with manual throttle control in GUIDED mode. Note: This action is only supported by ArduPlane, and may not be supported in all versions.
        /// FENCE_ACTION_GUIDED_THR_PASS
        /// </summary>
        FenceActionGuidedThrPass = 3,
        /// <summary>
        /// Return/RTL mode.
        /// FENCE_ACTION_RTL
        /// </summary>
        FenceActionRtl = 4,
        /// <summary>
        /// Hold at current location.
        /// FENCE_ACTION_HOLD
        /// </summary>
        FenceActionHold = 5,
        /// <summary>
        /// Termination failsafe. Motors are shut down (some flight stacks may trigger other failsafe actions).
        /// FENCE_ACTION_TERMINATE
        /// </summary>
        FenceActionTerminate = 6,
        /// <summary>
        /// Land at current location.
        /// FENCE_ACTION_LAND
        /// </summary>
        FenceActionLand = 7,
    }
    public static class FenceActionHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"FENCE_ACTION_NONE");
            yield return new EnumValue<T>(converter(1),"FENCE_ACTION_GUIDED");
            yield return new EnumValue<T>(converter(2),"FENCE_ACTION_REPORT");
            yield return new EnumValue<T>(converter(3),"FENCE_ACTION_GUIDED_THR_PASS");
            yield return new EnumValue<T>(converter(4),"FENCE_ACTION_RTL");
            yield return new EnumValue<T>(converter(5),"FENCE_ACTION_HOLD");
            yield return new EnumValue<T>(converter(6),"FENCE_ACTION_TERMINATE");
            yield return new EnumValue<T>(converter(7),"FENCE_ACTION_LAND");
        }
    }
    /// <summary>
    ///  FENCE_BREACH
    /// </summary>
    public enum FenceBreach : ulong
    {
        /// <summary>
        /// No last fence breach
        /// FENCE_BREACH_NONE
        /// </summary>
        FenceBreachNone = 0,
        /// <summary>
        /// Breached minimum altitude
        /// FENCE_BREACH_MINALT
        /// </summary>
        FenceBreachMinalt = 1,
        /// <summary>
        /// Breached maximum altitude
        /// FENCE_BREACH_MAXALT
        /// </summary>
        FenceBreachMaxalt = 2,
        /// <summary>
        /// Breached fence boundary
        /// FENCE_BREACH_BOUNDARY
        /// </summary>
        FenceBreachBoundary = 3,
    }
    public static class FenceBreachHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"FENCE_BREACH_NONE");
            yield return new EnumValue<T>(converter(1),"FENCE_BREACH_MINALT");
            yield return new EnumValue<T>(converter(2),"FENCE_BREACH_MAXALT");
            yield return new EnumValue<T>(converter(3),"FENCE_BREACH_BOUNDARY");
        }
    }
    /// <summary>
    /// Actions being taken to mitigate/prevent fence breach
    ///  FENCE_MITIGATE
    /// </summary>
    public enum FenceMitigate : ulong
    {
        /// <summary>
        /// Unknown
        /// FENCE_MITIGATE_UNKNOWN
        /// </summary>
        FenceMitigateUnknown = 0,
        /// <summary>
        /// No actions being taken
        /// FENCE_MITIGATE_NONE
        /// </summary>
        FenceMitigateNone = 1,
        /// <summary>
        /// Velocity limiting active to prevent breach
        /// FENCE_MITIGATE_VEL_LIMIT
        /// </summary>
        FenceMitigateVelLimit = 2,
    }
    public static class FenceMitigateHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"FENCE_MITIGATE_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"FENCE_MITIGATE_NONE");
            yield return new EnumValue<T>(converter(2),"FENCE_MITIGATE_VEL_LIMIT");
        }
    }
    /// <summary>
    /// Enumeration of possible mount operation modes. This message is used by obsolete/deprecated gimbal messages.
    ///  MAV_MOUNT_MODE
    /// </summary>
    public enum MavMountMode : ulong
    {
        /// <summary>
        /// Load and keep safe position (Roll,Pitch,Yaw) from permanent memory and stop stabilization
        /// MAV_MOUNT_MODE_RETRACT
        /// </summary>
        MavMountModeRetract = 0,
        /// <summary>
        /// Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory.
        /// MAV_MOUNT_MODE_NEUTRAL
        /// </summary>
        MavMountModeNeutral = 1,
        /// <summary>
        /// Load neutral position and start MAVLink Roll,Pitch,Yaw control with stabilization
        /// MAV_MOUNT_MODE_MAVLINK_TARGETING
        /// </summary>
        MavMountModeMavlinkTargeting = 2,
        /// <summary>
        /// Load neutral position and start RC Roll,Pitch,Yaw control with stabilization
        /// MAV_MOUNT_MODE_RC_TARGETING
        /// </summary>
        MavMountModeRcTargeting = 3,
        /// <summary>
        /// Load neutral position and start to point to Lat,Lon,Alt
        /// MAV_MOUNT_MODE_GPS_POINT
        /// </summary>
        MavMountModeGpsPoint = 4,
        /// <summary>
        /// Gimbal tracks system with specified system ID
        /// MAV_MOUNT_MODE_SYSID_TARGET
        /// </summary>
        MavMountModeSysidTarget = 5,
        /// <summary>
        /// Gimbal tracks home position
        /// MAV_MOUNT_MODE_HOME_LOCATION
        /// </summary>
        MavMountModeHomeLocation = 6,
    }
    public static class MavMountModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_MOUNT_MODE_RETRACT");
            yield return new EnumValue<T>(converter(1),"MAV_MOUNT_MODE_NEUTRAL");
            yield return new EnumValue<T>(converter(2),"MAV_MOUNT_MODE_MAVLINK_TARGETING");
            yield return new EnumValue<T>(converter(3),"MAV_MOUNT_MODE_RC_TARGETING");
            yield return new EnumValue<T>(converter(4),"MAV_MOUNT_MODE_GPS_POINT");
            yield return new EnumValue<T>(converter(5),"MAV_MOUNT_MODE_SYSID_TARGET");
            yield return new EnumValue<T>(converter(6),"MAV_MOUNT_MODE_HOME_LOCATION");
        }
    }
    /// <summary>
    /// Gimbal device (low level) capability flags (bitmap).
    ///  GIMBAL_DEVICE_CAP_FLAGS
    /// </summary>
    public enum GimbalDeviceCapFlags : ulong
    {
        /// <summary>
        /// Gimbal device supports a retracted position.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT
        /// </summary>
        GimbalDeviceCapFlagsHasRetract = 1,
        /// <summary>
        /// Gimbal device supports a horizontal, forward looking position, stabilized.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL
        /// </summary>
        GimbalDeviceCapFlagsHasNeutral = 2,
        /// <summary>
        /// Gimbal device supports rotating around roll axis.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS
        /// </summary>
        GimbalDeviceCapFlagsHasRollAxis = 4,
        /// <summary>
        /// Gimbal device supports to follow a roll angle relative to the vehicle.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW
        /// </summary>
        GimbalDeviceCapFlagsHasRollFollow = 8,
        /// <summary>
        /// Gimbal device supports locking to a roll angle (generally that's the default with roll stabilized).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK
        /// </summary>
        GimbalDeviceCapFlagsHasRollLock = 16,
        /// <summary>
        /// Gimbal device supports rotating around pitch axis.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS
        /// </summary>
        GimbalDeviceCapFlagsHasPitchAxis = 32,
        /// <summary>
        /// Gimbal device supports to follow a pitch angle relative to the vehicle.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW
        /// </summary>
        GimbalDeviceCapFlagsHasPitchFollow = 64,
        /// <summary>
        /// Gimbal device supports locking to a pitch angle (generally that's the default with pitch stabilized).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK
        /// </summary>
        GimbalDeviceCapFlagsHasPitchLock = 128,
        /// <summary>
        /// Gimbal device supports rotating around yaw axis.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS
        /// </summary>
        GimbalDeviceCapFlagsHasYawAxis = 256,
        /// <summary>
        /// Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW
        /// </summary>
        GimbalDeviceCapFlagsHasYawFollow = 512,
        /// <summary>
        /// Gimbal device supports locking to an absolute heading, i.e., yaw angle relative to North (earth frame, often this is an option available).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK
        /// </summary>
        GimbalDeviceCapFlagsHasYawLock = 1024,
        /// <summary>
        /// Gimbal device supports yawing/panning infinitely (e.g. using slip disk).
        /// GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW
        /// </summary>
        GimbalDeviceCapFlagsSupportsInfiniteYaw = 2048,
        /// <summary>
        /// Gimbal device supports yaw angles and angular velocities relative to North (earth frame). This usually requires support by an autopilot via AUTOPILOT_STATE_FOR_GIMBAL_DEVICE. Support can go on and off during runtime, which is reported by the flag GIMBAL_DEVICE_FLAGS_CAN_ACCEPT_YAW_IN_EARTH_FRAME.
        /// GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalDeviceCapFlagsSupportsYawInEarthFrame = 4096,
        /// <summary>
        /// Gimbal device supports radio control inputs as an alternative input for controlling the gimbal orientation.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS
        /// </summary>
        GimbalDeviceCapFlagsHasRcInputs = 8192,
    }
    public static class GimbalDeviceCapFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(8192);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT");
            yield return new EnumValue<T>(converter(2),"GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL");
            yield return new EnumValue<T>(converter(4),"GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS");
            yield return new EnumValue<T>(converter(8),"GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW");
            yield return new EnumValue<T>(converter(16),"GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK");
            yield return new EnumValue<T>(converter(32),"GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS");
            yield return new EnumValue<T>(converter(64),"GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW");
            yield return new EnumValue<T>(converter(128),"GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK");
            yield return new EnumValue<T>(converter(256),"GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS");
            yield return new EnumValue<T>(converter(512),"GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW");
            yield return new EnumValue<T>(converter(1024),"GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK");
            yield return new EnumValue<T>(converter(2048),"GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW");
            yield return new EnumValue<T>(converter(4096),"GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME");
            yield return new EnumValue<T>(converter(8192),"GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS");
        }
    }
    /// <summary>
    /// Gimbal manager high level capability flags (bitmap). The first 16 bits are identical to the GIMBAL_DEVICE_CAP_FLAGS. However, the gimbal manager does not need to copy the flags from the gimbal but can also enhance the capabilities and thus add flags.
    ///  GIMBAL_MANAGER_CAP_FLAGS
    /// </summary>
    public enum GimbalManagerCapFlags : ulong
    {
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT
        /// </summary>
        GimbalManagerCapFlagsHasRetract = 1,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL
        /// </summary>
        GimbalManagerCapFlagsHasNeutral = 2,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS
        /// </summary>
        GimbalManagerCapFlagsHasRollAxis = 4,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW
        /// </summary>
        GimbalManagerCapFlagsHasRollFollow = 8,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK
        /// </summary>
        GimbalManagerCapFlagsHasRollLock = 16,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS
        /// </summary>
        GimbalManagerCapFlagsHasPitchAxis = 32,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW
        /// </summary>
        GimbalManagerCapFlagsHasPitchFollow = 64,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK
        /// </summary>
        GimbalManagerCapFlagsHasPitchLock = 128,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS
        /// </summary>
        GimbalManagerCapFlagsHasYawAxis = 256,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW
        /// </summary>
        GimbalManagerCapFlagsHasYawFollow = 512,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK
        /// </summary>
        GimbalManagerCapFlagsHasYawLock = 1024,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.
        /// GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW
        /// </summary>
        GimbalManagerCapFlagsSupportsInfiniteYaw = 2048,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME.
        /// GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalManagerCapFlagsSupportsYawInEarthFrame = 4096,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS
        /// </summary>
        GimbalManagerCapFlagsHasRcInputs = 8192,
        /// <summary>
        /// Gimbal manager supports to point to a local position.
        /// GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL
        /// </summary>
        GimbalManagerCapFlagsCanPointLocationLocal = 65536,
        /// <summary>
        /// Gimbal manager supports to point to a global latitude, longitude, altitude position.
        /// GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL
        /// </summary>
        GimbalManagerCapFlagsCanPointLocationGlobal = 131072,
    }
    public static class GimbalManagerCapFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(8192);
            yield return converter(65536);
            yield return converter(131072);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT");
            yield return new EnumValue<T>(converter(2),"GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL");
            yield return new EnumValue<T>(converter(4),"GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS");
            yield return new EnumValue<T>(converter(8),"GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW");
            yield return new EnumValue<T>(converter(16),"GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK");
            yield return new EnumValue<T>(converter(32),"GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS");
            yield return new EnumValue<T>(converter(64),"GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW");
            yield return new EnumValue<T>(converter(128),"GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK");
            yield return new EnumValue<T>(converter(256),"GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS");
            yield return new EnumValue<T>(converter(512),"GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW");
            yield return new EnumValue<T>(converter(1024),"GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK");
            yield return new EnumValue<T>(converter(2048),"GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW");
            yield return new EnumValue<T>(converter(4096),"GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME");
            yield return new EnumValue<T>(converter(8192),"GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS");
            yield return new EnumValue<T>(converter(65536),"GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL");
            yield return new EnumValue<T>(converter(131072),"GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL");
        }
    }
    /// <summary>
    /// Flags for gimbal device (lower level) operation.
    ///  GIMBAL_DEVICE_FLAGS
    /// </summary>
    public enum GimbalDeviceFlags : ulong
    {
        /// <summary>
        /// Set to retracted safe position (no stabilization), takes precedence over all other flags.
        /// GIMBAL_DEVICE_FLAGS_RETRACT
        /// </summary>
        GimbalDeviceFlagsRetract = 1,
        /// <summary>
        /// Set to neutral/default position, taking precedence over all other flags except RETRACT. Neutral is commonly forward-facing and horizontal (roll=pitch=yaw=0) but may be any orientation.
        /// GIMBAL_DEVICE_FLAGS_NEUTRAL
        /// </summary>
        GimbalDeviceFlagsNeutral = 2,
        /// <summary>
        /// Lock roll angle to absolute angle relative to horizon (not relative to vehicle). This is generally the default with a stabilizing gimbal.
        /// GIMBAL_DEVICE_FLAGS_ROLL_LOCK
        /// </summary>
        GimbalDeviceFlagsRollLock = 4,
        /// <summary>
        /// Lock pitch angle to absolute angle relative to horizon (not relative to vehicle). This is generally the default with a stabilizing gimbal.
        /// GIMBAL_DEVICE_FLAGS_PITCH_LOCK
        /// </summary>
        GimbalDeviceFlagsPitchLock = 8,
        /// <summary>
        /// Lock yaw angle to absolute angle relative to North (not relative to vehicle). If this flag is set, the yaw angle and z component of angular velocity are relative to North (earth frame, x-axis pointing North), else they are relative to the vehicle heading (vehicle frame, earth frame rotated so that the x-axis is pointing forward).
        /// GIMBAL_DEVICE_FLAGS_YAW_LOCK
        /// </summary>
        GimbalDeviceFlagsYawLock = 16,
        /// <summary>
        /// Yaw angle and z component of angular velocity are relative to the vehicle heading (vehicle frame, earth frame rotated such that the x-axis is pointing forward).
        /// GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME
        /// </summary>
        GimbalDeviceFlagsYawInVehicleFrame = 32,
        /// <summary>
        /// Yaw angle and z component of angular velocity are relative to North (earth frame, x-axis is pointing North).
        /// GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalDeviceFlagsYawInEarthFrame = 64,
        /// <summary>
        /// Gimbal device can accept yaw angle inputs relative to North (earth frame). This flag is only for reporting (attempts to set this flag are ignored).
        /// GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalDeviceFlagsAcceptsYawInEarthFrame = 128,
        /// <summary>
        /// The gimbal orientation is set exclusively by the RC signals feed to the gimbal's radio control inputs. MAVLink messages for setting the gimbal orientation (GIMBAL_DEVICE_SET_ATTITUDE) are ignored.
        /// GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE
        /// </summary>
        GimbalDeviceFlagsRcExclusive = 256,
        /// <summary>
        /// The gimbal orientation is determined by combining/mixing the RC signals feed to the gimbal's radio control inputs and the MAVLink messages for setting the gimbal orientation (GIMBAL_DEVICE_SET_ATTITUDE). How these two controls are combined or mixed is not defined by the protocol but is up to the implementation.
        /// GIMBAL_DEVICE_FLAGS_RC_MIXED
        /// </summary>
        GimbalDeviceFlagsRcMixed = 512,
    }
    public static class GimbalDeviceFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"GIMBAL_DEVICE_FLAGS_RETRACT");
            yield return new EnumValue<T>(converter(2),"GIMBAL_DEVICE_FLAGS_NEUTRAL");
            yield return new EnumValue<T>(converter(4),"GIMBAL_DEVICE_FLAGS_ROLL_LOCK");
            yield return new EnumValue<T>(converter(8),"GIMBAL_DEVICE_FLAGS_PITCH_LOCK");
            yield return new EnumValue<T>(converter(16),"GIMBAL_DEVICE_FLAGS_YAW_LOCK");
            yield return new EnumValue<T>(converter(32),"GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME");
            yield return new EnumValue<T>(converter(64),"GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME");
            yield return new EnumValue<T>(converter(128),"GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME");
            yield return new EnumValue<T>(converter(256),"GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE");
            yield return new EnumValue<T>(converter(512),"GIMBAL_DEVICE_FLAGS_RC_MIXED");
        }
    }
    /// <summary>
    /// Flags for high level gimbal manager operation The first 16 bits are identical to the GIMBAL_DEVICE_FLAGS.
    ///  GIMBAL_MANAGER_FLAGS
    /// </summary>
    public enum GimbalManagerFlags : ulong
    {
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_RETRACT.
        /// GIMBAL_MANAGER_FLAGS_RETRACT
        /// </summary>
        GimbalManagerFlagsRetract = 1,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_NEUTRAL.
        /// GIMBAL_MANAGER_FLAGS_NEUTRAL
        /// </summary>
        GimbalManagerFlagsNeutral = 2,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK.
        /// GIMBAL_MANAGER_FLAGS_ROLL_LOCK
        /// </summary>
        GimbalManagerFlagsRollLock = 4,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK.
        /// GIMBAL_MANAGER_FLAGS_PITCH_LOCK
        /// </summary>
        GimbalManagerFlagsPitchLock = 8,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK.
        /// GIMBAL_MANAGER_FLAGS_YAW_LOCK
        /// </summary>
        GimbalManagerFlagsYawLock = 16,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME.
        /// GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME
        /// </summary>
        GimbalManagerFlagsYawInVehicleFrame = 32,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME.
        /// GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalManagerFlagsYawInEarthFrame = 64,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME.
        /// GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalManagerFlagsAcceptsYawInEarthFrame = 128,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE.
        /// GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE
        /// </summary>
        GimbalManagerFlagsRcExclusive = 256,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_RC_MIXED.
        /// GIMBAL_MANAGER_FLAGS_RC_MIXED
        /// </summary>
        GimbalManagerFlagsRcMixed = 512,
    }
    public static class GimbalManagerFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"GIMBAL_MANAGER_FLAGS_RETRACT");
            yield return new EnumValue<T>(converter(2),"GIMBAL_MANAGER_FLAGS_NEUTRAL");
            yield return new EnumValue<T>(converter(4),"GIMBAL_MANAGER_FLAGS_ROLL_LOCK");
            yield return new EnumValue<T>(converter(8),"GIMBAL_MANAGER_FLAGS_PITCH_LOCK");
            yield return new EnumValue<T>(converter(16),"GIMBAL_MANAGER_FLAGS_YAW_LOCK");
            yield return new EnumValue<T>(converter(32),"GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME");
            yield return new EnumValue<T>(converter(64),"GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME");
            yield return new EnumValue<T>(converter(128),"GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME");
            yield return new EnumValue<T>(converter(256),"GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE");
            yield return new EnumValue<T>(converter(512),"GIMBAL_MANAGER_FLAGS_RC_MIXED");
        }
    }
    /// <summary>
    /// Gimbal device (low level) error flags (bitmap, 0 means no error)
    ///  GIMBAL_DEVICE_ERROR_FLAGS
    /// </summary>
    public enum GimbalDeviceErrorFlags : ulong
    {
        /// <summary>
        /// Gimbal device is limited by hardware roll limit.
        /// GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT
        /// </summary>
        GimbalDeviceErrorFlagsAtRollLimit = 1,
        /// <summary>
        /// Gimbal device is limited by hardware pitch limit.
        /// GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT
        /// </summary>
        GimbalDeviceErrorFlagsAtPitchLimit = 2,
        /// <summary>
        /// Gimbal device is limited by hardware yaw limit.
        /// GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT
        /// </summary>
        GimbalDeviceErrorFlagsAtYawLimit = 4,
        /// <summary>
        /// There is an error with the gimbal encoders.
        /// GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsEncoderError = 8,
        /// <summary>
        /// There is an error with the gimbal power source.
        /// GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsPowerError = 16,
        /// <summary>
        /// There is an error with the gimbal motors.
        /// GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsMotorError = 32,
        /// <summary>
        /// There is an error with the gimbal's software.
        /// GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsSoftwareError = 64,
        /// <summary>
        /// There is an error with the gimbal's communication.
        /// GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsCommsError = 128,
        /// <summary>
        /// Gimbal device is currently calibrating.
        /// GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING
        /// </summary>
        GimbalDeviceErrorFlagsCalibrationRunning = 256,
        /// <summary>
        /// Gimbal device is not assigned to a gimbal manager.
        /// GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER
        /// </summary>
        GimbalDeviceErrorFlagsNoManager = 512,
    }
    public static class GimbalDeviceErrorFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT");
            yield return new EnumValue<T>(converter(2),"GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT");
            yield return new EnumValue<T>(converter(4),"GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT");
            yield return new EnumValue<T>(converter(8),"GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR");
            yield return new EnumValue<T>(converter(16),"GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR");
            yield return new EnumValue<T>(converter(32),"GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR");
            yield return new EnumValue<T>(converter(64),"GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR");
            yield return new EnumValue<T>(converter(128),"GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR");
            yield return new EnumValue<T>(converter(256),"GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING");
            yield return new EnumValue<T>(converter(512),"GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER");
        }
    }
    /// <summary>
    /// Gripper actions.
    ///  GRIPPER_ACTIONS
    /// </summary>
    public enum GripperActions : ulong
    {
        /// <summary>
        /// Gripper release cargo.
        /// GRIPPER_ACTION_RELEASE
        /// </summary>
        GripperActionRelease = 0,
        /// <summary>
        /// Gripper grab onto cargo.
        /// GRIPPER_ACTION_GRAB
        /// </summary>
        GripperActionGrab = 1,
    }
    public static class GripperActionsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"GRIPPER_ACTION_RELEASE");
            yield return new EnumValue<T>(converter(1),"GRIPPER_ACTION_GRAB");
        }
    }
    /// <summary>
    /// Winch actions.
    ///  WINCH_ACTIONS
    /// </summary>
    public enum WinchActions : ulong
    {
        /// <summary>
        /// Allow motor to freewheel.
        /// WINCH_RELAXED
        /// </summary>
        WinchRelaxed = 0,
        /// <summary>
        /// Wind or unwind specified length of line, optionally using specified rate.
        /// WINCH_RELATIVE_LENGTH_CONTROL
        /// </summary>
        WinchRelativeLengthControl = 1,
        /// <summary>
        /// Wind or unwind line at specified rate.
        /// WINCH_RATE_CONTROL
        /// </summary>
        WinchRateControl = 2,
        /// <summary>
        /// Perform the locking sequence to relieve motor while in the fully retracted position. Only action and instance command parameters are used, others are ignored.
        /// WINCH_LOCK
        /// </summary>
        WinchLock = 3,
        /// <summary>
        /// Sequence of drop, slow down, touch down, reel up, lock. Only action and instance command parameters are used, others are ignored.
        /// WINCH_DELIVER
        /// </summary>
        WinchDeliver = 4,
        /// <summary>
        /// Engage motor and hold current position. Only action and instance command parameters are used, others are ignored.
        /// WINCH_HOLD
        /// </summary>
        WinchHold = 5,
        /// <summary>
        /// Return the reel to the fully retracted position. Only action and instance command parameters are used, others are ignored.
        /// WINCH_RETRACT
        /// </summary>
        WinchRetract = 6,
        /// <summary>
        /// Load the reel with line. The winch will calculate the total loaded length and stop when the tension exceeds a threshold. Only action and instance command parameters are used, others are ignored.
        /// WINCH_LOAD_LINE
        /// </summary>
        WinchLoadLine = 7,
        /// <summary>
        /// Spool out the entire length of the line. Only action and instance command parameters are used, others are ignored.
        /// WINCH_ABANDON_LINE
        /// </summary>
        WinchAbandonLine = 8,
        /// <summary>
        /// Spools out just enough to present the hook to the user to load the payload. Only action and instance command parameters are used, others are ignored
        /// WINCH_LOAD_PAYLOAD
        /// </summary>
        WinchLoadPayload = 9,
    }
    public static class WinchActionsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"WINCH_RELAXED");
            yield return new EnumValue<T>(converter(1),"WINCH_RELATIVE_LENGTH_CONTROL");
            yield return new EnumValue<T>(converter(2),"WINCH_RATE_CONTROL");
            yield return new EnumValue<T>(converter(3),"WINCH_LOCK");
            yield return new EnumValue<T>(converter(4),"WINCH_DELIVER");
            yield return new EnumValue<T>(converter(5),"WINCH_HOLD");
            yield return new EnumValue<T>(converter(6),"WINCH_RETRACT");
            yield return new EnumValue<T>(converter(7),"WINCH_LOAD_LINE");
            yield return new EnumValue<T>(converter(8),"WINCH_ABANDON_LINE");
            yield return new EnumValue<T>(converter(9),"WINCH_LOAD_PAYLOAD");
        }
    }
    /// <summary>
    /// Generalized UAVCAN node health
    ///  UAVCAN_NODE_HEALTH
    /// </summary>
    public enum UavcanNodeHealth : ulong
    {
        /// <summary>
        /// The node is functioning properly.
        /// UAVCAN_NODE_HEALTH_OK
        /// </summary>
        UavcanNodeHealthOk = 0,
        /// <summary>
        /// A critical parameter went out of range or the node has encountered a minor failure.
        /// UAVCAN_NODE_HEALTH_WARNING
        /// </summary>
        UavcanNodeHealthWarning = 1,
        /// <summary>
        /// The node has encountered a major failure.
        /// UAVCAN_NODE_HEALTH_ERROR
        /// </summary>
        UavcanNodeHealthError = 2,
        /// <summary>
        /// The node has suffered a fatal malfunction.
        /// UAVCAN_NODE_HEALTH_CRITICAL
        /// </summary>
        UavcanNodeHealthCritical = 3,
    }
    public static class UavcanNodeHealthHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"UAVCAN_NODE_HEALTH_OK");
            yield return new EnumValue<T>(converter(1),"UAVCAN_NODE_HEALTH_WARNING");
            yield return new EnumValue<T>(converter(2),"UAVCAN_NODE_HEALTH_ERROR");
            yield return new EnumValue<T>(converter(3),"UAVCAN_NODE_HEALTH_CRITICAL");
        }
    }
    /// <summary>
    /// Generalized UAVCAN node mode
    ///  UAVCAN_NODE_MODE
    /// </summary>
    public enum UavcanNodeMode : ulong
    {
        /// <summary>
        /// The node is performing its primary functions.
        /// UAVCAN_NODE_MODE_OPERATIONAL
        /// </summary>
        UavcanNodeModeOperational = 0,
        /// <summary>
        /// The node is initializing; this mode is entered immediately after startup.
        /// UAVCAN_NODE_MODE_INITIALIZATION
        /// </summary>
        UavcanNodeModeInitialization = 1,
        /// <summary>
        /// The node is under maintenance.
        /// UAVCAN_NODE_MODE_MAINTENANCE
        /// </summary>
        UavcanNodeModeMaintenance = 2,
        /// <summary>
        /// The node is in the process of updating its software.
        /// UAVCAN_NODE_MODE_SOFTWARE_UPDATE
        /// </summary>
        UavcanNodeModeSoftwareUpdate = 3,
        /// <summary>
        /// The node is no longer available online.
        /// UAVCAN_NODE_MODE_OFFLINE
        /// </summary>
        UavcanNodeModeOffline = 7,
    }
    public static class UavcanNodeModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(7);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"UAVCAN_NODE_MODE_OPERATIONAL");
            yield return new EnumValue<T>(converter(1),"UAVCAN_NODE_MODE_INITIALIZATION");
            yield return new EnumValue<T>(converter(2),"UAVCAN_NODE_MODE_MAINTENANCE");
            yield return new EnumValue<T>(converter(3),"UAVCAN_NODE_MODE_SOFTWARE_UPDATE");
            yield return new EnumValue<T>(converter(7),"UAVCAN_NODE_MODE_OFFLINE");
        }
    }
    /// <summary>
    /// Indicates the ESC connection type.
    ///  ESC_CONNECTION_TYPE
    /// </summary>
    public enum EscConnectionType : ulong
    {
        /// <summary>
        /// Traditional PPM ESC.
        /// ESC_CONNECTION_TYPE_PPM
        /// </summary>
        EscConnectionTypePpm = 0,
        /// <summary>
        /// Serial Bus connected ESC.
        /// ESC_CONNECTION_TYPE_SERIAL
        /// </summary>
        EscConnectionTypeSerial = 1,
        /// <summary>
        /// One Shot PPM ESC.
        /// ESC_CONNECTION_TYPE_ONESHOT
        /// </summary>
        EscConnectionTypeOneshot = 2,
        /// <summary>
        /// I2C ESC.
        /// ESC_CONNECTION_TYPE_I2C
        /// </summary>
        EscConnectionTypeI2c = 3,
        /// <summary>
        /// CAN-Bus ESC.
        /// ESC_CONNECTION_TYPE_CAN
        /// </summary>
        EscConnectionTypeCan = 4,
        /// <summary>
        /// DShot ESC.
        /// ESC_CONNECTION_TYPE_DSHOT
        /// </summary>
        EscConnectionTypeDshot = 5,
    }
    public static class EscConnectionTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ESC_CONNECTION_TYPE_PPM");
            yield return new EnumValue<T>(converter(1),"ESC_CONNECTION_TYPE_SERIAL");
            yield return new EnumValue<T>(converter(2),"ESC_CONNECTION_TYPE_ONESHOT");
            yield return new EnumValue<T>(converter(3),"ESC_CONNECTION_TYPE_I2C");
            yield return new EnumValue<T>(converter(4),"ESC_CONNECTION_TYPE_CAN");
            yield return new EnumValue<T>(converter(5),"ESC_CONNECTION_TYPE_DSHOT");
        }
    }
    /// <summary>
    /// Flags to report ESC failures.
    ///  ESC_FAILURE_FLAGS
    /// </summary>
    public enum EscFailureFlags : ulong
    {
        /// <summary>
        /// No ESC failure.
        /// ESC_FAILURE_NONE
        /// </summary>
        EscFailureNone = 0,
        /// <summary>
        /// Over current failure.
        /// ESC_FAILURE_OVER_CURRENT
        /// </summary>
        EscFailureOverCurrent = 1,
        /// <summary>
        /// Over voltage failure.
        /// ESC_FAILURE_OVER_VOLTAGE
        /// </summary>
        EscFailureOverVoltage = 2,
        /// <summary>
        /// Over temperature failure.
        /// ESC_FAILURE_OVER_TEMPERATURE
        /// </summary>
        EscFailureOverTemperature = 4,
        /// <summary>
        /// Over RPM failure.
        /// ESC_FAILURE_OVER_RPM
        /// </summary>
        EscFailureOverRpm = 8,
        /// <summary>
        /// Inconsistent command failure i.e. out of bounds.
        /// ESC_FAILURE_INCONSISTENT_CMD
        /// </summary>
        EscFailureInconsistentCmd = 16,
        /// <summary>
        /// Motor stuck failure.
        /// ESC_FAILURE_MOTOR_STUCK
        /// </summary>
        EscFailureMotorStuck = 32,
        /// <summary>
        /// Generic ESC failure.
        /// ESC_FAILURE_GENERIC
        /// </summary>
        EscFailureGeneric = 64,
    }
    public static class EscFailureFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ESC_FAILURE_NONE");
            yield return new EnumValue<T>(converter(1),"ESC_FAILURE_OVER_CURRENT");
            yield return new EnumValue<T>(converter(2),"ESC_FAILURE_OVER_VOLTAGE");
            yield return new EnumValue<T>(converter(4),"ESC_FAILURE_OVER_TEMPERATURE");
            yield return new EnumValue<T>(converter(8),"ESC_FAILURE_OVER_RPM");
            yield return new EnumValue<T>(converter(16),"ESC_FAILURE_INCONSISTENT_CMD");
            yield return new EnumValue<T>(converter(32),"ESC_FAILURE_MOTOR_STUCK");
            yield return new EnumValue<T>(converter(64),"ESC_FAILURE_GENERIC");
        }
    }
    /// <summary>
    /// Flags to indicate the status of camera storage.
    ///  STORAGE_STATUS
    /// </summary>
    public enum StorageStatus : ulong
    {
        /// <summary>
        /// Storage is missing (no microSD card loaded for example.)
        /// STORAGE_STATUS_EMPTY
        /// </summary>
        StorageStatusEmpty = 0,
        /// <summary>
        /// Storage present but unformatted.
        /// STORAGE_STATUS_UNFORMATTED
        /// </summary>
        StorageStatusUnformatted = 1,
        /// <summary>
        /// Storage present and ready.
        /// STORAGE_STATUS_READY
        /// </summary>
        StorageStatusReady = 2,
        /// <summary>
        /// Camera does not supply storage status information. Capacity information in STORAGE_INFORMATION fields will be ignored.
        /// STORAGE_STATUS_NOT_SUPPORTED
        /// </summary>
        StorageStatusNotSupported = 3,
    }
    public static class StorageStatusHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"STORAGE_STATUS_EMPTY");
            yield return new EnumValue<T>(converter(1),"STORAGE_STATUS_UNFORMATTED");
            yield return new EnumValue<T>(converter(2),"STORAGE_STATUS_READY");
            yield return new EnumValue<T>(converter(3),"STORAGE_STATUS_NOT_SUPPORTED");
        }
    }
    /// <summary>
    /// Flags to indicate the type of storage.
    ///  STORAGE_TYPE
    /// </summary>
    public enum StorageType : ulong
    {
        /// <summary>
        /// Storage type is not known.
        /// STORAGE_TYPE_UNKNOWN
        /// </summary>
        StorageTypeUnknown = 0,
        /// <summary>
        /// Storage type is USB device.
        /// STORAGE_TYPE_USB_STICK
        /// </summary>
        StorageTypeUsbStick = 1,
        /// <summary>
        /// Storage type is SD card.
        /// STORAGE_TYPE_SD
        /// </summary>
        StorageTypeSd = 2,
        /// <summary>
        /// Storage type is microSD card.
        /// STORAGE_TYPE_MICROSD
        /// </summary>
        StorageTypeMicrosd = 3,
        /// <summary>
        /// Storage type is CFast.
        /// STORAGE_TYPE_CF
        /// </summary>
        StorageTypeCf = 4,
        /// <summary>
        /// Storage type is CFexpress.
        /// STORAGE_TYPE_CFE
        /// </summary>
        StorageTypeCfe = 5,
        /// <summary>
        /// Storage type is XQD.
        /// STORAGE_TYPE_XQD
        /// </summary>
        StorageTypeXqd = 6,
        /// <summary>
        /// Storage type is HD mass storage type.
        /// STORAGE_TYPE_HD
        /// </summary>
        StorageTypeHd = 7,
        /// <summary>
        /// Storage type is other, not listed type.
        /// STORAGE_TYPE_OTHER
        /// </summary>
        StorageTypeOther = 254,
    }
    public static class StorageTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(254);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"STORAGE_TYPE_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"STORAGE_TYPE_USB_STICK");
            yield return new EnumValue<T>(converter(2),"STORAGE_TYPE_SD");
            yield return new EnumValue<T>(converter(3),"STORAGE_TYPE_MICROSD");
            yield return new EnumValue<T>(converter(4),"STORAGE_TYPE_CF");
            yield return new EnumValue<T>(converter(5),"STORAGE_TYPE_CFE");
            yield return new EnumValue<T>(converter(6),"STORAGE_TYPE_XQD");
            yield return new EnumValue<T>(converter(7),"STORAGE_TYPE_HD");
            yield return new EnumValue<T>(converter(254),"STORAGE_TYPE_OTHER");
        }
    }
    /// <summary>
    /// Flags to indicate usage for a particular storage (see STORAGE_INFORMATION.storage_usage and MAV_CMD_SET_STORAGE_USAGE).
    ///  STORAGE_USAGE_FLAG
    /// </summary>
    public enum StorageUsageFlag : ulong
    {
        /// <summary>
        /// Always set to 1 (indicates STORAGE_INFORMATION.storage_usage is supported).
        /// STORAGE_USAGE_FLAG_SET
        /// </summary>
        StorageUsageFlagSet = 1,
        /// <summary>
        /// Storage for saving photos.
        /// STORAGE_USAGE_FLAG_PHOTO
        /// </summary>
        StorageUsageFlagPhoto = 2,
        /// <summary>
        /// Storage for saving videos.
        /// STORAGE_USAGE_FLAG_VIDEO
        /// </summary>
        StorageUsageFlagVideo = 4,
        /// <summary>
        /// Storage for saving logs.
        /// STORAGE_USAGE_FLAG_LOGS
        /// </summary>
        StorageUsageFlagLogs = 8,
    }
    public static class StorageUsageFlagHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"STORAGE_USAGE_FLAG_SET");
            yield return new EnumValue<T>(converter(2),"STORAGE_USAGE_FLAG_PHOTO");
            yield return new EnumValue<T>(converter(4),"STORAGE_USAGE_FLAG_VIDEO");
            yield return new EnumValue<T>(converter(8),"STORAGE_USAGE_FLAG_LOGS");
        }
    }
    /// <summary>
    /// Yaw behaviour during orbit flight.
    ///  ORBIT_YAW_BEHAVIOUR
    /// </summary>
    public enum OrbitYawBehaviour : ulong
    {
        /// <summary>
        /// Vehicle front points to the center (default).
        /// ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER
        /// </summary>
        OrbitYawBehaviourHoldFrontToCircleCenter = 0,
        /// <summary>
        /// Vehicle front holds heading when message received.
        /// ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING
        /// </summary>
        OrbitYawBehaviourHoldInitialHeading = 1,
        /// <summary>
        /// Yaw uncontrolled.
        /// ORBIT_YAW_BEHAVIOUR_UNCONTROLLED
        /// </summary>
        OrbitYawBehaviourUncontrolled = 2,
        /// <summary>
        /// Vehicle front follows flight path (tangential to circle).
        /// ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE
        /// </summary>
        OrbitYawBehaviourHoldFrontTangentToCircle = 3,
        /// <summary>
        /// Yaw controlled by RC input.
        /// ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED
        /// </summary>
        OrbitYawBehaviourRcControlled = 4,
    }
    public static class OrbitYawBehaviourHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER");
            yield return new EnumValue<T>(converter(1),"ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING");
            yield return new EnumValue<T>(converter(2),"ORBIT_YAW_BEHAVIOUR_UNCONTROLLED");
            yield return new EnumValue<T>(converter(3),"ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE");
            yield return new EnumValue<T>(converter(4),"ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED");
        }
    }
    /// <summary>
    /// Possible responses from a WIFI_CONFIG_AP message.
    ///  WIFI_CONFIG_AP_RESPONSE
    /// </summary>
    public enum WifiConfigApResponse : ulong
    {
        /// <summary>
        /// Undefined response. Likely an indicative of a system that doesn't support this request.
        /// WIFI_CONFIG_AP_RESPONSE_UNDEFINED
        /// </summary>
        WifiConfigApResponseUndefined = 0,
        /// <summary>
        /// Changes accepted.
        /// WIFI_CONFIG_AP_RESPONSE_ACCEPTED
        /// </summary>
        WifiConfigApResponseAccepted = 1,
        /// <summary>
        /// Changes rejected.
        /// WIFI_CONFIG_AP_RESPONSE_REJECTED
        /// </summary>
        WifiConfigApResponseRejected = 2,
        /// <summary>
        /// Invalid Mode.
        /// WIFI_CONFIG_AP_RESPONSE_MODE_ERROR
        /// </summary>
        WifiConfigApResponseModeError = 3,
        /// <summary>
        /// Invalid SSID.
        /// WIFI_CONFIG_AP_RESPONSE_SSID_ERROR
        /// </summary>
        WifiConfigApResponseSsidError = 4,
        /// <summary>
        /// Invalid Password.
        /// WIFI_CONFIG_AP_RESPONSE_PASSWORD_ERROR
        /// </summary>
        WifiConfigApResponsePasswordError = 5,
    }
    public static class WifiConfigApResponseHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"WIFI_CONFIG_AP_RESPONSE_UNDEFINED");
            yield return new EnumValue<T>(converter(1),"WIFI_CONFIG_AP_RESPONSE_ACCEPTED");
            yield return new EnumValue<T>(converter(2),"WIFI_CONFIG_AP_RESPONSE_REJECTED");
            yield return new EnumValue<T>(converter(3),"WIFI_CONFIG_AP_RESPONSE_MODE_ERROR");
            yield return new EnumValue<T>(converter(4),"WIFI_CONFIG_AP_RESPONSE_SSID_ERROR");
            yield return new EnumValue<T>(converter(5),"WIFI_CONFIG_AP_RESPONSE_PASSWORD_ERROR");
        }
    }
    /// <summary>
    /// Possible responses from a CELLULAR_CONFIG message.
    ///  CELLULAR_CONFIG_RESPONSE
    /// </summary>
    public enum CellularConfigResponse : ulong
    {
        /// <summary>
        /// Changes accepted.
        /// CELLULAR_CONFIG_RESPONSE_ACCEPTED
        /// </summary>
        CellularConfigResponseAccepted = 0,
        /// <summary>
        /// Invalid APN.
        /// CELLULAR_CONFIG_RESPONSE_APN_ERROR
        /// </summary>
        CellularConfigResponseApnError = 1,
        /// <summary>
        /// Invalid PIN.
        /// CELLULAR_CONFIG_RESPONSE_PIN_ERROR
        /// </summary>
        CellularConfigResponsePinError = 2,
        /// <summary>
        /// Changes rejected.
        /// CELLULAR_CONFIG_RESPONSE_REJECTED
        /// </summary>
        CellularConfigResponseRejected = 3,
        /// <summary>
        /// PUK is required to unblock SIM card.
        /// CELLULAR_CONFIG_BLOCKED_PUK_REQUIRED
        /// </summary>
        CellularConfigBlockedPukRequired = 4,
    }
    public static class CellularConfigResponseHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CELLULAR_CONFIG_RESPONSE_ACCEPTED");
            yield return new EnumValue<T>(converter(1),"CELLULAR_CONFIG_RESPONSE_APN_ERROR");
            yield return new EnumValue<T>(converter(2),"CELLULAR_CONFIG_RESPONSE_PIN_ERROR");
            yield return new EnumValue<T>(converter(3),"CELLULAR_CONFIG_RESPONSE_REJECTED");
            yield return new EnumValue<T>(converter(4),"CELLULAR_CONFIG_BLOCKED_PUK_REQUIRED");
        }
    }
    /// <summary>
    /// WiFi Mode.
    ///  WIFI_CONFIG_AP_MODE
    /// </summary>
    public enum WifiConfigApMode : ulong
    {
        /// <summary>
        /// WiFi mode is undefined.
        /// WIFI_CONFIG_AP_MODE_UNDEFINED
        /// </summary>
        WifiConfigApModeUndefined = 0,
        /// <summary>
        /// WiFi configured as an access point.
        /// WIFI_CONFIG_AP_MODE_AP
        /// </summary>
        WifiConfigApModeAp = 1,
        /// <summary>
        /// WiFi configured as a station connected to an existing local WiFi network.
        /// WIFI_CONFIG_AP_MODE_STATION
        /// </summary>
        WifiConfigApModeStation = 2,
        /// <summary>
        /// WiFi disabled.
        /// WIFI_CONFIG_AP_MODE_DISABLED
        /// </summary>
        WifiConfigApModeDisabled = 3,
    }
    public static class WifiConfigApModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"WIFI_CONFIG_AP_MODE_UNDEFINED");
            yield return new EnumValue<T>(converter(1),"WIFI_CONFIG_AP_MODE_AP");
            yield return new EnumValue<T>(converter(2),"WIFI_CONFIG_AP_MODE_STATION");
            yield return new EnumValue<T>(converter(3),"WIFI_CONFIG_AP_MODE_DISABLED");
        }
    }
    /// <summary>
    /// Supported component metadata types. These are used in the "general" metadata file returned by COMPONENT_METADATA to provide information about supported metadata types. The types are not used directly in MAVLink messages.
    ///  COMP_METADATA_TYPE
    /// </summary>
    public enum CompMetadataType : ulong
    {
        /// <summary>
        /// General information about the component. General metadata includes information about other metadata types supported by the component. Files of this type must be supported, and must be downloadable from vehicle using a MAVLink FTP URI.
        /// COMP_METADATA_TYPE_GENERAL
        /// </summary>
        CompMetadataTypeGeneral = 0,
        /// <summary>
        /// Parameter meta data.
        /// COMP_METADATA_TYPE_PARAMETER
        /// </summary>
        CompMetadataTypeParameter = 1,
        /// <summary>
        /// Meta data that specifies which commands and command parameters the vehicle supports. (WIP)
        /// COMP_METADATA_TYPE_COMMANDS
        /// </summary>
        CompMetadataTypeCommands = 2,
        /// <summary>
        /// Meta data that specifies external non-MAVLink peripherals.
        /// COMP_METADATA_TYPE_PERIPHERALS
        /// </summary>
        CompMetadataTypePeripherals = 3,
        /// <summary>
        /// Meta data for the events interface.
        /// COMP_METADATA_TYPE_EVENTS
        /// </summary>
        CompMetadataTypeEvents = 4,
        /// <summary>
        /// Meta data for actuator configuration (motors, servos and vehicle geometry) and testing.
        /// COMP_METADATA_TYPE_ACTUATORS
        /// </summary>
        CompMetadataTypeActuators = 5,
    }
    public static class CompMetadataTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"COMP_METADATA_TYPE_GENERAL");
            yield return new EnumValue<T>(converter(1),"COMP_METADATA_TYPE_PARAMETER");
            yield return new EnumValue<T>(converter(2),"COMP_METADATA_TYPE_COMMANDS");
            yield return new EnumValue<T>(converter(3),"COMP_METADATA_TYPE_PERIPHERALS");
            yield return new EnumValue<T>(converter(4),"COMP_METADATA_TYPE_EVENTS");
            yield return new EnumValue<T>(converter(5),"COMP_METADATA_TYPE_ACTUATORS");
        }
    }
    /// <summary>
    /// Actuator configuration, used to change a setting on an actuator. Component information metadata can be used to know which outputs support which commands.
    ///  ACTUATOR_CONFIGURATION
    /// </summary>
    public enum ActuatorConfiguration : ulong
    {
        /// <summary>
        /// Do nothing.
        /// ACTUATOR_CONFIGURATION_NONE
        /// </summary>
        ActuatorConfigurationNone = 0,
        /// <summary>
        /// Command the actuator to beep now.
        /// ACTUATOR_CONFIGURATION_BEEP
        /// </summary>
        ActuatorConfigurationBeep = 1,
        /// <summary>
        /// Permanently set the actuator (ESC) to 3D mode (reversible thrust).
        /// ACTUATOR_CONFIGURATION_3D_MODE_ON
        /// </summary>
        ActuatorConfiguration3dModeOn = 2,
        /// <summary>
        /// Permanently set the actuator (ESC) to non 3D mode (non-reversible thrust).
        /// ACTUATOR_CONFIGURATION_3D_MODE_OFF
        /// </summary>
        ActuatorConfiguration3dModeOff = 3,
        /// <summary>
        /// Permanently set the actuator (ESC) to spin direction 1 (which can be clockwise or counter-clockwise).
        /// ACTUATOR_CONFIGURATION_SPIN_DIRECTION1
        /// </summary>
        ActuatorConfigurationSpinDirection1 = 4,
        /// <summary>
        /// Permanently set the actuator (ESC) to spin direction 2 (opposite of direction 1).
        /// ACTUATOR_CONFIGURATION_SPIN_DIRECTION2
        /// </summary>
        ActuatorConfigurationSpinDirection2 = 5,
    }
    public static class ActuatorConfigurationHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ACTUATOR_CONFIGURATION_NONE");
            yield return new EnumValue<T>(converter(1),"ACTUATOR_CONFIGURATION_BEEP");
            yield return new EnumValue<T>(converter(2),"ACTUATOR_CONFIGURATION_3D_MODE_ON");
            yield return new EnumValue<T>(converter(3),"ACTUATOR_CONFIGURATION_3D_MODE_OFF");
            yield return new EnumValue<T>(converter(4),"ACTUATOR_CONFIGURATION_SPIN_DIRECTION1");
            yield return new EnumValue<T>(converter(5),"ACTUATOR_CONFIGURATION_SPIN_DIRECTION2");
        }
    }
    /// <summary>
    /// Actuator output function. Values greater or equal to 1000 are autopilot-specific.
    ///  ACTUATOR_OUTPUT_FUNCTION
    /// </summary>
    public enum ActuatorOutputFunction : ulong
    {
        /// <summary>
        /// No function (disabled).
        /// ACTUATOR_OUTPUT_FUNCTION_NONE
        /// </summary>
        ActuatorOutputFunctionNone = 0,
        /// <summary>
        /// Motor 1
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR1
        /// </summary>
        ActuatorOutputFunctionMotor1 = 1,
        /// <summary>
        /// Motor 2
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR2
        /// </summary>
        ActuatorOutputFunctionMotor2 = 2,
        /// <summary>
        /// Motor 3
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR3
        /// </summary>
        ActuatorOutputFunctionMotor3 = 3,
        /// <summary>
        /// Motor 4
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR4
        /// </summary>
        ActuatorOutputFunctionMotor4 = 4,
        /// <summary>
        /// Motor 5
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR5
        /// </summary>
        ActuatorOutputFunctionMotor5 = 5,
        /// <summary>
        /// Motor 6
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR6
        /// </summary>
        ActuatorOutputFunctionMotor6 = 6,
        /// <summary>
        /// Motor 7
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR7
        /// </summary>
        ActuatorOutputFunctionMotor7 = 7,
        /// <summary>
        /// Motor 8
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR8
        /// </summary>
        ActuatorOutputFunctionMotor8 = 8,
        /// <summary>
        /// Motor 9
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR9
        /// </summary>
        ActuatorOutputFunctionMotor9 = 9,
        /// <summary>
        /// Motor 10
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR10
        /// </summary>
        ActuatorOutputFunctionMotor10 = 10,
        /// <summary>
        /// Motor 11
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR11
        /// </summary>
        ActuatorOutputFunctionMotor11 = 11,
        /// <summary>
        /// Motor 12
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR12
        /// </summary>
        ActuatorOutputFunctionMotor12 = 12,
        /// <summary>
        /// Motor 13
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR13
        /// </summary>
        ActuatorOutputFunctionMotor13 = 13,
        /// <summary>
        /// Motor 14
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR14
        /// </summary>
        ActuatorOutputFunctionMotor14 = 14,
        /// <summary>
        /// Motor 15
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR15
        /// </summary>
        ActuatorOutputFunctionMotor15 = 15,
        /// <summary>
        /// Motor 16
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR16
        /// </summary>
        ActuatorOutputFunctionMotor16 = 16,
        /// <summary>
        /// Servo 1
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO1
        /// </summary>
        ActuatorOutputFunctionServo1 = 33,
        /// <summary>
        /// Servo 2
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO2
        /// </summary>
        ActuatorOutputFunctionServo2 = 34,
        /// <summary>
        /// Servo 3
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO3
        /// </summary>
        ActuatorOutputFunctionServo3 = 35,
        /// <summary>
        /// Servo 4
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO4
        /// </summary>
        ActuatorOutputFunctionServo4 = 36,
        /// <summary>
        /// Servo 5
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO5
        /// </summary>
        ActuatorOutputFunctionServo5 = 37,
        /// <summary>
        /// Servo 6
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO6
        /// </summary>
        ActuatorOutputFunctionServo6 = 38,
        /// <summary>
        /// Servo 7
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO7
        /// </summary>
        ActuatorOutputFunctionServo7 = 39,
        /// <summary>
        /// Servo 8
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO8
        /// </summary>
        ActuatorOutputFunctionServo8 = 40,
        /// <summary>
        /// Servo 9
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO9
        /// </summary>
        ActuatorOutputFunctionServo9 = 41,
        /// <summary>
        /// Servo 10
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO10
        /// </summary>
        ActuatorOutputFunctionServo10 = 42,
        /// <summary>
        /// Servo 11
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO11
        /// </summary>
        ActuatorOutputFunctionServo11 = 43,
        /// <summary>
        /// Servo 12
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO12
        /// </summary>
        ActuatorOutputFunctionServo12 = 44,
        /// <summary>
        /// Servo 13
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO13
        /// </summary>
        ActuatorOutputFunctionServo13 = 45,
        /// <summary>
        /// Servo 14
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO14
        /// </summary>
        ActuatorOutputFunctionServo14 = 46,
        /// <summary>
        /// Servo 15
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO15
        /// </summary>
        ActuatorOutputFunctionServo15 = 47,
        /// <summary>
        /// Servo 16
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO16
        /// </summary>
        ActuatorOutputFunctionServo16 = 48,
    }
    public static class ActuatorOutputFunctionHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
            yield return converter(16);
            yield return converter(33);
            yield return converter(34);
            yield return converter(35);
            yield return converter(36);
            yield return converter(37);
            yield return converter(38);
            yield return converter(39);
            yield return converter(40);
            yield return converter(41);
            yield return converter(42);
            yield return converter(43);
            yield return converter(44);
            yield return converter(45);
            yield return converter(46);
            yield return converter(47);
            yield return converter(48);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ACTUATOR_OUTPUT_FUNCTION_NONE");
            yield return new EnumValue<T>(converter(1),"ACTUATOR_OUTPUT_FUNCTION_MOTOR1");
            yield return new EnumValue<T>(converter(2),"ACTUATOR_OUTPUT_FUNCTION_MOTOR2");
            yield return new EnumValue<T>(converter(3),"ACTUATOR_OUTPUT_FUNCTION_MOTOR3");
            yield return new EnumValue<T>(converter(4),"ACTUATOR_OUTPUT_FUNCTION_MOTOR4");
            yield return new EnumValue<T>(converter(5),"ACTUATOR_OUTPUT_FUNCTION_MOTOR5");
            yield return new EnumValue<T>(converter(6),"ACTUATOR_OUTPUT_FUNCTION_MOTOR6");
            yield return new EnumValue<T>(converter(7),"ACTUATOR_OUTPUT_FUNCTION_MOTOR7");
            yield return new EnumValue<T>(converter(8),"ACTUATOR_OUTPUT_FUNCTION_MOTOR8");
            yield return new EnumValue<T>(converter(9),"ACTUATOR_OUTPUT_FUNCTION_MOTOR9");
            yield return new EnumValue<T>(converter(10),"ACTUATOR_OUTPUT_FUNCTION_MOTOR10");
            yield return new EnumValue<T>(converter(11),"ACTUATOR_OUTPUT_FUNCTION_MOTOR11");
            yield return new EnumValue<T>(converter(12),"ACTUATOR_OUTPUT_FUNCTION_MOTOR12");
            yield return new EnumValue<T>(converter(13),"ACTUATOR_OUTPUT_FUNCTION_MOTOR13");
            yield return new EnumValue<T>(converter(14),"ACTUATOR_OUTPUT_FUNCTION_MOTOR14");
            yield return new EnumValue<T>(converter(15),"ACTUATOR_OUTPUT_FUNCTION_MOTOR15");
            yield return new EnumValue<T>(converter(16),"ACTUATOR_OUTPUT_FUNCTION_MOTOR16");
            yield return new EnumValue<T>(converter(33),"ACTUATOR_OUTPUT_FUNCTION_SERVO1");
            yield return new EnumValue<T>(converter(34),"ACTUATOR_OUTPUT_FUNCTION_SERVO2");
            yield return new EnumValue<T>(converter(35),"ACTUATOR_OUTPUT_FUNCTION_SERVO3");
            yield return new EnumValue<T>(converter(36),"ACTUATOR_OUTPUT_FUNCTION_SERVO4");
            yield return new EnumValue<T>(converter(37),"ACTUATOR_OUTPUT_FUNCTION_SERVO5");
            yield return new EnumValue<T>(converter(38),"ACTUATOR_OUTPUT_FUNCTION_SERVO6");
            yield return new EnumValue<T>(converter(39),"ACTUATOR_OUTPUT_FUNCTION_SERVO7");
            yield return new EnumValue<T>(converter(40),"ACTUATOR_OUTPUT_FUNCTION_SERVO8");
            yield return new EnumValue<T>(converter(41),"ACTUATOR_OUTPUT_FUNCTION_SERVO9");
            yield return new EnumValue<T>(converter(42),"ACTUATOR_OUTPUT_FUNCTION_SERVO10");
            yield return new EnumValue<T>(converter(43),"ACTUATOR_OUTPUT_FUNCTION_SERVO11");
            yield return new EnumValue<T>(converter(44),"ACTUATOR_OUTPUT_FUNCTION_SERVO12");
            yield return new EnumValue<T>(converter(45),"ACTUATOR_OUTPUT_FUNCTION_SERVO13");
            yield return new EnumValue<T>(converter(46),"ACTUATOR_OUTPUT_FUNCTION_SERVO14");
            yield return new EnumValue<T>(converter(47),"ACTUATOR_OUTPUT_FUNCTION_SERVO15");
            yield return new EnumValue<T>(converter(48),"ACTUATOR_OUTPUT_FUNCTION_SERVO16");
        }
    }
    /// <summary>
    /// Enable axes that will be tuned via autotuning. Used in MAV_CMD_DO_AUTOTUNE_ENABLE.
    ///  AUTOTUNE_AXIS
    /// </summary>
    public enum AutotuneAxis : ulong
    {
        /// <summary>
        /// Flight stack tunes axis according to its default settings.
        /// AUTOTUNE_AXIS_DEFAULT
        /// </summary>
        AutotuneAxisDefault = 0,
        /// <summary>
        /// Autotune roll axis.
        /// AUTOTUNE_AXIS_ROLL
        /// </summary>
        AutotuneAxisRoll = 1,
        /// <summary>
        /// Autotune pitch axis.
        /// AUTOTUNE_AXIS_PITCH
        /// </summary>
        AutotuneAxisPitch = 2,
        /// <summary>
        /// Autotune yaw axis.
        /// AUTOTUNE_AXIS_YAW
        /// </summary>
        AutotuneAxisYaw = 4,
    }
    public static class AutotuneAxisHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"AUTOTUNE_AXIS_DEFAULT");
            yield return new EnumValue<T>(converter(1),"AUTOTUNE_AXIS_ROLL");
            yield return new EnumValue<T>(converter(2),"AUTOTUNE_AXIS_PITCH");
            yield return new EnumValue<T>(converter(4),"AUTOTUNE_AXIS_YAW");
        }
    }
    /// <summary>
    /// 
    ///         Actions for reading/writing parameters between persistent and volatile storage when using MAV_CMD_PREFLIGHT_STORAGE.
    ///         (Commonly parameters are loaded from persistent storage (flash/EEPROM) into volatile storage (RAM) on startup and written back when they are changed.)
    ///       
    ///  PREFLIGHT_STORAGE_PARAMETER_ACTION
    /// </summary>
    public enum PreflightStorageParameterAction : ulong
    {
        /// <summary>
        /// Read all parameters from persistent storage. Replaces values in volatile storage.
        /// PARAM_READ_PERSISTENT
        /// </summary>
        ParamReadPersistent = 0,
        /// <summary>
        /// Write all parameter values to persistent storage (flash/EEPROM)
        /// PARAM_WRITE_PERSISTENT
        /// </summary>
        ParamWritePersistent = 1,
        /// <summary>
        /// Reset all user configurable parameters to their default value (including airframe selection, sensor calibration data, safety settings, and so on). Does not reset values that contain operation counters and vehicle computed statistics.
        /// PARAM_RESET_CONFIG_DEFAULT
        /// </summary>
        ParamResetConfigDefault = 2,
        /// <summary>
        /// Reset only sensor calibration parameters to factory defaults (or firmware default if not available)
        /// PARAM_RESET_SENSOR_DEFAULT
        /// </summary>
        ParamResetSensorDefault = 3,
        /// <summary>
        /// Reset all parameters, including operation counters, to default values
        /// PARAM_RESET_ALL_DEFAULT
        /// </summary>
        ParamResetAllDefault = 4,
    }
    public static class PreflightStorageParameterActionHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"PARAM_READ_PERSISTENT");
            yield return new EnumValue<T>(converter(1),"PARAM_WRITE_PERSISTENT");
            yield return new EnumValue<T>(converter(2),"PARAM_RESET_CONFIG_DEFAULT");
            yield return new EnumValue<T>(converter(3),"PARAM_RESET_SENSOR_DEFAULT");
            yield return new EnumValue<T>(converter(4),"PARAM_RESET_ALL_DEFAULT");
        }
    }
    /// <summary>
    /// 
    ///         Actions for reading and writing plan information (mission, rally points, geofence) between persistent and volatile storage when using MAV_CMD_PREFLIGHT_STORAGE.
    ///         (Commonly missions are loaded from persistent storage (flash/EEPROM) into volatile storage (RAM) on startup and written back when they are changed.)
    ///       
    ///  PREFLIGHT_STORAGE_MISSION_ACTION
    /// </summary>
    public enum PreflightStorageMissionAction : ulong
    {
        /// <summary>
        /// Read current mission data from persistent storage
        /// MISSION_READ_PERSISTENT
        /// </summary>
        MissionReadPersistent = 0,
        /// <summary>
        /// Write current mission data to persistent storage
        /// MISSION_WRITE_PERSISTENT
        /// </summary>
        MissionWritePersistent = 1,
        /// <summary>
        /// Erase all mission data stored on the vehicle (both persistent and volatile storage)
        /// MISSION_RESET_DEFAULT
        /// </summary>
        MissionResetDefault = 2,
    }
    public static class PreflightStorageMissionActionHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MISSION_READ_PERSISTENT");
            yield return new EnumValue<T>(converter(1),"MISSION_WRITE_PERSISTENT");
            yield return new EnumValue<T>(converter(2),"MISSION_RESET_DEFAULT");
        }
    }
    /// <summary>
    /// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries
    ///  MAV_CMD
    /// </summary>
    public enum MavCmd : ulong
    {
        /// <summary>
        /// Navigate to waypoint. This is intended for use in missions (for guided commands outside of missions use MAV_CMD_DO_REPOSITION).
        /// Param 1 - Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
        /// Param 2 - Acceptance radius (if the sphere with this radius is hit, the waypoint counts as reached)
        /// Param 3 - 0 to pass through the WP, if > 0 radius to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
        /// Param 4 - Desired yaw angle at waypoint (rotary wing). NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_WAYPOINT
        /// </summary>
        MavCmdNavWaypoint = 16,
        /// <summary>
        /// Loiter around this waypoint an unlimited amount of time
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
        /// Param 4 - Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_UNLIM
        /// </summary>
        MavCmdNavLoiterUnlim = 17,
        /// <summary>
        /// Loiter around this waypoint for X turns
        /// Param 1 - Number of turns.
        /// Param 2 - Leave loiter circle only once heading towards the next waypoint (0 = False)
        /// Param 3 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
        /// Param 4 - Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_TURNS
        /// </summary>
        MavCmdNavLoiterTurns = 18,
        /// <summary>
        /// Loiter at the specified latitude, longitude and altitude for a certain amount of time. Multicopter vehicles stop at the point (within a vehicle-specific acceptance radius). Forward-only moving vehicles (e.g. fixed-wing) circle the point with the specified radius/direction. If the Heading Required parameter (2) is non-zero forward moving aircraft will only leave the loiter circle once heading towards the next waypoint.
        /// Param 1 - Loiter time (only starts once Lat, Lon and Alt is reached).
        /// Param 2 - Leave loiter circle only once heading towards the next waypoint (0 = False)
        /// Param 3 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise.
        /// Param 4 - Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_TIME
        /// </summary>
        MavCmdNavLoiterTime = 19,
        /// <summary>
        /// Return to launch location
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_RETURN_TO_LAUNCH
        /// </summary>
        MavCmdNavReturnToLaunch = 20,
        /// <summary>
        /// Land at location.
        /// Param 1 - Minimum target altitude if landing is aborted (0 = undefined/use system default).
        /// Param 2 - Precision land mode.
        /// Param 3 - Empty.
        /// Param 4 - Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude.
        /// Param 6 - Longitude.
        /// Param 7 - Landing altitude (ground level in current frame).
        /// MAV_CMD_NAV_LAND
        /// </summary>
        MavCmdNavLand = 21,
        /// <summary>
        /// Takeoff from ground / hand. Vehicles that support multiple takeoff modes (e.g. VTOL quadplane) should take off using the currently configured mode.
        /// Param 1 - Minimum pitch (if airspeed sensor present), desired pitch without sensor
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Yaw angle (if magnetometer present), ignored without magnetometer. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_TAKEOFF
        /// </summary>
        MavCmdNavTakeoff = 22,
        /// <summary>
        /// Land at local position (local frame only)
        /// Param 1 - Landing target number (if available)
        /// Param 2 - Maximum accepted offset from desired landing position - computed magnitude from spherical coordinates: d = sqrt(x^2 + y^2 + z^2), which gives the maximum accepted distance between the desired landing position and the position where the vehicle is about to land
        /// Param 3 - Landing descend rate
        /// Param 4 - Desired yaw angle
        /// Param 5 - Y-axis position
        /// Param 6 - X-axis position
        /// Param 7 - Z-axis / ground level position
        /// MAV_CMD_NAV_LAND_LOCAL
        /// </summary>
        MavCmdNavLandLocal = 23,
        /// <summary>
        /// Takeoff from local position (local frame only)
        /// Param 1 - Minimum pitch (if airspeed sensor present), desired pitch without sensor
        /// Param 2 - Empty
        /// Param 3 - Takeoff ascend rate
        /// Param 4 - Yaw angle (if magnetometer or another yaw estimation source present), ignored without one of these
        /// Param 5 - Y-axis position
        /// Param 6 - X-axis position
        /// Param 7 - Z-axis position
        /// MAV_CMD_NAV_TAKEOFF_LOCAL
        /// </summary>
        MavCmdNavTakeoffLocal = 24,
        /// <summary>
        /// Vehicle following, i.e. this waypoint represents the position of a moving vehicle
        /// Param 1 - Following logic to use (e.g. loitering or sinusoidal following) - depends on specific autopilot implementation
        /// Param 2 - Ground speed of vehicle to be followed
        /// Param 3 - Radius around waypoint. If positive loiter clockwise, else counter-clockwise
        /// Param 4 - Desired yaw angle.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_FOLLOW
        /// </summary>
        MavCmdNavFollow = 25,
        /// <summary>
        /// Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
        /// Param 1 - Climb or Descend (0 = Neutral, command completes when within 5m of this command's altitude, 1 = Climbing, command completes when at or above this command's altitude, 2 = Descending, command completes when at or below this command's altitude.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Desired altitude
        /// MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT
        /// </summary>
        MavCmdNavContinueAndChangeAlt = 30,
        /// <summary>
        /// Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached. Additionally, if the Heading Required parameter is non-zero the aircraft will not leave the loiter until heading toward the next waypoint.
        /// Param 1 - Leave loiter circle only once heading towards the next waypoint (0 = False)
        /// Param 2 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, negative counter-clockwise, 0 means no change to standard loiter.
        /// Param 3 - Empty
        /// Param 4 - Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_TO_ALT
        /// </summary>
        MavCmdNavLoiterToAlt = 31,
        /// <summary>
        /// Begin following a target
        /// Param 1 - System ID (of the FOLLOW_TARGET beacon). Send 0 to disable follow-me and return to the default position hold mode.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Altitude mode: 0: Keep current altitude, 1: keep altitude difference to target, 2: go to a fixed altitude above home.
        /// Param 5 - Altitude above home. (used if mode=2)
        /// Param 6 - Reserved
        /// Param 7 - Time to land in which the MAV should go to the default position hold mode after a message RX timeout.
        /// MAV_CMD_DO_FOLLOW
        /// </summary>
        MavCmdDoFollow = 32,
        /// <summary>
        /// Reposition the MAV after a follow target command has been sent
        /// Param 1 - Camera q1 (where 0 is on the ray from the camera to the tracking device)
        /// Param 2 - Camera q2
        /// Param 3 - Camera q3
        /// Param 4 - Camera q4
        /// Param 5 - altitude offset from target
        /// Param 6 - X offset from target
        /// Param 7 - Y offset from target
        /// MAV_CMD_DO_FOLLOW_REPOSITION
        /// </summary>
        MavCmdDoFollowReposition = 33,
        /// <summary>
        /// Start orbiting on the circumference of a circle defined by the parameters. Setting values to NaN/INT32_MAX (as appropriate) results in using defaults.
        /// Param 1 - Radius of the circle. Positive: orbit clockwise. Negative: orbit counter-clockwise. NaN: Use vehicle default radius, or current radius if already orbiting.
        /// Param 2 - Tangential Velocity. NaN: Use vehicle default velocity, or current velocity if already orbiting.
        /// Param 3 - Yaw behavior of the vehicle.
        /// Param 4 - Orbit around the centre point for this many radians (i.e. for a three-quarter orbit set 270*Pi/180). 0: Orbit forever. NaN: Use vehicle default, or current value if already orbiting.
        /// Param 5 - Center point latitude (if no MAV_FRAME specified) / X coordinate according to MAV_FRAME. INT32_MAX (or NaN if sent in COMMAND_LONG): Use current vehicle position, or current center if already orbiting.
        /// Param 6 - Center point longitude (if no MAV_FRAME specified) / Y coordinate according to MAV_FRAME. INT32_MAX (or NaN if sent in COMMAND_LONG): Use current vehicle position, or current center if already orbiting.
        /// Param 7 - Center point altitude (MSL) (if no MAV_FRAME specified) / Z coordinate according to MAV_FRAME. NaN: Use current vehicle altitude.
        /// MAV_CMD_DO_ORBIT
        /// </summary>
        MavCmdDoOrbit = 34,
        /// <summary>
        /// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
        /// Param 1 - Region of interest mode.
        /// Param 2 - Waypoint index/ target ID. (see MAV_ROI enum)
        /// Param 3 - ROI index (allows a vehicle to manage multiple ROI's)
        /// Param 4 - Empty
        /// Param 5 - x the location of the fixed ROI (see MAV_FRAME)
        /// Param 6 - y
        /// Param 7 - z
        /// MAV_CMD_NAV_ROI
        /// </summary>
        MavCmdNavRoi = 80,
        /// <summary>
        /// Control autonomous path planning on the MAV.
        /// Param 1 - 0: Disable local obstacle avoidance / local path planning (without resetting map), 1: Enable local path planning, 2: Enable and reset local path planning
        /// Param 2 - 0: Disable full path planning (without resetting map), 1: Enable, 2: Enable and reset map/occupancy grid, 3: Enable and reset planned route, but not occupancy grid
        /// Param 3 - Empty
        /// Param 4 - Yaw angle at goal
        /// Param 5 - Latitude/X of goal
        /// Param 6 - Longitude/Y of goal
        /// Param 7 - Altitude/Z of goal
        /// MAV_CMD_NAV_PATHPLANNING
        /// </summary>
        MavCmdNavPathplanning = 81,
        /// <summary>
        /// Navigate to waypoint using a spline path.
        /// Param 1 - Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude/X of goal
        /// Param 6 - Longitude/Y of goal
        /// Param 7 - Altitude/Z of goal
        /// MAV_CMD_NAV_SPLINE_WAYPOINT
        /// </summary>
        MavCmdNavSplineWaypoint = 82,
        /// <summary>
        /// Takeoff from ground using VTOL mode, and transition to forward flight with specified heading. The command should be ignored by vehicles that dont support both VTOL and fixed-wing flight (multicopters, boats,etc.).
        /// Param 1 - Empty
        /// Param 2 - Front transition heading.
        /// Param 3 - Empty
        /// Param 4 - Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_VTOL_TAKEOFF
        /// </summary>
        MavCmdNavVtolTakeoff = 84,
        /// <summary>
        /// Land using VTOL mode
        /// Param 1 - Landing behaviour.
        /// Param 2 - Empty
        /// Param 3 - Approach altitude (with the same reference as the Altitude field). NaN if unspecified.
        /// Param 4 - Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude (ground level) relative to the current coordinate frame. NaN to use system default landing altitude (ignore value).
        /// MAV_CMD_NAV_VTOL_LAND
        /// </summary>
        MavCmdNavVtolLand = 85,
        /// <summary>
        /// hand control over to an external controller
        /// Param 1 - On / Off (> 0.5f on)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_GUIDED_ENABLE
        /// </summary>
        MavCmdNavGuidedEnable = 92,
        /// <summary>
        /// Delay the next navigation command a number of seconds or until a specified time
        /// Param 1 - Delay (-1 to enable time-of-day fields)
        /// Param 2 - hour (24h format, UTC, -1 to ignore)
        /// Param 3 - minute (24h format, UTC, -1 to ignore)
        /// Param 4 - second (24h format, UTC, -1 to ignore)
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_DELAY
        /// </summary>
        MavCmdNavDelay = 93,
        /// <summary>
        /// Descend and place payload. Vehicle moves to specified location, descends until it detects a hanging payload has reached the ground, and then releases the payload. If ground is not detected before the reaching the maximum descent value (param1), the command will complete without releasing the payload.
        /// Param 1 - Maximum distance to descend.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_PAYLOAD_PLACE
        /// </summary>
        MavCmdNavPayloadPlace = 94,
        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_LAST
        /// </summary>
        MavCmdNavLast = 95,
        /// <summary>
        /// Delay mission state machine.
        /// Param 1 - Delay
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_DELAY
        /// </summary>
        MavCmdConditionDelay = 112,
        /// <summary>
        /// Ascend/descend to target altitude at specified rate. Delay mission state machine until desired altitude reached.
        /// Param 1 - Descent / Ascend rate.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Target Altitude
        /// MAV_CMD_CONDITION_CHANGE_ALT
        /// </summary>
        MavCmdConditionChangeAlt = 113,
        /// <summary>
        /// Delay mission state machine until within desired distance of next NAV point.
        /// Param 1 - Distance.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_DISTANCE
        /// </summary>
        MavCmdConditionDistance = 114,
        /// <summary>
        /// Reach a certain target angle.
        /// Param 1 - target angle, 0 is north
        /// Param 2 - angular speed
        /// Param 3 - direction: -1: counter clockwise, 1: clockwise
        /// Param 4 - 0: absolute angle, 1: relative offset
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_YAW
        /// </summary>
        MavCmdConditionYaw = 115,
        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_LAST
        /// </summary>
        MavCmdConditionLast = 159,
        /// <summary>
        /// Set system mode.
        /// Param 1 - Mode
        /// Param 2 - Custom mode - this is system specific, please refer to the individual autopilot specifications for details.
        /// Param 3 - Custom sub mode - this is system specific, please refer to the individual autopilot specifications for details.
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_MODE
        /// </summary>
        MavCmdDoSetMode = 176,
        /// <summary>
        /// Jump to the desired command in the mission list.  Repeat this action only the specified number of times
        /// Param 1 - Sequence number
        /// Param 2 - Repeat count
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_JUMP
        /// </summary>
        MavCmdDoJump = 177,
        /// <summary>
        /// Change speed and/or throttle set points. The value persists until it is overridden or there is a mode change
        /// Param 1 - Speed type of value set in param2 (such as airspeed, ground speed, and so on)
        /// Param 2 - Speed (-1 indicates no change, -2 indicates return to default vehicle speed)
        /// Param 3 - Throttle (-1 indicates no change, -2 indicates return to default vehicle throttle value)
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_DO_CHANGE_SPEED
        /// </summary>
        MavCmdDoChangeSpeed = 178,
        /// <summary>
        /// 
        ///           Sets the home position to either to the current position or a specified position.
        ///           The home position is the default position that the system will return to and land on.
        ///           The position is set automatically by the system during the takeoff (and may also be set using this command).
        ///           Note: the current home position may be emitted in a HOME_POSITION message on request (using MAV_CMD_REQUEST_MESSAGE with param1=242).
        ///         
        /// Param 1 - Use current (1=use current location, 0=use specified location)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Yaw angle. NaN to use default heading
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_DO_SET_HOME
        /// </summary>
        MavCmdDoSetHome = 179,
        /// <summary>
        /// Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
        /// Param 1 - Parameter number
        /// Param 2 - Parameter value
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_PARAMETER
        /// </summary>
        MavCmdDoSetParameter = 180,
        /// <summary>
        /// Set a relay to a condition.
        /// Param 1 - Relay instance number.
        /// Param 2 - Setting. (1=on, 0=off, others possible depending on system hardware)
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_RELAY
        /// </summary>
        MavCmdDoSetRelay = 181,
        /// <summary>
        /// Cycle a relay on and off for a desired number of cycles with a desired period.
        /// Param 1 - Relay instance number.
        /// Param 2 - Cycle count.
        /// Param 3 - Cycle time.
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_REPEAT_RELAY
        /// </summary>
        MavCmdDoRepeatRelay = 182,
        /// <summary>
        /// Set a servo to a desired PWM value.
        /// Param 1 - Servo instance number.
        /// Param 2 - Pulse Width Modulation.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_SERVO
        /// </summary>
        MavCmdDoSetServo = 183,
        /// <summary>
        /// Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
        /// Param 1 - Servo instance number.
        /// Param 2 - Pulse Width Modulation.
        /// Param 3 - Cycle count.
        /// Param 4 - Cycle time.
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_REPEAT_SERVO
        /// </summary>
        MavCmdDoRepeatServo = 184,
        /// <summary>
        /// Terminate flight immediately.
        ///           Flight termination immediately and irreversibly terminates the current flight, returning the vehicle to ground.
        ///           The vehicle will ignore RC or other input until it has been power-cycled.
        ///           Termination may trigger safety measures, including: disabling motors and deployment of parachute on multicopters, and setting flight surfaces to initiate a landing pattern on fixed-wing).
        ///           On multicopters without a parachute it may trigger a crash landing.
        ///           Support for this command can be tested using the protocol bit: MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION.
        ///           Support for this command can also be tested by sending the command with param1=0 (< 0.5); the ACK should be either MAV_RESULT_FAILED or MAV_RESULT_UNSUPPORTED.
        ///         
        /// Param 1 - Flight termination activated if > 0.5. Otherwise not activated and ACK with MAV_RESULT_FAILED.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_FLIGHTTERMINATION
        /// </summary>
        MavCmdDoFlighttermination = 185,
        /// <summary>
        /// Change altitude set point.
        /// Param 1 - Altitude.
        /// Param 2 - Frame of new altitude.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_CHANGE_ALTITUDE
        /// </summary>
        MavCmdDoChangeAltitude = 186,
        /// <summary>
        /// Sets actuators (e.g. servos) to a desired value. The actuator numbers are mapped to specific outputs (e.g. on any MAIN or AUX PWM or UAVCAN) using a flight-stack specific mechanism (i.e. a parameter).
        /// Param 1 - Actuator 1 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 2 - Actuator 2 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 3 - Actuator 3 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 4 - Actuator 4 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 5 - Actuator 5 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 6 - Actuator 6 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 7 - Index of actuator set (i.e if set to 1, Actuator 1 becomes Actuator 7)
        /// MAV_CMD_DO_SET_ACTUATOR
        /// </summary>
        MavCmdDoSetActuator = 187,
        /// <summary>
        /// Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts.
        /// 	  It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used.
        /// 	  The Latitude/Longitude/Altitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence.
        /// 	
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_DO_LAND_START
        /// </summary>
        MavCmdDoLandStart = 189,
        /// <summary>
        /// Mission command to perform a landing from a rally point.
        /// Param 1 - Break altitude
        /// Param 2 - Landing speed
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_RALLY_LAND
        /// </summary>
        MavCmdDoRallyLand = 190,
        /// <summary>
        /// Mission command to safely abort an autonomous landing.
        /// Param 1 - Altitude
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GO_AROUND
        /// </summary>
        MavCmdDoGoAround = 191,
        /// <summary>
        /// Reposition the vehicle to a specific WGS84 global position. This command is intended for guided commands (for missions use MAV_CMD_NAV_WAYPOINT instead).
        /// Param 1 - Ground speed, less than 0 (-1) for default
        /// Param 2 - Bitmask of option flags.
        /// Param 3 - Loiter radius for planes. Positive values only, direction is controlled by Yaw value. A value of zero or NaN is ignored. 
        /// Param 4 - Yaw heading. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.). For planes indicates loiter direction (0: clockwise, 1: counter clockwise)
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_DO_REPOSITION
        /// </summary>
        MavCmdDoReposition = 192,
        /// <summary>
        /// If in a GPS controlled position mode, hold the current position or continue.
        /// Param 1 - 0: Pause current mission or reposition command, hold current position. 1: Continue mission. A VTOL capable vehicle should enter hover mode (multicopter and VTOL planes). A plane should loiter with the default loiter radius.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_DO_PAUSE_CONTINUE
        /// </summary>
        MavCmdDoPauseContinue = 193,
        /// <summary>
        /// Set moving direction to forward or reverse.
        /// Param 1 - Direction (0=Forward, 1=Reverse)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_REVERSE
        /// </summary>
        MavCmdDoSetReverse = 194,
        /// <summary>
        /// Sets the region of interest (ROI) to a location. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal is not to react to this message.
        /// Param 1 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude of ROI location
        /// Param 6 - Longitude of ROI location
        /// Param 7 - Altitude of ROI location
        /// MAV_CMD_DO_SET_ROI_LOCATION
        /// </summary>
        MavCmdDoSetRoiLocation = 195,
        /// <summary>
        /// Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
        /// Param 1 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Pitch offset from next waypoint, positive pitching up
        /// Param 6 - Roll offset from next waypoint, positive rolling to the right
        /// Param 7 - Yaw offset from next waypoint, positive yawing to the right
        /// MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
        /// </summary>
        MavCmdDoSetRoiWpnextOffset = 196,
        /// <summary>
        /// Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message. After this command the gimbal manager should go back to manual input if available, and otherwise assume a neutral position.
        /// Param 1 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_ROI_NONE
        /// </summary>
        MavCmdDoSetRoiNone = 197,
        /// <summary>
        /// Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
        /// Param 1 - System ID
        /// Param 2 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// MAV_CMD_DO_SET_ROI_SYSID
        /// </summary>
        MavCmdDoSetRoiSysid = 198,
        /// <summary>
        /// Control onboard camera system.
        /// Param 1 - Camera ID (-1 for all)
        /// Param 2 - Transmission: 0: disabled, 1: enabled compressed, 2: enabled raw
        /// Param 3 - Transmission mode: 0: video stream, >0: single images every n seconds
        /// Param 4 - Recording: 0: disabled, 1: enabled compressed, 2: enabled raw
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_CONTROL_VIDEO
        /// </summary>
        MavCmdDoControlVideo = 200,
        /// <summary>
        /// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
        /// Param 1 - Region of interest mode.
        /// Param 2 - Waypoint index/ target ID (depends on param 1).
        /// Param 3 - Region of interest index. (allows a vehicle to manage multiple ROI's)
        /// Param 4 - Empty
        /// Param 5 - MAV_ROI_WPNEXT: pitch offset from next waypoint, MAV_ROI_LOCATION: latitude
        /// Param 6 - MAV_ROI_WPNEXT: roll offset from next waypoint, MAV_ROI_LOCATION: longitude
        /// Param 7 - MAV_ROI_WPNEXT: yaw offset from next waypoint, MAV_ROI_LOCATION: altitude
        /// MAV_CMD_DO_SET_ROI
        /// </summary>
        MavCmdDoSetRoi = 201,
        /// <summary>
        /// Configure digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
        /// Param 1 - Modes: P, TV, AV, M, Etc.
        /// Param 2 - Shutter speed: Divisor number for one second.
        /// Param 3 - Aperture: F stop number.
        /// Param 4 - ISO number e.g. 80, 100, 200, Etc.
        /// Param 5 - Exposure type enumerator.
        /// Param 6 - Command Identity.
        /// Param 7 - Main engine cut-off time before camera trigger. (0 means no cut-off)
        /// MAV_CMD_DO_DIGICAM_CONFIGURE
        /// </summary>
        MavCmdDoDigicamConfigure = 202,
        /// <summary>
        /// Control digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
        /// Param 1 - Session control e.g. show/hide lens
        /// Param 2 - Zoom's absolute position
        /// Param 3 - Zooming step value to offset zoom from the current position
        /// Param 4 - Focus Locking, Unlocking or Re-locking
        /// Param 5 - Shooting Command
        /// Param 6 - Command Identity
        /// Param 7 - Test shot identifier. If set to 1, image will only be captured, but not counted towards internal frame count.
        /// MAV_CMD_DO_DIGICAM_CONTROL
        /// </summary>
        MavCmdDoDigicamControl = 203,
        /// <summary>
        /// Mission command to configure a camera or antenna mount
        /// Param 1 - Mount operation mode
        /// Param 2 - stabilize roll? (1 = yes, 0 = no)
        /// Param 3 - stabilize pitch? (1 = yes, 0 = no)
        /// Param 4 - stabilize yaw? (1 = yes, 0 = no)
        /// Param 5 - roll input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
        /// Param 6 - pitch input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
        /// Param 7 - yaw input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
        /// MAV_CMD_DO_MOUNT_CONFIGURE
        /// </summary>
        MavCmdDoMountConfigure = 204,
        /// <summary>
        /// Mission command to control a camera or antenna mount
        /// Param 1 - pitch depending on mount mode (degrees or degrees/second depending on pitch input).
        /// Param 2 - roll depending on mount mode (degrees or degrees/second depending on roll input).
        /// Param 3 - yaw depending on mount mode (degrees or degrees/second depending on yaw input).
        /// Param 4 - altitude depending on mount mode.
        /// Param 5 - latitude, set if appropriate mount mode.
        /// Param 6 - longitude, set if appropriate mount mode.
        /// Param 7 - Mount mode.
        /// MAV_CMD_DO_MOUNT_CONTROL
        /// </summary>
        MavCmdDoMountControl = 205,
        /// <summary>
        /// Mission command to set camera trigger distance for this flight. The camera is triggered each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera.
        /// Param 1 - Camera trigger distance. 0 to stop triggering.
        /// Param 2 - Camera shutter integration time. -1 or 0 to ignore
        /// Param 3 - Trigger camera once immediately. (0 = no trigger, 1 = trigger)
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_CAM_TRIGG_DIST
        /// </summary>
        MavCmdDoSetCamTriggDist = 206,
        /// <summary>
        /// Mission command to enable the geofence
        /// Param 1 - enable? (0=disable, 1=enable, 2=disable_floor_only)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_FENCE_ENABLE
        /// </summary>
        MavCmdDoFenceEnable = 207,
        /// <summary>
        /// Mission item/command to release a parachute or enable/disable auto release.
        /// Param 1 - Action
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_PARACHUTE
        /// </summary>
        MavCmdDoParachute = 208,
        /// <summary>
        /// Command to perform motor test.
        /// Param 1 - Motor instance number (from 1 to max number of motors on the vehicle).
        /// Param 2 - Throttle type (whether the Throttle Value in param3 is a percentage, PWM value, etc.)
        /// Param 3 - Throttle value.
        /// Param 4 - Timeout between tests that are run in sequence.
        /// Param 5 - Motor count. Number of motors to test in sequence: 0/1=one motor, 2= two motors, etc. The Timeout (param4) is used between tests.
        /// Param 6 - Motor test order.
        /// Param 7 - Empty
        /// MAV_CMD_DO_MOTOR_TEST
        /// </summary>
        MavCmdDoMotorTest = 209,
        /// <summary>
        /// Change to/from inverted flight.
        /// Param 1 - Inverted flight. (0=normal, 1=inverted)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_INVERTED_FLIGHT
        /// </summary>
        MavCmdDoInvertedFlight = 210,
        /// <summary>
        /// Mission command to operate a gripper.
        /// Param 1 - Gripper instance number.
        /// Param 2 - Gripper action to perform.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GRIPPER
        /// </summary>
        MavCmdDoGripper = 211,
        /// <summary>
        /// Enable/disable autotune.
        /// Param 1 - Enable (1: enable, 0:disable).
        /// Param 2 - Specify which axis are autotuned. 0 indicates autopilot default settings.
        /// Param 3 - Empty.
        /// Param 4 - Empty.
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_DO_AUTOTUNE_ENABLE
        /// </summary>
        MavCmdDoAutotuneEnable = 212,
        /// <summary>
        /// Sets a desired vehicle turn angle and speed change.
        /// Param 1 - Yaw angle to adjust steering by.
        /// Param 2 - Speed.
        /// Param 3 - Final angle. (0=absolute, 1=relative)
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_SET_YAW_SPEED
        /// </summary>
        MavCmdNavSetYawSpeed = 213,
        /// <summary>
        /// Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera.
        /// Param 1 - Camera trigger cycle time. -1 or 0 to ignore.
        /// Param 2 - Camera shutter integration time. Should be less than trigger cycle time. -1 or 0 to ignore.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL
        /// </summary>
        MavCmdDoSetCamTriggInterval = 214,
        /// <summary>
        /// Mission command to control a camera or antenna mount, using a quaternion as reference.
        /// Param 1 - quaternion param q1, w (1 in null-rotation)
        /// Param 2 - quaternion param q2, x (0 in null-rotation)
        /// Param 3 - quaternion param q3, y (0 in null-rotation)
        /// Param 4 - quaternion param q4, z (0 in null-rotation)
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_MOUNT_CONTROL_QUAT
        /// </summary>
        MavCmdDoMountControlQuat = 220,
        /// <summary>
        /// set id of master controller
        /// Param 1 - System ID
        /// Param 2 - Component ID
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GUIDED_MASTER
        /// </summary>
        MavCmdDoGuidedMaster = 221,
        /// <summary>
        /// Set limits for external control
        /// Param 1 - Timeout - maximum time that external controller will be allowed to control vehicle. 0 means no timeout.
        /// Param 2 - Altitude (MSL) min - if vehicle moves below this alt, the command will be aborted and the mission will continue. 0 means no lower altitude limit.
        /// Param 3 - Altitude (MSL) max - if vehicle moves above this alt, the command will be aborted and the mission will continue. 0 means no upper altitude limit.
        /// Param 4 - Horizontal move limit - if vehicle moves more than this distance from its location at the moment the command was executed, the command will be aborted and the mission will continue. 0 means no horizontal move limit.
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GUIDED_LIMITS
        /// </summary>
        MavCmdDoGuidedLimits = 222,
        /// <summary>
        /// Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines
        /// Param 1 - 0: Stop engine, 1:Start Engine
        /// Param 2 - 0: Warm start, 1:Cold start. Controls use of choke where applicable
        /// Param 3 - Height delay. This is for commanding engine start only after the vehicle has gained the specified height. Used in VTOL vehicles during takeoff to start engine after the aircraft is off the ground. Zero for no delay.
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_ENGINE_CONTROL
        /// </summary>
        MavCmdDoEngineControl = 223,
        /// <summary>
        /// 
        ///           Set the mission item with sequence number seq as the current item and emit MISSION_CURRENT (whether or not the mission number changed).
        ///           If a mission is currently being executed, the system will continue to this new mission item on the shortest path, skipping any intermediate mission items.
        /// 	  Note that mission jump repeat counters are not reset unless param2 is set (see MAV_CMD_DO_JUMP param2).
        /// 
        ///           This command may trigger a mission state-machine change on some systems: for example from MISSION_STATE_NOT_STARTED or MISSION_STATE_PAUSED to MISSION_STATE_ACTIVE.
        ///           If the system is in mission mode, on those systems this command might therefore start, restart or resume the mission.
        ///           If the system is not in mission mode this command must not trigger a switch to mission mode.
        /// 
        ///           The mission may be "reset" using param2.
        ///           Resetting sets jump counters to initial values (to reset counters without changing the current mission item set the param1 to `-1`).
        ///           Resetting also explicitly changes a mission state of MISSION_STATE_COMPLETE to MISSION_STATE_PAUSED or MISSION_STATE_ACTIVE, potentially allowing it to resume when it is (next) in a mission mode.
        /// 
        /// 	  The command will ACK with MAV_RESULT_FAILED if the sequence number is out of range (including if there is no mission item).
        ///         
        /// Param 1 - Mission sequence value to set. -1 for the current mission item (use to reset mission without changing current mission item).
        /// Param 2 - Resets mission. 1: true, 0: false. Resets jump counters to initial values and changes mission state "completed" to be "active" or "paused".
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_MISSION_CURRENT
        /// </summary>
        MavCmdDoSetMissionCurrent = 224,
        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_LAST
        /// </summary>
        MavCmdDoLast = 240,
        /// <summary>
        /// Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero.
        /// Param 1 - 1: gyro calibration, 3: gyro temperature calibration
        /// Param 2 - 1: magnetometer calibration
        /// Param 3 - 1: ground pressure calibration
        /// Param 4 - 1: radio RC calibration, 2: RC trim calibration
        /// Param 5 - 1: accelerometer calibration, 2: board level calibration, 3: accelerometer temperature calibration, 4: simple accelerometer calibration
        /// Param 6 - 1: APM: compass/motor interference calibration (PX4: airspeed calibration, deprecated), 2: airspeed calibration
        /// Param 7 - 1: ESC calibration, 3: barometer temperature calibration
        /// MAV_CMD_PREFLIGHT_CALIBRATION
        /// </summary>
        MavCmdPreflightCalibration = 241,
        /// <summary>
        /// Set sensor offsets. This command will be only accepted if in pre-flight mode.
        /// Param 1 - Sensor to adjust the offsets for: 0: gyros, 1: accelerometer, 2: magnetometer, 3: barometer, 4: optical flow, 5: second magnetometer, 6: third magnetometer
        /// Param 2 - X axis offset (or generic dimension 1), in the sensor's raw units
        /// Param 3 - Y axis offset (or generic dimension 2), in the sensor's raw units
        /// Param 4 - Z axis offset (or generic dimension 3), in the sensor's raw units
        /// Param 5 - Generic dimension 4, in the sensor's raw units
        /// Param 6 - Generic dimension 5, in the sensor's raw units
        /// Param 7 - Generic dimension 6, in the sensor's raw units
        /// MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS
        /// </summary>
        MavCmdPreflightSetSensorOffsets = 242,
        /// <summary>
        /// Trigger UAVCAN configuration (actuator ID assignment and direction mapping). Note that this maps to the legacy UAVCAN v0 function UAVCAN_ENUMERATE, which is intended to be executed just once during initial vehicle configuration (it is not a normal pre-flight command and has been poorly named).
        /// Param 1 - 1: Trigger actuator ID assignment and direction mapping. 0: Cancel command.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_PREFLIGHT_UAVCAN
        /// </summary>
        MavCmdPreflightUavcan = 243,
        /// <summary>
        /// Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
        /// Param 1 - Action to perform on the persistent parameter storage
        /// Param 2 - Action to perform on the persistent mission storage
        /// Param 3 - Onboard logging: 0: Ignore, 1: Start default rate logging, -1: Stop logging, > 1: logging rate (e.g. set to 1000 for 1000 Hz logging)
        /// Param 4 - Reserved
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_PREFLIGHT_STORAGE
        /// </summary>
        MavCmdPreflightStorage = 245,
        /// <summary>
        /// Request the reboot or shutdown of system components.
        /// Param 1 - 0: Do nothing for autopilot, 1: Reboot autopilot, 2: Shutdown autopilot, 3: Reboot autopilot and keep it in the bootloader until upgraded.
        /// Param 2 - 0: Do nothing for onboard computer, 1: Reboot onboard computer, 2: Shutdown onboard computer, 3: Reboot onboard computer and keep it in the bootloader until upgraded.
        /// Param 3 - 0: Do nothing for component, 1: Reboot component, 2: Shutdown component, 3: Reboot component and keep it in the bootloader until upgraded
        /// Param 4 - MAVLink Component ID targeted in param3 (0 for all components).
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - WIP: ID (e.g. camera ID -1 for all IDs)
        /// MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN
        /// </summary>
        MavCmdPreflightRebootShutdown = 246,
        /// <summary>
        /// Override current mission with command to pause mission, pause mission and move to position, continue/resume mission. When param 1 indicates that the mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in place or moves to another position.
        /// Param 1 - MAV_GOTO_DO_HOLD: pause mission and either hold or move to specified position (depending on param2), MAV_GOTO_DO_CONTINUE: resume mission.
        /// Param 2 - MAV_GOTO_HOLD_AT_CURRENT_POSITION: hold at current position, MAV_GOTO_HOLD_AT_SPECIFIED_POSITION: hold at specified position.
        /// Param 3 - Coordinate frame of hold point.
        /// Param 4 - Desired yaw angle.
        /// Param 5 - Latitude/X position.
        /// Param 6 - Longitude/Y position.
        /// Param 7 - Altitude/Z position.
        /// MAV_CMD_OVERRIDE_GOTO
        /// </summary>
        MavCmdOverrideGoto = 252,
        /// <summary>
        /// Mission command to set a Camera Auto Mount Pivoting Oblique Survey (Replaces CAM_TRIGG_DIST for this purpose). The camera is triggered each time this distance is exceeded, then the mount moves to the next position. Params 4~6 set-up the angle limits and number of positions for oblique survey, where mount-enabled vehicles automatically roll the camera between shots to emulate an oblique camera setup (providing an increased HFOV). This command can also be used to set the shutter integration time for the camera.
        /// Param 1 - Camera trigger distance. 0 to stop triggering.
        /// Param 2 - Camera shutter integration time. 0 to ignore
        /// Param 3 - The minimum interval in which the camera is capable of taking subsequent pictures repeatedly. 0 to ignore.
        /// Param 4 - Total number of roll positions at which the camera will capture photos (images captures spread evenly across the limits defined by param5).
        /// Param 5 - Angle limits that the camera can be rolled to left and right of center.
        /// Param 6 - Fixed pitch angle that the camera will hold in oblique mode if the mount is actuated in the pitch axis.
        /// Param 7 - Empty
        /// MAV_CMD_OBLIQUE_SURVEY
        /// </summary>
        MavCmdObliqueSurvey = 260,
        /// <summary>
        /// start running a mission
        /// Param 1 - first_item: the first mission item to run
        /// Param 2 - last_item:  the last mission item to run (after this item is run, the mission ends)
        /// MAV_CMD_MISSION_START
        /// </summary>
        MavCmdMissionStart = 300,
        /// <summary>
        /// Actuator testing command. This is similar to MAV_CMD_DO_MOTOR_TEST but operates on the level of output functions, i.e. it is possible to test Motor1 independent from which output it is configured on. Autopilots typically refuse this command while armed.
        /// Param 1 - Output value: 1 means maximum positive output, 0 to center servos or minimum motor thrust (expected to spin), -1 for maximum negative (if not supported by the motors, i.e. motor is not reversible, smaller than 0 maps to NaN). And NaN maps to disarmed (stop the motors).
        /// Param 2 - Timeout after which the test command expires and the output is restored to the previous value. A timeout has to be set for safety reasons. A timeout of 0 means to restore the previous value immediately.
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - Actuator Output function
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_ACTUATOR_TEST
        /// </summary>
        MavCmdActuatorTest = 310,
        /// <summary>
        /// Actuator configuration command.
        /// Param 1 - Actuator configuration action
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - Actuator Output function
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_CONFIGURE_ACTUATOR
        /// </summary>
        MavCmdConfigureActuator = 311,
        /// <summary>
        /// Arms / Disarms a component
        /// Param 1 - 0: disarm, 1: arm
        /// Param 2 - 0: arm-disarm unless prevented by safety checks (i.e. when landed), 21196: force arming/disarming (e.g. allow arming to override preflight checks and disarming in flight)
        /// MAV_CMD_COMPONENT_ARM_DISARM
        /// </summary>
        MavCmdComponentArmDisarm = 400,
        /// <summary>
        /// Instructs a target system to run pre-arm checks.
        ///           This allows preflight checks to be run on demand, which may be useful on systems that normally run them at low rate, or which do not trigger checks when the armable state might have changed.
        ///           This command should return MAV_RESULT_ACCEPTED if it will run the checks.
        ///           The results of the checks are usually then reported in SYS_STATUS messages (this is system-specific).
        ///           The command should return MAV_RESULT_TEMPORARILY_REJECTED if the system is already armed.
        ///         
        /// MAV_CMD_RUN_PREARM_CHECKS
        /// </summary>
        MavCmdRunPrearmChecks = 401,
        /// <summary>
        /// Turns illuminators ON/OFF. An illuminator is a light source that is used for lighting up dark areas external to the system: e.g. a torch or searchlight (as opposed to a light source for illuminating the system itself, e.g. an indicator light).
        /// Param 1 - 0: Illuminators OFF, 1: Illuminators ON
        /// MAV_CMD_ILLUMINATOR_ON_OFF
        /// </summary>
        MavCmdIlluminatorOnOff = 405,
        /// <summary>
        /// Request the home position from the vehicle.
        /// 	  The vehicle will ACK the command and then emit the HOME_POSITION message.
        /// Param 1 - Reserved
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_GET_HOME_POSITION
        /// </summary>
        MavCmdGetHomePosition = 410,
        /// <summary>
        /// Inject artificial failure for testing purposes. Note that autopilots should implement an additional protection before accepting this command such as a specific param setting.
        /// Param 1 - The unit which is affected by the failure.
        /// Param 2 - The type how the failure manifests itself.
        /// Param 3 - Instance affected by failure (0 to signal all).
        /// MAV_CMD_INJECT_FAILURE
        /// </summary>
        MavCmdInjectFailure = 420,
        /// <summary>
        /// Starts receiver pairing.
        /// Param 1 - 0:Spektrum.
        /// Param 2 - RC type.
        /// MAV_CMD_START_RX_PAIR
        /// </summary>
        MavCmdStartRxPair = 500,
        /// <summary>
        /// 
        ///           Request the interval between messages for a particular MAVLink message ID.
        ///           The receiver should ACK the command and then emit its response in a MESSAGE_INTERVAL message.
        ///         
        /// Param 1 - The MAVLink message ID
        /// MAV_CMD_GET_MESSAGE_INTERVAL
        /// </summary>
        MavCmdGetMessageInterval = 510,
        /// <summary>
        /// Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.
        /// Param 1 - The MAVLink message ID
        /// Param 2 - The interval between two messages. -1: disable. 0: request default rate (which may be zero).
        /// Param 7 - Target address of message stream (if message has target address fields). 0: Flight-stack default (recommended), 1: address of requestor, 2: broadcast.
        /// MAV_CMD_SET_MESSAGE_INTERVAL
        /// </summary>
        MavCmdSetMessageInterval = 511,
        /// <summary>
        /// Request the target system(s) emit a single instance of a specified message (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL).
        /// Param 1 - The MAVLink message ID of the requested message.
        /// Param 2 - Use for index ID, if required. Otherwise, the use of this parameter (if any) must be defined in the requested message. By default assumed not used (0).
        /// Param 3 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 4 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 5 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 6 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 7 - Target address for requested message (if message has target address fields). 0: Flight-stack default, 1: address of requestor, 2: broadcast.
        /// MAV_CMD_REQUEST_MESSAGE
        /// </summary>
        MavCmdRequestMessage = 512,
        /// <summary>
        /// Request MAVLink protocol version compatibility. All receivers should ACK the command and then emit their capabilities in an PROTOCOL_VERSION message
        /// Param 1 - 1: Request supported protocol versions by all nodes on the network
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_PROTOCOL_VERSION
        /// </summary>
        MavCmdRequestProtocolVersion = 519,
        /// <summary>
        /// Request autopilot capabilities. The receiver should ACK the command and then emit its capabilities in an AUTOPILOT_VERSION message
        /// Param 1 - 1: Request autopilot version
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES
        /// </summary>
        MavCmdRequestAutopilotCapabilities = 520,
        /// <summary>
        /// Request camera information (CAMERA_INFORMATION).
        /// Param 1 - 0: No action 1: Request camera capabilities
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_CAMERA_INFORMATION
        /// </summary>
        MavCmdRequestCameraInformation = 521,
        /// <summary>
        /// Request camera settings (CAMERA_SETTINGS).
        /// Param 1 - 0: No Action 1: Request camera settings
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_CAMERA_SETTINGS
        /// </summary>
        MavCmdRequestCameraSettings = 522,
        /// <summary>
        /// Request storage information (STORAGE_INFORMATION). Use the command's target_component to target a specific component's storage.
        /// Param 1 - Storage ID (0 for all, 1 for first, 2 for second, etc.)
        /// Param 2 - 0: No Action 1: Request storage information
        /// Param 3 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_STORAGE_INFORMATION
        /// </summary>
        MavCmdRequestStorageInformation = 525,
        /// <summary>
        /// Format a storage medium. Once format is complete, a STORAGE_INFORMATION message is sent. Use the command's target_component to target a specific component's storage.
        /// Param 1 - Storage ID (1 for first, 2 for second, etc.)
        /// Param 2 - Format storage (and reset image log). 0: No action 1: Format storage
        /// Param 3 - Reset Image LoggerFactory (without formatting storage medium). This will reset CAMERA_CAPTURE_STATUS.image_count and CAMERA_IMAGE_CAPTURED.image_index. 0: No action 1: Reset Image LoggerFactory
        /// Param 4 - Reserved (all remaining params)
        /// MAV_CMD_STORAGE_FORMAT
        /// </summary>
        MavCmdStorageFormat = 526,
        /// <summary>
        /// Request camera capture status (CAMERA_CAPTURE_STATUS)
        /// Param 1 - 0: No Action 1: Request camera capture status
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS
        /// </summary>
        MavCmdRequestCameraCaptureStatus = 527,
        /// <summary>
        /// Request flight information (FLIGHT_INFORMATION)
        /// Param 1 - 1: Request flight information
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_FLIGHT_INFORMATION
        /// </summary>
        MavCmdRequestFlightInformation = 528,
        /// <summary>
        /// Reset all camera settings to Factory Default
        /// Param 1 - 0: No Action 1: Reset all settings
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_RESET_CAMERA_SETTINGS
        /// </summary>
        MavCmdResetCameraSettings = 529,
        /// <summary>
        /// Set camera running mode. Use NaN for reserved values. GCS will send a MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the camera supports video streaming.
        /// Param 1 - Reserved (Set to 0)
        /// Param 2 - Camera mode
        /// Param 3 - 
        /// Param 4 - 
        /// Param 7 - 
        /// MAV_CMD_SET_CAMERA_MODE
        /// </summary>
        MavCmdSetCameraMode = 530,
        /// <summary>
        /// Set camera zoom. Camera must respond with a CAMERA_SETTINGS message (on success).
        /// Param 1 - Zoom type
        /// Param 2 - Zoom value. The range of valid values depend on the zoom type.
        /// Param 3 - 
        /// Param 4 - 
        /// Param 7 - 
        /// MAV_CMD_SET_CAMERA_ZOOM
        /// </summary>
        MavCmdSetCameraZoom = 531,
        /// <summary>
        /// Set camera focus. Camera must respond with a CAMERA_SETTINGS message (on success).
        /// Param 1 - Focus type
        /// Param 2 - Focus value
        /// Param 3 - 
        /// Param 4 - 
        /// Param 7 - 
        /// MAV_CMD_SET_CAMERA_FOCUS
        /// </summary>
        MavCmdSetCameraFocus = 532,
        /// <summary>
        /// Set that a particular storage is the preferred location for saving photos, videos, and/or other media (e.g. to set that an SD card is used for storing videos).
        ///           There can only be one preferred save location for each particular media type: setting a media usage flag will clear/reset that same flag if set on any other storage.
        ///           If no flag is set the system should use its default storage.
        ///           A target system can choose to always use default storage, in which case it should ACK the command with MAV_RESULT_UNSUPPORTED.
        ///           A target system can choose to not allow a particular storage to be set as preferred storage, in which case it should ACK the command with MAV_RESULT_DENIED.
        /// Param 1 - Storage ID (1 for first, 2 for second, etc.)
        /// Param 2 - Usage flags
        /// MAV_CMD_SET_STORAGE_USAGE
        /// </summary>
        MavCmdSetStorageUsage = 533,
        /// <summary>
        /// Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.
        /// Param 1 - Tag.
        /// MAV_CMD_JUMP_TAG
        /// </summary>
        MavCmdJumpTag = 600,
        /// <summary>
        /// Jump to the matching tag in the mission list. Repeat this action for the specified number of times. A mission should contain a single matching tag for each jump. If this is not the case then a jump to a missing tag should complete the mission, and a jump where there are multiple matching tags should always select the one with the lowest mission sequence number.
        /// Param 1 - Target tag to jump to.
        /// Param 2 - Repeat count.
        /// MAV_CMD_DO_JUMP_TAG
        /// </summary>
        MavCmdDoJumpTag = 601,
        /// <summary>
        /// Set gimbal manager pitch/yaw setpoints (low rate command). It is possible to set combinations of the values below. E.g. an angle as well as a desired angular rate can be used to get to this angle at a certain angular rate, or an angular rate only will result in continuous turning. NaN is to be used to signal unset. Note: only the gimbal manager will react to this command - it will be ignored by a gimbal device. Use GIMBAL_MANAGER_SET_PITCHYAW if you need to stream pitch/yaw setpoints at higher rate. 
        /// Param 1 - Pitch angle (positive to pitch up, relative to vehicle for FOLLOW mode, relative to world horizon for LOCK mode).
        /// Param 2 - Yaw angle (positive to yaw to the right, relative to vehicle for FOLLOW mode, absolute to North for LOCK mode).
        /// Param 3 - Pitch rate (positive to pitch up).
        /// Param 4 - Yaw rate (positive to yaw to the right).
        /// Param 5 - Gimbal manager flags to use.
        /// Param 7 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW
        /// </summary>
        MavCmdDoGimbalManagerPitchyaw = 1000,
        /// <summary>
        /// Gimbal configuration to set which sysid/compid is in primary and secondary control.
        /// Param 1 - Sysid for primary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 2 - Compid for primary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 3 - Sysid for secondary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 4 - Compid for secondary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 7 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
        /// </summary>
        MavCmdDoGimbalManagerConfigure = 1001,
        /// <summary>
        /// Start image capture sequence. CAMERA_IMAGE_CAPTURED must be emitted after each capture.
        /// 
        ///           Param1 (id) may be used to specify the target camera: 0: all cameras, 1 to 6: autopilot-connected cameras, 7-255: MAVLink camera component ID.
        ///           It is needed in order to target specific cameras connected to the autopilot, or specific sensors in a multi-sensor camera (neither of which have a distinct MAVLink component ID).
        ///           It is also needed to specify the target camera in missions.
        /// 
        ///           When used in a mission, an autopilot should execute the MAV_CMD for a specified local camera (param1 = 1-6), or resend it as a command if it is intended for a MAVLink camera (param1 = 7 - 255), setting the command's target_component as the param1 value (and setting param1 in the command to zero).
        ///           If the param1 is 0 the autopilot should do both.
        ///           
        ///           When sent in a command the target MAVLink address is set using target_component.
        ///           If addressed specifically to an autopilot: param1 should be used in the same way as it is for missions (though command should NACK with MAV_RESULT_DENIED if a specified local camera does not exist).
        ///           If addressed to a MAVLink camera, param 1 can be used to address all cameras (0), or to separately address 1 to 7 individual sensors. Other values should be NACKed with MAV_RESULT_DENIED.
        ///           If the command is broadcast (target_component is 0) then param 1 should be set to 0 (any other value should be NACKED with MAV_RESULT_DENIED). An autopilot would trigger any local cameras and forward the command to all channels.
        ///         
        /// Param 1 - Target camera ID. 7 to 255: MAVLink camera component id. 1 to 6 for cameras that don't have a distinct component id (such as autopilot-attached cameras). 0: all cameras. This is used to specifically target autopilot-connected cameras or individual sensors in a multi-sensor MAVLink camera. It is also used to target specific cameras when the MAV_CMD is used in a mission
        /// Param 2 - Desired elapsed time between two consecutive pictures (in seconds). Minimum values depend on hardware (typically greater than 2 seconds).
        /// Param 3 - Total number of images to capture. 0 to capture forever/until MAV_CMD_IMAGE_STOP_CAPTURE.
        /// Param 4 - Capture sequence number starting from 1. This is only valid for single-capture (param3 == 1), otherwise set to 0. Increment the capture ID for each capture command to prevent double captures when a command is re-transmitted.
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_IMAGE_START_CAPTURE
        /// </summary>
        MavCmdImageStartCapture = 2000,
        /// <summary>
        /// Stop image capture sequence.
        ///         
        ///           Param1 (id) may be used to specify the target camera: 0: all cameras, 1 to 6: autopilot-connected cameras, 7-255: MAVLink camera component ID.
        ///           It is needed in order to target specific cameras connected to the autopilot, or specific sensors in a multi-sensor camera (neither of which have a distinct MAVLink component ID).
        ///           It is also needed to specify the target camera in missions.
        /// 
        ///           When used in a mission, an autopilot should execute the MAV_CMD for a specified local camera (param1 = 1-6), or resend it as a command if it is intended for a MAVLink camera (param1 = 7 - 255), setting the command's target_component as the param1 value (and setting param1 in the command to zero).
        ///           If the param1 is 0 the autopilot should do both.
        /// 
        ///           When sent in a command the target MAVLink address is set using target_component.
        ///           If addressed specifically to an autopilot: param1 should be used in the same way as it is for missions (though command should NACK with MAV_RESULT_DENIED if a specified local camera does not exist).
        ///           If addressed to a MAVLink camera, param1 can be used to address all cameras (0), or to separately address 1 to 7 individual sensors. Other values should be NACKed with MAV_RESULT_DENIED.
        ///           If the command is broadcast (target_component is 0) then param 1 should be set to 0 (any other value should be NACKED with MAV_RESULT_DENIED). An autopilot would trigger any local cameras and forward the command to all channels.
        ///         
        /// Param 1 - Target camera ID. 7 to 255: MAVLink camera component id. 1 to 6 for cameras that don't have a distinct component id (such as autopilot-attached cameras). 0: all cameras. This is used to specifically target autopilot-connected cameras or individual sensors in a multi-sensor MAVLink camera. It is also used to target specific cameras when the MAV_CMD is used in a mission
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_IMAGE_STOP_CAPTURE
        /// </summary>
        MavCmdImageStopCapture = 2001,
        /// <summary>
        /// Re-request a CAMERA_IMAGE_CAPTURED message.
        /// Param 1 - Sequence number for missing CAMERA_IMAGE_CAPTURED message
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE
        /// </summary>
        MavCmdRequestCameraImageCapture = 2002,
        /// <summary>
        /// Enable or disable on-board camera triggering system.
        /// Param 1 - Trigger enable/disable (0 for disable, 1 for start), -1 to ignore
        /// Param 2 - 1 to reset the trigger sequence, -1 or 0 to ignore
        /// Param 3 - 1 to pause triggering, but without switching the camera off or retracting it. -1 to ignore
        /// MAV_CMD_DO_TRIGGER_CONTROL
        /// </summary>
        MavCmdDoTriggerControl = 2003,
        /// <summary>
        /// If the camera supports point visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking.
        /// Param 1 - Point to track x value (normalized 0..1, 0 is left, 1 is right).
        /// Param 2 - Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
        /// Param 3 - Point radius (normalized 0..1, 0 is image left, 1 is image right).
        /// MAV_CMD_CAMERA_TRACK_POINT
        /// </summary>
        MavCmdCameraTrackPoint = 2004,
        /// <summary>
        /// If the camera supports rectangle visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking.
        /// Param 1 - Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
        /// Param 2 - Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
        /// Param 3 - Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
        /// Param 4 - Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
        /// MAV_CMD_CAMERA_TRACK_RECTANGLE
        /// </summary>
        MavCmdCameraTrackRectangle = 2005,
        /// <summary>
        /// Stops ongoing tracking.
        /// MAV_CMD_CAMERA_STOP_TRACKING
        /// </summary>
        MavCmdCameraStopTracking = 2010,
        /// <summary>
        /// Starts video capture (recording).
        /// Param 1 - Video Stream ID (0 for all streams)
        /// Param 2 - Frequency CAMERA_CAPTURE_STATUS messages should be sent while recording (0 for no messages, otherwise frequency)
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_VIDEO_START_CAPTURE
        /// </summary>
        MavCmdVideoStartCapture = 2500,
        /// <summary>
        /// Stop the current video capture (recording).
        /// Param 1 - Video Stream ID (0 for all streams)
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_VIDEO_STOP_CAPTURE
        /// </summary>
        MavCmdVideoStopCapture = 2501,
        /// <summary>
        /// Start video streaming
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_VIDEO_START_STREAMING
        /// </summary>
        MavCmdVideoStartStreaming = 2502,
        /// <summary>
        /// Stop the given video stream
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_VIDEO_STOP_STREAMING
        /// </summary>
        MavCmdVideoStopStreaming = 2503,
        /// <summary>
        /// Request video stream information (VIDEO_STREAM_INFORMATION)
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION
        /// </summary>
        MavCmdRequestVideoStreamInformation = 2504,
        /// <summary>
        /// Request video stream status (VIDEO_STREAM_STATUS)
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_REQUEST_VIDEO_STREAM_STATUS
        /// </summary>
        MavCmdRequestVideoStreamStatus = 2505,
        /// <summary>
        /// Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)
        /// Param 1 - Format: 0: ULog
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_LOGGING_START
        /// </summary>
        MavCmdLoggingStart = 2510,
        /// <summary>
        /// Request to stop streaming log data over MAVLink
        /// Param 1 - Reserved (set to 0)
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_LOGGING_STOP
        /// </summary>
        MavCmdLoggingStop = 2511,
        /// <summary>
        /// 
        /// Param 1 - Landing gear ID (default: 0, -1 for all)
        /// Param 2 - Landing gear position (Down: 0, Up: 1, NaN for no change)
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_AIRFRAME_CONFIGURATION
        /// </summary>
        MavCmdAirframeConfiguration = 2520,
        /// <summary>
        /// Request to start/stop transmitting over the high latency telemetry
        /// Param 1 - Control transmission over high latency telemetry (0: stop, 1: start)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONTROL_HIGH_LATENCY
        /// </summary>
        MavCmdControlHighLatency = 2600,
        /// <summary>
        /// Create a panorama at the current position
        /// Param 1 - Viewing angle horizontal of the panorama (+- 0.5 the total angle)
        /// Param 2 - Viewing angle vertical of panorama.
        /// Param 3 - Speed of the horizontal rotation.
        /// Param 4 - Speed of the vertical rotation.
        /// MAV_CMD_PANORAMA_CREATE
        /// </summary>
        MavCmdPanoramaCreate = 2800,
        /// <summary>
        /// Request VTOL transition
        /// Param 1 - The target VTOL state. For normal transitions, only MAV_VTOL_STATE_MC and MAV_VTOL_STATE_FW can be used.
        /// Param 2 - Force immediate transition to the specified MAV_VTOL_STATE. 1: Force immediate, 0: normal transition. Can be used, for example, to trigger an emergency "Quadchute". Caution: Can be dangerous/damage vehicle, depending on autopilot implementation of this command.
        /// MAV_CMD_DO_VTOL_TRANSITION
        /// </summary>
        MavCmdDoVtolTransition = 3000,
        /// <summary>
        /// Request authorization to arm the vehicle to a external entity, the arm authorizer is responsible to request all data that is needs from the vehicle before authorize or deny the request.
        /// 		If approved the COMMAND_ACK message progress field should be set with period of time that this authorization is valid in seconds.
        /// 		If the authorization is denied COMMAND_ACK.result_param2 should be set with one of the reasons in ARM_AUTH_DENIED_REASON.
        ///         
        /// Param 1 - Vehicle system id, this way ground station can request arm authorization on behalf of any vehicle
        /// MAV_CMD_ARM_AUTHORIZATION_REQUEST
        /// </summary>
        MavCmdArmAuthorizationRequest = 3001,
        /// <summary>
        /// This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocities along all three axes.
        ///                   
        /// MAV_CMD_SET_GUIDED_SUBMODE_STANDARD
        /// </summary>
        MavCmdSetGuidedSubmodeStandard = 4000,
        /// <summary>
        /// This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.
        ///                   
        /// Param 1 - Radius of desired circle in CIRCLE_MODE
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Target latitude of center of circle in CIRCLE_MODE
        /// Param 6 - Target longitude of center of circle in CIRCLE_MODE
        /// MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE
        /// </summary>
        MavCmdSetGuidedSubmodeCircle = 4001,
        /// <summary>
        /// Delay mission state machine until gate has been reached.
        /// Param 1 - Geometry: 0: orthogonal to path between previous and next waypoint.
        /// Param 2 - Altitude: 0: ignore altitude
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_CONDITION_GATE
        /// </summary>
        MavCmdConditionGate = 4501,
        /// <summary>
        /// Fence return point (there can only be one such point in a geofence definition). If rally points are supported they should be used instead.
        /// Param 1 - Reserved
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_FENCE_RETURN_POINT
        /// </summary>
        MavCmdNavFenceReturnPoint = 5000,
        /// <summary>
        /// Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required.
        ///         
        /// Param 1 - Polygon vertex count
        /// Param 2 - Vehicle must be inside ALL inclusion zones in a single group, vehicle must be inside at least one group, must be the same for all points in each polygon
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION
        /// </summary>
        MavCmdNavFencePolygonVertexInclusion = 5001,
        /// <summary>
        /// Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required.
        ///         
        /// Param 1 - Polygon vertex count
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION
        /// </summary>
        MavCmdNavFencePolygonVertexExclusion = 5002,
        /// <summary>
        /// Circular fence area. The vehicle must stay inside this area.
        ///         
        /// Param 1 - Radius.
        /// Param 2 - Vehicle must be inside ALL inclusion zones in a single group, vehicle must be inside at least one group
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION
        /// </summary>
        MavCmdNavFenceCircleInclusion = 5003,
        /// <summary>
        /// Circular fence area. The vehicle must stay outside this area.
        ///         
        /// Param 1 - Radius.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION
        /// </summary>
        MavCmdNavFenceCircleExclusion = 5004,
        /// <summary>
        /// Rally point. You can have multiple rally points defined.
        ///         
        /// Param 1 - Reserved
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_RALLY_POINT
        /// </summary>
        MavCmdNavRallyPoint = 5100,
        /// <summary>
        /// Commands the vehicle to respond with a sequence of messages UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note that some of the response messages can be lost, which the receiver can detect easily by checking whether every received UAVCAN_NODE_STATUS has a matching message UAVCAN_NODE_INFO received earlier; if not, this command should be sent again in order to request re-transmission of the node information messages.
        /// Param 1 - Reserved (set to 0)
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_UAVCAN_GET_NODE_INFO
        /// </summary>
        MavCmdUavcanGetNodeInfo = 5200,
        /// <summary>
        /// Trigger the start of an ADSB-out IDENT. This should only be used when requested to do so by an Air Traffic Controller in controlled airspace. This starts the IDENT which is then typically held for 18 seconds by the hardware per the Mode A, C, and S transponder spec.
        /// Param 1 - Reserved (set to 0)
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_DO_ADSB_OUT_IDENT
        /// </summary>
        MavCmdDoAdsbOutIdent = 10001,
        /// <summary>
        /// Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.
        /// Param 1 - Operation mode. 0: prepare single payload deploy (overwriting previous requests), but do not execute it. 1: execute payload deploy immediately (rejecting further deploy commands during execution, but allowing abort). 2: add payload deploy to existing deployment list.
        /// Param 2 - Desired approach vector in compass heading. A negative value indicates the system can define the approach vector at will.
        /// Param 3 - Desired ground speed at release time. This can be overridden by the airframe in case it needs to meet minimum airspeed. A negative value indicates the system can define the ground speed at will.
        /// Param 4 - Minimum altitude clearance to the release position. A negative value indicates the system can define the clearance at will.
        /// Param 5 - Latitude.
        /// Param 6 - Longitude.
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_PAYLOAD_PREPARE_DEPLOY
        /// </summary>
        MavCmdPayloadPrepareDeploy = 30001,
        /// <summary>
        /// Control the payload deployment.
        /// Param 1 - Operation mode. 0: Abort deployment, continue normal mission. 1: switch to payload deployment mode. 100: delete first payload deployment request. 101: delete all payload deployment requests.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_PAYLOAD_CONTROL_DEPLOY
        /// </summary>
        MavCmdPayloadControlDeploy = 30002,
        /// <summary>
        /// Magnetometer calibration based on provided known yaw. This allows for fast calibration using WMM field tables in the vehicle, given only the known yaw of the vehicle. If Latitude and longitude are both zero then use the current vehicle location.
        /// Param 1 - Yaw of vehicle in earth frame.
        /// Param 2 - CompassMask, 0 for all.
        /// Param 3 - Latitude.
        /// Param 4 - Longitude.
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_FIXED_MAG_CAL_YAW
        /// </summary>
        MavCmdFixedMagCalYaw = 42006,
        /// <summary>
        /// Command to operate winch.
        /// Param 1 - Winch instance number.
        /// Param 2 - Action to perform.
        /// Param 3 - Length of line to release (negative to wind).
        /// Param 4 - Release rate (negative to wind).
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_DO_WINCH
        /// </summary>
        MavCmdDoWinch = 42600,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_1
        /// </summary>
        MavCmdWaypointUser1 = 31000,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_2
        /// </summary>
        MavCmdWaypointUser2 = 31001,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_3
        /// </summary>
        MavCmdWaypointUser3 = 31002,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_4
        /// </summary>
        MavCmdWaypointUser4 = 31003,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_5
        /// </summary>
        MavCmdWaypointUser5 = 31004,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_1
        /// </summary>
        MavCmdSpatialUser1 = 31005,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_2
        /// </summary>
        MavCmdSpatialUser2 = 31006,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_3
        /// </summary>
        MavCmdSpatialUser3 = 31007,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_4
        /// </summary>
        MavCmdSpatialUser4 = 31008,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_5
        /// </summary>
        MavCmdSpatialUser5 = 31009,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_1
        /// </summary>
        MavCmdUser1 = 31010,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_2
        /// </summary>
        MavCmdUser2 = 31011,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_3
        /// </summary>
        MavCmdUser3 = 31012,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_4
        /// </summary>
        MavCmdUser4 = 31013,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_5
        /// </summary>
        MavCmdUser5 = 31014,
        /// <summary>
        /// Request forwarding of CAN packets from the given CAN bus to this component. CAN Frames are sent using CAN_FRAME and CANFD_FRAME messages
        /// Param 1 - Bus number (0 to disable forwarding, 1 for first bus, 2 for 2nd bus, 3 for 3rd bus).
        /// Param 2 - Empty.
        /// Param 3 - Empty.
        /// Param 4 - Empty.
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_CAN_FORWARD
        /// </summary>
        MavCmdCanForward = 32000,
    }
    public static class MavCmdHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(16);
            yield return converter(17);
            yield return converter(18);
            yield return converter(19);
            yield return converter(20);
            yield return converter(21);
            yield return converter(22);
            yield return converter(23);
            yield return converter(24);
            yield return converter(25);
            yield return converter(30);
            yield return converter(31);
            yield return converter(32);
            yield return converter(33);
            yield return converter(34);
            yield return converter(80);
            yield return converter(81);
            yield return converter(82);
            yield return converter(84);
            yield return converter(85);
            yield return converter(92);
            yield return converter(93);
            yield return converter(94);
            yield return converter(95);
            yield return converter(112);
            yield return converter(113);
            yield return converter(114);
            yield return converter(115);
            yield return converter(159);
            yield return converter(176);
            yield return converter(177);
            yield return converter(178);
            yield return converter(179);
            yield return converter(180);
            yield return converter(181);
            yield return converter(182);
            yield return converter(183);
            yield return converter(184);
            yield return converter(185);
            yield return converter(186);
            yield return converter(187);
            yield return converter(189);
            yield return converter(190);
            yield return converter(191);
            yield return converter(192);
            yield return converter(193);
            yield return converter(194);
            yield return converter(195);
            yield return converter(196);
            yield return converter(197);
            yield return converter(198);
            yield return converter(200);
            yield return converter(201);
            yield return converter(202);
            yield return converter(203);
            yield return converter(204);
            yield return converter(205);
            yield return converter(206);
            yield return converter(207);
            yield return converter(208);
            yield return converter(209);
            yield return converter(210);
            yield return converter(211);
            yield return converter(212);
            yield return converter(213);
            yield return converter(214);
            yield return converter(220);
            yield return converter(221);
            yield return converter(222);
            yield return converter(223);
            yield return converter(224);
            yield return converter(240);
            yield return converter(241);
            yield return converter(242);
            yield return converter(243);
            yield return converter(245);
            yield return converter(246);
            yield return converter(252);
            yield return converter(260);
            yield return converter(300);
            yield return converter(310);
            yield return converter(311);
            yield return converter(400);
            yield return converter(401);
            yield return converter(405);
            yield return converter(410);
            yield return converter(420);
            yield return converter(500);
            yield return converter(510);
            yield return converter(511);
            yield return converter(512);
            yield return converter(519);
            yield return converter(520);
            yield return converter(521);
            yield return converter(522);
            yield return converter(525);
            yield return converter(526);
            yield return converter(527);
            yield return converter(528);
            yield return converter(529);
            yield return converter(530);
            yield return converter(531);
            yield return converter(532);
            yield return converter(533);
            yield return converter(600);
            yield return converter(601);
            yield return converter(1000);
            yield return converter(1001);
            yield return converter(2000);
            yield return converter(2001);
            yield return converter(2002);
            yield return converter(2003);
            yield return converter(2004);
            yield return converter(2005);
            yield return converter(2010);
            yield return converter(2500);
            yield return converter(2501);
            yield return converter(2502);
            yield return converter(2503);
            yield return converter(2504);
            yield return converter(2505);
            yield return converter(2510);
            yield return converter(2511);
            yield return converter(2520);
            yield return converter(2600);
            yield return converter(2800);
            yield return converter(3000);
            yield return converter(3001);
            yield return converter(4000);
            yield return converter(4001);
            yield return converter(4501);
            yield return converter(5000);
            yield return converter(5001);
            yield return converter(5002);
            yield return converter(5003);
            yield return converter(5004);
            yield return converter(5100);
            yield return converter(5200);
            yield return converter(10001);
            yield return converter(30001);
            yield return converter(30002);
            yield return converter(42006);
            yield return converter(42600);
            yield return converter(31000);
            yield return converter(31001);
            yield return converter(31002);
            yield return converter(31003);
            yield return converter(31004);
            yield return converter(31005);
            yield return converter(31006);
            yield return converter(31007);
            yield return converter(31008);
            yield return converter(31009);
            yield return converter(31010);
            yield return converter(31011);
            yield return converter(31012);
            yield return converter(31013);
            yield return converter(31014);
            yield return converter(32000);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(16),"MAV_CMD_NAV_WAYPOINT");
            yield return new EnumValue<T>(converter(17),"MAV_CMD_NAV_LOITER_UNLIM");
            yield return new EnumValue<T>(converter(18),"MAV_CMD_NAV_LOITER_TURNS");
            yield return new EnumValue<T>(converter(19),"MAV_CMD_NAV_LOITER_TIME");
            yield return new EnumValue<T>(converter(20),"MAV_CMD_NAV_RETURN_TO_LAUNCH");
            yield return new EnumValue<T>(converter(21),"MAV_CMD_NAV_LAND");
            yield return new EnumValue<T>(converter(22),"MAV_CMD_NAV_TAKEOFF");
            yield return new EnumValue<T>(converter(23),"MAV_CMD_NAV_LAND_LOCAL");
            yield return new EnumValue<T>(converter(24),"MAV_CMD_NAV_TAKEOFF_LOCAL");
            yield return new EnumValue<T>(converter(25),"MAV_CMD_NAV_FOLLOW");
            yield return new EnumValue<T>(converter(30),"MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT");
            yield return new EnumValue<T>(converter(31),"MAV_CMD_NAV_LOITER_TO_ALT");
            yield return new EnumValue<T>(converter(32),"MAV_CMD_DO_FOLLOW");
            yield return new EnumValue<T>(converter(33),"MAV_CMD_DO_FOLLOW_REPOSITION");
            yield return new EnumValue<T>(converter(34),"MAV_CMD_DO_ORBIT");
            yield return new EnumValue<T>(converter(80),"MAV_CMD_NAV_ROI");
            yield return new EnumValue<T>(converter(81),"MAV_CMD_NAV_PATHPLANNING");
            yield return new EnumValue<T>(converter(82),"MAV_CMD_NAV_SPLINE_WAYPOINT");
            yield return new EnumValue<T>(converter(84),"MAV_CMD_NAV_VTOL_TAKEOFF");
            yield return new EnumValue<T>(converter(85),"MAV_CMD_NAV_VTOL_LAND");
            yield return new EnumValue<T>(converter(92),"MAV_CMD_NAV_GUIDED_ENABLE");
            yield return new EnumValue<T>(converter(93),"MAV_CMD_NAV_DELAY");
            yield return new EnumValue<T>(converter(94),"MAV_CMD_NAV_PAYLOAD_PLACE");
            yield return new EnumValue<T>(converter(95),"MAV_CMD_NAV_LAST");
            yield return new EnumValue<T>(converter(112),"MAV_CMD_CONDITION_DELAY");
            yield return new EnumValue<T>(converter(113),"MAV_CMD_CONDITION_CHANGE_ALT");
            yield return new EnumValue<T>(converter(114),"MAV_CMD_CONDITION_DISTANCE");
            yield return new EnumValue<T>(converter(115),"MAV_CMD_CONDITION_YAW");
            yield return new EnumValue<T>(converter(159),"MAV_CMD_CONDITION_LAST");
            yield return new EnumValue<T>(converter(176),"MAV_CMD_DO_SET_MODE");
            yield return new EnumValue<T>(converter(177),"MAV_CMD_DO_JUMP");
            yield return new EnumValue<T>(converter(178),"MAV_CMD_DO_CHANGE_SPEED");
            yield return new EnumValue<T>(converter(179),"MAV_CMD_DO_SET_HOME");
            yield return new EnumValue<T>(converter(180),"MAV_CMD_DO_SET_PARAMETER");
            yield return new EnumValue<T>(converter(181),"MAV_CMD_DO_SET_RELAY");
            yield return new EnumValue<T>(converter(182),"MAV_CMD_DO_REPEAT_RELAY");
            yield return new EnumValue<T>(converter(183),"MAV_CMD_DO_SET_SERVO");
            yield return new EnumValue<T>(converter(184),"MAV_CMD_DO_REPEAT_SERVO");
            yield return new EnumValue<T>(converter(185),"MAV_CMD_DO_FLIGHTTERMINATION");
            yield return new EnumValue<T>(converter(186),"MAV_CMD_DO_CHANGE_ALTITUDE");
            yield return new EnumValue<T>(converter(187),"MAV_CMD_DO_SET_ACTUATOR");
            yield return new EnumValue<T>(converter(189),"MAV_CMD_DO_LAND_START");
            yield return new EnumValue<T>(converter(190),"MAV_CMD_DO_RALLY_LAND");
            yield return new EnumValue<T>(converter(191),"MAV_CMD_DO_GO_AROUND");
            yield return new EnumValue<T>(converter(192),"MAV_CMD_DO_REPOSITION");
            yield return new EnumValue<T>(converter(193),"MAV_CMD_DO_PAUSE_CONTINUE");
            yield return new EnumValue<T>(converter(194),"MAV_CMD_DO_SET_REVERSE");
            yield return new EnumValue<T>(converter(195),"MAV_CMD_DO_SET_ROI_LOCATION");
            yield return new EnumValue<T>(converter(196),"MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET");
            yield return new EnumValue<T>(converter(197),"MAV_CMD_DO_SET_ROI_NONE");
            yield return new EnumValue<T>(converter(198),"MAV_CMD_DO_SET_ROI_SYSID");
            yield return new EnumValue<T>(converter(200),"MAV_CMD_DO_CONTROL_VIDEO");
            yield return new EnumValue<T>(converter(201),"MAV_CMD_DO_SET_ROI");
            yield return new EnumValue<T>(converter(202),"MAV_CMD_DO_DIGICAM_CONFIGURE");
            yield return new EnumValue<T>(converter(203),"MAV_CMD_DO_DIGICAM_CONTROL");
            yield return new EnumValue<T>(converter(204),"MAV_CMD_DO_MOUNT_CONFIGURE");
            yield return new EnumValue<T>(converter(205),"MAV_CMD_DO_MOUNT_CONTROL");
            yield return new EnumValue<T>(converter(206),"MAV_CMD_DO_SET_CAM_TRIGG_DIST");
            yield return new EnumValue<T>(converter(207),"MAV_CMD_DO_FENCE_ENABLE");
            yield return new EnumValue<T>(converter(208),"MAV_CMD_DO_PARACHUTE");
            yield return new EnumValue<T>(converter(209),"MAV_CMD_DO_MOTOR_TEST");
            yield return new EnumValue<T>(converter(210),"MAV_CMD_DO_INVERTED_FLIGHT");
            yield return new EnumValue<T>(converter(211),"MAV_CMD_DO_GRIPPER");
            yield return new EnumValue<T>(converter(212),"MAV_CMD_DO_AUTOTUNE_ENABLE");
            yield return new EnumValue<T>(converter(213),"MAV_CMD_NAV_SET_YAW_SPEED");
            yield return new EnumValue<T>(converter(214),"MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL");
            yield return new EnumValue<T>(converter(220),"MAV_CMD_DO_MOUNT_CONTROL_QUAT");
            yield return new EnumValue<T>(converter(221),"MAV_CMD_DO_GUIDED_MASTER");
            yield return new EnumValue<T>(converter(222),"MAV_CMD_DO_GUIDED_LIMITS");
            yield return new EnumValue<T>(converter(223),"MAV_CMD_DO_ENGINE_CONTROL");
            yield return new EnumValue<T>(converter(224),"MAV_CMD_DO_SET_MISSION_CURRENT");
            yield return new EnumValue<T>(converter(240),"MAV_CMD_DO_LAST");
            yield return new EnumValue<T>(converter(241),"MAV_CMD_PREFLIGHT_CALIBRATION");
            yield return new EnumValue<T>(converter(242),"MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS");
            yield return new EnumValue<T>(converter(243),"MAV_CMD_PREFLIGHT_UAVCAN");
            yield return new EnumValue<T>(converter(245),"MAV_CMD_PREFLIGHT_STORAGE");
            yield return new EnumValue<T>(converter(246),"MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN");
            yield return new EnumValue<T>(converter(252),"MAV_CMD_OVERRIDE_GOTO");
            yield return new EnumValue<T>(converter(260),"MAV_CMD_OBLIQUE_SURVEY");
            yield return new EnumValue<T>(converter(300),"MAV_CMD_MISSION_START");
            yield return new EnumValue<T>(converter(310),"MAV_CMD_ACTUATOR_TEST");
            yield return new EnumValue<T>(converter(311),"MAV_CMD_CONFIGURE_ACTUATOR");
            yield return new EnumValue<T>(converter(400),"MAV_CMD_COMPONENT_ARM_DISARM");
            yield return new EnumValue<T>(converter(401),"MAV_CMD_RUN_PREARM_CHECKS");
            yield return new EnumValue<T>(converter(405),"MAV_CMD_ILLUMINATOR_ON_OFF");
            yield return new EnumValue<T>(converter(410),"MAV_CMD_GET_HOME_POSITION");
            yield return new EnumValue<T>(converter(420),"MAV_CMD_INJECT_FAILURE");
            yield return new EnumValue<T>(converter(500),"MAV_CMD_START_RX_PAIR");
            yield return new EnumValue<T>(converter(510),"MAV_CMD_GET_MESSAGE_INTERVAL");
            yield return new EnumValue<T>(converter(511),"MAV_CMD_SET_MESSAGE_INTERVAL");
            yield return new EnumValue<T>(converter(512),"MAV_CMD_REQUEST_MESSAGE");
            yield return new EnumValue<T>(converter(519),"MAV_CMD_REQUEST_PROTOCOL_VERSION");
            yield return new EnumValue<T>(converter(520),"MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES");
            yield return new EnumValue<T>(converter(521),"MAV_CMD_REQUEST_CAMERA_INFORMATION");
            yield return new EnumValue<T>(converter(522),"MAV_CMD_REQUEST_CAMERA_SETTINGS");
            yield return new EnumValue<T>(converter(525),"MAV_CMD_REQUEST_STORAGE_INFORMATION");
            yield return new EnumValue<T>(converter(526),"MAV_CMD_STORAGE_FORMAT");
            yield return new EnumValue<T>(converter(527),"MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS");
            yield return new EnumValue<T>(converter(528),"MAV_CMD_REQUEST_FLIGHT_INFORMATION");
            yield return new EnumValue<T>(converter(529),"MAV_CMD_RESET_CAMERA_SETTINGS");
            yield return new EnumValue<T>(converter(530),"MAV_CMD_SET_CAMERA_MODE");
            yield return new EnumValue<T>(converter(531),"MAV_CMD_SET_CAMERA_ZOOM");
            yield return new EnumValue<T>(converter(532),"MAV_CMD_SET_CAMERA_FOCUS");
            yield return new EnumValue<T>(converter(533),"MAV_CMD_SET_STORAGE_USAGE");
            yield return new EnumValue<T>(converter(600),"MAV_CMD_JUMP_TAG");
            yield return new EnumValue<T>(converter(601),"MAV_CMD_DO_JUMP_TAG");
            yield return new EnumValue<T>(converter(1000),"MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW");
            yield return new EnumValue<T>(converter(1001),"MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE");
            yield return new EnumValue<T>(converter(2000),"MAV_CMD_IMAGE_START_CAPTURE");
            yield return new EnumValue<T>(converter(2001),"MAV_CMD_IMAGE_STOP_CAPTURE");
            yield return new EnumValue<T>(converter(2002),"MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE");
            yield return new EnumValue<T>(converter(2003),"MAV_CMD_DO_TRIGGER_CONTROL");
            yield return new EnumValue<T>(converter(2004),"MAV_CMD_CAMERA_TRACK_POINT");
            yield return new EnumValue<T>(converter(2005),"MAV_CMD_CAMERA_TRACK_RECTANGLE");
            yield return new EnumValue<T>(converter(2010),"MAV_CMD_CAMERA_STOP_TRACKING");
            yield return new EnumValue<T>(converter(2500),"MAV_CMD_VIDEO_START_CAPTURE");
            yield return new EnumValue<T>(converter(2501),"MAV_CMD_VIDEO_STOP_CAPTURE");
            yield return new EnumValue<T>(converter(2502),"MAV_CMD_VIDEO_START_STREAMING");
            yield return new EnumValue<T>(converter(2503),"MAV_CMD_VIDEO_STOP_STREAMING");
            yield return new EnumValue<T>(converter(2504),"MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION");
            yield return new EnumValue<T>(converter(2505),"MAV_CMD_REQUEST_VIDEO_STREAM_STATUS");
            yield return new EnumValue<T>(converter(2510),"MAV_CMD_LOGGING_START");
            yield return new EnumValue<T>(converter(2511),"MAV_CMD_LOGGING_STOP");
            yield return new EnumValue<T>(converter(2520),"MAV_CMD_AIRFRAME_CONFIGURATION");
            yield return new EnumValue<T>(converter(2600),"MAV_CMD_CONTROL_HIGH_LATENCY");
            yield return new EnumValue<T>(converter(2800),"MAV_CMD_PANORAMA_CREATE");
            yield return new EnumValue<T>(converter(3000),"MAV_CMD_DO_VTOL_TRANSITION");
            yield return new EnumValue<T>(converter(3001),"MAV_CMD_ARM_AUTHORIZATION_REQUEST");
            yield return new EnumValue<T>(converter(4000),"MAV_CMD_SET_GUIDED_SUBMODE_STANDARD");
            yield return new EnumValue<T>(converter(4001),"MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE");
            yield return new EnumValue<T>(converter(4501),"MAV_CMD_CONDITION_GATE");
            yield return new EnumValue<T>(converter(5000),"MAV_CMD_NAV_FENCE_RETURN_POINT");
            yield return new EnumValue<T>(converter(5001),"MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION");
            yield return new EnumValue<T>(converter(5002),"MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION");
            yield return new EnumValue<T>(converter(5003),"MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION");
            yield return new EnumValue<T>(converter(5004),"MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION");
            yield return new EnumValue<T>(converter(5100),"MAV_CMD_NAV_RALLY_POINT");
            yield return new EnumValue<T>(converter(5200),"MAV_CMD_UAVCAN_GET_NODE_INFO");
            yield return new EnumValue<T>(converter(10001),"MAV_CMD_DO_ADSB_OUT_IDENT");
            yield return new EnumValue<T>(converter(30001),"MAV_CMD_PAYLOAD_PREPARE_DEPLOY");
            yield return new EnumValue<T>(converter(30002),"MAV_CMD_PAYLOAD_CONTROL_DEPLOY");
            yield return new EnumValue<T>(converter(42006),"MAV_CMD_FIXED_MAG_CAL_YAW");
            yield return new EnumValue<T>(converter(42600),"MAV_CMD_DO_WINCH");
            yield return new EnumValue<T>(converter(31000),"MAV_CMD_WAYPOINT_USER_1");
            yield return new EnumValue<T>(converter(31001),"MAV_CMD_WAYPOINT_USER_2");
            yield return new EnumValue<T>(converter(31002),"MAV_CMD_WAYPOINT_USER_3");
            yield return new EnumValue<T>(converter(31003),"MAV_CMD_WAYPOINT_USER_4");
            yield return new EnumValue<T>(converter(31004),"MAV_CMD_WAYPOINT_USER_5");
            yield return new EnumValue<T>(converter(31005),"MAV_CMD_SPATIAL_USER_1");
            yield return new EnumValue<T>(converter(31006),"MAV_CMD_SPATIAL_USER_2");
            yield return new EnumValue<T>(converter(31007),"MAV_CMD_SPATIAL_USER_3");
            yield return new EnumValue<T>(converter(31008),"MAV_CMD_SPATIAL_USER_4");
            yield return new EnumValue<T>(converter(31009),"MAV_CMD_SPATIAL_USER_5");
            yield return new EnumValue<T>(converter(31010),"MAV_CMD_USER_1");
            yield return new EnumValue<T>(converter(31011),"MAV_CMD_USER_2");
            yield return new EnumValue<T>(converter(31012),"MAV_CMD_USER_3");
            yield return new EnumValue<T>(converter(31013),"MAV_CMD_USER_4");
            yield return new EnumValue<T>(converter(31014),"MAV_CMD_USER_5");
            yield return new EnumValue<T>(converter(32000),"MAV_CMD_CAN_FORWARD");
        }
    }
    /// <summary>
    /// A data stream is not a fixed set of messages, but rather a
    ///      recommendation to the autopilot software. Individual autopilots may or may not obey
    ///      the recommended messages.
    ///  MAV_DATA_STREAM
    /// </summary>
    public enum MavDataStream : ulong
    {
        /// <summary>
        /// Enable all data streams
        /// MAV_DATA_STREAM_ALL
        /// </summary>
        MavDataStreamAll = 0,
        /// <summary>
        /// Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
        /// MAV_DATA_STREAM_RAW_SENSORS
        /// </summary>
        MavDataStreamRawSensors = 1,
        /// <summary>
        /// Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
        /// MAV_DATA_STREAM_EXTENDED_STATUS
        /// </summary>
        MavDataStreamExtendedStatus = 2,
        /// <summary>
        /// Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
        /// MAV_DATA_STREAM_RC_CHANNELS
        /// </summary>
        MavDataStreamRcChannels = 3,
        /// <summary>
        /// Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.
        /// MAV_DATA_STREAM_RAW_CONTROLLER
        /// </summary>
        MavDataStreamRawController = 4,
        /// <summary>
        /// Enable LOCAL_POSITION, GLOBAL_POSITION_INT messages.
        /// MAV_DATA_STREAM_POSITION
        /// </summary>
        MavDataStreamPosition = 6,
        /// <summary>
        /// Dependent on the autopilot
        /// MAV_DATA_STREAM_EXTRA1
        /// </summary>
        MavDataStreamExtra1 = 10,
        /// <summary>
        /// Dependent on the autopilot
        /// MAV_DATA_STREAM_EXTRA2
        /// </summary>
        MavDataStreamExtra2 = 11,
        /// <summary>
        /// Dependent on the autopilot
        /// MAV_DATA_STREAM_EXTRA3
        /// </summary>
        MavDataStreamExtra3 = 12,
    }
    public static class MavDataStreamHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(6);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_DATA_STREAM_ALL");
            yield return new EnumValue<T>(converter(1),"MAV_DATA_STREAM_RAW_SENSORS");
            yield return new EnumValue<T>(converter(2),"MAV_DATA_STREAM_EXTENDED_STATUS");
            yield return new EnumValue<T>(converter(3),"MAV_DATA_STREAM_RC_CHANNELS");
            yield return new EnumValue<T>(converter(4),"MAV_DATA_STREAM_RAW_CONTROLLER");
            yield return new EnumValue<T>(converter(6),"MAV_DATA_STREAM_POSITION");
            yield return new EnumValue<T>(converter(10),"MAV_DATA_STREAM_EXTRA1");
            yield return new EnumValue<T>(converter(11),"MAV_DATA_STREAM_EXTRA2");
            yield return new EnumValue<T>(converter(12),"MAV_DATA_STREAM_EXTRA3");
        }
    }
    /// <summary>
    /// The ROI (region of interest) for the vehicle. This can be
    ///                 be used by the vehicle for camera/vehicle attitude alignment (see
    ///                 MAV_CMD_NAV_ROI).
    ///  MAV_ROI
    /// </summary>
    public enum MavRoi : ulong
    {
        /// <summary>
        /// No region of interest.
        /// MAV_ROI_NONE
        /// </summary>
        MavRoiNone = 0,
        /// <summary>
        /// Point toward next waypoint, with optional pitch/roll/yaw offset.
        /// MAV_ROI_WPNEXT
        /// </summary>
        MavRoiWpnext = 1,
        /// <summary>
        /// Point toward given waypoint.
        /// MAV_ROI_WPINDEX
        /// </summary>
        MavRoiWpindex = 2,
        /// <summary>
        /// Point toward fixed location.
        /// MAV_ROI_LOCATION
        /// </summary>
        MavRoiLocation = 3,
        /// <summary>
        /// Point toward of given id.
        /// MAV_ROI_TARGET
        /// </summary>
        MavRoiTarget = 4,
    }
    public static class MavRoiHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ROI_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_ROI_WPNEXT");
            yield return new EnumValue<T>(converter(2),"MAV_ROI_WPINDEX");
            yield return new EnumValue<T>(converter(3),"MAV_ROI_LOCATION");
            yield return new EnumValue<T>(converter(4),"MAV_ROI_TARGET");
        }
    }
    /// <summary>
    /// Specifies the datatype of a MAVLink parameter.
    ///  MAV_PARAM_TYPE
    /// </summary>
    public enum MavParamType : ulong
    {
        /// <summary>
        /// 8-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT8
        /// </summary>
        MavParamTypeUint8 = 1,
        /// <summary>
        /// 8-bit signed integer
        /// MAV_PARAM_TYPE_INT8
        /// </summary>
        MavParamTypeInt8 = 2,
        /// <summary>
        /// 16-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT16
        /// </summary>
        MavParamTypeUint16 = 3,
        /// <summary>
        /// 16-bit signed integer
        /// MAV_PARAM_TYPE_INT16
        /// </summary>
        MavParamTypeInt16 = 4,
        /// <summary>
        /// 32-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT32
        /// </summary>
        MavParamTypeUint32 = 5,
        /// <summary>
        /// 32-bit signed integer
        /// MAV_PARAM_TYPE_INT32
        /// </summary>
        MavParamTypeInt32 = 6,
        /// <summary>
        /// 64-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT64
        /// </summary>
        MavParamTypeUint64 = 7,
        /// <summary>
        /// 64-bit signed integer
        /// MAV_PARAM_TYPE_INT64
        /// </summary>
        MavParamTypeInt64 = 8,
        /// <summary>
        /// 32-bit floating-point
        /// MAV_PARAM_TYPE_REAL32
        /// </summary>
        MavParamTypeReal32 = 9,
        /// <summary>
        /// 64-bit floating-point
        /// MAV_PARAM_TYPE_REAL64
        /// </summary>
        MavParamTypeReal64 = 10,
    }
    public static class MavParamTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_PARAM_TYPE_UINT8");
            yield return new EnumValue<T>(converter(2),"MAV_PARAM_TYPE_INT8");
            yield return new EnumValue<T>(converter(3),"MAV_PARAM_TYPE_UINT16");
            yield return new EnumValue<T>(converter(4),"MAV_PARAM_TYPE_INT16");
            yield return new EnumValue<T>(converter(5),"MAV_PARAM_TYPE_UINT32");
            yield return new EnumValue<T>(converter(6),"MAV_PARAM_TYPE_INT32");
            yield return new EnumValue<T>(converter(7),"MAV_PARAM_TYPE_UINT64");
            yield return new EnumValue<T>(converter(8),"MAV_PARAM_TYPE_INT64");
            yield return new EnumValue<T>(converter(9),"MAV_PARAM_TYPE_REAL32");
            yield return new EnumValue<T>(converter(10),"MAV_PARAM_TYPE_REAL64");
        }
    }
    /// <summary>
    /// Specifies the datatype of a MAVLink extended parameter.
    ///  MAV_PARAM_EXT_TYPE
    /// </summary>
    public enum MavParamExtType : ulong
    {
        /// <summary>
        /// 8-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT8
        /// </summary>
        MavParamExtTypeUint8 = 1,
        /// <summary>
        /// 8-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT8
        /// </summary>
        MavParamExtTypeInt8 = 2,
        /// <summary>
        /// 16-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT16
        /// </summary>
        MavParamExtTypeUint16 = 3,
        /// <summary>
        /// 16-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT16
        /// </summary>
        MavParamExtTypeInt16 = 4,
        /// <summary>
        /// 32-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT32
        /// </summary>
        MavParamExtTypeUint32 = 5,
        /// <summary>
        /// 32-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT32
        /// </summary>
        MavParamExtTypeInt32 = 6,
        /// <summary>
        /// 64-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT64
        /// </summary>
        MavParamExtTypeUint64 = 7,
        /// <summary>
        /// 64-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT64
        /// </summary>
        MavParamExtTypeInt64 = 8,
        /// <summary>
        /// 32-bit floating-point
        /// MAV_PARAM_EXT_TYPE_REAL32
        /// </summary>
        MavParamExtTypeReal32 = 9,
        /// <summary>
        /// 64-bit floating-point
        /// MAV_PARAM_EXT_TYPE_REAL64
        /// </summary>
        MavParamExtTypeReal64 = 10,
        /// <summary>
        /// Custom Type
        /// MAV_PARAM_EXT_TYPE_CUSTOM
        /// </summary>
        MavParamExtTypeCustom = 11,
    }
    public static class MavParamExtTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_PARAM_EXT_TYPE_UINT8");
            yield return new EnumValue<T>(converter(2),"MAV_PARAM_EXT_TYPE_INT8");
            yield return new EnumValue<T>(converter(3),"MAV_PARAM_EXT_TYPE_UINT16");
            yield return new EnumValue<T>(converter(4),"MAV_PARAM_EXT_TYPE_INT16");
            yield return new EnumValue<T>(converter(5),"MAV_PARAM_EXT_TYPE_UINT32");
            yield return new EnumValue<T>(converter(6),"MAV_PARAM_EXT_TYPE_INT32");
            yield return new EnumValue<T>(converter(7),"MAV_PARAM_EXT_TYPE_UINT64");
            yield return new EnumValue<T>(converter(8),"MAV_PARAM_EXT_TYPE_INT64");
            yield return new EnumValue<T>(converter(9),"MAV_PARAM_EXT_TYPE_REAL32");
            yield return new EnumValue<T>(converter(10),"MAV_PARAM_EXT_TYPE_REAL64");
            yield return new EnumValue<T>(converter(11),"MAV_PARAM_EXT_TYPE_CUSTOM");
        }
    }
    /// <summary>
    /// Result from a MAVLink command (MAV_CMD)
    ///  MAV_RESULT
    /// </summary>
    public enum MavResult : ulong
    {
        /// <summary>
        /// Command is valid (is supported and has valid parameters), and was executed.
        /// MAV_RESULT_ACCEPTED
        /// </summary>
        MavResultAccepted = 0,
        /// <summary>
        /// Command is valid, but cannot be executed at this time. This is used to indicate a problem that should be fixed just by waiting (e.g. a state machine is busy, can't arm because have not got GPS lock, etc.). Retrying later should work.
        /// MAV_RESULT_TEMPORARILY_REJECTED
        /// </summary>
        MavResultTemporarilyRejected = 1,
        /// <summary>
        /// Command is invalid (is supported but has invalid parameters). Retrying same command and parameters will not work.
        /// MAV_RESULT_DENIED
        /// </summary>
        MavResultDenied = 2,
        /// <summary>
        /// Command is not supported (unknown).
        /// MAV_RESULT_UNSUPPORTED
        /// </summary>
        MavResultUnsupported = 3,
        /// <summary>
        /// Command is valid, but execution has failed. This is used to indicate any non-temporary or unexpected problem, i.e. any problem that must be fixed before the command can succeed/be retried. For example, attempting to write a file when out of memory, attempting to arm when sensors are not calibrated, etc.
        /// MAV_RESULT_FAILED
        /// </summary>
        MavResultFailed = 4,
        /// <summary>
        /// Command is valid and is being executed. This will be followed by further progress updates, i.e. the component may send further COMMAND_ACK messages with result MAV_RESULT_IN_PROGRESS (at a rate decided by the implementation), and must terminate by sending a COMMAND_ACK message with final result of the operation. The COMMAND_ACK.progress field can be used to indicate the progress of the operation.
        /// MAV_RESULT_IN_PROGRESS
        /// </summary>
        MavResultInProgress = 5,
        /// <summary>
        /// Command has been cancelled (as a result of receiving a COMMAND_CANCEL message).
        /// MAV_RESULT_CANCELLED
        /// </summary>
        MavResultCancelled = 6,
        /// <summary>
        /// Command is valid, but it is only accepted when sent as a COMMAND_LONG (as it has float values for params 5 and 6).
        /// MAV_RESULT_COMMAND_LONG_ONLY
        /// </summary>
        MavResultCommandLongOnly = 7,
        /// <summary>
        /// Command is valid, but it is only accepted when sent as a COMMAND_INT (as it encodes a location in params 5, 6 and 7, and hence requires a reference MAV_FRAME).
        /// MAV_RESULT_COMMAND_INT_ONLY
        /// </summary>
        MavResultCommandIntOnly = 8,
        /// <summary>
        /// Command is invalid because a frame is required and the specified frame is not supported.
        /// MAV_RESULT_COMMAND_UNSUPPORTED_MAV_FRAME
        /// </summary>
        MavResultCommandUnsupportedMavFrame = 9,
    }
    public static class MavResultHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_RESULT_ACCEPTED");
            yield return new EnumValue<T>(converter(1),"MAV_RESULT_TEMPORARILY_REJECTED");
            yield return new EnumValue<T>(converter(2),"MAV_RESULT_DENIED");
            yield return new EnumValue<T>(converter(3),"MAV_RESULT_UNSUPPORTED");
            yield return new EnumValue<T>(converter(4),"MAV_RESULT_FAILED");
            yield return new EnumValue<T>(converter(5),"MAV_RESULT_IN_PROGRESS");
            yield return new EnumValue<T>(converter(6),"MAV_RESULT_CANCELLED");
            yield return new EnumValue<T>(converter(7),"MAV_RESULT_COMMAND_LONG_ONLY");
            yield return new EnumValue<T>(converter(8),"MAV_RESULT_COMMAND_INT_ONLY");
            yield return new EnumValue<T>(converter(9),"MAV_RESULT_COMMAND_UNSUPPORTED_MAV_FRAME");
        }
    }
    /// <summary>
    /// Result of mission operation (in a MISSION_ACK message).
    ///  MAV_MISSION_RESULT
    /// </summary>
    public enum MavMissionResult : ulong
    {
        /// <summary>
        /// mission accepted OK
        /// MAV_MISSION_ACCEPTED
        /// </summary>
        MavMissionAccepted = 0,
        /// <summary>
        /// Generic error / not accepting mission commands at all right now.
        /// MAV_MISSION_ERROR
        /// </summary>
        MavMissionError = 1,
        /// <summary>
        /// Coordinate frame is not supported.
        /// MAV_MISSION_UNSUPPORTED_FRAME
        /// </summary>
        MavMissionUnsupportedFrame = 2,
        /// <summary>
        /// Command is not supported.
        /// MAV_MISSION_UNSUPPORTED
        /// </summary>
        MavMissionUnsupported = 3,
        /// <summary>
        /// Mission items exceed storage space.
        /// MAV_MISSION_NO_SPACE
        /// </summary>
        MavMissionNoSpace = 4,
        /// <summary>
        /// One of the parameters has an invalid value.
        /// MAV_MISSION_INVALID
        /// </summary>
        MavMissionInvalid = 5,
        /// <summary>
        /// param1 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM1
        /// </summary>
        MavMissionInvalidParam1 = 6,
        /// <summary>
        /// param2 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM2
        /// </summary>
        MavMissionInvalidParam2 = 7,
        /// <summary>
        /// param3 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM3
        /// </summary>
        MavMissionInvalidParam3 = 8,
        /// <summary>
        /// param4 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM4
        /// </summary>
        MavMissionInvalidParam4 = 9,
        /// <summary>
        /// x / param5 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM5_X
        /// </summary>
        MavMissionInvalidParam5X = 10,
        /// <summary>
        /// y / param6 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM6_Y
        /// </summary>
        MavMissionInvalidParam6Y = 11,
        /// <summary>
        /// z / param7 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM7
        /// </summary>
        MavMissionInvalidParam7 = 12,
        /// <summary>
        /// Mission item received out of sequence
        /// MAV_MISSION_INVALID_SEQUENCE
        /// </summary>
        MavMissionInvalidSequence = 13,
        /// <summary>
        /// Not accepting any mission commands from this communication partner.
        /// MAV_MISSION_DENIED
        /// </summary>
        MavMissionDenied = 14,
        /// <summary>
        /// Current mission operation cancelled (e.g. mission upload, mission download).
        /// MAV_MISSION_OPERATION_CANCELLED
        /// </summary>
        MavMissionOperationCancelled = 15,
    }
    public static class MavMissionResultHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_MISSION_ACCEPTED");
            yield return new EnumValue<T>(converter(1),"MAV_MISSION_ERROR");
            yield return new EnumValue<T>(converter(2),"MAV_MISSION_UNSUPPORTED_FRAME");
            yield return new EnumValue<T>(converter(3),"MAV_MISSION_UNSUPPORTED");
            yield return new EnumValue<T>(converter(4),"MAV_MISSION_NO_SPACE");
            yield return new EnumValue<T>(converter(5),"MAV_MISSION_INVALID");
            yield return new EnumValue<T>(converter(6),"MAV_MISSION_INVALID_PARAM1");
            yield return new EnumValue<T>(converter(7),"MAV_MISSION_INVALID_PARAM2");
            yield return new EnumValue<T>(converter(8),"MAV_MISSION_INVALID_PARAM3");
            yield return new EnumValue<T>(converter(9),"MAV_MISSION_INVALID_PARAM4");
            yield return new EnumValue<T>(converter(10),"MAV_MISSION_INVALID_PARAM5_X");
            yield return new EnumValue<T>(converter(11),"MAV_MISSION_INVALID_PARAM6_Y");
            yield return new EnumValue<T>(converter(12),"MAV_MISSION_INVALID_PARAM7");
            yield return new EnumValue<T>(converter(13),"MAV_MISSION_INVALID_SEQUENCE");
            yield return new EnumValue<T>(converter(14),"MAV_MISSION_DENIED");
            yield return new EnumValue<T>(converter(15),"MAV_MISSION_OPERATION_CANCELLED");
        }
    }
    /// <summary>
    /// Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.
    ///  MAV_SEVERITY
    /// </summary>
    public enum MavSeverity : ulong
    {
        /// <summary>
        /// System is unusable. This is a "panic" condition.
        /// MAV_SEVERITY_EMERGENCY
        /// </summary>
        MavSeverityEmergency = 0,
        /// <summary>
        /// Action should be taken immediately. Indicates error in non-critical systems.
        /// MAV_SEVERITY_ALERT
        /// </summary>
        MavSeverityAlert = 1,
        /// <summary>
        /// Action must be taken immediately. Indicates failure in a primary system.
        /// MAV_SEVERITY_CRITICAL
        /// </summary>
        MavSeverityCritical = 2,
        /// <summary>
        /// Indicates an error in secondary/redundant systems.
        /// MAV_SEVERITY_ERROR
        /// </summary>
        MavSeverityError = 3,
        /// <summary>
        /// Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.
        /// MAV_SEVERITY_WARNING
        /// </summary>
        MavSeverityWarning = 4,
        /// <summary>
        /// An unusual event has occurred, though not an error condition. This should be investigated for the root cause.
        /// MAV_SEVERITY_NOTICE
        /// </summary>
        MavSeverityNotice = 5,
        /// <summary>
        /// Normal operational messages. Useful for logging. No action is required for these messages.
        /// MAV_SEVERITY_INFO
        /// </summary>
        MavSeverityInfo = 6,
        /// <summary>
        /// Useful non-operational messages that can assist in debugging. These should not occur during normal operation.
        /// MAV_SEVERITY_DEBUG
        /// </summary>
        MavSeverityDebug = 7,
    }
    public static class MavSeverityHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_SEVERITY_EMERGENCY");
            yield return new EnumValue<T>(converter(1),"MAV_SEVERITY_ALERT");
            yield return new EnumValue<T>(converter(2),"MAV_SEVERITY_CRITICAL");
            yield return new EnumValue<T>(converter(3),"MAV_SEVERITY_ERROR");
            yield return new EnumValue<T>(converter(4),"MAV_SEVERITY_WARNING");
            yield return new EnumValue<T>(converter(5),"MAV_SEVERITY_NOTICE");
            yield return new EnumValue<T>(converter(6),"MAV_SEVERITY_INFO");
            yield return new EnumValue<T>(converter(7),"MAV_SEVERITY_DEBUG");
        }
    }
    /// <summary>
    /// Power supply status flags (bitmask)
    ///  MAV_POWER_STATUS
    /// </summary>
    public enum MavPowerStatus : ulong
    {
        /// <summary>
        /// main brick power supply valid
        /// MAV_POWER_STATUS_BRICK_VALID
        /// </summary>
        MavPowerStatusBrickValid = 1,
        /// <summary>
        /// main servo power supply valid for FMU
        /// MAV_POWER_STATUS_SERVO_VALID
        /// </summary>
        MavPowerStatusServoValid = 2,
        /// <summary>
        /// USB power is connected
        /// MAV_POWER_STATUS_USB_CONNECTED
        /// </summary>
        MavPowerStatusUsbConnected = 4,
        /// <summary>
        /// peripheral supply is in over-current state
        /// MAV_POWER_STATUS_PERIPH_OVERCURRENT
        /// </summary>
        MavPowerStatusPeriphOvercurrent = 8,
        /// <summary>
        /// hi-power peripheral supply is in over-current state
        /// MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT
        /// </summary>
        MavPowerStatusPeriphHipowerOvercurrent = 16,
        /// <summary>
        /// Power status has changed since boot
        /// MAV_POWER_STATUS_CHANGED
        /// </summary>
        MavPowerStatusChanged = 32,
    }
    public static class MavPowerStatusHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_POWER_STATUS_BRICK_VALID");
            yield return new EnumValue<T>(converter(2),"MAV_POWER_STATUS_SERVO_VALID");
            yield return new EnumValue<T>(converter(4),"MAV_POWER_STATUS_USB_CONNECTED");
            yield return new EnumValue<T>(converter(8),"MAV_POWER_STATUS_PERIPH_OVERCURRENT");
            yield return new EnumValue<T>(converter(16),"MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT");
            yield return new EnumValue<T>(converter(32),"MAV_POWER_STATUS_CHANGED");
        }
    }
    /// <summary>
    /// SERIAL_CONTROL device types
    ///  SERIAL_CONTROL_DEV
    /// </summary>
    public enum SerialControlDev : ulong
    {
        /// <summary>
        /// First telemetry port
        /// SERIAL_CONTROL_DEV_TELEM1
        /// </summary>
        SerialControlDevTelem1 = 0,
        /// <summary>
        /// Second telemetry port
        /// SERIAL_CONTROL_DEV_TELEM2
        /// </summary>
        SerialControlDevTelem2 = 1,
        /// <summary>
        /// First GPS port
        /// SERIAL_CONTROL_DEV_GPS1
        /// </summary>
        SerialControlDevGps1 = 2,
        /// <summary>
        /// Second GPS port
        /// SERIAL_CONTROL_DEV_GPS2
        /// </summary>
        SerialControlDevGps2 = 3,
        /// <summary>
        /// system shell
        /// SERIAL_CONTROL_DEV_SHELL
        /// </summary>
        SerialControlDevShell = 10,
        /// <summary>
        /// SERIAL0
        /// SERIAL_CONTROL_SERIAL0
        /// </summary>
        SerialControlSerial0 = 100,
        /// <summary>
        /// SERIAL1
        /// SERIAL_CONTROL_SERIAL1
        /// </summary>
        SerialControlSerial1 = 101,
        /// <summary>
        /// SERIAL2
        /// SERIAL_CONTROL_SERIAL2
        /// </summary>
        SerialControlSerial2 = 102,
        /// <summary>
        /// SERIAL3
        /// SERIAL_CONTROL_SERIAL3
        /// </summary>
        SerialControlSerial3 = 103,
        /// <summary>
        /// SERIAL4
        /// SERIAL_CONTROL_SERIAL4
        /// </summary>
        SerialControlSerial4 = 104,
        /// <summary>
        /// SERIAL5
        /// SERIAL_CONTROL_SERIAL5
        /// </summary>
        SerialControlSerial5 = 105,
        /// <summary>
        /// SERIAL6
        /// SERIAL_CONTROL_SERIAL6
        /// </summary>
        SerialControlSerial6 = 106,
        /// <summary>
        /// SERIAL7
        /// SERIAL_CONTROL_SERIAL7
        /// </summary>
        SerialControlSerial7 = 107,
        /// <summary>
        /// SERIAL8
        /// SERIAL_CONTROL_SERIAL8
        /// </summary>
        SerialControlSerial8 = 108,
        /// <summary>
        /// SERIAL9
        /// SERIAL_CONTROL_SERIAL9
        /// </summary>
        SerialControlSerial9 = 109,
    }
    public static class SerialControlDevHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(10);
            yield return converter(100);
            yield return converter(101);
            yield return converter(102);
            yield return converter(103);
            yield return converter(104);
            yield return converter(105);
            yield return converter(106);
            yield return converter(107);
            yield return converter(108);
            yield return converter(109);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"SERIAL_CONTROL_DEV_TELEM1");
            yield return new EnumValue<T>(converter(1),"SERIAL_CONTROL_DEV_TELEM2");
            yield return new EnumValue<T>(converter(2),"SERIAL_CONTROL_DEV_GPS1");
            yield return new EnumValue<T>(converter(3),"SERIAL_CONTROL_DEV_GPS2");
            yield return new EnumValue<T>(converter(10),"SERIAL_CONTROL_DEV_SHELL");
            yield return new EnumValue<T>(converter(100),"SERIAL_CONTROL_SERIAL0");
            yield return new EnumValue<T>(converter(101),"SERIAL_CONTROL_SERIAL1");
            yield return new EnumValue<T>(converter(102),"SERIAL_CONTROL_SERIAL2");
            yield return new EnumValue<T>(converter(103),"SERIAL_CONTROL_SERIAL3");
            yield return new EnumValue<T>(converter(104),"SERIAL_CONTROL_SERIAL4");
            yield return new EnumValue<T>(converter(105),"SERIAL_CONTROL_SERIAL5");
            yield return new EnumValue<T>(converter(106),"SERIAL_CONTROL_SERIAL6");
            yield return new EnumValue<T>(converter(107),"SERIAL_CONTROL_SERIAL7");
            yield return new EnumValue<T>(converter(108),"SERIAL_CONTROL_SERIAL8");
            yield return new EnumValue<T>(converter(109),"SERIAL_CONTROL_SERIAL9");
        }
    }
    /// <summary>
    /// SERIAL_CONTROL flags (bitmask)
    ///  SERIAL_CONTROL_FLAG
    /// </summary>
    public enum SerialControlFlag : ulong
    {
        /// <summary>
        /// Set if this is a reply
        /// SERIAL_CONTROL_FLAG_REPLY
        /// </summary>
        SerialControlFlagReply = 1,
        /// <summary>
        /// Set if the sender wants the receiver to send a response as another SERIAL_CONTROL message
        /// SERIAL_CONTROL_FLAG_RESPOND
        /// </summary>
        SerialControlFlagRespond = 2,
        /// <summary>
        /// Set if access to the serial port should be removed from whatever driver is currently using it, giving exclusive access to the SERIAL_CONTROL protocol. The port can be handed back by sending a request without this flag set
        /// SERIAL_CONTROL_FLAG_EXCLUSIVE
        /// </summary>
        SerialControlFlagExclusive = 4,
        /// <summary>
        /// Block on writes to the serial port
        /// SERIAL_CONTROL_FLAG_BLOCKING
        /// </summary>
        SerialControlFlagBlocking = 8,
        /// <summary>
        /// Send multiple replies until port is drained
        /// SERIAL_CONTROL_FLAG_MULTI
        /// </summary>
        SerialControlFlagMulti = 16,
    }
    public static class SerialControlFlagHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"SERIAL_CONTROL_FLAG_REPLY");
            yield return new EnumValue<T>(converter(2),"SERIAL_CONTROL_FLAG_RESPOND");
            yield return new EnumValue<T>(converter(4),"SERIAL_CONTROL_FLAG_EXCLUSIVE");
            yield return new EnumValue<T>(converter(8),"SERIAL_CONTROL_FLAG_BLOCKING");
            yield return new EnumValue<T>(converter(16),"SERIAL_CONTROL_FLAG_MULTI");
        }
    }
    /// <summary>
    /// Enumeration of distance sensor types
    ///  MAV_DISTANCE_SENSOR
    /// </summary>
    public enum MavDistanceSensor : ulong
    {
        /// <summary>
        /// Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units
        /// MAV_DISTANCE_SENSOR_LASER
        /// </summary>
        MavDistanceSensorLaser = 0,
        /// <summary>
        /// Ultrasound rangefinder, e.g. MaxBotix units
        /// MAV_DISTANCE_SENSOR_ULTRASOUND
        /// </summary>
        MavDistanceSensorUltrasound = 1,
        /// <summary>
        /// Infrared rangefinder, e.g. Sharp units
        /// MAV_DISTANCE_SENSOR_INFRARED
        /// </summary>
        MavDistanceSensorInfrared = 2,
        /// <summary>
        /// Radar type, e.g. uLanding units
        /// MAV_DISTANCE_SENSOR_RADAR
        /// </summary>
        MavDistanceSensorRadar = 3,
        /// <summary>
        /// Broken or unknown type, e.g. analog units
        /// MAV_DISTANCE_SENSOR_UNKNOWN
        /// </summary>
        MavDistanceSensorUnknown = 4,
    }
    public static class MavDistanceSensorHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_DISTANCE_SENSOR_LASER");
            yield return new EnumValue<T>(converter(1),"MAV_DISTANCE_SENSOR_ULTRASOUND");
            yield return new EnumValue<T>(converter(2),"MAV_DISTANCE_SENSOR_INFRARED");
            yield return new EnumValue<T>(converter(3),"MAV_DISTANCE_SENSOR_RADAR");
            yield return new EnumValue<T>(converter(4),"MAV_DISTANCE_SENSOR_UNKNOWN");
        }
    }
    /// <summary>
    /// Enumeration of sensor orientation, according to its rotations
    ///  MAV_SENSOR_ORIENTATION
    /// </summary>
    public enum MavSensorOrientation : ulong
    {
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_NONE
        /// </summary>
        MavSensorRotationNone = 0,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_YAW_45
        /// </summary>
        MavSensorRotationYaw45 = 1,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_YAW_90
        /// </summary>
        MavSensorRotationYaw90 = 2,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_YAW_135
        /// </summary>
        MavSensorRotationYaw135 = 3,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 180
        /// MAV_SENSOR_ROTATION_YAW_180
        /// </summary>
        MavSensorRotationYaw180 = 4,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 225
        /// MAV_SENSOR_ROTATION_YAW_225
        /// </summary>
        MavSensorRotationYaw225 = 5,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 270
        /// MAV_SENSOR_ROTATION_YAW_270
        /// </summary>
        MavSensorRotationYaw270 = 6,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 315
        /// MAV_SENSOR_ROTATION_YAW_315
        /// </summary>
        MavSensorRotationYaw315 = 7,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_180
        /// </summary>
        MavSensorRotationRoll180 = 8,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_45
        /// </summary>
        MavSensorRotationRoll180Yaw45 = 9,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_90
        /// </summary>
        MavSensorRotationRoll180Yaw90 = 10,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_135
        /// </summary>
        MavSensorRotationRoll180Yaw135 = 11,
        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 0
        /// MAV_SENSOR_ROTATION_PITCH_180
        /// </summary>
        MavSensorRotationPitch180 = 12,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 225
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_225
        /// </summary>
        MavSensorRotationRoll180Yaw225 = 13,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 270
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_270
        /// </summary>
        MavSensorRotationRoll180Yaw270 = 14,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 315
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_315
        /// </summary>
        MavSensorRotationRoll180Yaw315 = 15,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90
        /// </summary>
        MavSensorRotationRoll90 = 16,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_45
        /// </summary>
        MavSensorRotationRoll90Yaw45 = 17,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_90
        /// </summary>
        MavSensorRotationRoll90Yaw90 = 18,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_135
        /// </summary>
        MavSensorRotationRoll90Yaw135 = 19,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270
        /// </summary>
        MavSensorRotationRoll270 = 20,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_ROLL_270_YAW_45
        /// </summary>
        MavSensorRotationRoll270Yaw45 = 21,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_270_YAW_90
        /// </summary>
        MavSensorRotationRoll270Yaw90 = 22,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_ROLL_270_YAW_135
        /// </summary>
        MavSensorRotationRoll270Yaw135 = 23,
        /// <summary>
        /// Roll: 0, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_PITCH_90
        /// </summary>
        MavSensorRotationPitch90 = 24,
        /// <summary>
        /// Roll: 0, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_PITCH_270
        /// </summary>
        MavSensorRotationPitch270 = 25,
        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 90
        /// MAV_SENSOR_ROTATION_PITCH_180_YAW_90
        /// </summary>
        MavSensorRotationPitch180Yaw90 = 26,
        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 270
        /// MAV_SENSOR_ROTATION_PITCH_180_YAW_270
        /// </summary>
        MavSensorRotationPitch180Yaw270 = 27,
        /// <summary>
        /// Roll: 90, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_90
        /// </summary>
        MavSensorRotationRoll90Pitch90 = 28,
        /// <summary>
        /// Roll: 180, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_180_PITCH_90
        /// </summary>
        MavSensorRotationRoll180Pitch90 = 29,
        /// <summary>
        /// Roll: 270, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270_PITCH_90
        /// </summary>
        MavSensorRotationRoll270Pitch90 = 30,
        /// <summary>
        /// Roll: 90, Pitch: 180, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_180
        /// </summary>
        MavSensorRotationRoll90Pitch180 = 31,
        /// <summary>
        /// Roll: 270, Pitch: 180, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270_PITCH_180
        /// </summary>
        MavSensorRotationRoll270Pitch180 = 32,
        /// <summary>
        /// Roll: 90, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_270
        /// </summary>
        MavSensorRotationRoll90Pitch270 = 33,
        /// <summary>
        /// Roll: 180, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_180_PITCH_270
        /// </summary>
        MavSensorRotationRoll180Pitch270 = 34,
        /// <summary>
        /// Roll: 270, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270_PITCH_270
        /// </summary>
        MavSensorRotationRoll270Pitch270 = 35,
        /// <summary>
        /// Roll: 90, Pitch: 180, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90
        /// </summary>
        MavSensorRotationRoll90Pitch180Yaw90 = 36,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 270
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_270
        /// </summary>
        MavSensorRotationRoll90Yaw270 = 37,
        /// <summary>
        /// Roll: 90, Pitch: 68, Yaw: 293
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293
        /// </summary>
        MavSensorRotationRoll90Pitch68Yaw293 = 38,
        /// <summary>
        /// Pitch: 315
        /// MAV_SENSOR_ROTATION_PITCH_315
        /// </summary>
        MavSensorRotationPitch315 = 39,
        /// <summary>
        /// Roll: 90, Pitch: 315
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_315
        /// </summary>
        MavSensorRotationRoll90Pitch315 = 40,
        /// <summary>
        /// Custom orientation
        /// MAV_SENSOR_ROTATION_CUSTOM
        /// </summary>
        MavSensorRotationCustom = 100,
    }
    public static class MavSensorOrientationHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
            yield return converter(16);
            yield return converter(17);
            yield return converter(18);
            yield return converter(19);
            yield return converter(20);
            yield return converter(21);
            yield return converter(22);
            yield return converter(23);
            yield return converter(24);
            yield return converter(25);
            yield return converter(26);
            yield return converter(27);
            yield return converter(28);
            yield return converter(29);
            yield return converter(30);
            yield return converter(31);
            yield return converter(32);
            yield return converter(33);
            yield return converter(34);
            yield return converter(35);
            yield return converter(36);
            yield return converter(37);
            yield return converter(38);
            yield return converter(39);
            yield return converter(40);
            yield return converter(100);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_SENSOR_ROTATION_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_SENSOR_ROTATION_YAW_45");
            yield return new EnumValue<T>(converter(2),"MAV_SENSOR_ROTATION_YAW_90");
            yield return new EnumValue<T>(converter(3),"MAV_SENSOR_ROTATION_YAW_135");
            yield return new EnumValue<T>(converter(4),"MAV_SENSOR_ROTATION_YAW_180");
            yield return new EnumValue<T>(converter(5),"MAV_SENSOR_ROTATION_YAW_225");
            yield return new EnumValue<T>(converter(6),"MAV_SENSOR_ROTATION_YAW_270");
            yield return new EnumValue<T>(converter(7),"MAV_SENSOR_ROTATION_YAW_315");
            yield return new EnumValue<T>(converter(8),"MAV_SENSOR_ROTATION_ROLL_180");
            yield return new EnumValue<T>(converter(9),"MAV_SENSOR_ROTATION_ROLL_180_YAW_45");
            yield return new EnumValue<T>(converter(10),"MAV_SENSOR_ROTATION_ROLL_180_YAW_90");
            yield return new EnumValue<T>(converter(11),"MAV_SENSOR_ROTATION_ROLL_180_YAW_135");
            yield return new EnumValue<T>(converter(12),"MAV_SENSOR_ROTATION_PITCH_180");
            yield return new EnumValue<T>(converter(13),"MAV_SENSOR_ROTATION_ROLL_180_YAW_225");
            yield return new EnumValue<T>(converter(14),"MAV_SENSOR_ROTATION_ROLL_180_YAW_270");
            yield return new EnumValue<T>(converter(15),"MAV_SENSOR_ROTATION_ROLL_180_YAW_315");
            yield return new EnumValue<T>(converter(16),"MAV_SENSOR_ROTATION_ROLL_90");
            yield return new EnumValue<T>(converter(17),"MAV_SENSOR_ROTATION_ROLL_90_YAW_45");
            yield return new EnumValue<T>(converter(18),"MAV_SENSOR_ROTATION_ROLL_90_YAW_90");
            yield return new EnumValue<T>(converter(19),"MAV_SENSOR_ROTATION_ROLL_90_YAW_135");
            yield return new EnumValue<T>(converter(20),"MAV_SENSOR_ROTATION_ROLL_270");
            yield return new EnumValue<T>(converter(21),"MAV_SENSOR_ROTATION_ROLL_270_YAW_45");
            yield return new EnumValue<T>(converter(22),"MAV_SENSOR_ROTATION_ROLL_270_YAW_90");
            yield return new EnumValue<T>(converter(23),"MAV_SENSOR_ROTATION_ROLL_270_YAW_135");
            yield return new EnumValue<T>(converter(24),"MAV_SENSOR_ROTATION_PITCH_90");
            yield return new EnumValue<T>(converter(25),"MAV_SENSOR_ROTATION_PITCH_270");
            yield return new EnumValue<T>(converter(26),"MAV_SENSOR_ROTATION_PITCH_180_YAW_90");
            yield return new EnumValue<T>(converter(27),"MAV_SENSOR_ROTATION_PITCH_180_YAW_270");
            yield return new EnumValue<T>(converter(28),"MAV_SENSOR_ROTATION_ROLL_90_PITCH_90");
            yield return new EnumValue<T>(converter(29),"MAV_SENSOR_ROTATION_ROLL_180_PITCH_90");
            yield return new EnumValue<T>(converter(30),"MAV_SENSOR_ROTATION_ROLL_270_PITCH_90");
            yield return new EnumValue<T>(converter(31),"MAV_SENSOR_ROTATION_ROLL_90_PITCH_180");
            yield return new EnumValue<T>(converter(32),"MAV_SENSOR_ROTATION_ROLL_270_PITCH_180");
            yield return new EnumValue<T>(converter(33),"MAV_SENSOR_ROTATION_ROLL_90_PITCH_270");
            yield return new EnumValue<T>(converter(34),"MAV_SENSOR_ROTATION_ROLL_180_PITCH_270");
            yield return new EnumValue<T>(converter(35),"MAV_SENSOR_ROTATION_ROLL_270_PITCH_270");
            yield return new EnumValue<T>(converter(36),"MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90");
            yield return new EnumValue<T>(converter(37),"MAV_SENSOR_ROTATION_ROLL_90_YAW_270");
            yield return new EnumValue<T>(converter(38),"MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293");
            yield return new EnumValue<T>(converter(39),"MAV_SENSOR_ROTATION_PITCH_315");
            yield return new EnumValue<T>(converter(40),"MAV_SENSOR_ROTATION_ROLL_90_PITCH_315");
            yield return new EnumValue<T>(converter(100),"MAV_SENSOR_ROTATION_CUSTOM");
        }
    }
    /// <summary>
    /// Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability.
    ///  MAV_PROTOCOL_CAPABILITY
    /// </summary>
    public enum MavProtocolCapability : ulong
    {
        /// <summary>
        /// Autopilot supports the MISSION_ITEM float message type.
        ///           Note that MISSION_ITEM is deprecated, and autopilots should use MISSION_INT instead.
        ///         
        /// MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT
        /// </summary>
        MavProtocolCapabilityMissionFloat = 1,
        /// <summary>
        /// Autopilot supports the new param float message type.
        /// MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT
        /// </summary>
        MavProtocolCapabilityParamFloat = 2,
        /// <summary>
        /// Autopilot supports MISSION_ITEM_INT scaled integer message type.
        ///           Note that this flag must always be set if missions are supported, because missions must always use MISSION_ITEM_INT (rather than MISSION_ITEM, which is deprecated).
        ///         
        /// MAV_PROTOCOL_CAPABILITY_MISSION_INT
        /// </summary>
        MavProtocolCapabilityMissionInt = 4,
        /// <summary>
        /// Autopilot supports COMMAND_INT scaled integer message type.
        /// MAV_PROTOCOL_CAPABILITY_COMMAND_INT
        /// </summary>
        MavProtocolCapabilityCommandInt = 8,
        /// <summary>
        /// Parameter protocol uses byte-wise encoding of parameter values into param_value (float) fields: https://mavlink.io/en/services/parameter.html#parameter-encoding.
        ///           Note that either this flag or MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST should be set if the parameter protocol is supported.
        ///         
        /// MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE
        /// </summary>
        MavProtocolCapabilityParamEncodeBytewise = 16,
        /// <summary>
        /// Autopilot supports the File Transfer Protocol v1: https://mavlink.io/en/services/ftp.html.
        /// MAV_PROTOCOL_CAPABILITY_FTP
        /// </summary>
        MavProtocolCapabilityFtp = 32,
        /// <summary>
        /// Autopilot supports commanding attitude offboard.
        /// MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET
        /// </summary>
        MavProtocolCapabilitySetAttitudeTarget = 64,
        /// <summary>
        /// Autopilot supports commanding position and velocity targets in local NED frame.
        /// MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED
        /// </summary>
        MavProtocolCapabilitySetPositionTargetLocalNed = 128,
        /// <summary>
        /// Autopilot supports commanding position and velocity targets in global scaled integers.
        /// MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT
        /// </summary>
        MavProtocolCapabilitySetPositionTargetGlobalInt = 256,
        /// <summary>
        /// Autopilot supports terrain protocol / data handling.
        /// MAV_PROTOCOL_CAPABILITY_TERRAIN
        /// </summary>
        MavProtocolCapabilityTerrain = 512,
        /// <summary>
        /// Reserved for future use.
        /// MAV_PROTOCOL_CAPABILITY_RESERVED3
        /// </summary>
        MavProtocolCapabilityReserved3 = 1024,
        /// <summary>
        /// Autopilot supports the MAV_CMD_DO_FLIGHTTERMINATION command (flight termination).
        /// MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION
        /// </summary>
        MavProtocolCapabilityFlightTermination = 2048,
        /// <summary>
        /// Autopilot supports onboard compass calibration.
        /// MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION
        /// </summary>
        MavProtocolCapabilityCompassCalibration = 4096,
        /// <summary>
        /// Autopilot supports MAVLink version 2.
        /// MAV_PROTOCOL_CAPABILITY_MAVLINK2
        /// </summary>
        MavProtocolCapabilityMavlink2 = 8192,
        /// <summary>
        /// Autopilot supports mission fence protocol.
        /// MAV_PROTOCOL_CAPABILITY_MISSION_FENCE
        /// </summary>
        MavProtocolCapabilityMissionFence = 16384,
        /// <summary>
        /// Autopilot supports mission rally point protocol.
        /// MAV_PROTOCOL_CAPABILITY_MISSION_RALLY
        /// </summary>
        MavProtocolCapabilityMissionRally = 32768,
        /// <summary>
        /// Reserved for future use.
        /// MAV_PROTOCOL_CAPABILITY_RESERVED2
        /// </summary>
        MavProtocolCapabilityReserved2 = 65536,
        /// <summary>
        /// Parameter protocol uses C-cast of parameter values to set the param_value (float) fields: https://mavlink.io/en/services/parameter.html#parameter-encoding.
        ///           Note that either this flag or MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE should be set if the parameter protocol is supported.
        ///         
        /// MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST
        /// </summary>
        MavProtocolCapabilityParamEncodeCCast = 131072,
    }
    public static class MavProtocolCapabilityHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(8192);
            yield return converter(16384);
            yield return converter(32768);
            yield return converter(65536);
            yield return converter(131072);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT");
            yield return new EnumValue<T>(converter(2),"MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT");
            yield return new EnumValue<T>(converter(4),"MAV_PROTOCOL_CAPABILITY_MISSION_INT");
            yield return new EnumValue<T>(converter(8),"MAV_PROTOCOL_CAPABILITY_COMMAND_INT");
            yield return new EnumValue<T>(converter(16),"MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE");
            yield return new EnumValue<T>(converter(32),"MAV_PROTOCOL_CAPABILITY_FTP");
            yield return new EnumValue<T>(converter(64),"MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET");
            yield return new EnumValue<T>(converter(128),"MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED");
            yield return new EnumValue<T>(converter(256),"MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT");
            yield return new EnumValue<T>(converter(512),"MAV_PROTOCOL_CAPABILITY_TERRAIN");
            yield return new EnumValue<T>(converter(1024),"MAV_PROTOCOL_CAPABILITY_RESERVED3");
            yield return new EnumValue<T>(converter(2048),"MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION");
            yield return new EnumValue<T>(converter(4096),"MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION");
            yield return new EnumValue<T>(converter(8192),"MAV_PROTOCOL_CAPABILITY_MAVLINK2");
            yield return new EnumValue<T>(converter(16384),"MAV_PROTOCOL_CAPABILITY_MISSION_FENCE");
            yield return new EnumValue<T>(converter(32768),"MAV_PROTOCOL_CAPABILITY_MISSION_RALLY");
            yield return new EnumValue<T>(converter(65536),"MAV_PROTOCOL_CAPABILITY_RESERVED2");
            yield return new EnumValue<T>(converter(131072),"MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST");
        }
    }
    /// <summary>
    /// Type of mission items being requested/sent in mission protocol.
    ///  MAV_MISSION_TYPE
    /// </summary>
    public enum MavMissionType : ulong
    {
        /// <summary>
        /// Items are mission commands for main mission.
        /// MAV_MISSION_TYPE_MISSION
        /// </summary>
        MavMissionTypeMission = 0,
        /// <summary>
        /// Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence items.
        /// MAV_MISSION_TYPE_FENCE
        /// </summary>
        MavMissionTypeFence = 1,
        /// <summary>
        /// Specifies the rally points for the vehicle. Rally points are alternative RTL points. Items are MAV_CMD_NAV_RALLY_POINT rally point items.
        /// MAV_MISSION_TYPE_RALLY
        /// </summary>
        MavMissionTypeRally = 2,
        /// <summary>
        /// Only used in MISSION_CLEAR_ALL to clear all mission types.
        /// MAV_MISSION_TYPE_ALL
        /// </summary>
        MavMissionTypeAll = 255,
    }
    public static class MavMissionTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(255);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_MISSION_TYPE_MISSION");
            yield return new EnumValue<T>(converter(1),"MAV_MISSION_TYPE_FENCE");
            yield return new EnumValue<T>(converter(2),"MAV_MISSION_TYPE_RALLY");
            yield return new EnumValue<T>(converter(255),"MAV_MISSION_TYPE_ALL");
        }
    }
    /// <summary>
    /// Enumeration of estimator types
    ///  MAV_ESTIMATOR_TYPE
    /// </summary>
    public enum MavEstimatorType : ulong
    {
        /// <summary>
        /// Unknown type of the estimator.
        /// MAV_ESTIMATOR_TYPE_UNKNOWN
        /// </summary>
        MavEstimatorTypeUnknown = 0,
        /// <summary>
        /// This is a naive estimator without any real covariance feedback.
        /// MAV_ESTIMATOR_TYPE_NAIVE
        /// </summary>
        MavEstimatorTypeNaive = 1,
        /// <summary>
        /// Computer vision based estimate. Might be up to scale.
        /// MAV_ESTIMATOR_TYPE_VISION
        /// </summary>
        MavEstimatorTypeVision = 2,
        /// <summary>
        /// Visual-inertial estimate.
        /// MAV_ESTIMATOR_TYPE_VIO
        /// </summary>
        MavEstimatorTypeVio = 3,
        /// <summary>
        /// Plain GPS estimate.
        /// MAV_ESTIMATOR_TYPE_GPS
        /// </summary>
        MavEstimatorTypeGps = 4,
        /// <summary>
        /// Estimator integrating GPS and inertial sensing.
        /// MAV_ESTIMATOR_TYPE_GPS_INS
        /// </summary>
        MavEstimatorTypeGpsIns = 5,
        /// <summary>
        /// Estimate from external motion capturing system.
        /// MAV_ESTIMATOR_TYPE_MOCAP
        /// </summary>
        MavEstimatorTypeMocap = 6,
        /// <summary>
        /// Estimator based on lidar sensor input.
        /// MAV_ESTIMATOR_TYPE_LIDAR
        /// </summary>
        MavEstimatorTypeLidar = 7,
        /// <summary>
        /// Estimator on autopilot.
        /// MAV_ESTIMATOR_TYPE_AUTOPILOT
        /// </summary>
        MavEstimatorTypeAutopilot = 8,
    }
    public static class MavEstimatorTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ESTIMATOR_TYPE_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_ESTIMATOR_TYPE_NAIVE");
            yield return new EnumValue<T>(converter(2),"MAV_ESTIMATOR_TYPE_VISION");
            yield return new EnumValue<T>(converter(3),"MAV_ESTIMATOR_TYPE_VIO");
            yield return new EnumValue<T>(converter(4),"MAV_ESTIMATOR_TYPE_GPS");
            yield return new EnumValue<T>(converter(5),"MAV_ESTIMATOR_TYPE_GPS_INS");
            yield return new EnumValue<T>(converter(6),"MAV_ESTIMATOR_TYPE_MOCAP");
            yield return new EnumValue<T>(converter(7),"MAV_ESTIMATOR_TYPE_LIDAR");
            yield return new EnumValue<T>(converter(8),"MAV_ESTIMATOR_TYPE_AUTOPILOT");
        }
    }
    /// <summary>
    /// Enumeration of battery types
    ///  MAV_BATTERY_TYPE
    /// </summary>
    public enum MavBatteryType : ulong
    {
        /// <summary>
        /// Not specified.
        /// MAV_BATTERY_TYPE_UNKNOWN
        /// </summary>
        MavBatteryTypeUnknown = 0,
        /// <summary>
        /// Lithium polymer battery
        /// MAV_BATTERY_TYPE_LIPO
        /// </summary>
        MavBatteryTypeLipo = 1,
        /// <summary>
        /// Lithium-iron-phosphate battery
        /// MAV_BATTERY_TYPE_LIFE
        /// </summary>
        MavBatteryTypeLife = 2,
        /// <summary>
        /// Lithium-ION battery
        /// MAV_BATTERY_TYPE_LION
        /// </summary>
        MavBatteryTypeLion = 3,
        /// <summary>
        /// Nickel metal hydride battery
        /// MAV_BATTERY_TYPE_NIMH
        /// </summary>
        MavBatteryTypeNimh = 4,
    }
    public static class MavBatteryTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_BATTERY_TYPE_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_BATTERY_TYPE_LIPO");
            yield return new EnumValue<T>(converter(2),"MAV_BATTERY_TYPE_LIFE");
            yield return new EnumValue<T>(converter(3),"MAV_BATTERY_TYPE_LION");
            yield return new EnumValue<T>(converter(4),"MAV_BATTERY_TYPE_NIMH");
        }
    }
    /// <summary>
    /// Enumeration of battery functions
    ///  MAV_BATTERY_FUNCTION
    /// </summary>
    public enum MavBatteryFunction : ulong
    {
        /// <summary>
        /// Battery function is unknown
        /// MAV_BATTERY_FUNCTION_UNKNOWN
        /// </summary>
        MavBatteryFunctionUnknown = 0,
        /// <summary>
        /// Battery supports all flight systems
        /// MAV_BATTERY_FUNCTION_ALL
        /// </summary>
        MavBatteryFunctionAll = 1,
        /// <summary>
        /// Battery for the propulsion system
        /// MAV_BATTERY_FUNCTION_PROPULSION
        /// </summary>
        MavBatteryFunctionPropulsion = 2,
        /// <summary>
        /// Avionics battery
        /// MAV_BATTERY_FUNCTION_AVIONICS
        /// </summary>
        MavBatteryFunctionAvionics = 3,
        /// <summary>
        /// Payload battery
        /// MAV_BATTERY_FUNCTION_PAYLOAD
        /// </summary>
        MavBatteryFunctionPayload = 4,
    }
    public static class MavBatteryFunctionHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_BATTERY_FUNCTION_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_BATTERY_FUNCTION_ALL");
            yield return new EnumValue<T>(converter(2),"MAV_BATTERY_FUNCTION_PROPULSION");
            yield return new EnumValue<T>(converter(3),"MAV_BATTERY_FUNCTION_AVIONICS");
            yield return new EnumValue<T>(converter(4),"MAV_BATTERY_FUNCTION_PAYLOAD");
        }
    }
    /// <summary>
    /// Enumeration for battery charge states.
    ///  MAV_BATTERY_CHARGE_STATE
    /// </summary>
    public enum MavBatteryChargeState : ulong
    {
        /// <summary>
        /// Low battery state is not provided
        /// MAV_BATTERY_CHARGE_STATE_UNDEFINED
        /// </summary>
        MavBatteryChargeStateUndefined = 0,
        /// <summary>
        /// Battery is not in low state. Normal operation.
        /// MAV_BATTERY_CHARGE_STATE_OK
        /// </summary>
        MavBatteryChargeStateOk = 1,
        /// <summary>
        /// Battery state is low, warn and monitor close.
        /// MAV_BATTERY_CHARGE_STATE_LOW
        /// </summary>
        MavBatteryChargeStateLow = 2,
        /// <summary>
        /// Battery state is critical, return or abort immediately.
        /// MAV_BATTERY_CHARGE_STATE_CRITICAL
        /// </summary>
        MavBatteryChargeStateCritical = 3,
        /// <summary>
        /// Battery state is too low for ordinary abort sequence. Perform fastest possible emergency stop to prevent damage.
        /// MAV_BATTERY_CHARGE_STATE_EMERGENCY
        /// </summary>
        MavBatteryChargeStateEmergency = 4,
        /// <summary>
        /// Battery failed, damage unavoidable. Possible causes (faults) are listed in MAV_BATTERY_FAULT.
        /// MAV_BATTERY_CHARGE_STATE_FAILED
        /// </summary>
        MavBatteryChargeStateFailed = 5,
        /// <summary>
        /// Battery is diagnosed to be defective or an error occurred, usage is discouraged / prohibited. Possible causes (faults) are listed in MAV_BATTERY_FAULT.
        /// MAV_BATTERY_CHARGE_STATE_UNHEALTHY
        /// </summary>
        MavBatteryChargeStateUnhealthy = 6,
        /// <summary>
        /// Battery is charging.
        /// MAV_BATTERY_CHARGE_STATE_CHARGING
        /// </summary>
        MavBatteryChargeStateCharging = 7,
    }
    public static class MavBatteryChargeStateHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_BATTERY_CHARGE_STATE_UNDEFINED");
            yield return new EnumValue<T>(converter(1),"MAV_BATTERY_CHARGE_STATE_OK");
            yield return new EnumValue<T>(converter(2),"MAV_BATTERY_CHARGE_STATE_LOW");
            yield return new EnumValue<T>(converter(3),"MAV_BATTERY_CHARGE_STATE_CRITICAL");
            yield return new EnumValue<T>(converter(4),"MAV_BATTERY_CHARGE_STATE_EMERGENCY");
            yield return new EnumValue<T>(converter(5),"MAV_BATTERY_CHARGE_STATE_FAILED");
            yield return new EnumValue<T>(converter(6),"MAV_BATTERY_CHARGE_STATE_UNHEALTHY");
            yield return new EnumValue<T>(converter(7),"MAV_BATTERY_CHARGE_STATE_CHARGING");
        }
    }
    /// <summary>
    /// Battery mode. Note, the normal operation mode (i.e. when flying) should be reported as MAV_BATTERY_MODE_UNKNOWN to allow message trimming in normal flight.
    ///  MAV_BATTERY_MODE
    /// </summary>
    public enum MavBatteryMode : ulong
    {
        /// <summary>
        /// Battery mode not supported/unknown battery mode/normal operation.
        /// MAV_BATTERY_MODE_UNKNOWN
        /// </summary>
        MavBatteryModeUnknown = 0,
        /// <summary>
        /// Battery is auto discharging (towards storage level).
        /// MAV_BATTERY_MODE_AUTO_DISCHARGING
        /// </summary>
        MavBatteryModeAutoDischarging = 1,
        /// <summary>
        /// Battery in hot-swap mode (current limited to prevent spikes that might damage sensitive electrical circuits).
        /// MAV_BATTERY_MODE_HOT_SWAP
        /// </summary>
        MavBatteryModeHotSwap = 2,
    }
    public static class MavBatteryModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_BATTERY_MODE_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_BATTERY_MODE_AUTO_DISCHARGING");
            yield return new EnumValue<T>(converter(2),"MAV_BATTERY_MODE_HOT_SWAP");
        }
    }
    /// <summary>
    /// Smart battery supply status/fault flags (bitmask) for health indication. The battery must also report either MAV_BATTERY_CHARGE_STATE_FAILED or MAV_BATTERY_CHARGE_STATE_UNHEALTHY if any of these are set.
    ///  MAV_BATTERY_FAULT
    /// </summary>
    public enum MavBatteryFault : ulong
    {
        /// <summary>
        /// Battery has deep discharged.
        /// MAV_BATTERY_FAULT_DEEP_DISCHARGE
        /// </summary>
        MavBatteryFaultDeepDischarge = 1,
        /// <summary>
        /// Voltage spikes.
        /// MAV_BATTERY_FAULT_SPIKES
        /// </summary>
        MavBatteryFaultSpikes = 2,
        /// <summary>
        /// One or more cells have failed. Battery should also report MAV_BATTERY_CHARGE_STATE_FAILE (and should not be used).
        /// MAV_BATTERY_FAULT_CELL_FAIL
        /// </summary>
        MavBatteryFaultCellFail = 4,
        /// <summary>
        /// Over-current fault.
        /// MAV_BATTERY_FAULT_OVER_CURRENT
        /// </summary>
        MavBatteryFaultOverCurrent = 8,
        /// <summary>
        /// Over-temperature fault.
        /// MAV_BATTERY_FAULT_OVER_TEMPERATURE
        /// </summary>
        MavBatteryFaultOverTemperature = 16,
        /// <summary>
        /// Under-temperature fault.
        /// MAV_BATTERY_FAULT_UNDER_TEMPERATURE
        /// </summary>
        MavBatteryFaultUnderTemperature = 32,
        /// <summary>
        /// Vehicle voltage is not compatible with this battery (batteries on same power rail should have similar voltage).
        /// MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE
        /// </summary>
        MavBatteryFaultIncompatibleVoltage = 64,
        /// <summary>
        /// Battery firmware is not compatible with current autopilot firmware.
        /// MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE
        /// </summary>
        MavBatteryFaultIncompatibleFirmware = 128,
        /// <summary>
        /// Battery is not compatible due to cell configuration (e.g. 5s1p when vehicle requires 6s).
        /// BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION
        /// </summary>
        BatteryFaultIncompatibleCellsConfiguration = 256,
    }
    public static class MavBatteryFaultHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_BATTERY_FAULT_DEEP_DISCHARGE");
            yield return new EnumValue<T>(converter(2),"MAV_BATTERY_FAULT_SPIKES");
            yield return new EnumValue<T>(converter(4),"MAV_BATTERY_FAULT_CELL_FAIL");
            yield return new EnumValue<T>(converter(8),"MAV_BATTERY_FAULT_OVER_CURRENT");
            yield return new EnumValue<T>(converter(16),"MAV_BATTERY_FAULT_OVER_TEMPERATURE");
            yield return new EnumValue<T>(converter(32),"MAV_BATTERY_FAULT_UNDER_TEMPERATURE");
            yield return new EnumValue<T>(converter(64),"MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE");
            yield return new EnumValue<T>(converter(128),"MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE");
            yield return new EnumValue<T>(converter(256),"BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION");
        }
    }
    /// <summary>
    /// Flags to report status/failure cases for a power generator (used in GENERATOR_STATUS). Note that FAULTS are conditions that cause the generator to fail. Warnings are conditions that require attention before the next use (they indicate the system is not operating properly).
    ///  MAV_GENERATOR_STATUS_FLAG
    /// </summary>
    public enum MavGeneratorStatusFlag : ulong
    {
        /// <summary>
        /// Generator is off.
        /// MAV_GENERATOR_STATUS_FLAG_OFF
        /// </summary>
        MavGeneratorStatusFlagOff = 1,
        /// <summary>
        /// Generator is ready to start generating power.
        /// MAV_GENERATOR_STATUS_FLAG_READY
        /// </summary>
        MavGeneratorStatusFlagReady = 2,
        /// <summary>
        /// Generator is generating power.
        /// MAV_GENERATOR_STATUS_FLAG_GENERATING
        /// </summary>
        MavGeneratorStatusFlagGenerating = 4,
        /// <summary>
        /// Generator is charging the batteries (generating enough power to charge and provide the load).
        /// MAV_GENERATOR_STATUS_FLAG_CHARGING
        /// </summary>
        MavGeneratorStatusFlagCharging = 8,
        /// <summary>
        /// Generator is operating at a reduced maximum power.
        /// MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER
        /// </summary>
        MavGeneratorStatusFlagReducedPower = 16,
        /// <summary>
        /// Generator is providing the maximum output.
        /// MAV_GENERATOR_STATUS_FLAG_MAXPOWER
        /// </summary>
        MavGeneratorStatusFlagMaxpower = 32,
        /// <summary>
        /// Generator is near the maximum operating temperature, cooling is insufficient.
        /// MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING
        /// </summary>
        MavGeneratorStatusFlagOvertempWarning = 64,
        /// <summary>
        /// Generator hit the maximum operating temperature and shutdown.
        /// MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT
        /// </summary>
        MavGeneratorStatusFlagOvertempFault = 128,
        /// <summary>
        /// Power electronics are near the maximum operating temperature, cooling is insufficient.
        /// MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING
        /// </summary>
        MavGeneratorStatusFlagElectronicsOvertempWarning = 256,
        /// <summary>
        /// Power electronics hit the maximum operating temperature and shutdown.
        /// MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT
        /// </summary>
        MavGeneratorStatusFlagElectronicsOvertempFault = 512,
        /// <summary>
        /// Power electronics experienced a fault and shutdown.
        /// MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT
        /// </summary>
        MavGeneratorStatusFlagElectronicsFault = 1024,
        /// <summary>
        /// The power source supplying the generator failed e.g. mechanical generator stopped, tether is no longer providing power, solar cell is in shade, hydrogen reaction no longer happening.
        /// MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT
        /// </summary>
        MavGeneratorStatusFlagPowersourceFault = 2048,
        /// <summary>
        /// Generator controller having communication problems.
        /// MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING
        /// </summary>
        MavGeneratorStatusFlagCommunicationWarning = 4096,
        /// <summary>
        /// Power electronic or generator cooling system error.
        /// MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING
        /// </summary>
        MavGeneratorStatusFlagCoolingWarning = 8192,
        /// <summary>
        /// Generator controller power rail experienced a fault.
        /// MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT
        /// </summary>
        MavGeneratorStatusFlagPowerRailFault = 16384,
        /// <summary>
        /// Generator controller exceeded the overcurrent threshold and shutdown to prevent damage.
        /// MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT
        /// </summary>
        MavGeneratorStatusFlagOvercurrentFault = 32768,
        /// <summary>
        /// Generator controller detected a high current going into the batteries and shutdown to prevent battery damage.
        /// MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT
        /// </summary>
        MavGeneratorStatusFlagBatteryOverchargeCurrentFault = 65536,
        /// <summary>
        /// Generator controller exceeded it's overvoltage threshold and shutdown to prevent it exceeding the voltage rating.
        /// MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT
        /// </summary>
        MavGeneratorStatusFlagOvervoltageFault = 131072,
        /// <summary>
        /// Batteries are under voltage (generator will not start).
        /// MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT
        /// </summary>
        MavGeneratorStatusFlagBatteryUndervoltFault = 262144,
        /// <summary>
        /// Generator start is inhibited by e.g. a safety switch.
        /// MAV_GENERATOR_STATUS_FLAG_START_INHIBITED
        /// </summary>
        MavGeneratorStatusFlagStartInhibited = 524288,
        /// <summary>
        /// Generator requires maintenance.
        /// MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED
        /// </summary>
        MavGeneratorStatusFlagMaintenanceRequired = 1048576,
        /// <summary>
        /// Generator is not ready to generate yet.
        /// MAV_GENERATOR_STATUS_FLAG_WARMING_UP
        /// </summary>
        MavGeneratorStatusFlagWarmingUp = 2097152,
        /// <summary>
        /// Generator is idle.
        /// MAV_GENERATOR_STATUS_FLAG_IDLE
        /// </summary>
        MavGeneratorStatusFlagIdle = 4194304,
    }
    public static class MavGeneratorStatusFlagHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(8192);
            yield return converter(16384);
            yield return converter(32768);
            yield return converter(65536);
            yield return converter(131072);
            yield return converter(262144);
            yield return converter(524288);
            yield return converter(1048576);
            yield return converter(2097152);
            yield return converter(4194304);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_GENERATOR_STATUS_FLAG_OFF");
            yield return new EnumValue<T>(converter(2),"MAV_GENERATOR_STATUS_FLAG_READY");
            yield return new EnumValue<T>(converter(4),"MAV_GENERATOR_STATUS_FLAG_GENERATING");
            yield return new EnumValue<T>(converter(8),"MAV_GENERATOR_STATUS_FLAG_CHARGING");
            yield return new EnumValue<T>(converter(16),"MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER");
            yield return new EnumValue<T>(converter(32),"MAV_GENERATOR_STATUS_FLAG_MAXPOWER");
            yield return new EnumValue<T>(converter(64),"MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING");
            yield return new EnumValue<T>(converter(128),"MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT");
            yield return new EnumValue<T>(converter(256),"MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING");
            yield return new EnumValue<T>(converter(512),"MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT");
            yield return new EnumValue<T>(converter(1024),"MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT");
            yield return new EnumValue<T>(converter(2048),"MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT");
            yield return new EnumValue<T>(converter(4096),"MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING");
            yield return new EnumValue<T>(converter(8192),"MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING");
            yield return new EnumValue<T>(converter(16384),"MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT");
            yield return new EnumValue<T>(converter(32768),"MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT");
            yield return new EnumValue<T>(converter(65536),"MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT");
            yield return new EnumValue<T>(converter(131072),"MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT");
            yield return new EnumValue<T>(converter(262144),"MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT");
            yield return new EnumValue<T>(converter(524288),"MAV_GENERATOR_STATUS_FLAG_START_INHIBITED");
            yield return new EnumValue<T>(converter(1048576),"MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED");
            yield return new EnumValue<T>(converter(2097152),"MAV_GENERATOR_STATUS_FLAG_WARMING_UP");
            yield return new EnumValue<T>(converter(4194304),"MAV_GENERATOR_STATUS_FLAG_IDLE");
        }
    }
    /// <summary>
    /// Enumeration of VTOL states
    ///  MAV_VTOL_STATE
    /// </summary>
    public enum MavVtolState : ulong
    {
        /// <summary>
        /// MAV is not configured as VTOL
        /// MAV_VTOL_STATE_UNDEFINED
        /// </summary>
        MavVtolStateUndefined = 0,
        /// <summary>
        /// VTOL is in transition from multicopter to fixed-wing
        /// MAV_VTOL_STATE_TRANSITION_TO_FW
        /// </summary>
        MavVtolStateTransitionToFw = 1,
        /// <summary>
        /// VTOL is in transition from fixed-wing to multicopter
        /// MAV_VTOL_STATE_TRANSITION_TO_MC
        /// </summary>
        MavVtolStateTransitionToMc = 2,
        /// <summary>
        /// VTOL is in multicopter state
        /// MAV_VTOL_STATE_MC
        /// </summary>
        MavVtolStateMc = 3,
        /// <summary>
        /// VTOL is in fixed-wing state
        /// MAV_VTOL_STATE_FW
        /// </summary>
        MavVtolStateFw = 4,
    }
    public static class MavVtolStateHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_VTOL_STATE_UNDEFINED");
            yield return new EnumValue<T>(converter(1),"MAV_VTOL_STATE_TRANSITION_TO_FW");
            yield return new EnumValue<T>(converter(2),"MAV_VTOL_STATE_TRANSITION_TO_MC");
            yield return new EnumValue<T>(converter(3),"MAV_VTOL_STATE_MC");
            yield return new EnumValue<T>(converter(4),"MAV_VTOL_STATE_FW");
        }
    }
    /// <summary>
    /// Enumeration of landed detector states
    ///  MAV_LANDED_STATE
    /// </summary>
    public enum MavLandedState : ulong
    {
        /// <summary>
        /// MAV landed state is unknown
        /// MAV_LANDED_STATE_UNDEFINED
        /// </summary>
        MavLandedStateUndefined = 0,
        /// <summary>
        /// MAV is landed (on ground)
        /// MAV_LANDED_STATE_ON_GROUND
        /// </summary>
        MavLandedStateOnGround = 1,
        /// <summary>
        /// MAV is in air
        /// MAV_LANDED_STATE_IN_AIR
        /// </summary>
        MavLandedStateInAir = 2,
        /// <summary>
        /// MAV currently taking off
        /// MAV_LANDED_STATE_TAKEOFF
        /// </summary>
        MavLandedStateTakeoff = 3,
        /// <summary>
        /// MAV currently landing
        /// MAV_LANDED_STATE_LANDING
        /// </summary>
        MavLandedStateLanding = 4,
    }
    public static class MavLandedStateHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_LANDED_STATE_UNDEFINED");
            yield return new EnumValue<T>(converter(1),"MAV_LANDED_STATE_ON_GROUND");
            yield return new EnumValue<T>(converter(2),"MAV_LANDED_STATE_IN_AIR");
            yield return new EnumValue<T>(converter(3),"MAV_LANDED_STATE_TAKEOFF");
            yield return new EnumValue<T>(converter(4),"MAV_LANDED_STATE_LANDING");
        }
    }
    /// <summary>
    /// Enumeration of the ADSB altimeter types
    ///  ADSB_ALTITUDE_TYPE
    /// </summary>
    public enum AdsbAltitudeType : ulong
    {
        /// <summary>
        /// Altitude reported from a Baro source using QNH reference
        /// ADSB_ALTITUDE_TYPE_PRESSURE_QNH
        /// </summary>
        AdsbAltitudeTypePressureQnh = 0,
        /// <summary>
        /// Altitude reported from a GNSS source
        /// ADSB_ALTITUDE_TYPE_GEOMETRIC
        /// </summary>
        AdsbAltitudeTypeGeometric = 1,
    }
    public static class AdsbAltitudeTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ADSB_ALTITUDE_TYPE_PRESSURE_QNH");
            yield return new EnumValue<T>(converter(1),"ADSB_ALTITUDE_TYPE_GEOMETRIC");
        }
    }
    /// <summary>
    /// ADSB classification for the type of vehicle emitting the transponder signal
    ///  ADSB_EMITTER_TYPE
    /// </summary>
    public enum AdsbEmitterType : ulong
    {
        /// <summary>
        /// ADSB_EMITTER_TYPE_NO_INFO
        /// </summary>
        AdsbEmitterTypeNoInfo = 0,
        /// <summary>
        /// ADSB_EMITTER_TYPE_LIGHT
        /// </summary>
        AdsbEmitterTypeLight = 1,
        /// <summary>
        /// ADSB_EMITTER_TYPE_SMALL
        /// </summary>
        AdsbEmitterTypeSmall = 2,
        /// <summary>
        /// ADSB_EMITTER_TYPE_LARGE
        /// </summary>
        AdsbEmitterTypeLarge = 3,
        /// <summary>
        /// ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE
        /// </summary>
        AdsbEmitterTypeHighVortexLarge = 4,
        /// <summary>
        /// ADSB_EMITTER_TYPE_HEAVY
        /// </summary>
        AdsbEmitterTypeHeavy = 5,
        /// <summary>
        /// ADSB_EMITTER_TYPE_HIGHLY_MANUV
        /// </summary>
        AdsbEmitterTypeHighlyManuv = 6,
        /// <summary>
        /// ADSB_EMITTER_TYPE_ROTOCRAFT
        /// </summary>
        AdsbEmitterTypeRotocraft = 7,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UNASSIGNED
        /// </summary>
        AdsbEmitterTypeUnassigned = 8,
        /// <summary>
        /// ADSB_EMITTER_TYPE_GLIDER
        /// </summary>
        AdsbEmitterTypeGlider = 9,
        /// <summary>
        /// ADSB_EMITTER_TYPE_LIGHTER_AIR
        /// </summary>
        AdsbEmitterTypeLighterAir = 10,
        /// <summary>
        /// ADSB_EMITTER_TYPE_PARACHUTE
        /// </summary>
        AdsbEmitterTypeParachute = 11,
        /// <summary>
        /// ADSB_EMITTER_TYPE_ULTRA_LIGHT
        /// </summary>
        AdsbEmitterTypeUltraLight = 12,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UNASSIGNED2
        /// </summary>
        AdsbEmitterTypeUnassigned2 = 13,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UAV
        /// </summary>
        AdsbEmitterTypeUav = 14,
        /// <summary>
        /// ADSB_EMITTER_TYPE_SPACE
        /// </summary>
        AdsbEmitterTypeSpace = 15,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UNASSGINED3
        /// </summary>
        AdsbEmitterTypeUnassgined3 = 16,
        /// <summary>
        /// ADSB_EMITTER_TYPE_EMERGENCY_SURFACE
        /// </summary>
        AdsbEmitterTypeEmergencySurface = 17,
        /// <summary>
        /// ADSB_EMITTER_TYPE_SERVICE_SURFACE
        /// </summary>
        AdsbEmitterTypeServiceSurface = 18,
        /// <summary>
        /// ADSB_EMITTER_TYPE_POINT_OBSTACLE
        /// </summary>
        AdsbEmitterTypePointObstacle = 19,
    }
    public static class AdsbEmitterTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
            yield return converter(16);
            yield return converter(17);
            yield return converter(18);
            yield return converter(19);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ADSB_EMITTER_TYPE_NO_INFO");
            yield return new EnumValue<T>(converter(1),"ADSB_EMITTER_TYPE_LIGHT");
            yield return new EnumValue<T>(converter(2),"ADSB_EMITTER_TYPE_SMALL");
            yield return new EnumValue<T>(converter(3),"ADSB_EMITTER_TYPE_LARGE");
            yield return new EnumValue<T>(converter(4),"ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE");
            yield return new EnumValue<T>(converter(5),"ADSB_EMITTER_TYPE_HEAVY");
            yield return new EnumValue<T>(converter(6),"ADSB_EMITTER_TYPE_HIGHLY_MANUV");
            yield return new EnumValue<T>(converter(7),"ADSB_EMITTER_TYPE_ROTOCRAFT");
            yield return new EnumValue<T>(converter(8),"ADSB_EMITTER_TYPE_UNASSIGNED");
            yield return new EnumValue<T>(converter(9),"ADSB_EMITTER_TYPE_GLIDER");
            yield return new EnumValue<T>(converter(10),"ADSB_EMITTER_TYPE_LIGHTER_AIR");
            yield return new EnumValue<T>(converter(11),"ADSB_EMITTER_TYPE_PARACHUTE");
            yield return new EnumValue<T>(converter(12),"ADSB_EMITTER_TYPE_ULTRA_LIGHT");
            yield return new EnumValue<T>(converter(13),"ADSB_EMITTER_TYPE_UNASSIGNED2");
            yield return new EnumValue<T>(converter(14),"ADSB_EMITTER_TYPE_UAV");
            yield return new EnumValue<T>(converter(15),"ADSB_EMITTER_TYPE_SPACE");
            yield return new EnumValue<T>(converter(16),"ADSB_EMITTER_TYPE_UNASSGINED3");
            yield return new EnumValue<T>(converter(17),"ADSB_EMITTER_TYPE_EMERGENCY_SURFACE");
            yield return new EnumValue<T>(converter(18),"ADSB_EMITTER_TYPE_SERVICE_SURFACE");
            yield return new EnumValue<T>(converter(19),"ADSB_EMITTER_TYPE_POINT_OBSTACLE");
        }
    }
    /// <summary>
    /// These flags indicate status such as data validity of each data source. Set = data valid
    ///  ADSB_FLAGS
    /// </summary>
    public enum AdsbFlags : ulong
    {
        /// <summary>
        /// ADSB_FLAGS_VALID_COORDS
        /// </summary>
        AdsbFlagsValidCoords = 1,
        /// <summary>
        /// ADSB_FLAGS_VALID_ALTITUDE
        /// </summary>
        AdsbFlagsValidAltitude = 2,
        /// <summary>
        /// ADSB_FLAGS_VALID_HEADING
        /// </summary>
        AdsbFlagsValidHeading = 4,
        /// <summary>
        /// ADSB_FLAGS_VALID_VELOCITY
        /// </summary>
        AdsbFlagsValidVelocity = 8,
        /// <summary>
        /// ADSB_FLAGS_VALID_CALLSIGN
        /// </summary>
        AdsbFlagsValidCallsign = 16,
        /// <summary>
        /// ADSB_FLAGS_VALID_SQUAWK
        /// </summary>
        AdsbFlagsValidSquawk = 32,
        /// <summary>
        /// ADSB_FLAGS_SIMULATED
        /// </summary>
        AdsbFlagsSimulated = 64,
        /// <summary>
        /// ADSB_FLAGS_VERTICAL_VELOCITY_VALID
        /// </summary>
        AdsbFlagsVerticalVelocityValid = 128,
        /// <summary>
        /// ADSB_FLAGS_BARO_VALID
        /// </summary>
        AdsbFlagsBaroValid = 256,
        /// <summary>
        /// ADSB_FLAGS_SOURCE_UAT
        /// </summary>
        AdsbFlagsSourceUat = 32768,
    }
    public static class AdsbFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(32768);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"ADSB_FLAGS_VALID_COORDS");
            yield return new EnumValue<T>(converter(2),"ADSB_FLAGS_VALID_ALTITUDE");
            yield return new EnumValue<T>(converter(4),"ADSB_FLAGS_VALID_HEADING");
            yield return new EnumValue<T>(converter(8),"ADSB_FLAGS_VALID_VELOCITY");
            yield return new EnumValue<T>(converter(16),"ADSB_FLAGS_VALID_CALLSIGN");
            yield return new EnumValue<T>(converter(32),"ADSB_FLAGS_VALID_SQUAWK");
            yield return new EnumValue<T>(converter(64),"ADSB_FLAGS_SIMULATED");
            yield return new EnumValue<T>(converter(128),"ADSB_FLAGS_VERTICAL_VELOCITY_VALID");
            yield return new EnumValue<T>(converter(256),"ADSB_FLAGS_BARO_VALID");
            yield return new EnumValue<T>(converter(32768),"ADSB_FLAGS_SOURCE_UAT");
        }
    }
    /// <summary>
    /// Bitmap of options for the MAV_CMD_DO_REPOSITION
    ///  MAV_DO_REPOSITION_FLAGS
    /// </summary>
    public enum MavDoRepositionFlags : ulong
    {
        /// <summary>
        /// The aircraft should immediately transition into guided. This should not be set for follow me applications
        /// MAV_DO_REPOSITION_FLAGS_CHANGE_MODE
        /// </summary>
        MavDoRepositionFlagsChangeMode = 1,
    }
    public static class MavDoRepositionFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_DO_REPOSITION_FLAGS_CHANGE_MODE");
        }
    }
    /// <summary>
    /// Speed setpoint types used in MAV_CMD_DO_CHANGE_SPEED
    ///  SPEED_TYPE
    /// </summary>
    public enum SpeedType : ulong
    {
        /// <summary>
        /// Airspeed
        /// SPEED_TYPE_AIRSPEED
        /// </summary>
        SpeedTypeAirspeed = 0,
        /// <summary>
        /// Groundspeed
        /// SPEED_TYPE_GROUNDSPEED
        /// </summary>
        SpeedTypeGroundspeed = 1,
        /// <summary>
        /// Climb speed
        /// SPEED_TYPE_CLIMB_SPEED
        /// </summary>
        SpeedTypeClimbSpeed = 2,
        /// <summary>
        /// Descent speed
        /// SPEED_TYPE_DESCENT_SPEED
        /// </summary>
        SpeedTypeDescentSpeed = 3,
    }
    public static class SpeedTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"SPEED_TYPE_AIRSPEED");
            yield return new EnumValue<T>(converter(1),"SPEED_TYPE_GROUNDSPEED");
            yield return new EnumValue<T>(converter(2),"SPEED_TYPE_CLIMB_SPEED");
            yield return new EnumValue<T>(converter(3),"SPEED_TYPE_DESCENT_SPEED");
        }
    }
    /// <summary>
    /// Flags in ESTIMATOR_STATUS message
    ///  ESTIMATOR_STATUS_FLAGS
    /// </summary>
    public enum EstimatorStatusFlags : ulong
    {
        /// <summary>
        /// True if the attitude estimate is good
        /// ESTIMATOR_ATTITUDE
        /// </summary>
        EstimatorAttitude = 1,
        /// <summary>
        /// True if the horizontal velocity estimate is good
        /// ESTIMATOR_VELOCITY_HORIZ
        /// </summary>
        EstimatorVelocityHoriz = 2,
        /// <summary>
        /// True if the  vertical velocity estimate is good
        /// ESTIMATOR_VELOCITY_VERT
        /// </summary>
        EstimatorVelocityVert = 4,
        /// <summary>
        /// True if the horizontal position (relative) estimate is good
        /// ESTIMATOR_POS_HORIZ_REL
        /// </summary>
        EstimatorPosHorizRel = 8,
        /// <summary>
        /// True if the horizontal position (absolute) estimate is good
        /// ESTIMATOR_POS_HORIZ_ABS
        /// </summary>
        EstimatorPosHorizAbs = 16,
        /// <summary>
        /// True if the vertical position (absolute) estimate is good
        /// ESTIMATOR_POS_VERT_ABS
        /// </summary>
        EstimatorPosVertAbs = 32,
        /// <summary>
        /// True if the vertical position (above ground) estimate is good
        /// ESTIMATOR_POS_VERT_AGL
        /// </summary>
        EstimatorPosVertAgl = 64,
        /// <summary>
        /// True if the EKF is in a constant position mode and is not using external measurements (eg GPS or optical flow)
        /// ESTIMATOR_CONST_POS_MODE
        /// </summary>
        EstimatorConstPosMode = 128,
        /// <summary>
        /// True if the EKF has sufficient data to enter a mode that will provide a (relative) position estimate
        /// ESTIMATOR_PRED_POS_HORIZ_REL
        /// </summary>
        EstimatorPredPosHorizRel = 256,
        /// <summary>
        /// True if the EKF has sufficient data to enter a mode that will provide a (absolute) position estimate
        /// ESTIMATOR_PRED_POS_HORIZ_ABS
        /// </summary>
        EstimatorPredPosHorizAbs = 512,
        /// <summary>
        /// True if the EKF has detected a GPS glitch
        /// ESTIMATOR_GPS_GLITCH
        /// </summary>
        EstimatorGpsGlitch = 1024,
        /// <summary>
        /// True if the EKF has detected bad accelerometer data
        /// ESTIMATOR_ACCEL_ERROR
        /// </summary>
        EstimatorAccelError = 2048,
    }
    public static class EstimatorStatusFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"ESTIMATOR_ATTITUDE");
            yield return new EnumValue<T>(converter(2),"ESTIMATOR_VELOCITY_HORIZ");
            yield return new EnumValue<T>(converter(4),"ESTIMATOR_VELOCITY_VERT");
            yield return new EnumValue<T>(converter(8),"ESTIMATOR_POS_HORIZ_REL");
            yield return new EnumValue<T>(converter(16),"ESTIMATOR_POS_HORIZ_ABS");
            yield return new EnumValue<T>(converter(32),"ESTIMATOR_POS_VERT_ABS");
            yield return new EnumValue<T>(converter(64),"ESTIMATOR_POS_VERT_AGL");
            yield return new EnumValue<T>(converter(128),"ESTIMATOR_CONST_POS_MODE");
            yield return new EnumValue<T>(converter(256),"ESTIMATOR_PRED_POS_HORIZ_REL");
            yield return new EnumValue<T>(converter(512),"ESTIMATOR_PRED_POS_HORIZ_ABS");
            yield return new EnumValue<T>(converter(1024),"ESTIMATOR_GPS_GLITCH");
            yield return new EnumValue<T>(converter(2048),"ESTIMATOR_ACCEL_ERROR");
        }
    }
    /// <summary>
    /// Sequence that motors are tested when using MAV_CMD_DO_MOTOR_TEST.
    ///  MOTOR_TEST_ORDER
    /// </summary>
    public enum MotorTestOrder : ulong
    {
        /// <summary>
        /// Default autopilot motor test method.
        /// MOTOR_TEST_ORDER_DEFAULT
        /// </summary>
        MotorTestOrderDefault = 0,
        /// <summary>
        /// Motor numbers are specified as their index in a predefined vehicle-specific sequence.
        /// MOTOR_TEST_ORDER_SEQUENCE
        /// </summary>
        MotorTestOrderSequence = 1,
        /// <summary>
        /// Motor numbers are specified as the output as labeled on the board.
        /// MOTOR_TEST_ORDER_BOARD
        /// </summary>
        MotorTestOrderBoard = 2,
    }
    public static class MotorTestOrderHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MOTOR_TEST_ORDER_DEFAULT");
            yield return new EnumValue<T>(converter(1),"MOTOR_TEST_ORDER_SEQUENCE");
            yield return new EnumValue<T>(converter(2),"MOTOR_TEST_ORDER_BOARD");
        }
    }
    /// <summary>
    /// Defines how throttle value is represented in MAV_CMD_DO_MOTOR_TEST.
    ///  MOTOR_TEST_THROTTLE_TYPE
    /// </summary>
    public enum MotorTestThrottleType : ulong
    {
        /// <summary>
        /// Throttle as a percentage (0 ~ 100)
        /// MOTOR_TEST_THROTTLE_PERCENT
        /// </summary>
        MotorTestThrottlePercent = 0,
        /// <summary>
        /// Throttle as an absolute PWM value (normally in range of 1000~2000).
        /// MOTOR_TEST_THROTTLE_PWM
        /// </summary>
        MotorTestThrottlePwm = 1,
        /// <summary>
        /// Throttle pass-through from pilot's transmitter.
        /// MOTOR_TEST_THROTTLE_PILOT
        /// </summary>
        MotorTestThrottlePilot = 2,
        /// <summary>
        /// Per-motor compass calibration test.
        /// MOTOR_TEST_COMPASS_CAL
        /// </summary>
        MotorTestCompassCal = 3,
    }
    public static class MotorTestThrottleTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MOTOR_TEST_THROTTLE_PERCENT");
            yield return new EnumValue<T>(converter(1),"MOTOR_TEST_THROTTLE_PWM");
            yield return new EnumValue<T>(converter(2),"MOTOR_TEST_THROTTLE_PILOT");
            yield return new EnumValue<T>(converter(3),"MOTOR_TEST_COMPASS_CAL");
        }
    }
    /// <summary>
    ///  GPS_INPUT_IGNORE_FLAGS
    /// </summary>
    public enum GpsInputIgnoreFlags : ulong
    {
        /// <summary>
        /// ignore altitude field
        /// GPS_INPUT_IGNORE_FLAG_ALT
        /// </summary>
        GpsInputIgnoreFlagAlt = 1,
        /// <summary>
        /// ignore hdop field
        /// GPS_INPUT_IGNORE_FLAG_HDOP
        /// </summary>
        GpsInputIgnoreFlagHdop = 2,
        /// <summary>
        /// ignore vdop field
        /// GPS_INPUT_IGNORE_FLAG_VDOP
        /// </summary>
        GpsInputIgnoreFlagVdop = 4,
        /// <summary>
        /// ignore horizontal velocity field (vn and ve)
        /// GPS_INPUT_IGNORE_FLAG_VEL_HORIZ
        /// </summary>
        GpsInputIgnoreFlagVelHoriz = 8,
        /// <summary>
        /// ignore vertical velocity field (vd)
        /// GPS_INPUT_IGNORE_FLAG_VEL_VERT
        /// </summary>
        GpsInputIgnoreFlagVelVert = 16,
        /// <summary>
        /// ignore speed accuracy field
        /// GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY
        /// </summary>
        GpsInputIgnoreFlagSpeedAccuracy = 32,
        /// <summary>
        /// ignore horizontal accuracy field
        /// GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY
        /// </summary>
        GpsInputIgnoreFlagHorizontalAccuracy = 64,
        /// <summary>
        /// ignore vertical accuracy field
        /// GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY
        /// </summary>
        GpsInputIgnoreFlagVerticalAccuracy = 128,
    }
    public static class GpsInputIgnoreFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"GPS_INPUT_IGNORE_FLAG_ALT");
            yield return new EnumValue<T>(converter(2),"GPS_INPUT_IGNORE_FLAG_HDOP");
            yield return new EnumValue<T>(converter(4),"GPS_INPUT_IGNORE_FLAG_VDOP");
            yield return new EnumValue<T>(converter(8),"GPS_INPUT_IGNORE_FLAG_VEL_HORIZ");
            yield return new EnumValue<T>(converter(16),"GPS_INPUT_IGNORE_FLAG_VEL_VERT");
            yield return new EnumValue<T>(converter(32),"GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY");
            yield return new EnumValue<T>(converter(64),"GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY");
            yield return new EnumValue<T>(converter(128),"GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY");
        }
    }
    /// <summary>
    /// Possible actions an aircraft can take to avoid a collision.
    ///  MAV_COLLISION_ACTION
    /// </summary>
    public enum MavCollisionAction : ulong
    {
        /// <summary>
        /// Ignore any potential collisions
        /// MAV_COLLISION_ACTION_NONE
        /// </summary>
        MavCollisionActionNone = 0,
        /// <summary>
        /// Report potential collision
        /// MAV_COLLISION_ACTION_REPORT
        /// </summary>
        MavCollisionActionReport = 1,
        /// <summary>
        /// Ascend or Descend to avoid threat
        /// MAV_COLLISION_ACTION_ASCEND_OR_DESCEND
        /// </summary>
        MavCollisionActionAscendOrDescend = 2,
        /// <summary>
        /// Move horizontally to avoid threat
        /// MAV_COLLISION_ACTION_MOVE_HORIZONTALLY
        /// </summary>
        MavCollisionActionMoveHorizontally = 3,
        /// <summary>
        /// Aircraft to move perpendicular to the collision's velocity vector
        /// MAV_COLLISION_ACTION_MOVE_PERPENDICULAR
        /// </summary>
        MavCollisionActionMovePerpendicular = 4,
        /// <summary>
        /// Aircraft to fly directly back to its launch point
        /// MAV_COLLISION_ACTION_RTL
        /// </summary>
        MavCollisionActionRtl = 5,
        /// <summary>
        /// Aircraft to stop in place
        /// MAV_COLLISION_ACTION_HOVER
        /// </summary>
        MavCollisionActionHover = 6,
    }
    public static class MavCollisionActionHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_COLLISION_ACTION_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_COLLISION_ACTION_REPORT");
            yield return new EnumValue<T>(converter(2),"MAV_COLLISION_ACTION_ASCEND_OR_DESCEND");
            yield return new EnumValue<T>(converter(3),"MAV_COLLISION_ACTION_MOVE_HORIZONTALLY");
            yield return new EnumValue<T>(converter(4),"MAV_COLLISION_ACTION_MOVE_PERPENDICULAR");
            yield return new EnumValue<T>(converter(5),"MAV_COLLISION_ACTION_RTL");
            yield return new EnumValue<T>(converter(6),"MAV_COLLISION_ACTION_HOVER");
        }
    }
    /// <summary>
    /// Aircraft-rated danger from this threat.
    ///  MAV_COLLISION_THREAT_LEVEL
    /// </summary>
    public enum MavCollisionThreatLevel : ulong
    {
        /// <summary>
        /// Not a threat
        /// MAV_COLLISION_THREAT_LEVEL_NONE
        /// </summary>
        MavCollisionThreatLevelNone = 0,
        /// <summary>
        /// Craft is mildly concerned about this threat
        /// MAV_COLLISION_THREAT_LEVEL_LOW
        /// </summary>
        MavCollisionThreatLevelLow = 1,
        /// <summary>
        /// Craft is panicking, and may take actions to avoid threat
        /// MAV_COLLISION_THREAT_LEVEL_HIGH
        /// </summary>
        MavCollisionThreatLevelHigh = 2,
    }
    public static class MavCollisionThreatLevelHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_COLLISION_THREAT_LEVEL_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_COLLISION_THREAT_LEVEL_LOW");
            yield return new EnumValue<T>(converter(2),"MAV_COLLISION_THREAT_LEVEL_HIGH");
        }
    }
    /// <summary>
    /// Source of information about this collision.
    ///  MAV_COLLISION_SRC
    /// </summary>
    public enum MavCollisionSrc : ulong
    {
        /// <summary>
        /// ID field references ADSB_VEHICLE packets
        /// MAV_COLLISION_SRC_ADSB
        /// </summary>
        MavCollisionSrcAdsb = 0,
        /// <summary>
        /// ID field references MAVLink SRC ID
        /// MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT
        /// </summary>
        MavCollisionSrcMavlinkGpsGlobalInt = 1,
    }
    public static class MavCollisionSrcHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_COLLISION_SRC_ADSB");
            yield return new EnumValue<T>(converter(1),"MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT");
        }
    }
    /// <summary>
    /// Type of GPS fix
    ///  GPS_FIX_TYPE
    /// </summary>
    public enum GpsFixType : ulong
    {
        /// <summary>
        /// No GPS connected
        /// GPS_FIX_TYPE_NO_GPS
        /// </summary>
        GpsFixTypeNoGps = 0,
        /// <summary>
        /// No position information, GPS is connected
        /// GPS_FIX_TYPE_NO_FIX
        /// </summary>
        GpsFixTypeNoFix = 1,
        /// <summary>
        /// 2D position
        /// GPS_FIX_TYPE_2D_FIX
        /// </summary>
        GpsFixType2dFix = 2,
        /// <summary>
        /// 3D position
        /// GPS_FIX_TYPE_3D_FIX
        /// </summary>
        GpsFixType3dFix = 3,
        /// <summary>
        /// DGPS/SBAS aided 3D position
        /// GPS_FIX_TYPE_DGPS
        /// </summary>
        GpsFixTypeDgps = 4,
        /// <summary>
        /// RTK float, 3D position
        /// GPS_FIX_TYPE_RTK_FLOAT
        /// </summary>
        GpsFixTypeRtkFloat = 5,
        /// <summary>
        /// RTK Fixed, 3D position
        /// GPS_FIX_TYPE_RTK_FIXED
        /// </summary>
        GpsFixTypeRtkFixed = 6,
        /// <summary>
        /// Static fixed, typically used for base stations
        /// GPS_FIX_TYPE_STATIC
        /// </summary>
        GpsFixTypeStatic = 7,
        /// <summary>
        /// PPP, 3D position.
        /// GPS_FIX_TYPE_PPP
        /// </summary>
        GpsFixTypePpp = 8,
    }
    public static class GpsFixTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"GPS_FIX_TYPE_NO_GPS");
            yield return new EnumValue<T>(converter(1),"GPS_FIX_TYPE_NO_FIX");
            yield return new EnumValue<T>(converter(2),"GPS_FIX_TYPE_2D_FIX");
            yield return new EnumValue<T>(converter(3),"GPS_FIX_TYPE_3D_FIX");
            yield return new EnumValue<T>(converter(4),"GPS_FIX_TYPE_DGPS");
            yield return new EnumValue<T>(converter(5),"GPS_FIX_TYPE_RTK_FLOAT");
            yield return new EnumValue<T>(converter(6),"GPS_FIX_TYPE_RTK_FIXED");
            yield return new EnumValue<T>(converter(7),"GPS_FIX_TYPE_STATIC");
            yield return new EnumValue<T>(converter(8),"GPS_FIX_TYPE_PPP");
        }
    }
    /// <summary>
    /// RTK GPS baseline coordinate system, used for RTK corrections
    ///  RTK_BASELINE_COORDINATE_SYSTEM
    /// </summary>
    public enum RtkBaselineCoordinateSystem : ulong
    {
        /// <summary>
        /// Earth-centered, Earth-fixed
        /// RTK_BASELINE_COORDINATE_SYSTEM_ECEF
        /// </summary>
        RtkBaselineCoordinateSystemEcef = 0,
        /// <summary>
        /// RTK basestation centered, north, east, down
        /// RTK_BASELINE_COORDINATE_SYSTEM_NED
        /// </summary>
        RtkBaselineCoordinateSystemNed = 1,
    }
    public static class RtkBaselineCoordinateSystemHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"RTK_BASELINE_COORDINATE_SYSTEM_ECEF");
            yield return new EnumValue<T>(converter(1),"RTK_BASELINE_COORDINATE_SYSTEM_NED");
        }
    }
    /// <summary>
    /// Type of landing target
    ///  LANDING_TARGET_TYPE
    /// </summary>
    public enum LandingTargetType : ulong
    {
        /// <summary>
        /// Landing target signaled by light beacon (ex: IR-LOCK)
        /// LANDING_TARGET_TYPE_LIGHT_BEACON
        /// </summary>
        LandingTargetTypeLightBeacon = 0,
        /// <summary>
        /// Landing target signaled by radio beacon (ex: ILS, NDB)
        /// LANDING_TARGET_TYPE_RADIO_BEACON
        /// </summary>
        LandingTargetTypeRadioBeacon = 1,
        /// <summary>
        /// Landing target represented by a fiducial marker (ex: ARTag)
        /// LANDING_TARGET_TYPE_VISION_FIDUCIAL
        /// </summary>
        LandingTargetTypeVisionFiducial = 2,
        /// <summary>
        /// Landing target represented by a pre-defined visual shape/feature (ex: X-marker, H-marker, square)
        /// LANDING_TARGET_TYPE_VISION_OTHER
        /// </summary>
        LandingTargetTypeVisionOther = 3,
    }
    public static class LandingTargetTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"LANDING_TARGET_TYPE_LIGHT_BEACON");
            yield return new EnumValue<T>(converter(1),"LANDING_TARGET_TYPE_RADIO_BEACON");
            yield return new EnumValue<T>(converter(2),"LANDING_TARGET_TYPE_VISION_FIDUCIAL");
            yield return new EnumValue<T>(converter(3),"LANDING_TARGET_TYPE_VISION_OTHER");
        }
    }
    /// <summary>
    /// Direction of VTOL transition
    ///  VTOL_TRANSITION_HEADING
    /// </summary>
    public enum VtolTransitionHeading : ulong
    {
        /// <summary>
        /// Respect the heading configuration of the vehicle.
        /// VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT
        /// </summary>
        VtolTransitionHeadingVehicleDefault = 0,
        /// <summary>
        /// Use the heading pointing towards the next waypoint.
        /// VTOL_TRANSITION_HEADING_NEXT_WAYPOINT
        /// </summary>
        VtolTransitionHeadingNextWaypoint = 1,
        /// <summary>
        /// Use the heading on takeoff (while sitting on the ground).
        /// VTOL_TRANSITION_HEADING_TAKEOFF
        /// </summary>
        VtolTransitionHeadingTakeoff = 2,
        /// <summary>
        /// Use the specified heading in parameter 4.
        /// VTOL_TRANSITION_HEADING_SPECIFIED
        /// </summary>
        VtolTransitionHeadingSpecified = 3,
        /// <summary>
        /// Use the current heading when reaching takeoff altitude (potentially facing the wind when weather-vaning is active).
        /// VTOL_TRANSITION_HEADING_ANY
        /// </summary>
        VtolTransitionHeadingAny = 4,
    }
    public static class VtolTransitionHeadingHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT");
            yield return new EnumValue<T>(converter(1),"VTOL_TRANSITION_HEADING_NEXT_WAYPOINT");
            yield return new EnumValue<T>(converter(2),"VTOL_TRANSITION_HEADING_TAKEOFF");
            yield return new EnumValue<T>(converter(3),"VTOL_TRANSITION_HEADING_SPECIFIED");
            yield return new EnumValue<T>(converter(4),"VTOL_TRANSITION_HEADING_ANY");
        }
    }
    /// <summary>
    /// Camera capability flags (Bitmap)
    ///  CAMERA_CAP_FLAGS
    /// </summary>
    public enum CameraCapFlags : ulong
    {
        /// <summary>
        /// Camera is able to record video
        /// CAMERA_CAP_FLAGS_CAPTURE_VIDEO
        /// </summary>
        CameraCapFlagsCaptureVideo = 1,
        /// <summary>
        /// Camera is able to capture images
        /// CAMERA_CAP_FLAGS_CAPTURE_IMAGE
        /// </summary>
        CameraCapFlagsCaptureImage = 2,
        /// <summary>
        /// Camera has separate Video and Image/Photo modes (MAV_CMD_SET_CAMERA_MODE)
        /// CAMERA_CAP_FLAGS_HAS_MODES
        /// </summary>
        CameraCapFlagsHasModes = 4,
        /// <summary>
        /// Camera can capture images while in video mode
        /// CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE
        /// </summary>
        CameraCapFlagsCanCaptureImageInVideoMode = 8,
        /// <summary>
        /// Camera can capture videos while in Photo/Image mode
        /// CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE
        /// </summary>
        CameraCapFlagsCanCaptureVideoInImageMode = 16,
        /// <summary>
        /// Camera has image survey mode (MAV_CMD_SET_CAMERA_MODE)
        /// CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE
        /// </summary>
        CameraCapFlagsHasImageSurveyMode = 32,
        /// <summary>
        /// Camera has basic zoom control (MAV_CMD_SET_CAMERA_ZOOM)
        /// CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM
        /// </summary>
        CameraCapFlagsHasBasicZoom = 64,
        /// <summary>
        /// Camera has basic focus control (MAV_CMD_SET_CAMERA_FOCUS)
        /// CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS
        /// </summary>
        CameraCapFlagsHasBasicFocus = 128,
        /// <summary>
        /// Camera has video streaming capabilities (request VIDEO_STREAM_INFORMATION with MAV_CMD_REQUEST_MESSAGE for video streaming info)
        /// CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM
        /// </summary>
        CameraCapFlagsHasVideoStream = 256,
        /// <summary>
        /// Camera supports tracking of a point on the camera view.
        /// CAMERA_CAP_FLAGS_HAS_TRACKING_POINT
        /// </summary>
        CameraCapFlagsHasTrackingPoint = 512,
        /// <summary>
        /// Camera supports tracking of a selection rectangle on the camera view.
        /// CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE
        /// </summary>
        CameraCapFlagsHasTrackingRectangle = 1024,
        /// <summary>
        /// Camera supports tracking geo status (CAMERA_TRACKING_GEO_STATUS).
        /// CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS
        /// </summary>
        CameraCapFlagsHasTrackingGeoStatus = 2048,
    }
    public static class CameraCapFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"CAMERA_CAP_FLAGS_CAPTURE_VIDEO");
            yield return new EnumValue<T>(converter(2),"CAMERA_CAP_FLAGS_CAPTURE_IMAGE");
            yield return new EnumValue<T>(converter(4),"CAMERA_CAP_FLAGS_HAS_MODES");
            yield return new EnumValue<T>(converter(8),"CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE");
            yield return new EnumValue<T>(converter(16),"CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE");
            yield return new EnumValue<T>(converter(32),"CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE");
            yield return new EnumValue<T>(converter(64),"CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM");
            yield return new EnumValue<T>(converter(128),"CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS");
            yield return new EnumValue<T>(converter(256),"CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM");
            yield return new EnumValue<T>(converter(512),"CAMERA_CAP_FLAGS_HAS_TRACKING_POINT");
            yield return new EnumValue<T>(converter(1024),"CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE");
            yield return new EnumValue<T>(converter(2048),"CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS");
        }
    }
    /// <summary>
    /// Stream status flags (Bitmap)
    ///  VIDEO_STREAM_STATUS_FLAGS
    /// </summary>
    public enum VideoStreamStatusFlags : ulong
    {
        /// <summary>
        /// Stream is active (running)
        /// VIDEO_STREAM_STATUS_FLAGS_RUNNING
        /// </summary>
        VideoStreamStatusFlagsRunning = 1,
        /// <summary>
        /// Stream is thermal imaging
        /// VIDEO_STREAM_STATUS_FLAGS_THERMAL
        /// </summary>
        VideoStreamStatusFlagsThermal = 2,
    }
    public static class VideoStreamStatusFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"VIDEO_STREAM_STATUS_FLAGS_RUNNING");
            yield return new EnumValue<T>(converter(2),"VIDEO_STREAM_STATUS_FLAGS_THERMAL");
        }
    }
    /// <summary>
    /// Video stream types
    ///  VIDEO_STREAM_TYPE
    /// </summary>
    public enum VideoStreamType : ulong
    {
        /// <summary>
        /// Stream is RTSP
        /// VIDEO_STREAM_TYPE_RTSP
        /// </summary>
        VideoStreamTypeRtsp = 0,
        /// <summary>
        /// Stream is RTP UDP (URI gives the port number)
        /// VIDEO_STREAM_TYPE_RTPUDP
        /// </summary>
        VideoStreamTypeRtpudp = 1,
        /// <summary>
        /// Stream is MPEG on TCP
        /// VIDEO_STREAM_TYPE_TCP_MPEG
        /// </summary>
        VideoStreamTypeTcpMpeg = 2,
        /// <summary>
        /// Stream is h.264 on MPEG TS (URI gives the port number)
        /// VIDEO_STREAM_TYPE_MPEG_TS_H264
        /// </summary>
        VideoStreamTypeMpegTsH264 = 3,
    }
    public static class VideoStreamTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"VIDEO_STREAM_TYPE_RTSP");
            yield return new EnumValue<T>(converter(1),"VIDEO_STREAM_TYPE_RTPUDP");
            yield return new EnumValue<T>(converter(2),"VIDEO_STREAM_TYPE_TCP_MPEG");
            yield return new EnumValue<T>(converter(3),"VIDEO_STREAM_TYPE_MPEG_TS_H264");
        }
    }
    /// <summary>
    /// Camera tracking status flags
    ///  CAMERA_TRACKING_STATUS_FLAGS
    /// </summary>
    public enum CameraTrackingStatusFlags : ulong
    {
        /// <summary>
        /// Camera is not tracking
        /// CAMERA_TRACKING_STATUS_FLAGS_IDLE
        /// </summary>
        CameraTrackingStatusFlagsIdle = 0,
        /// <summary>
        /// Camera is tracking
        /// CAMERA_TRACKING_STATUS_FLAGS_ACTIVE
        /// </summary>
        CameraTrackingStatusFlagsActive = 1,
        /// <summary>
        /// Camera tracking in error state
        /// CAMERA_TRACKING_STATUS_FLAGS_ERROR
        /// </summary>
        CameraTrackingStatusFlagsError = 2,
    }
    public static class CameraTrackingStatusFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CAMERA_TRACKING_STATUS_FLAGS_IDLE");
            yield return new EnumValue<T>(converter(1),"CAMERA_TRACKING_STATUS_FLAGS_ACTIVE");
            yield return new EnumValue<T>(converter(2),"CAMERA_TRACKING_STATUS_FLAGS_ERROR");
        }
    }
    /// <summary>
    /// Camera tracking modes
    ///  CAMERA_TRACKING_MODE
    /// </summary>
    public enum CameraTrackingMode : ulong
    {
        /// <summary>
        /// Not tracking
        /// CAMERA_TRACKING_MODE_NONE
        /// </summary>
        CameraTrackingModeNone = 0,
        /// <summary>
        /// Target is a point
        /// CAMERA_TRACKING_MODE_POINT
        /// </summary>
        CameraTrackingModePoint = 1,
        /// <summary>
        /// Target is a rectangle
        /// CAMERA_TRACKING_MODE_RECTANGLE
        /// </summary>
        CameraTrackingModeRectangle = 2,
    }
    public static class CameraTrackingModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CAMERA_TRACKING_MODE_NONE");
            yield return new EnumValue<T>(converter(1),"CAMERA_TRACKING_MODE_POINT");
            yield return new EnumValue<T>(converter(2),"CAMERA_TRACKING_MODE_RECTANGLE");
        }
    }
    /// <summary>
    /// Camera tracking target data (shows where tracked target is within image)
    ///  CAMERA_TRACKING_TARGET_DATA
    /// </summary>
    public enum CameraTrackingTargetData : ulong
    {
        /// <summary>
        /// No target data
        /// CAMERA_TRACKING_TARGET_DATA_NONE
        /// </summary>
        CameraTrackingTargetDataNone = 0,
        /// <summary>
        /// Target data embedded in image data (proprietary)
        /// CAMERA_TRACKING_TARGET_DATA_EMBEDDED
        /// </summary>
        CameraTrackingTargetDataEmbedded = 1,
        /// <summary>
        /// Target data rendered in image
        /// CAMERA_TRACKING_TARGET_DATA_RENDERED
        /// </summary>
        CameraTrackingTargetDataRendered = 2,
        /// <summary>
        /// Target data within status message (Point or Rectangle)
        /// CAMERA_TRACKING_TARGET_DATA_IN_STATUS
        /// </summary>
        CameraTrackingTargetDataInStatus = 4,
    }
    public static class CameraTrackingTargetDataHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CAMERA_TRACKING_TARGET_DATA_NONE");
            yield return new EnumValue<T>(converter(1),"CAMERA_TRACKING_TARGET_DATA_EMBEDDED");
            yield return new EnumValue<T>(converter(2),"CAMERA_TRACKING_TARGET_DATA_RENDERED");
            yield return new EnumValue<T>(converter(4),"CAMERA_TRACKING_TARGET_DATA_IN_STATUS");
        }
    }
    /// <summary>
    /// Zoom types for MAV_CMD_SET_CAMERA_ZOOM
    ///  CAMERA_ZOOM_TYPE
    /// </summary>
    public enum CameraZoomType : ulong
    {
        /// <summary>
        /// Zoom one step increment (-1 for wide, 1 for tele)
        /// ZOOM_TYPE_STEP
        /// </summary>
        ZoomTypeStep = 0,
        /// <summary>
        /// Continuous zoom up/down until stopped (-1 for wide, 1 for tele, 0 to stop zooming)
        /// ZOOM_TYPE_CONTINUOUS
        /// </summary>
        ZoomTypeContinuous = 1,
        /// <summary>
        /// Zoom value as proportion of full camera range (a percentage value between 0.0 and 100.0)
        /// ZOOM_TYPE_RANGE
        /// </summary>
        ZoomTypeRange = 2,
        /// <summary>
        /// Zoom value/variable focal length in millimetres. Note that there is no message to get the valid zoom range of the camera, so this can type can only be used for cameras where the zoom range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera)
        /// ZOOM_TYPE_FOCAL_LENGTH
        /// </summary>
        ZoomTypeFocalLength = 3,
        /// <summary>
        /// Zoom value as horizontal field of view in degrees.
        /// ZOOM_TYPE_HORIZONTAL_FOV
        /// </summary>
        ZoomTypeHorizontalFov = 4,
    }
    public static class CameraZoomTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"ZOOM_TYPE_STEP");
            yield return new EnumValue<T>(converter(1),"ZOOM_TYPE_CONTINUOUS");
            yield return new EnumValue<T>(converter(2),"ZOOM_TYPE_RANGE");
            yield return new EnumValue<T>(converter(3),"ZOOM_TYPE_FOCAL_LENGTH");
            yield return new EnumValue<T>(converter(4),"ZOOM_TYPE_HORIZONTAL_FOV");
        }
    }
    /// <summary>
    /// Focus types for MAV_CMD_SET_CAMERA_FOCUS
    ///  SET_FOCUS_TYPE
    /// </summary>
    public enum SetFocusType : ulong
    {
        /// <summary>
        /// Focus one step increment (-1 for focusing in, 1 for focusing out towards infinity).
        /// FOCUS_TYPE_STEP
        /// </summary>
        FocusTypeStep = 0,
        /// <summary>
        /// Continuous focus up/down until stopped (-1 for focusing in, 1 for focusing out towards infinity, 0 to stop focusing)
        /// FOCUS_TYPE_CONTINUOUS
        /// </summary>
        FocusTypeContinuous = 1,
        /// <summary>
        /// Focus value as proportion of full camera focus range (a value between 0.0 and 100.0)
        /// FOCUS_TYPE_RANGE
        /// </summary>
        FocusTypeRange = 2,
        /// <summary>
        /// Focus value in metres. Note that there is no message to get the valid focus range of the camera, so this can type can only be used for cameras where the range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera).
        /// FOCUS_TYPE_METERS
        /// </summary>
        FocusTypeMeters = 3,
        /// <summary>
        /// Focus automatically.
        /// FOCUS_TYPE_AUTO
        /// </summary>
        FocusTypeAuto = 4,
        /// <summary>
        /// Single auto focus. Mainly used for still pictures. Usually abbreviated as AF-S.
        /// FOCUS_TYPE_AUTO_SINGLE
        /// </summary>
        FocusTypeAutoSingle = 5,
        /// <summary>
        /// Continuous auto focus. Mainly used for dynamic scenes. Abbreviated as AF-C.
        /// FOCUS_TYPE_AUTO_CONTINUOUS
        /// </summary>
        FocusTypeAutoContinuous = 6,
    }
    public static class SetFocusTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"FOCUS_TYPE_STEP");
            yield return new EnumValue<T>(converter(1),"FOCUS_TYPE_CONTINUOUS");
            yield return new EnumValue<T>(converter(2),"FOCUS_TYPE_RANGE");
            yield return new EnumValue<T>(converter(3),"FOCUS_TYPE_METERS");
            yield return new EnumValue<T>(converter(4),"FOCUS_TYPE_AUTO");
            yield return new EnumValue<T>(converter(5),"FOCUS_TYPE_AUTO_SINGLE");
            yield return new EnumValue<T>(converter(6),"FOCUS_TYPE_AUTO_CONTINUOUS");
        }
    }
    /// <summary>
    /// Result from PARAM_EXT_SET message (or a PARAM_SET within a transaction).
    ///  PARAM_ACK
    /// </summary>
    public enum ParamAck : ulong
    {
        /// <summary>
        /// Parameter value ACCEPTED and SET
        /// PARAM_ACK_ACCEPTED
        /// </summary>
        ParamAckAccepted = 0,
        /// <summary>
        /// Parameter value UNKNOWN/UNSUPPORTED
        /// PARAM_ACK_VALUE_UNSUPPORTED
        /// </summary>
        ParamAckValueUnsupported = 1,
        /// <summary>
        /// Parameter failed to set
        /// PARAM_ACK_FAILED
        /// </summary>
        ParamAckFailed = 2,
        /// <summary>
        /// Parameter value received but not yet set/accepted. A subsequent PARAM_ACK_TRANSACTION or PARAM_EXT_ACK with the final result will follow once operation is completed. This is returned immediately for parameters that take longer to set, indicating that the the parameter was received and does not need to be resent.
        /// PARAM_ACK_IN_PROGRESS
        /// </summary>
        ParamAckInProgress = 3,
    }
    public static class ParamAckHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"PARAM_ACK_ACCEPTED");
            yield return new EnumValue<T>(converter(1),"PARAM_ACK_VALUE_UNSUPPORTED");
            yield return new EnumValue<T>(converter(2),"PARAM_ACK_FAILED");
            yield return new EnumValue<T>(converter(3),"PARAM_ACK_IN_PROGRESS");
        }
    }
    /// <summary>
    /// Camera Modes.
    ///  CAMERA_MODE
    /// </summary>
    public enum CameraMode : ulong
    {
        /// <summary>
        /// Camera is in image/photo capture mode.
        /// CAMERA_MODE_IMAGE
        /// </summary>
        CameraModeImage = 0,
        /// <summary>
        /// Camera is in video capture mode.
        /// CAMERA_MODE_VIDEO
        /// </summary>
        CameraModeVideo = 1,
        /// <summary>
        /// Camera is in image survey capture mode. It allows for camera controller to do specific settings for surveys.
        /// CAMERA_MODE_IMAGE_SURVEY
        /// </summary>
        CameraModeImageSurvey = 2,
    }
    public static class CameraModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CAMERA_MODE_IMAGE");
            yield return new EnumValue<T>(converter(1),"CAMERA_MODE_VIDEO");
            yield return new EnumValue<T>(converter(2),"CAMERA_MODE_IMAGE_SURVEY");
        }
    }
    /// <summary>
    ///  MAV_ARM_AUTH_DENIED_REASON
    /// </summary>
    public enum MavArmAuthDeniedReason : ulong
    {
        /// <summary>
        /// Not a specific reason
        /// MAV_ARM_AUTH_DENIED_REASON_GENERIC
        /// </summary>
        MavArmAuthDeniedReasonGeneric = 0,
        /// <summary>
        /// Authorizer will send the error as string to GCS
        /// MAV_ARM_AUTH_DENIED_REASON_NONE
        /// </summary>
        MavArmAuthDeniedReasonNone = 1,
        /// <summary>
        /// At least one waypoint have a invalid value
        /// MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT
        /// </summary>
        MavArmAuthDeniedReasonInvalidWaypoint = 2,
        /// <summary>
        /// Timeout in the authorizer process(in case it depends on network)
        /// MAV_ARM_AUTH_DENIED_REASON_TIMEOUT
        /// </summary>
        MavArmAuthDeniedReasonTimeout = 3,
        /// <summary>
        /// Airspace of the mission in use by another vehicle, second result parameter can have the waypoint id that caused it to be denied.
        /// MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE
        /// </summary>
        MavArmAuthDeniedReasonAirspaceInUse = 4,
        /// <summary>
        /// Weather is not good to fly
        /// MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER
        /// </summary>
        MavArmAuthDeniedReasonBadWeather = 5,
    }
    public static class MavArmAuthDeniedReasonHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ARM_AUTH_DENIED_REASON_GENERIC");
            yield return new EnumValue<T>(converter(1),"MAV_ARM_AUTH_DENIED_REASON_NONE");
            yield return new EnumValue<T>(converter(2),"MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT");
            yield return new EnumValue<T>(converter(3),"MAV_ARM_AUTH_DENIED_REASON_TIMEOUT");
            yield return new EnumValue<T>(converter(4),"MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE");
            yield return new EnumValue<T>(converter(5),"MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER");
        }
    }
    /// <summary>
    /// RC type
    ///  RC_TYPE
    /// </summary>
    public enum RcType : ulong
    {
        /// <summary>
        /// Spektrum DSM2
        /// RC_TYPE_SPEKTRUM_DSM2
        /// </summary>
        RcTypeSpektrumDsm2 = 0,
        /// <summary>
        /// Spektrum DSMX
        /// RC_TYPE_SPEKTRUM_DSMX
        /// </summary>
        RcTypeSpektrumDsmx = 1,
    }
    public static class RcTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"RC_TYPE_SPEKTRUM_DSM2");
            yield return new EnumValue<T>(converter(1),"RC_TYPE_SPEKTRUM_DSMX");
        }
    }
    /// <summary>
    /// Bitmap to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 9 is set the floats afx afy afz should be interpreted as force instead of acceleration.
    ///  POSITION_TARGET_TYPEMASK
    /// </summary>
    public enum PositionTargetTypemask : ulong
    {
        /// <summary>
        /// Ignore position x
        /// POSITION_TARGET_TYPEMASK_X_IGNORE
        /// </summary>
        PositionTargetTypemaskXIgnore = 1,
        /// <summary>
        /// Ignore position y
        /// POSITION_TARGET_TYPEMASK_Y_IGNORE
        /// </summary>
        PositionTargetTypemaskYIgnore = 2,
        /// <summary>
        /// Ignore position z
        /// POSITION_TARGET_TYPEMASK_Z_IGNORE
        /// </summary>
        PositionTargetTypemaskZIgnore = 4,
        /// <summary>
        /// Ignore velocity x
        /// POSITION_TARGET_TYPEMASK_VX_IGNORE
        /// </summary>
        PositionTargetTypemaskVxIgnore = 8,
        /// <summary>
        /// Ignore velocity y
        /// POSITION_TARGET_TYPEMASK_VY_IGNORE
        /// </summary>
        PositionTargetTypemaskVyIgnore = 16,
        /// <summary>
        /// Ignore velocity z
        /// POSITION_TARGET_TYPEMASK_VZ_IGNORE
        /// </summary>
        PositionTargetTypemaskVzIgnore = 32,
        /// <summary>
        /// Ignore acceleration x
        /// POSITION_TARGET_TYPEMASK_AX_IGNORE
        /// </summary>
        PositionTargetTypemaskAxIgnore = 64,
        /// <summary>
        /// Ignore acceleration y
        /// POSITION_TARGET_TYPEMASK_AY_IGNORE
        /// </summary>
        PositionTargetTypemaskAyIgnore = 128,
        /// <summary>
        /// Ignore acceleration z
        /// POSITION_TARGET_TYPEMASK_AZ_IGNORE
        /// </summary>
        PositionTargetTypemaskAzIgnore = 256,
        /// <summary>
        /// Use force instead of acceleration
        /// POSITION_TARGET_TYPEMASK_FORCE_SET
        /// </summary>
        PositionTargetTypemaskForceSet = 512,
        /// <summary>
        /// Ignore yaw
        /// POSITION_TARGET_TYPEMASK_YAW_IGNORE
        /// </summary>
        PositionTargetTypemaskYawIgnore = 1024,
        /// <summary>
        /// Ignore yaw rate
        /// POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE
        /// </summary>
        PositionTargetTypemaskYawRateIgnore = 2048,
    }
    public static class PositionTargetTypemaskHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"POSITION_TARGET_TYPEMASK_X_IGNORE");
            yield return new EnumValue<T>(converter(2),"POSITION_TARGET_TYPEMASK_Y_IGNORE");
            yield return new EnumValue<T>(converter(4),"POSITION_TARGET_TYPEMASK_Z_IGNORE");
            yield return new EnumValue<T>(converter(8),"POSITION_TARGET_TYPEMASK_VX_IGNORE");
            yield return new EnumValue<T>(converter(16),"POSITION_TARGET_TYPEMASK_VY_IGNORE");
            yield return new EnumValue<T>(converter(32),"POSITION_TARGET_TYPEMASK_VZ_IGNORE");
            yield return new EnumValue<T>(converter(64),"POSITION_TARGET_TYPEMASK_AX_IGNORE");
            yield return new EnumValue<T>(converter(128),"POSITION_TARGET_TYPEMASK_AY_IGNORE");
            yield return new EnumValue<T>(converter(256),"POSITION_TARGET_TYPEMASK_AZ_IGNORE");
            yield return new EnumValue<T>(converter(512),"POSITION_TARGET_TYPEMASK_FORCE_SET");
            yield return new EnumValue<T>(converter(1024),"POSITION_TARGET_TYPEMASK_YAW_IGNORE");
            yield return new EnumValue<T>(converter(2048),"POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE");
        }
    }
    /// <summary>
    /// Bitmap to indicate which dimensions should be ignored by the vehicle: a value of 0b00000000 indicates that none of the setpoint dimensions should be ignored.
    ///  ATTITUDE_TARGET_TYPEMASK
    /// </summary>
    public enum AttitudeTargetTypemask : ulong
    {
        /// <summary>
        /// Ignore body roll rate
        /// ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskBodyRollRateIgnore = 1,
        /// <summary>
        /// Ignore body pitch rate
        /// ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskBodyPitchRateIgnore = 2,
        /// <summary>
        /// Ignore body yaw rate
        /// ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskBodyYawRateIgnore = 4,
        /// <summary>
        /// Use 3D body thrust setpoint instead of throttle
        /// ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET
        /// </summary>
        AttitudeTargetTypemaskThrustBodySet = 32,
        /// <summary>
        /// Ignore throttle
        /// ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskThrottleIgnore = 64,
        /// <summary>
        /// Ignore attitude
        /// ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskAttitudeIgnore = 128,
    }
    public static class AttitudeTargetTypemaskHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE");
            yield return new EnumValue<T>(converter(2),"ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE");
            yield return new EnumValue<T>(converter(4),"ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE");
            yield return new EnumValue<T>(converter(32),"ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET");
            yield return new EnumValue<T>(converter(64),"ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE");
            yield return new EnumValue<T>(converter(128),"ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE");
        }
    }
    /// <summary>
    /// Airborne status of UAS.
    ///  UTM_FLIGHT_STATE
    /// </summary>
    public enum UtmFlightState : ulong
    {
        /// <summary>
        /// The flight state can't be determined.
        /// UTM_FLIGHT_STATE_UNKNOWN
        /// </summary>
        UtmFlightStateUnknown = 1,
        /// <summary>
        /// UAS on ground.
        /// UTM_FLIGHT_STATE_GROUND
        /// </summary>
        UtmFlightStateGround = 2,
        /// <summary>
        /// UAS airborne.
        /// UTM_FLIGHT_STATE_AIRBORNE
        /// </summary>
        UtmFlightStateAirborne = 3,
        /// <summary>
        /// UAS is in an emergency flight state.
        /// UTM_FLIGHT_STATE_EMERGENCY
        /// </summary>
        UtmFlightStateEmergency = 16,
        /// <summary>
        /// UAS has no active controls.
        /// UTM_FLIGHT_STATE_NOCTRL
        /// </summary>
        UtmFlightStateNoctrl = 32,
    }
    public static class UtmFlightStateHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(16);
            yield return converter(32);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"UTM_FLIGHT_STATE_UNKNOWN");
            yield return new EnumValue<T>(converter(2),"UTM_FLIGHT_STATE_GROUND");
            yield return new EnumValue<T>(converter(3),"UTM_FLIGHT_STATE_AIRBORNE");
            yield return new EnumValue<T>(converter(16),"UTM_FLIGHT_STATE_EMERGENCY");
            yield return new EnumValue<T>(converter(32),"UTM_FLIGHT_STATE_NOCTRL");
        }
    }
    /// <summary>
    /// Flags for the global position report.
    ///  UTM_DATA_AVAIL_FLAGS
    /// </summary>
    public enum UtmDataAvailFlags : ulong
    {
        /// <summary>
        /// The field time contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_TIME_VALID
        /// </summary>
        UtmDataAvailFlagsTimeValid = 1,
        /// <summary>
        /// The field uas_id contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsUasIdAvailable = 2,
        /// <summary>
        /// The fields lat, lon and h_acc contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsPositionAvailable = 4,
        /// <summary>
        /// The fields alt and v_acc contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsAltitudeAvailable = 8,
        /// <summary>
        /// The field relative_alt contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsRelativeAltitudeAvailable = 16,
        /// <summary>
        /// The fields vx and vy contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsHorizontalVeloAvailable = 32,
        /// <summary>
        /// The field vz contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsVerticalVeloAvailable = 64,
        /// <summary>
        /// The fields next_lat, next_lon and next_alt contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsNextWaypointAvailable = 128,
    }
    public static class UtmDataAvailFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"UTM_DATA_AVAIL_FLAGS_TIME_VALID");
            yield return new EnumValue<T>(converter(2),"UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE");
            yield return new EnumValue<T>(converter(4),"UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE");
            yield return new EnumValue<T>(converter(8),"UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE");
            yield return new EnumValue<T>(converter(16),"UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE");
            yield return new EnumValue<T>(converter(32),"UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE");
            yield return new EnumValue<T>(converter(64),"UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE");
            yield return new EnumValue<T>(converter(128),"UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE");
        }
    }
    /// <summary>
    /// These flags encode the cellular network status
    ///  CELLULAR_STATUS_FLAG
    /// </summary>
    public enum CellularStatusFlag : ulong
    {
        /// <summary>
        /// State unknown or not reportable.
        /// CELLULAR_STATUS_FLAG_UNKNOWN
        /// </summary>
        CellularStatusFlagUnknown = 0,
        /// <summary>
        /// Modem is unusable
        /// CELLULAR_STATUS_FLAG_FAILED
        /// </summary>
        CellularStatusFlagFailed = 1,
        /// <summary>
        /// Modem is being initialized
        /// CELLULAR_STATUS_FLAG_INITIALIZING
        /// </summary>
        CellularStatusFlagInitializing = 2,
        /// <summary>
        /// Modem is locked
        /// CELLULAR_STATUS_FLAG_LOCKED
        /// </summary>
        CellularStatusFlagLocked = 3,
        /// <summary>
        /// Modem is not enabled and is powered down
        /// CELLULAR_STATUS_FLAG_DISABLED
        /// </summary>
        CellularStatusFlagDisabled = 4,
        /// <summary>
        /// Modem is currently transitioning to the CELLULAR_STATUS_FLAG_DISABLED state
        /// CELLULAR_STATUS_FLAG_DISABLING
        /// </summary>
        CellularStatusFlagDisabling = 5,
        /// <summary>
        /// Modem is currently transitioning to the CELLULAR_STATUS_FLAG_ENABLED state
        /// CELLULAR_STATUS_FLAG_ENABLING
        /// </summary>
        CellularStatusFlagEnabling = 6,
        /// <summary>
        /// Modem is enabled and powered on but not registered with a network provider and not available for data connections
        /// CELLULAR_STATUS_FLAG_ENABLED
        /// </summary>
        CellularStatusFlagEnabled = 7,
        /// <summary>
        /// Modem is searching for a network provider to register
        /// CELLULAR_STATUS_FLAG_SEARCHING
        /// </summary>
        CellularStatusFlagSearching = 8,
        /// <summary>
        /// Modem is registered with a network provider, and data connections and messaging may be available for use
        /// CELLULAR_STATUS_FLAG_REGISTERED
        /// </summary>
        CellularStatusFlagRegistered = 9,
        /// <summary>
        /// Modem is disconnecting and deactivating the last active packet data bearer. This state will not be entered if more than one packet data bearer is active and one of the active bearers is deactivated
        /// CELLULAR_STATUS_FLAG_DISCONNECTING
        /// </summary>
        CellularStatusFlagDisconnecting = 10,
        /// <summary>
        /// Modem is activating and connecting the first packet data bearer. Subsequent bearer activations when another bearer is already active do not cause this state to be entered
        /// CELLULAR_STATUS_FLAG_CONNECTING
        /// </summary>
        CellularStatusFlagConnecting = 11,
        /// <summary>
        /// One or more packet data bearers is active and connected
        /// CELLULAR_STATUS_FLAG_CONNECTED
        /// </summary>
        CellularStatusFlagConnected = 12,
    }
    public static class CellularStatusFlagHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CELLULAR_STATUS_FLAG_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"CELLULAR_STATUS_FLAG_FAILED");
            yield return new EnumValue<T>(converter(2),"CELLULAR_STATUS_FLAG_INITIALIZING");
            yield return new EnumValue<T>(converter(3),"CELLULAR_STATUS_FLAG_LOCKED");
            yield return new EnumValue<T>(converter(4),"CELLULAR_STATUS_FLAG_DISABLED");
            yield return new EnumValue<T>(converter(5),"CELLULAR_STATUS_FLAG_DISABLING");
            yield return new EnumValue<T>(converter(6),"CELLULAR_STATUS_FLAG_ENABLING");
            yield return new EnumValue<T>(converter(7),"CELLULAR_STATUS_FLAG_ENABLED");
            yield return new EnumValue<T>(converter(8),"CELLULAR_STATUS_FLAG_SEARCHING");
            yield return new EnumValue<T>(converter(9),"CELLULAR_STATUS_FLAG_REGISTERED");
            yield return new EnumValue<T>(converter(10),"CELLULAR_STATUS_FLAG_DISCONNECTING");
            yield return new EnumValue<T>(converter(11),"CELLULAR_STATUS_FLAG_CONNECTING");
            yield return new EnumValue<T>(converter(12),"CELLULAR_STATUS_FLAG_CONNECTED");
        }
    }
    /// <summary>
    /// These flags are used to diagnose the failure state of CELLULAR_STATUS
    ///  CELLULAR_NETWORK_FAILED_REASON
    /// </summary>
    public enum CellularNetworkFailedReason : ulong
    {
        /// <summary>
        /// No error
        /// CELLULAR_NETWORK_FAILED_REASON_NONE
        /// </summary>
        CellularNetworkFailedReasonNone = 0,
        /// <summary>
        /// Error state is unknown
        /// CELLULAR_NETWORK_FAILED_REASON_UNKNOWN
        /// </summary>
        CellularNetworkFailedReasonUnknown = 1,
        /// <summary>
        /// SIM is required for the modem but missing
        /// CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING
        /// </summary>
        CellularNetworkFailedReasonSimMissing = 2,
        /// <summary>
        /// SIM is available, but not usable for connection
        /// CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR
        /// </summary>
        CellularNetworkFailedReasonSimError = 3,
    }
    public static class CellularNetworkFailedReasonHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CELLULAR_NETWORK_FAILED_REASON_NONE");
            yield return new EnumValue<T>(converter(1),"CELLULAR_NETWORK_FAILED_REASON_UNKNOWN");
            yield return new EnumValue<T>(converter(2),"CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING");
            yield return new EnumValue<T>(converter(3),"CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR");
        }
    }
    /// <summary>
    /// Cellular network radio type
    ///  CELLULAR_NETWORK_RADIO_TYPE
    /// </summary>
    public enum CellularNetworkRadioType : ulong
    {
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_NONE
        /// </summary>
        CellularNetworkRadioTypeNone = 0,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_GSM
        /// </summary>
        CellularNetworkRadioTypeGsm = 1,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_CDMA
        /// </summary>
        CellularNetworkRadioTypeCdma = 2,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_WCDMA
        /// </summary>
        CellularNetworkRadioTypeWcdma = 3,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_LTE
        /// </summary>
        CellularNetworkRadioTypeLte = 4,
    }
    public static class CellularNetworkRadioTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CELLULAR_NETWORK_RADIO_TYPE_NONE");
            yield return new EnumValue<T>(converter(1),"CELLULAR_NETWORK_RADIO_TYPE_GSM");
            yield return new EnumValue<T>(converter(2),"CELLULAR_NETWORK_RADIO_TYPE_CDMA");
            yield return new EnumValue<T>(converter(3),"CELLULAR_NETWORK_RADIO_TYPE_WCDMA");
            yield return new EnumValue<T>(converter(4),"CELLULAR_NETWORK_RADIO_TYPE_LTE");
        }
    }
    /// <summary>
    /// Precision land modes (used in MAV_CMD_NAV_LAND).
    ///  PRECISION_LAND_MODE
    /// </summary>
    public enum PrecisionLandMode : ulong
    {
        /// <summary>
        /// Normal (non-precision) landing.
        /// PRECISION_LAND_MODE_DISABLED
        /// </summary>
        PrecisionLandModeDisabled = 0,
        /// <summary>
        /// Use precision landing if beacon detected when land command accepted, otherwise land normally.
        /// PRECISION_LAND_MODE_OPPORTUNISTIC
        /// </summary>
        PrecisionLandModeOpportunistic = 1,
        /// <summary>
        /// Use precision landing, searching for beacon if not found when land command accepted (land normally if beacon cannot be found).
        /// PRECISION_LAND_MODE_REQUIRED
        /// </summary>
        PrecisionLandModeRequired = 2,
    }
    public static class PrecisionLandModeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"PRECISION_LAND_MODE_DISABLED");
            yield return new EnumValue<T>(converter(1),"PRECISION_LAND_MODE_OPPORTUNISTIC");
            yield return new EnumValue<T>(converter(2),"PRECISION_LAND_MODE_REQUIRED");
        }
    }
    /// <summary>
    /// Parachute actions. Trigger release and enable/disable auto-release.
    ///  PARACHUTE_ACTION
    /// </summary>
    public enum ParachuteAction : ulong
    {
        /// <summary>
        /// Disable auto-release of parachute (i.e. release triggered by crash detectors).
        /// PARACHUTE_DISABLE
        /// </summary>
        ParachuteDisable = 0,
        /// <summary>
        /// Enable auto-release of parachute.
        /// PARACHUTE_ENABLE
        /// </summary>
        ParachuteEnable = 1,
        /// <summary>
        /// Release parachute and kill motors.
        /// PARACHUTE_RELEASE
        /// </summary>
        ParachuteRelease = 2,
    }
    public static class ParachuteActionHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"PARACHUTE_DISABLE");
            yield return new EnumValue<T>(converter(1),"PARACHUTE_ENABLE");
            yield return new EnumValue<T>(converter(2),"PARACHUTE_RELEASE");
        }
    }
    /// <summary>
    ///  MAV_TUNNEL_PAYLOAD_TYPE
    /// </summary>
    public enum MavTunnelPayloadType : ulong
    {
        /// <summary>
        /// Encoding of payload unknown.
        /// MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN
        /// </summary>
        MavTunnelPayloadTypeUnknown = 0,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved0 = 200,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved1 = 201,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved2 = 202,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved3 = 203,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved4 = 204,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved5 = 205,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved6 = 206,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved7 = 207,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved8 = 208,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved9 = 209,
    }
    public static class MavTunnelPayloadTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(200);
            yield return converter(201);
            yield return converter(202);
            yield return converter(203);
            yield return converter(204);
            yield return converter(205);
            yield return converter(206);
            yield return converter(207);
            yield return converter(208);
            yield return converter(209);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN");
            yield return new EnumValue<T>(converter(200),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0");
            yield return new EnumValue<T>(converter(201),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1");
            yield return new EnumValue<T>(converter(202),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2");
            yield return new EnumValue<T>(converter(203),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3");
            yield return new EnumValue<T>(converter(204),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4");
            yield return new EnumValue<T>(converter(205),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5");
            yield return new EnumValue<T>(converter(206),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6");
            yield return new EnumValue<T>(converter(207),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7");
            yield return new EnumValue<T>(converter(208),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8");
            yield return new EnumValue<T>(converter(209),"MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9");
        }
    }
    /// <summary>
    ///  MAV_ODID_ID_TYPE
    /// </summary>
    public enum MavOdidIdType : ulong
    {
        /// <summary>
        /// No type defined.
        /// MAV_ODID_ID_TYPE_NONE
        /// </summary>
        MavOdidIdTypeNone = 0,
        /// <summary>
        /// Manufacturer Serial Number (ANSI/CTA-2063 format).
        /// MAV_ODID_ID_TYPE_SERIAL_NUMBER
        /// </summary>
        MavOdidIdTypeSerialNumber = 1,
        /// <summary>
        /// CAA (Civil Aviation Authority) registered ID. Format: [ICAO Country Code].[CAA Assigned ID].
        /// MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID
        /// </summary>
        MavOdidIdTypeCaaRegistrationId = 2,
        /// <summary>
        /// UTM (Unmanned Traffic Management) assigned UUID (RFC4122).
        /// MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID
        /// </summary>
        MavOdidIdTypeUtmAssignedUuid = 3,
        /// <summary>
        /// A 20 byte ID for a specific flight/session. The exact ID type is indicated by the first byte of uas_id and these type values are managed by ICAO.
        /// MAV_ODID_ID_TYPE_SPECIFIC_SESSION_ID
        /// </summary>
        MavOdidIdTypeSpecificSessionId = 4,
    }
    public static class MavOdidIdTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_ID_TYPE_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_ID_TYPE_SERIAL_NUMBER");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_ID_TYPE_SPECIFIC_SESSION_ID");
        }
    }
    /// <summary>
    ///  MAV_ODID_UA_TYPE
    /// </summary>
    public enum MavOdidUaType : ulong
    {
        /// <summary>
        /// No UA (Unmanned Aircraft) type defined.
        /// MAV_ODID_UA_TYPE_NONE
        /// </summary>
        MavOdidUaTypeNone = 0,
        /// <summary>
        /// Aeroplane/Airplane. Fixed wing.
        /// MAV_ODID_UA_TYPE_AEROPLANE
        /// </summary>
        MavOdidUaTypeAeroplane = 1,
        /// <summary>
        /// Helicopter or multirotor.
        /// MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR
        /// </summary>
        MavOdidUaTypeHelicopterOrMultirotor = 2,
        /// <summary>
        /// Gyroplane.
        /// MAV_ODID_UA_TYPE_GYROPLANE
        /// </summary>
        MavOdidUaTypeGyroplane = 3,
        /// <summary>
        /// VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that can take off vertically.
        /// MAV_ODID_UA_TYPE_HYBRID_LIFT
        /// </summary>
        MavOdidUaTypeHybridLift = 4,
        /// <summary>
        /// Ornithopter.
        /// MAV_ODID_UA_TYPE_ORNITHOPTER
        /// </summary>
        MavOdidUaTypeOrnithopter = 5,
        /// <summary>
        /// Glider.
        /// MAV_ODID_UA_TYPE_GLIDER
        /// </summary>
        MavOdidUaTypeGlider = 6,
        /// <summary>
        /// Kite.
        /// MAV_ODID_UA_TYPE_KITE
        /// </summary>
        MavOdidUaTypeKite = 7,
        /// <summary>
        /// Free Balloon.
        /// MAV_ODID_UA_TYPE_FREE_BALLOON
        /// </summary>
        MavOdidUaTypeFreeBalloon = 8,
        /// <summary>
        /// Captive Balloon.
        /// MAV_ODID_UA_TYPE_CAPTIVE_BALLOON
        /// </summary>
        MavOdidUaTypeCaptiveBalloon = 9,
        /// <summary>
        /// Airship. E.g. a blimp.
        /// MAV_ODID_UA_TYPE_AIRSHIP
        /// </summary>
        MavOdidUaTypeAirship = 10,
        /// <summary>
        /// Free Fall/Parachute (unpowered).
        /// MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE
        /// </summary>
        MavOdidUaTypeFreeFallParachute = 11,
        /// <summary>
        /// Rocket.
        /// MAV_ODID_UA_TYPE_ROCKET
        /// </summary>
        MavOdidUaTypeRocket = 12,
        /// <summary>
        /// Tethered powered aircraft.
        /// MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT
        /// </summary>
        MavOdidUaTypeTetheredPoweredAircraft = 13,
        /// <summary>
        /// Ground Obstacle.
        /// MAV_ODID_UA_TYPE_GROUND_OBSTACLE
        /// </summary>
        MavOdidUaTypeGroundObstacle = 14,
        /// <summary>
        /// Other type of aircraft not listed earlier.
        /// MAV_ODID_UA_TYPE_OTHER
        /// </summary>
        MavOdidUaTypeOther = 15,
    }
    public static class MavOdidUaTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_UA_TYPE_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_UA_TYPE_AEROPLANE");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_UA_TYPE_GYROPLANE");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_UA_TYPE_HYBRID_LIFT");
            yield return new EnumValue<T>(converter(5),"MAV_ODID_UA_TYPE_ORNITHOPTER");
            yield return new EnumValue<T>(converter(6),"MAV_ODID_UA_TYPE_GLIDER");
            yield return new EnumValue<T>(converter(7),"MAV_ODID_UA_TYPE_KITE");
            yield return new EnumValue<T>(converter(8),"MAV_ODID_UA_TYPE_FREE_BALLOON");
            yield return new EnumValue<T>(converter(9),"MAV_ODID_UA_TYPE_CAPTIVE_BALLOON");
            yield return new EnumValue<T>(converter(10),"MAV_ODID_UA_TYPE_AIRSHIP");
            yield return new EnumValue<T>(converter(11),"MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE");
            yield return new EnumValue<T>(converter(12),"MAV_ODID_UA_TYPE_ROCKET");
            yield return new EnumValue<T>(converter(13),"MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT");
            yield return new EnumValue<T>(converter(14),"MAV_ODID_UA_TYPE_GROUND_OBSTACLE");
            yield return new EnumValue<T>(converter(15),"MAV_ODID_UA_TYPE_OTHER");
        }
    }
    /// <summary>
    ///  MAV_ODID_STATUS
    /// </summary>
    public enum MavOdidStatus : ulong
    {
        /// <summary>
        /// The status of the (UA) Unmanned Aircraft is undefined.
        /// MAV_ODID_STATUS_UNDECLARED
        /// </summary>
        MavOdidStatusUndeclared = 0,
        /// <summary>
        /// The UA is on the ground.
        /// MAV_ODID_STATUS_GROUND
        /// </summary>
        MavOdidStatusGround = 1,
        /// <summary>
        /// The UA is in the air.
        /// MAV_ODID_STATUS_AIRBORNE
        /// </summary>
        MavOdidStatusAirborne = 2,
        /// <summary>
        /// The UA is having an emergency.
        /// MAV_ODID_STATUS_EMERGENCY
        /// </summary>
        MavOdidStatusEmergency = 3,
        /// <summary>
        /// The remote ID system is failing or unreliable in some way.
        /// MAV_ODID_STATUS_REMOTE_ID_SYSTEM_FAILURE
        /// </summary>
        MavOdidStatusRemoteIdSystemFailure = 4,
    }
    public static class MavOdidStatusHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_STATUS_UNDECLARED");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_STATUS_GROUND");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_STATUS_AIRBORNE");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_STATUS_EMERGENCY");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_STATUS_REMOTE_ID_SYSTEM_FAILURE");
        }
    }
    /// <summary>
    ///  MAV_ODID_HEIGHT_REF
    /// </summary>
    public enum MavOdidHeightRef : ulong
    {
        /// <summary>
        /// The height field is relative to the take-off location.
        /// MAV_ODID_HEIGHT_REF_OVER_TAKEOFF
        /// </summary>
        MavOdidHeightRefOverTakeoff = 0,
        /// <summary>
        /// The height field is relative to ground.
        /// MAV_ODID_HEIGHT_REF_OVER_GROUND
        /// </summary>
        MavOdidHeightRefOverGround = 1,
    }
    public static class MavOdidHeightRefHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_HEIGHT_REF_OVER_TAKEOFF");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_HEIGHT_REF_OVER_GROUND");
        }
    }
    /// <summary>
    ///  MAV_ODID_HOR_ACC
    /// </summary>
    public enum MavOdidHorAcc : ulong
    {
        /// <summary>
        /// The horizontal accuracy is unknown.
        /// MAV_ODID_HOR_ACC_UNKNOWN
        /// </summary>
        MavOdidHorAccUnknown = 0,
        /// <summary>
        /// The horizontal accuracy is smaller than 10 Nautical Miles. 18.52 km.
        /// MAV_ODID_HOR_ACC_10NM
        /// </summary>
        MavOdidHorAcc10nm = 1,
        /// <summary>
        /// The horizontal accuracy is smaller than 4 Nautical Miles. 7.408 km.
        /// MAV_ODID_HOR_ACC_4NM
        /// </summary>
        MavOdidHorAcc4nm = 2,
        /// <summary>
        /// The horizontal accuracy is smaller than 2 Nautical Miles. 3.704 km.
        /// MAV_ODID_HOR_ACC_2NM
        /// </summary>
        MavOdidHorAcc2nm = 3,
        /// <summary>
        /// The horizontal accuracy is smaller than 1 Nautical Miles. 1.852 km.
        /// MAV_ODID_HOR_ACC_1NM
        /// </summary>
        MavOdidHorAcc1nm = 4,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.5 Nautical Miles. 926 m.
        /// MAV_ODID_HOR_ACC_0_5NM
        /// </summary>
        MavOdidHorAcc05nm = 5,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.3 Nautical Miles. 555.6 m.
        /// MAV_ODID_HOR_ACC_0_3NM
        /// </summary>
        MavOdidHorAcc03nm = 6,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.1 Nautical Miles. 185.2 m.
        /// MAV_ODID_HOR_ACC_0_1NM
        /// </summary>
        MavOdidHorAcc01nm = 7,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.05 Nautical Miles. 92.6 m.
        /// MAV_ODID_HOR_ACC_0_05NM
        /// </summary>
        MavOdidHorAcc005nm = 8,
        /// <summary>
        /// The horizontal accuracy is smaller than 30 meter.
        /// MAV_ODID_HOR_ACC_30_METER
        /// </summary>
        MavOdidHorAcc30Meter = 9,
        /// <summary>
        /// The horizontal accuracy is smaller than 10 meter.
        /// MAV_ODID_HOR_ACC_10_METER
        /// </summary>
        MavOdidHorAcc10Meter = 10,
        /// <summary>
        /// The horizontal accuracy is smaller than 3 meter.
        /// MAV_ODID_HOR_ACC_3_METER
        /// </summary>
        MavOdidHorAcc3Meter = 11,
        /// <summary>
        /// The horizontal accuracy is smaller than 1 meter.
        /// MAV_ODID_HOR_ACC_1_METER
        /// </summary>
        MavOdidHorAcc1Meter = 12,
    }
    public static class MavOdidHorAccHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_HOR_ACC_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_HOR_ACC_10NM");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_HOR_ACC_4NM");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_HOR_ACC_2NM");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_HOR_ACC_1NM");
            yield return new EnumValue<T>(converter(5),"MAV_ODID_HOR_ACC_0_5NM");
            yield return new EnumValue<T>(converter(6),"MAV_ODID_HOR_ACC_0_3NM");
            yield return new EnumValue<T>(converter(7),"MAV_ODID_HOR_ACC_0_1NM");
            yield return new EnumValue<T>(converter(8),"MAV_ODID_HOR_ACC_0_05NM");
            yield return new EnumValue<T>(converter(9),"MAV_ODID_HOR_ACC_30_METER");
            yield return new EnumValue<T>(converter(10),"MAV_ODID_HOR_ACC_10_METER");
            yield return new EnumValue<T>(converter(11),"MAV_ODID_HOR_ACC_3_METER");
            yield return new EnumValue<T>(converter(12),"MAV_ODID_HOR_ACC_1_METER");
        }
    }
    /// <summary>
    ///  MAV_ODID_VER_ACC
    /// </summary>
    public enum MavOdidVerAcc : ulong
    {
        /// <summary>
        /// The vertical accuracy is unknown.
        /// MAV_ODID_VER_ACC_UNKNOWN
        /// </summary>
        MavOdidVerAccUnknown = 0,
        /// <summary>
        /// The vertical accuracy is smaller than 150 meter.
        /// MAV_ODID_VER_ACC_150_METER
        /// </summary>
        MavOdidVerAcc150Meter = 1,
        /// <summary>
        /// The vertical accuracy is smaller than 45 meter.
        /// MAV_ODID_VER_ACC_45_METER
        /// </summary>
        MavOdidVerAcc45Meter = 2,
        /// <summary>
        /// The vertical accuracy is smaller than 25 meter.
        /// MAV_ODID_VER_ACC_25_METER
        /// </summary>
        MavOdidVerAcc25Meter = 3,
        /// <summary>
        /// The vertical accuracy is smaller than 10 meter.
        /// MAV_ODID_VER_ACC_10_METER
        /// </summary>
        MavOdidVerAcc10Meter = 4,
        /// <summary>
        /// The vertical accuracy is smaller than 3 meter.
        /// MAV_ODID_VER_ACC_3_METER
        /// </summary>
        MavOdidVerAcc3Meter = 5,
        /// <summary>
        /// The vertical accuracy is smaller than 1 meter.
        /// MAV_ODID_VER_ACC_1_METER
        /// </summary>
        MavOdidVerAcc1Meter = 6,
    }
    public static class MavOdidVerAccHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_VER_ACC_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_VER_ACC_150_METER");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_VER_ACC_45_METER");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_VER_ACC_25_METER");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_VER_ACC_10_METER");
            yield return new EnumValue<T>(converter(5),"MAV_ODID_VER_ACC_3_METER");
            yield return new EnumValue<T>(converter(6),"MAV_ODID_VER_ACC_1_METER");
        }
    }
    /// <summary>
    ///  MAV_ODID_SPEED_ACC
    /// </summary>
    public enum MavOdidSpeedAcc : ulong
    {
        /// <summary>
        /// The speed accuracy is unknown.
        /// MAV_ODID_SPEED_ACC_UNKNOWN
        /// </summary>
        MavOdidSpeedAccUnknown = 0,
        /// <summary>
        /// The speed accuracy is smaller than 10 meters per second.
        /// MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc10MetersPerSecond = 1,
        /// <summary>
        /// The speed accuracy is smaller than 3 meters per second.
        /// MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc3MetersPerSecond = 2,
        /// <summary>
        /// The speed accuracy is smaller than 1 meters per second.
        /// MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc1MetersPerSecond = 3,
        /// <summary>
        /// The speed accuracy is smaller than 0.3 meters per second.
        /// MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc03MetersPerSecond = 4,
    }
    public static class MavOdidSpeedAccHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_SPEED_ACC_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND");
        }
    }
    /// <summary>
    ///  MAV_ODID_TIME_ACC
    /// </summary>
    public enum MavOdidTimeAcc : ulong
    {
        /// <summary>
        /// The timestamp accuracy is unknown.
        /// MAV_ODID_TIME_ACC_UNKNOWN
        /// </summary>
        MavOdidTimeAccUnknown = 0,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.1 second.
        /// MAV_ODID_TIME_ACC_0_1_SECOND
        /// </summary>
        MavOdidTimeAcc01Second = 1,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.2 second.
        /// MAV_ODID_TIME_ACC_0_2_SECOND
        /// </summary>
        MavOdidTimeAcc02Second = 2,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.3 second.
        /// MAV_ODID_TIME_ACC_0_3_SECOND
        /// </summary>
        MavOdidTimeAcc03Second = 3,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.4 second.
        /// MAV_ODID_TIME_ACC_0_4_SECOND
        /// </summary>
        MavOdidTimeAcc04Second = 4,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.5 second.
        /// MAV_ODID_TIME_ACC_0_5_SECOND
        /// </summary>
        MavOdidTimeAcc05Second = 5,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.6 second.
        /// MAV_ODID_TIME_ACC_0_6_SECOND
        /// </summary>
        MavOdidTimeAcc06Second = 6,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.7 second.
        /// MAV_ODID_TIME_ACC_0_7_SECOND
        /// </summary>
        MavOdidTimeAcc07Second = 7,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.8 second.
        /// MAV_ODID_TIME_ACC_0_8_SECOND
        /// </summary>
        MavOdidTimeAcc08Second = 8,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.9 second.
        /// MAV_ODID_TIME_ACC_0_9_SECOND
        /// </summary>
        MavOdidTimeAcc09Second = 9,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.0 second.
        /// MAV_ODID_TIME_ACC_1_0_SECOND
        /// </summary>
        MavOdidTimeAcc10Second = 10,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.1 second.
        /// MAV_ODID_TIME_ACC_1_1_SECOND
        /// </summary>
        MavOdidTimeAcc11Second = 11,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.2 second.
        /// MAV_ODID_TIME_ACC_1_2_SECOND
        /// </summary>
        MavOdidTimeAcc12Second = 12,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.3 second.
        /// MAV_ODID_TIME_ACC_1_3_SECOND
        /// </summary>
        MavOdidTimeAcc13Second = 13,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.4 second.
        /// MAV_ODID_TIME_ACC_1_4_SECOND
        /// </summary>
        MavOdidTimeAcc14Second = 14,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.5 second.
        /// MAV_ODID_TIME_ACC_1_5_SECOND
        /// </summary>
        MavOdidTimeAcc15Second = 15,
    }
    public static class MavOdidTimeAccHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_TIME_ACC_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_TIME_ACC_0_1_SECOND");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_TIME_ACC_0_2_SECOND");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_TIME_ACC_0_3_SECOND");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_TIME_ACC_0_4_SECOND");
            yield return new EnumValue<T>(converter(5),"MAV_ODID_TIME_ACC_0_5_SECOND");
            yield return new EnumValue<T>(converter(6),"MAV_ODID_TIME_ACC_0_6_SECOND");
            yield return new EnumValue<T>(converter(7),"MAV_ODID_TIME_ACC_0_7_SECOND");
            yield return new EnumValue<T>(converter(8),"MAV_ODID_TIME_ACC_0_8_SECOND");
            yield return new EnumValue<T>(converter(9),"MAV_ODID_TIME_ACC_0_9_SECOND");
            yield return new EnumValue<T>(converter(10),"MAV_ODID_TIME_ACC_1_0_SECOND");
            yield return new EnumValue<T>(converter(11),"MAV_ODID_TIME_ACC_1_1_SECOND");
            yield return new EnumValue<T>(converter(12),"MAV_ODID_TIME_ACC_1_2_SECOND");
            yield return new EnumValue<T>(converter(13),"MAV_ODID_TIME_ACC_1_3_SECOND");
            yield return new EnumValue<T>(converter(14),"MAV_ODID_TIME_ACC_1_4_SECOND");
            yield return new EnumValue<T>(converter(15),"MAV_ODID_TIME_ACC_1_5_SECOND");
        }
    }
    /// <summary>
    ///  MAV_ODID_AUTH_TYPE
    /// </summary>
    public enum MavOdidAuthType : ulong
    {
        /// <summary>
        /// No authentication type is specified.
        /// MAV_ODID_AUTH_TYPE_NONE
        /// </summary>
        MavOdidAuthTypeNone = 0,
        /// <summary>
        /// Signature for the UAS (Unmanned Aircraft System) ID.
        /// MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE
        /// </summary>
        MavOdidAuthTypeUasIdSignature = 1,
        /// <summary>
        /// Signature for the Operator ID.
        /// MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE
        /// </summary>
        MavOdidAuthTypeOperatorIdSignature = 2,
        /// <summary>
        /// Signature for the entire message set.
        /// MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE
        /// </summary>
        MavOdidAuthTypeMessageSetSignature = 3,
        /// <summary>
        /// Authentication is provided by Network Remote ID.
        /// MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID
        /// </summary>
        MavOdidAuthTypeNetworkRemoteId = 4,
        /// <summary>
        /// The exact authentication type is indicated by the first byte of authentication_data and these type values are managed by ICAO.
        /// MAV_ODID_AUTH_TYPE_SPECIFIC_AUTHENTICATION
        /// </summary>
        MavOdidAuthTypeSpecificAuthentication = 5,
    }
    public static class MavOdidAuthTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_AUTH_TYPE_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID");
            yield return new EnumValue<T>(converter(5),"MAV_ODID_AUTH_TYPE_SPECIFIC_AUTHENTICATION");
        }
    }
    /// <summary>
    ///  MAV_ODID_DESC_TYPE
    /// </summary>
    public enum MavOdidDescType : ulong
    {
        /// <summary>
        /// Optional free-form text description of the purpose of the flight.
        /// MAV_ODID_DESC_TYPE_TEXT
        /// </summary>
        MavOdidDescTypeText = 0,
        /// <summary>
        /// Optional additional clarification when status == MAV_ODID_STATUS_EMERGENCY.
        /// MAV_ODID_DESC_TYPE_EMERGENCY
        /// </summary>
        MavOdidDescTypeEmergency = 1,
        /// <summary>
        /// Optional additional clarification when status != MAV_ODID_STATUS_EMERGENCY.
        /// MAV_ODID_DESC_TYPE_EXTENDED_STATUS
        /// </summary>
        MavOdidDescTypeExtendedStatus = 2,
    }
    public static class MavOdidDescTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_DESC_TYPE_TEXT");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_DESC_TYPE_EMERGENCY");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_DESC_TYPE_EXTENDED_STATUS");
        }
    }
    /// <summary>
    ///  MAV_ODID_OPERATOR_LOCATION_TYPE
    /// </summary>
    public enum MavOdidOperatorLocationType : ulong
    {
        /// <summary>
        /// The location/altitude of the operator is the same as the take-off location.
        /// MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF
        /// </summary>
        MavOdidOperatorLocationTypeTakeoff = 0,
        /// <summary>
        /// The location/altitude of the operator is dynamic. E.g. based on live GNSS data.
        /// MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS
        /// </summary>
        MavOdidOperatorLocationTypeLiveGnss = 1,
        /// <summary>
        /// The location/altitude of the operator are fixed values.
        /// MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED
        /// </summary>
        MavOdidOperatorLocationTypeFixed = 2,
    }
    public static class MavOdidOperatorLocationTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED");
        }
    }
    /// <summary>
    ///  MAV_ODID_CLASSIFICATION_TYPE
    /// </summary>
    public enum MavOdidClassificationType : ulong
    {
        /// <summary>
        /// The classification type for the UA is undeclared.
        /// MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED
        /// </summary>
        MavOdidClassificationTypeUndeclared = 0,
        /// <summary>
        /// The classification type for the UA follows EU (European Union) specifications.
        /// MAV_ODID_CLASSIFICATION_TYPE_EU
        /// </summary>
        MavOdidClassificationTypeEu = 1,
    }
    public static class MavOdidClassificationTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_CLASSIFICATION_TYPE_EU");
        }
    }
    /// <summary>
    ///  MAV_ODID_CATEGORY_EU
    /// </summary>
    public enum MavOdidCategoryEu : ulong
    {
        /// <summary>
        /// The category for the UA, according to the EU specification, is undeclared.
        /// MAV_ODID_CATEGORY_EU_UNDECLARED
        /// </summary>
        MavOdidCategoryEuUndeclared = 0,
        /// <summary>
        /// The category for the UA, according to the EU specification, is the Open category.
        /// MAV_ODID_CATEGORY_EU_OPEN
        /// </summary>
        MavOdidCategoryEuOpen = 1,
        /// <summary>
        /// The category for the UA, according to the EU specification, is the Specific category.
        /// MAV_ODID_CATEGORY_EU_SPECIFIC
        /// </summary>
        MavOdidCategoryEuSpecific = 2,
        /// <summary>
        /// The category for the UA, according to the EU specification, is the Certified category.
        /// MAV_ODID_CATEGORY_EU_CERTIFIED
        /// </summary>
        MavOdidCategoryEuCertified = 3,
    }
    public static class MavOdidCategoryEuHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_CATEGORY_EU_UNDECLARED");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_CATEGORY_EU_OPEN");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_CATEGORY_EU_SPECIFIC");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_CATEGORY_EU_CERTIFIED");
        }
    }
    /// <summary>
    ///  MAV_ODID_CLASS_EU
    /// </summary>
    public enum MavOdidClassEu : ulong
    {
        /// <summary>
        /// The class for the UA, according to the EU specification, is undeclared.
        /// MAV_ODID_CLASS_EU_UNDECLARED
        /// </summary>
        MavOdidClassEuUndeclared = 0,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 0.
        /// MAV_ODID_CLASS_EU_CLASS_0
        /// </summary>
        MavOdidClassEuClass0 = 1,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 1.
        /// MAV_ODID_CLASS_EU_CLASS_1
        /// </summary>
        MavOdidClassEuClass1 = 2,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 2.
        /// MAV_ODID_CLASS_EU_CLASS_2
        /// </summary>
        MavOdidClassEuClass2 = 3,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 3.
        /// MAV_ODID_CLASS_EU_CLASS_3
        /// </summary>
        MavOdidClassEuClass3 = 4,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 4.
        /// MAV_ODID_CLASS_EU_CLASS_4
        /// </summary>
        MavOdidClassEuClass4 = 5,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 5.
        /// MAV_ODID_CLASS_EU_CLASS_5
        /// </summary>
        MavOdidClassEuClass5 = 6,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 6.
        /// MAV_ODID_CLASS_EU_CLASS_6
        /// </summary>
        MavOdidClassEuClass6 = 7,
    }
    public static class MavOdidClassEuHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_CLASS_EU_UNDECLARED");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_CLASS_EU_CLASS_0");
            yield return new EnumValue<T>(converter(2),"MAV_ODID_CLASS_EU_CLASS_1");
            yield return new EnumValue<T>(converter(3),"MAV_ODID_CLASS_EU_CLASS_2");
            yield return new EnumValue<T>(converter(4),"MAV_ODID_CLASS_EU_CLASS_3");
            yield return new EnumValue<T>(converter(5),"MAV_ODID_CLASS_EU_CLASS_4");
            yield return new EnumValue<T>(converter(6),"MAV_ODID_CLASS_EU_CLASS_5");
            yield return new EnumValue<T>(converter(7),"MAV_ODID_CLASS_EU_CLASS_6");
        }
    }
    /// <summary>
    ///  MAV_ODID_OPERATOR_ID_TYPE
    /// </summary>
    public enum MavOdidOperatorIdType : ulong
    {
        /// <summary>
        /// CAA (Civil Aviation Authority) registered operator ID.
        /// MAV_ODID_OPERATOR_ID_TYPE_CAA
        /// </summary>
        MavOdidOperatorIdTypeCaa = 0,
    }
    public static class MavOdidOperatorIdTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_OPERATOR_ID_TYPE_CAA");
        }
    }
    /// <summary>
    ///  MAV_ODID_ARM_STATUS
    /// </summary>
    public enum MavOdidArmStatus : ulong
    {
        /// <summary>
        /// Passing arming checks.
        /// MAV_ODID_ARM_STATUS_GOOD_TO_ARM
        /// </summary>
        MavOdidArmStatusGoodToArm = 0,
        /// <summary>
        /// Generic arming failure, see error string for details.
        /// MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC
        /// </summary>
        MavOdidArmStatusPreArmFailGeneric = 1,
    }
    public static class MavOdidArmStatusHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_ODID_ARM_STATUS_GOOD_TO_ARM");
            yield return new EnumValue<T>(converter(1),"MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC");
        }
    }
    /// <summary>
    /// Tune formats (used for vehicle buzzer/tone generation).
    ///  TUNE_FORMAT
    /// </summary>
    public enum TuneFormat : ulong
    {
        /// <summary>
        /// Format is QBasic 1.1 Play: https://www.qbasic.net/en/reference/qb11/Statement/PLAY-006.htm.
        /// TUNE_FORMAT_QBASIC1_1
        /// </summary>
        TuneFormatQbasic11 = 1,
        /// <summary>
        /// Format is Modern Music Markup Language (MML): https://en.wikipedia.org/wiki/Music_Macro_Language#Modern_MML.
        /// TUNE_FORMAT_MML_MODERN
        /// </summary>
        TuneFormatMmlModern = 2,
    }
    public static class TuneFormatHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"TUNE_FORMAT_QBASIC1_1");
            yield return new EnumValue<T>(converter(2),"TUNE_FORMAT_MML_MODERN");
        }
    }
    /// <summary>
    /// Type of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
    ///  AIS_TYPE
    /// </summary>
    public enum AisType : ulong
    {
        /// <summary>
        /// Not available (default).
        /// AIS_TYPE_UNKNOWN
        /// </summary>
        AisTypeUnknown = 0,
        /// <summary>
        /// AIS_TYPE_RESERVED_1
        /// </summary>
        AisTypeReserved1 = 1,
        /// <summary>
        /// AIS_TYPE_RESERVED_2
        /// </summary>
        AisTypeReserved2 = 2,
        /// <summary>
        /// AIS_TYPE_RESERVED_3
        /// </summary>
        AisTypeReserved3 = 3,
        /// <summary>
        /// AIS_TYPE_RESERVED_4
        /// </summary>
        AisTypeReserved4 = 4,
        /// <summary>
        /// AIS_TYPE_RESERVED_5
        /// </summary>
        AisTypeReserved5 = 5,
        /// <summary>
        /// AIS_TYPE_RESERVED_6
        /// </summary>
        AisTypeReserved6 = 6,
        /// <summary>
        /// AIS_TYPE_RESERVED_7
        /// </summary>
        AisTypeReserved7 = 7,
        /// <summary>
        /// AIS_TYPE_RESERVED_8
        /// </summary>
        AisTypeReserved8 = 8,
        /// <summary>
        /// AIS_TYPE_RESERVED_9
        /// </summary>
        AisTypeReserved9 = 9,
        /// <summary>
        /// AIS_TYPE_RESERVED_10
        /// </summary>
        AisTypeReserved10 = 10,
        /// <summary>
        /// AIS_TYPE_RESERVED_11
        /// </summary>
        AisTypeReserved11 = 11,
        /// <summary>
        /// AIS_TYPE_RESERVED_12
        /// </summary>
        AisTypeReserved12 = 12,
        /// <summary>
        /// AIS_TYPE_RESERVED_13
        /// </summary>
        AisTypeReserved13 = 13,
        /// <summary>
        /// AIS_TYPE_RESERVED_14
        /// </summary>
        AisTypeReserved14 = 14,
        /// <summary>
        /// AIS_TYPE_RESERVED_15
        /// </summary>
        AisTypeReserved15 = 15,
        /// <summary>
        /// AIS_TYPE_RESERVED_16
        /// </summary>
        AisTypeReserved16 = 16,
        /// <summary>
        /// AIS_TYPE_RESERVED_17
        /// </summary>
        AisTypeReserved17 = 17,
        /// <summary>
        /// AIS_TYPE_RESERVED_18
        /// </summary>
        AisTypeReserved18 = 18,
        /// <summary>
        /// AIS_TYPE_RESERVED_19
        /// </summary>
        AisTypeReserved19 = 19,
        /// <summary>
        /// Wing In Ground effect.
        /// AIS_TYPE_WIG
        /// </summary>
        AisTypeWig = 20,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_A
        /// </summary>
        AisTypeWigHazardousA = 21,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_B
        /// </summary>
        AisTypeWigHazardousB = 22,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_C
        /// </summary>
        AisTypeWigHazardousC = 23,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_D
        /// </summary>
        AisTypeWigHazardousD = 24,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_1
        /// </summary>
        AisTypeWigReserved1 = 25,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_2
        /// </summary>
        AisTypeWigReserved2 = 26,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_3
        /// </summary>
        AisTypeWigReserved3 = 27,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_4
        /// </summary>
        AisTypeWigReserved4 = 28,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_5
        /// </summary>
        AisTypeWigReserved5 = 29,
        /// <summary>
        /// AIS_TYPE_FISHING
        /// </summary>
        AisTypeFishing = 30,
        /// <summary>
        /// AIS_TYPE_TOWING
        /// </summary>
        AisTypeTowing = 31,
        /// <summary>
        /// Towing: length exceeds 200m or breadth exceeds 25m.
        /// AIS_TYPE_TOWING_LARGE
        /// </summary>
        AisTypeTowingLarge = 32,
        /// <summary>
        /// Dredging or other underwater ops.
        /// AIS_TYPE_DREDGING
        /// </summary>
        AisTypeDredging = 33,
        /// <summary>
        /// AIS_TYPE_DIVING
        /// </summary>
        AisTypeDiving = 34,
        /// <summary>
        /// AIS_TYPE_MILITARY
        /// </summary>
        AisTypeMilitary = 35,
        /// <summary>
        /// AIS_TYPE_SAILING
        /// </summary>
        AisTypeSailing = 36,
        /// <summary>
        /// AIS_TYPE_PLEASURE
        /// </summary>
        AisTypePleasure = 37,
        /// <summary>
        /// AIS_TYPE_RESERVED_20
        /// </summary>
        AisTypeReserved20 = 38,
        /// <summary>
        /// AIS_TYPE_RESERVED_21
        /// </summary>
        AisTypeReserved21 = 39,
        /// <summary>
        /// High Speed Craft.
        /// AIS_TYPE_HSC
        /// </summary>
        AisTypeHsc = 40,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_A
        /// </summary>
        AisTypeHscHazardousA = 41,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_B
        /// </summary>
        AisTypeHscHazardousB = 42,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_C
        /// </summary>
        AisTypeHscHazardousC = 43,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_D
        /// </summary>
        AisTypeHscHazardousD = 44,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_1
        /// </summary>
        AisTypeHscReserved1 = 45,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_2
        /// </summary>
        AisTypeHscReserved2 = 46,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_3
        /// </summary>
        AisTypeHscReserved3 = 47,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_4
        /// </summary>
        AisTypeHscReserved4 = 48,
        /// <summary>
        /// AIS_TYPE_HSC_UNKNOWN
        /// </summary>
        AisTypeHscUnknown = 49,
        /// <summary>
        /// AIS_TYPE_PILOT
        /// </summary>
        AisTypePilot = 50,
        /// <summary>
        /// Search And Rescue vessel.
        /// AIS_TYPE_SAR
        /// </summary>
        AisTypeSar = 51,
        /// <summary>
        /// AIS_TYPE_TUG
        /// </summary>
        AisTypeTug = 52,
        /// <summary>
        /// AIS_TYPE_PORT_TENDER
        /// </summary>
        AisTypePortTender = 53,
        /// <summary>
        /// Anti-pollution equipment.
        /// AIS_TYPE_ANTI_POLLUTION
        /// </summary>
        AisTypeAntiPollution = 54,
        /// <summary>
        /// AIS_TYPE_LAW_ENFORCEMENT
        /// </summary>
        AisTypeLawEnforcement = 55,
        /// <summary>
        /// AIS_TYPE_SPARE_LOCAL_1
        /// </summary>
        AisTypeSpareLocal1 = 56,
        /// <summary>
        /// AIS_TYPE_SPARE_LOCAL_2
        /// </summary>
        AisTypeSpareLocal2 = 57,
        /// <summary>
        /// AIS_TYPE_MEDICAL_TRANSPORT
        /// </summary>
        AisTypeMedicalTransport = 58,
        /// <summary>
        /// Noncombatant ship according to RR Resolution No. 18.
        /// AIS_TYPE_NONECOMBATANT
        /// </summary>
        AisTypeNonecombatant = 59,
        /// <summary>
        /// AIS_TYPE_PASSENGER
        /// </summary>
        AisTypePassenger = 60,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_A
        /// </summary>
        AisTypePassengerHazardousA = 61,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_B
        /// </summary>
        AisTypePassengerHazardousB = 62,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_C
        /// </summary>
        AisTypePassengerHazardousC = 63,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_D
        /// </summary>
        AisTypePassengerHazardousD = 64,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_1
        /// </summary>
        AisTypePassengerReserved1 = 65,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_2
        /// </summary>
        AisTypePassengerReserved2 = 66,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_3
        /// </summary>
        AisTypePassengerReserved3 = 67,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_4
        /// </summary>
        AisTypePassengerReserved4 = 68,
        /// <summary>
        /// AIS_TYPE_PASSENGER_UNKNOWN
        /// </summary>
        AisTypePassengerUnknown = 69,
        /// <summary>
        /// AIS_TYPE_CARGO
        /// </summary>
        AisTypeCargo = 70,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_A
        /// </summary>
        AisTypeCargoHazardousA = 71,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_B
        /// </summary>
        AisTypeCargoHazardousB = 72,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_C
        /// </summary>
        AisTypeCargoHazardousC = 73,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_D
        /// </summary>
        AisTypeCargoHazardousD = 74,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_1
        /// </summary>
        AisTypeCargoReserved1 = 75,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_2
        /// </summary>
        AisTypeCargoReserved2 = 76,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_3
        /// </summary>
        AisTypeCargoReserved3 = 77,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_4
        /// </summary>
        AisTypeCargoReserved4 = 78,
        /// <summary>
        /// AIS_TYPE_CARGO_UNKNOWN
        /// </summary>
        AisTypeCargoUnknown = 79,
        /// <summary>
        /// AIS_TYPE_TANKER
        /// </summary>
        AisTypeTanker = 80,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_A
        /// </summary>
        AisTypeTankerHazardousA = 81,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_B
        /// </summary>
        AisTypeTankerHazardousB = 82,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_C
        /// </summary>
        AisTypeTankerHazardousC = 83,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_D
        /// </summary>
        AisTypeTankerHazardousD = 84,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_1
        /// </summary>
        AisTypeTankerReserved1 = 85,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_2
        /// </summary>
        AisTypeTankerReserved2 = 86,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_3
        /// </summary>
        AisTypeTankerReserved3 = 87,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_4
        /// </summary>
        AisTypeTankerReserved4 = 88,
        /// <summary>
        /// AIS_TYPE_TANKER_UNKNOWN
        /// </summary>
        AisTypeTankerUnknown = 89,
        /// <summary>
        /// AIS_TYPE_OTHER
        /// </summary>
        AisTypeOther = 90,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_A
        /// </summary>
        AisTypeOtherHazardousA = 91,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_B
        /// </summary>
        AisTypeOtherHazardousB = 92,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_C
        /// </summary>
        AisTypeOtherHazardousC = 93,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_D
        /// </summary>
        AisTypeOtherHazardousD = 94,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_1
        /// </summary>
        AisTypeOtherReserved1 = 95,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_2
        /// </summary>
        AisTypeOtherReserved2 = 96,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_3
        /// </summary>
        AisTypeOtherReserved3 = 97,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_4
        /// </summary>
        AisTypeOtherReserved4 = 98,
        /// <summary>
        /// AIS_TYPE_OTHER_UNKNOWN
        /// </summary>
        AisTypeOtherUnknown = 99,
    }
    public static class AisTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
            yield return converter(16);
            yield return converter(17);
            yield return converter(18);
            yield return converter(19);
            yield return converter(20);
            yield return converter(21);
            yield return converter(22);
            yield return converter(23);
            yield return converter(24);
            yield return converter(25);
            yield return converter(26);
            yield return converter(27);
            yield return converter(28);
            yield return converter(29);
            yield return converter(30);
            yield return converter(31);
            yield return converter(32);
            yield return converter(33);
            yield return converter(34);
            yield return converter(35);
            yield return converter(36);
            yield return converter(37);
            yield return converter(38);
            yield return converter(39);
            yield return converter(40);
            yield return converter(41);
            yield return converter(42);
            yield return converter(43);
            yield return converter(44);
            yield return converter(45);
            yield return converter(46);
            yield return converter(47);
            yield return converter(48);
            yield return converter(49);
            yield return converter(50);
            yield return converter(51);
            yield return converter(52);
            yield return converter(53);
            yield return converter(54);
            yield return converter(55);
            yield return converter(56);
            yield return converter(57);
            yield return converter(58);
            yield return converter(59);
            yield return converter(60);
            yield return converter(61);
            yield return converter(62);
            yield return converter(63);
            yield return converter(64);
            yield return converter(65);
            yield return converter(66);
            yield return converter(67);
            yield return converter(68);
            yield return converter(69);
            yield return converter(70);
            yield return converter(71);
            yield return converter(72);
            yield return converter(73);
            yield return converter(74);
            yield return converter(75);
            yield return converter(76);
            yield return converter(77);
            yield return converter(78);
            yield return converter(79);
            yield return converter(80);
            yield return converter(81);
            yield return converter(82);
            yield return converter(83);
            yield return converter(84);
            yield return converter(85);
            yield return converter(86);
            yield return converter(87);
            yield return converter(88);
            yield return converter(89);
            yield return converter(90);
            yield return converter(91);
            yield return converter(92);
            yield return converter(93);
            yield return converter(94);
            yield return converter(95);
            yield return converter(96);
            yield return converter(97);
            yield return converter(98);
            yield return converter(99);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"AIS_TYPE_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"AIS_TYPE_RESERVED_1");
            yield return new EnumValue<T>(converter(2),"AIS_TYPE_RESERVED_2");
            yield return new EnumValue<T>(converter(3),"AIS_TYPE_RESERVED_3");
            yield return new EnumValue<T>(converter(4),"AIS_TYPE_RESERVED_4");
            yield return new EnumValue<T>(converter(5),"AIS_TYPE_RESERVED_5");
            yield return new EnumValue<T>(converter(6),"AIS_TYPE_RESERVED_6");
            yield return new EnumValue<T>(converter(7),"AIS_TYPE_RESERVED_7");
            yield return new EnumValue<T>(converter(8),"AIS_TYPE_RESERVED_8");
            yield return new EnumValue<T>(converter(9),"AIS_TYPE_RESERVED_9");
            yield return new EnumValue<T>(converter(10),"AIS_TYPE_RESERVED_10");
            yield return new EnumValue<T>(converter(11),"AIS_TYPE_RESERVED_11");
            yield return new EnumValue<T>(converter(12),"AIS_TYPE_RESERVED_12");
            yield return new EnumValue<T>(converter(13),"AIS_TYPE_RESERVED_13");
            yield return new EnumValue<T>(converter(14),"AIS_TYPE_RESERVED_14");
            yield return new EnumValue<T>(converter(15),"AIS_TYPE_RESERVED_15");
            yield return new EnumValue<T>(converter(16),"AIS_TYPE_RESERVED_16");
            yield return new EnumValue<T>(converter(17),"AIS_TYPE_RESERVED_17");
            yield return new EnumValue<T>(converter(18),"AIS_TYPE_RESERVED_18");
            yield return new EnumValue<T>(converter(19),"AIS_TYPE_RESERVED_19");
            yield return new EnumValue<T>(converter(20),"AIS_TYPE_WIG");
            yield return new EnumValue<T>(converter(21),"AIS_TYPE_WIG_HAZARDOUS_A");
            yield return new EnumValue<T>(converter(22),"AIS_TYPE_WIG_HAZARDOUS_B");
            yield return new EnumValue<T>(converter(23),"AIS_TYPE_WIG_HAZARDOUS_C");
            yield return new EnumValue<T>(converter(24),"AIS_TYPE_WIG_HAZARDOUS_D");
            yield return new EnumValue<T>(converter(25),"AIS_TYPE_WIG_RESERVED_1");
            yield return new EnumValue<T>(converter(26),"AIS_TYPE_WIG_RESERVED_2");
            yield return new EnumValue<T>(converter(27),"AIS_TYPE_WIG_RESERVED_3");
            yield return new EnumValue<T>(converter(28),"AIS_TYPE_WIG_RESERVED_4");
            yield return new EnumValue<T>(converter(29),"AIS_TYPE_WIG_RESERVED_5");
            yield return new EnumValue<T>(converter(30),"AIS_TYPE_FISHING");
            yield return new EnumValue<T>(converter(31),"AIS_TYPE_TOWING");
            yield return new EnumValue<T>(converter(32),"AIS_TYPE_TOWING_LARGE");
            yield return new EnumValue<T>(converter(33),"AIS_TYPE_DREDGING");
            yield return new EnumValue<T>(converter(34),"AIS_TYPE_DIVING");
            yield return new EnumValue<T>(converter(35),"AIS_TYPE_MILITARY");
            yield return new EnumValue<T>(converter(36),"AIS_TYPE_SAILING");
            yield return new EnumValue<T>(converter(37),"AIS_TYPE_PLEASURE");
            yield return new EnumValue<T>(converter(38),"AIS_TYPE_RESERVED_20");
            yield return new EnumValue<T>(converter(39),"AIS_TYPE_RESERVED_21");
            yield return new EnumValue<T>(converter(40),"AIS_TYPE_HSC");
            yield return new EnumValue<T>(converter(41),"AIS_TYPE_HSC_HAZARDOUS_A");
            yield return new EnumValue<T>(converter(42),"AIS_TYPE_HSC_HAZARDOUS_B");
            yield return new EnumValue<T>(converter(43),"AIS_TYPE_HSC_HAZARDOUS_C");
            yield return new EnumValue<T>(converter(44),"AIS_TYPE_HSC_HAZARDOUS_D");
            yield return new EnumValue<T>(converter(45),"AIS_TYPE_HSC_RESERVED_1");
            yield return new EnumValue<T>(converter(46),"AIS_TYPE_HSC_RESERVED_2");
            yield return new EnumValue<T>(converter(47),"AIS_TYPE_HSC_RESERVED_3");
            yield return new EnumValue<T>(converter(48),"AIS_TYPE_HSC_RESERVED_4");
            yield return new EnumValue<T>(converter(49),"AIS_TYPE_HSC_UNKNOWN");
            yield return new EnumValue<T>(converter(50),"AIS_TYPE_PILOT");
            yield return new EnumValue<T>(converter(51),"AIS_TYPE_SAR");
            yield return new EnumValue<T>(converter(52),"AIS_TYPE_TUG");
            yield return new EnumValue<T>(converter(53),"AIS_TYPE_PORT_TENDER");
            yield return new EnumValue<T>(converter(54),"AIS_TYPE_ANTI_POLLUTION");
            yield return new EnumValue<T>(converter(55),"AIS_TYPE_LAW_ENFORCEMENT");
            yield return new EnumValue<T>(converter(56),"AIS_TYPE_SPARE_LOCAL_1");
            yield return new EnumValue<T>(converter(57),"AIS_TYPE_SPARE_LOCAL_2");
            yield return new EnumValue<T>(converter(58),"AIS_TYPE_MEDICAL_TRANSPORT");
            yield return new EnumValue<T>(converter(59),"AIS_TYPE_NONECOMBATANT");
            yield return new EnumValue<T>(converter(60),"AIS_TYPE_PASSENGER");
            yield return new EnumValue<T>(converter(61),"AIS_TYPE_PASSENGER_HAZARDOUS_A");
            yield return new EnumValue<T>(converter(62),"AIS_TYPE_PASSENGER_HAZARDOUS_B");
            yield return new EnumValue<T>(converter(63),"AIS_TYPE_PASSENGER_HAZARDOUS_C");
            yield return new EnumValue<T>(converter(64),"AIS_TYPE_PASSENGER_HAZARDOUS_D");
            yield return new EnumValue<T>(converter(65),"AIS_TYPE_PASSENGER_RESERVED_1");
            yield return new EnumValue<T>(converter(66),"AIS_TYPE_PASSENGER_RESERVED_2");
            yield return new EnumValue<T>(converter(67),"AIS_TYPE_PASSENGER_RESERVED_3");
            yield return new EnumValue<T>(converter(68),"AIS_TYPE_PASSENGER_RESERVED_4");
            yield return new EnumValue<T>(converter(69),"AIS_TYPE_PASSENGER_UNKNOWN");
            yield return new EnumValue<T>(converter(70),"AIS_TYPE_CARGO");
            yield return new EnumValue<T>(converter(71),"AIS_TYPE_CARGO_HAZARDOUS_A");
            yield return new EnumValue<T>(converter(72),"AIS_TYPE_CARGO_HAZARDOUS_B");
            yield return new EnumValue<T>(converter(73),"AIS_TYPE_CARGO_HAZARDOUS_C");
            yield return new EnumValue<T>(converter(74),"AIS_TYPE_CARGO_HAZARDOUS_D");
            yield return new EnumValue<T>(converter(75),"AIS_TYPE_CARGO_RESERVED_1");
            yield return new EnumValue<T>(converter(76),"AIS_TYPE_CARGO_RESERVED_2");
            yield return new EnumValue<T>(converter(77),"AIS_TYPE_CARGO_RESERVED_3");
            yield return new EnumValue<T>(converter(78),"AIS_TYPE_CARGO_RESERVED_4");
            yield return new EnumValue<T>(converter(79),"AIS_TYPE_CARGO_UNKNOWN");
            yield return new EnumValue<T>(converter(80),"AIS_TYPE_TANKER");
            yield return new EnumValue<T>(converter(81),"AIS_TYPE_TANKER_HAZARDOUS_A");
            yield return new EnumValue<T>(converter(82),"AIS_TYPE_TANKER_HAZARDOUS_B");
            yield return new EnumValue<T>(converter(83),"AIS_TYPE_TANKER_HAZARDOUS_C");
            yield return new EnumValue<T>(converter(84),"AIS_TYPE_TANKER_HAZARDOUS_D");
            yield return new EnumValue<T>(converter(85),"AIS_TYPE_TANKER_RESERVED_1");
            yield return new EnumValue<T>(converter(86),"AIS_TYPE_TANKER_RESERVED_2");
            yield return new EnumValue<T>(converter(87),"AIS_TYPE_TANKER_RESERVED_3");
            yield return new EnumValue<T>(converter(88),"AIS_TYPE_TANKER_RESERVED_4");
            yield return new EnumValue<T>(converter(89),"AIS_TYPE_TANKER_UNKNOWN");
            yield return new EnumValue<T>(converter(90),"AIS_TYPE_OTHER");
            yield return new EnumValue<T>(converter(91),"AIS_TYPE_OTHER_HAZARDOUS_A");
            yield return new EnumValue<T>(converter(92),"AIS_TYPE_OTHER_HAZARDOUS_B");
            yield return new EnumValue<T>(converter(93),"AIS_TYPE_OTHER_HAZARDOUS_C");
            yield return new EnumValue<T>(converter(94),"AIS_TYPE_OTHER_HAZARDOUS_D");
            yield return new EnumValue<T>(converter(95),"AIS_TYPE_OTHER_RESERVED_1");
            yield return new EnumValue<T>(converter(96),"AIS_TYPE_OTHER_RESERVED_2");
            yield return new EnumValue<T>(converter(97),"AIS_TYPE_OTHER_RESERVED_3");
            yield return new EnumValue<T>(converter(98),"AIS_TYPE_OTHER_RESERVED_4");
            yield return new EnumValue<T>(converter(99),"AIS_TYPE_OTHER_UNKNOWN");
        }
    }
    /// <summary>
    /// Navigational status of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
    ///  AIS_NAV_STATUS
    /// </summary>
    public enum AisNavStatus : ulong
    {
        /// <summary>
        /// Under way using engine.
        /// UNDER_WAY
        /// </summary>
        UnderWay = 0,
        /// <summary>
        /// AIS_NAV_ANCHORED
        /// </summary>
        AisNavAnchored = 1,
        /// <summary>
        /// AIS_NAV_UN_COMMANDED
        /// </summary>
        AisNavUnCommanded = 2,
        /// <summary>
        /// AIS_NAV_RESTRICTED_MANOEUVERABILITY
        /// </summary>
        AisNavRestrictedManoeuverability = 3,
        /// <summary>
        /// AIS_NAV_DRAUGHT_CONSTRAINED
        /// </summary>
        AisNavDraughtConstrained = 4,
        /// <summary>
        /// AIS_NAV_MOORED
        /// </summary>
        AisNavMoored = 5,
        /// <summary>
        /// AIS_NAV_AGROUND
        /// </summary>
        AisNavAground = 6,
        /// <summary>
        /// AIS_NAV_FISHING
        /// </summary>
        AisNavFishing = 7,
        /// <summary>
        /// AIS_NAV_SAILING
        /// </summary>
        AisNavSailing = 8,
        /// <summary>
        /// AIS_NAV_RESERVED_HSC
        /// </summary>
        AisNavReservedHsc = 9,
        /// <summary>
        /// AIS_NAV_RESERVED_WIG
        /// </summary>
        AisNavReservedWig = 10,
        /// <summary>
        /// AIS_NAV_RESERVED_1
        /// </summary>
        AisNavReserved1 = 11,
        /// <summary>
        /// AIS_NAV_RESERVED_2
        /// </summary>
        AisNavReserved2 = 12,
        /// <summary>
        /// AIS_NAV_RESERVED_3
        /// </summary>
        AisNavReserved3 = 13,
        /// <summary>
        /// Search And Rescue Transponder.
        /// AIS_NAV_AIS_SART
        /// </summary>
        AisNavAisSart = 14,
        /// <summary>
        /// Not available (default).
        /// AIS_NAV_UNKNOWN
        /// </summary>
        AisNavUnknown = 15,
    }
    public static class AisNavStatusHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"UNDER_WAY");
            yield return new EnumValue<T>(converter(1),"AIS_NAV_ANCHORED");
            yield return new EnumValue<T>(converter(2),"AIS_NAV_UN_COMMANDED");
            yield return new EnumValue<T>(converter(3),"AIS_NAV_RESTRICTED_MANOEUVERABILITY");
            yield return new EnumValue<T>(converter(4),"AIS_NAV_DRAUGHT_CONSTRAINED");
            yield return new EnumValue<T>(converter(5),"AIS_NAV_MOORED");
            yield return new EnumValue<T>(converter(6),"AIS_NAV_AGROUND");
            yield return new EnumValue<T>(converter(7),"AIS_NAV_FISHING");
            yield return new EnumValue<T>(converter(8),"AIS_NAV_SAILING");
            yield return new EnumValue<T>(converter(9),"AIS_NAV_RESERVED_HSC");
            yield return new EnumValue<T>(converter(10),"AIS_NAV_RESERVED_WIG");
            yield return new EnumValue<T>(converter(11),"AIS_NAV_RESERVED_1");
            yield return new EnumValue<T>(converter(12),"AIS_NAV_RESERVED_2");
            yield return new EnumValue<T>(converter(13),"AIS_NAV_RESERVED_3");
            yield return new EnumValue<T>(converter(14),"AIS_NAV_AIS_SART");
            yield return new EnumValue<T>(converter(15),"AIS_NAV_UNKNOWN");
        }
    }
    /// <summary>
    /// These flags are used in the AIS_VESSEL.fields bitmask to indicate validity of data in the other message fields. When set, the data is valid.
    ///  AIS_FLAGS
    /// </summary>
    public enum AisFlags : ulong
    {
        /// <summary>
        /// 1 = Position accuracy less than 10m, 0 = position accuracy greater than 10m.
        /// AIS_FLAGS_POSITION_ACCURACY
        /// </summary>
        AisFlagsPositionAccuracy = 1,
        /// <summary>
        /// AIS_FLAGS_VALID_COG
        /// </summary>
        AisFlagsValidCog = 2,
        /// <summary>
        /// AIS_FLAGS_VALID_VELOCITY
        /// </summary>
        AisFlagsValidVelocity = 4,
        /// <summary>
        /// 1 = Velocity over 52.5765m/s (102.2 knots)
        /// AIS_FLAGS_HIGH_VELOCITY
        /// </summary>
        AisFlagsHighVelocity = 8,
        /// <summary>
        /// AIS_FLAGS_VALID_TURN_RATE
        /// </summary>
        AisFlagsValidTurnRate = 16,
        /// <summary>
        /// Only the sign of the returned turn rate value is valid, either greater than 5deg/30s or less than -5deg/30s
        /// AIS_FLAGS_TURN_RATE_SIGN_ONLY
        /// </summary>
        AisFlagsTurnRateSignOnly = 32,
        /// <summary>
        /// AIS_FLAGS_VALID_DIMENSIONS
        /// </summary>
        AisFlagsValidDimensions = 64,
        /// <summary>
        /// Distance to bow is larger than 511m
        /// AIS_FLAGS_LARGE_BOW_DIMENSION
        /// </summary>
        AisFlagsLargeBowDimension = 128,
        /// <summary>
        /// Distance to stern is larger than 511m
        /// AIS_FLAGS_LARGE_STERN_DIMENSION
        /// </summary>
        AisFlagsLargeSternDimension = 256,
        /// <summary>
        /// Distance to port side is larger than 63m
        /// AIS_FLAGS_LARGE_PORT_DIMENSION
        /// </summary>
        AisFlagsLargePortDimension = 512,
        /// <summary>
        /// Distance to starboard side is larger than 63m
        /// AIS_FLAGS_LARGE_STARBOARD_DIMENSION
        /// </summary>
        AisFlagsLargeStarboardDimension = 1024,
        /// <summary>
        /// AIS_FLAGS_VALID_CALLSIGN
        /// </summary>
        AisFlagsValidCallsign = 2048,
        /// <summary>
        /// AIS_FLAGS_VALID_NAME
        /// </summary>
        AisFlagsValidName = 4096,
    }
    public static class AisFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"AIS_FLAGS_POSITION_ACCURACY");
            yield return new EnumValue<T>(converter(2),"AIS_FLAGS_VALID_COG");
            yield return new EnumValue<T>(converter(4),"AIS_FLAGS_VALID_VELOCITY");
            yield return new EnumValue<T>(converter(8),"AIS_FLAGS_HIGH_VELOCITY");
            yield return new EnumValue<T>(converter(16),"AIS_FLAGS_VALID_TURN_RATE");
            yield return new EnumValue<T>(converter(32),"AIS_FLAGS_TURN_RATE_SIGN_ONLY");
            yield return new EnumValue<T>(converter(64),"AIS_FLAGS_VALID_DIMENSIONS");
            yield return new EnumValue<T>(converter(128),"AIS_FLAGS_LARGE_BOW_DIMENSION");
            yield return new EnumValue<T>(converter(256),"AIS_FLAGS_LARGE_STERN_DIMENSION");
            yield return new EnumValue<T>(converter(512),"AIS_FLAGS_LARGE_PORT_DIMENSION");
            yield return new EnumValue<T>(converter(1024),"AIS_FLAGS_LARGE_STARBOARD_DIMENSION");
            yield return new EnumValue<T>(converter(2048),"AIS_FLAGS_VALID_CALLSIGN");
            yield return new EnumValue<T>(converter(4096),"AIS_FLAGS_VALID_NAME");
        }
    }
    /// <summary>
    /// List of possible units where failures can be injected.
    ///  FAILURE_UNIT
    /// </summary>
    public enum FailureUnit : ulong
    {
        /// <summary>
        /// FAILURE_UNIT_SENSOR_GYRO
        /// </summary>
        FailureUnitSensorGyro = 0,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_ACCEL
        /// </summary>
        FailureUnitSensorAccel = 1,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_MAG
        /// </summary>
        FailureUnitSensorMag = 2,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_BARO
        /// </summary>
        FailureUnitSensorBaro = 3,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_GPS
        /// </summary>
        FailureUnitSensorGps = 4,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_OPTICAL_FLOW
        /// </summary>
        FailureUnitSensorOpticalFlow = 5,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_VIO
        /// </summary>
        FailureUnitSensorVio = 6,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_DISTANCE_SENSOR
        /// </summary>
        FailureUnitSensorDistanceSensor = 7,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_AIRSPEED
        /// </summary>
        FailureUnitSensorAirspeed = 8,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_BATTERY
        /// </summary>
        FailureUnitSystemBattery = 100,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_MOTOR
        /// </summary>
        FailureUnitSystemMotor = 101,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_SERVO
        /// </summary>
        FailureUnitSystemServo = 102,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_AVOIDANCE
        /// </summary>
        FailureUnitSystemAvoidance = 103,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_RC_SIGNAL
        /// </summary>
        FailureUnitSystemRcSignal = 104,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL
        /// </summary>
        FailureUnitSystemMavlinkSignal = 105,
    }
    public static class FailureUnitHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(100);
            yield return converter(101);
            yield return converter(102);
            yield return converter(103);
            yield return converter(104);
            yield return converter(105);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"FAILURE_UNIT_SENSOR_GYRO");
            yield return new EnumValue<T>(converter(1),"FAILURE_UNIT_SENSOR_ACCEL");
            yield return new EnumValue<T>(converter(2),"FAILURE_UNIT_SENSOR_MAG");
            yield return new EnumValue<T>(converter(3),"FAILURE_UNIT_SENSOR_BARO");
            yield return new EnumValue<T>(converter(4),"FAILURE_UNIT_SENSOR_GPS");
            yield return new EnumValue<T>(converter(5),"FAILURE_UNIT_SENSOR_OPTICAL_FLOW");
            yield return new EnumValue<T>(converter(6),"FAILURE_UNIT_SENSOR_VIO");
            yield return new EnumValue<T>(converter(7),"FAILURE_UNIT_SENSOR_DISTANCE_SENSOR");
            yield return new EnumValue<T>(converter(8),"FAILURE_UNIT_SENSOR_AIRSPEED");
            yield return new EnumValue<T>(converter(100),"FAILURE_UNIT_SYSTEM_BATTERY");
            yield return new EnumValue<T>(converter(101),"FAILURE_UNIT_SYSTEM_MOTOR");
            yield return new EnumValue<T>(converter(102),"FAILURE_UNIT_SYSTEM_SERVO");
            yield return new EnumValue<T>(converter(103),"FAILURE_UNIT_SYSTEM_AVOIDANCE");
            yield return new EnumValue<T>(converter(104),"FAILURE_UNIT_SYSTEM_RC_SIGNAL");
            yield return new EnumValue<T>(converter(105),"FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL");
        }
    }
    /// <summary>
    /// List of possible failure type to inject.
    ///  FAILURE_TYPE
    /// </summary>
    public enum FailureType : ulong
    {
        /// <summary>
        /// No failure injected, used to reset a previous failure.
        /// FAILURE_TYPE_OK
        /// </summary>
        FailureTypeOk = 0,
        /// <summary>
        /// Sets unit off, so completely non-responsive.
        /// FAILURE_TYPE_OFF
        /// </summary>
        FailureTypeOff = 1,
        /// <summary>
        /// Unit is stuck e.g. keeps reporting the same value.
        /// FAILURE_TYPE_STUCK
        /// </summary>
        FailureTypeStuck = 2,
        /// <summary>
        /// Unit is reporting complete garbage.
        /// FAILURE_TYPE_GARBAGE
        /// </summary>
        FailureTypeGarbage = 3,
        /// <summary>
        /// Unit is consistently wrong.
        /// FAILURE_TYPE_WRONG
        /// </summary>
        FailureTypeWrong = 4,
        /// <summary>
        /// Unit is slow, so e.g. reporting at slower than expected rate.
        /// FAILURE_TYPE_SLOW
        /// </summary>
        FailureTypeSlow = 5,
        /// <summary>
        /// Data of unit is delayed in time.
        /// FAILURE_TYPE_DELAYED
        /// </summary>
        FailureTypeDelayed = 6,
        /// <summary>
        /// Unit is sometimes working, sometimes not.
        /// FAILURE_TYPE_INTERMITTENT
        /// </summary>
        FailureTypeIntermittent = 7,
    }
    public static class FailureTypeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"FAILURE_TYPE_OK");
            yield return new EnumValue<T>(converter(1),"FAILURE_TYPE_OFF");
            yield return new EnumValue<T>(converter(2),"FAILURE_TYPE_STUCK");
            yield return new EnumValue<T>(converter(3),"FAILURE_TYPE_GARBAGE");
            yield return new EnumValue<T>(converter(4),"FAILURE_TYPE_WRONG");
            yield return new EnumValue<T>(converter(5),"FAILURE_TYPE_SLOW");
            yield return new EnumValue<T>(converter(6),"FAILURE_TYPE_DELAYED");
            yield return new EnumValue<T>(converter(7),"FAILURE_TYPE_INTERMITTENT");
        }
    }
    /// <summary>
    ///  NAV_VTOL_LAND_OPTIONS
    /// </summary>
    public enum NavVtolLandOptions : ulong
    {
        /// <summary>
        /// Default autopilot landing behaviour.
        /// NAV_VTOL_LAND_OPTIONS_DEFAULT
        /// </summary>
        NavVtolLandOptionsDefault = 0,
        /// <summary>
        /// Descend in fixed wing mode, transitioning to multicopter mode for vertical landing when close to the ground.
        ///           The fixed wing descent pattern is at the discretion of the vehicle (e.g. transition altitude, loiter direction, radius, and speed, etc.).
        ///         
        /// NAV_VTOL_LAND_OPTIONS_FW_DESCENT
        /// </summary>
        NavVtolLandOptionsFwDescent = 1,
        /// <summary>
        /// Land in multicopter mode on reaching the landing coordinates (the whole landing is by "hover descent").
        /// NAV_VTOL_LAND_OPTIONS_HOVER_DESCENT
        /// </summary>
        NavVtolLandOptionsHoverDescent = 2,
    }
    public static class NavVtolLandOptionsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"NAV_VTOL_LAND_OPTIONS_DEFAULT");
            yield return new EnumValue<T>(converter(1),"NAV_VTOL_LAND_OPTIONS_FW_DESCENT");
            yield return new EnumValue<T>(converter(2),"NAV_VTOL_LAND_OPTIONS_HOVER_DESCENT");
        }
    }
    /// <summary>
    /// Winch status flags used in WINCH_STATUS
    ///  MAV_WINCH_STATUS_FLAG
    /// </summary>
    public enum MavWinchStatusFlag : ulong
    {
        /// <summary>
        /// Winch is healthy
        /// MAV_WINCH_STATUS_HEALTHY
        /// </summary>
        MavWinchStatusHealthy = 1,
        /// <summary>
        /// Winch line is fully retracted
        /// MAV_WINCH_STATUS_FULLY_RETRACTED
        /// </summary>
        MavWinchStatusFullyRetracted = 2,
        /// <summary>
        /// Winch motor is moving
        /// MAV_WINCH_STATUS_MOVING
        /// </summary>
        MavWinchStatusMoving = 4,
        /// <summary>
        /// Winch clutch is engaged allowing motor to move freely.
        /// MAV_WINCH_STATUS_CLUTCH_ENGAGED
        /// </summary>
        MavWinchStatusClutchEngaged = 8,
        /// <summary>
        /// Winch is locked by locking mechanism.
        /// MAV_WINCH_STATUS_LOCKED
        /// </summary>
        MavWinchStatusLocked = 16,
        /// <summary>
        /// Winch is gravity dropping payload.
        /// MAV_WINCH_STATUS_DROPPING
        /// </summary>
        MavWinchStatusDropping = 32,
        /// <summary>
        /// Winch is arresting payload descent.
        /// MAV_WINCH_STATUS_ARRESTING
        /// </summary>
        MavWinchStatusArresting = 64,
        /// <summary>
        /// Winch is using torque measurements to sense the ground.
        /// MAV_WINCH_STATUS_GROUND_SENSE
        /// </summary>
        MavWinchStatusGroundSense = 128,
        /// <summary>
        /// Winch is returning to the fully retracted position.
        /// MAV_WINCH_STATUS_RETRACTING
        /// </summary>
        MavWinchStatusRetracting = 256,
        /// <summary>
        /// Winch is redelivering the payload. This is a failover state if the line tension goes above a threshold during RETRACTING.
        /// MAV_WINCH_STATUS_REDELIVER
        /// </summary>
        MavWinchStatusRedeliver = 512,
        /// <summary>
        /// Winch is abandoning the line and possibly payload. Winch unspools the entire calculated line length. This is a failover state from REDELIVER if the number of attempts exceeds a threshold.
        /// MAV_WINCH_STATUS_ABANDON_LINE
        /// </summary>
        MavWinchStatusAbandonLine = 1024,
        /// <summary>
        /// Winch is engaging the locking mechanism.
        /// MAV_WINCH_STATUS_LOCKING
        /// </summary>
        MavWinchStatusLocking = 2048,
        /// <summary>
        /// Winch is spooling on line.
        /// MAV_WINCH_STATUS_LOAD_LINE
        /// </summary>
        MavWinchStatusLoadLine = 4096,
        /// <summary>
        /// Winch is loading a payload.
        /// MAV_WINCH_STATUS_LOAD_PAYLOAD
        /// </summary>
        MavWinchStatusLoadPayload = 8192,
    }
    public static class MavWinchStatusFlagHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(8192);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_WINCH_STATUS_HEALTHY");
            yield return new EnumValue<T>(converter(2),"MAV_WINCH_STATUS_FULLY_RETRACTED");
            yield return new EnumValue<T>(converter(4),"MAV_WINCH_STATUS_MOVING");
            yield return new EnumValue<T>(converter(8),"MAV_WINCH_STATUS_CLUTCH_ENGAGED");
            yield return new EnumValue<T>(converter(16),"MAV_WINCH_STATUS_LOCKED");
            yield return new EnumValue<T>(converter(32),"MAV_WINCH_STATUS_DROPPING");
            yield return new EnumValue<T>(converter(64),"MAV_WINCH_STATUS_ARRESTING");
            yield return new EnumValue<T>(converter(128),"MAV_WINCH_STATUS_GROUND_SENSE");
            yield return new EnumValue<T>(converter(256),"MAV_WINCH_STATUS_RETRACTING");
            yield return new EnumValue<T>(converter(512),"MAV_WINCH_STATUS_REDELIVER");
            yield return new EnumValue<T>(converter(1024),"MAV_WINCH_STATUS_ABANDON_LINE");
            yield return new EnumValue<T>(converter(2048),"MAV_WINCH_STATUS_LOCKING");
            yield return new EnumValue<T>(converter(4096),"MAV_WINCH_STATUS_LOAD_LINE");
            yield return new EnumValue<T>(converter(8192),"MAV_WINCH_STATUS_LOAD_PAYLOAD");
        }
    }
    /// <summary>
    ///  MAG_CAL_STATUS
    /// </summary>
    public enum MagCalStatus : ulong
    {
        /// <summary>
        /// MAG_CAL_NOT_STARTED
        /// </summary>
        MagCalNotStarted = 0,
        /// <summary>
        /// MAG_CAL_WAITING_TO_START
        /// </summary>
        MagCalWaitingToStart = 1,
        /// <summary>
        /// MAG_CAL_RUNNING_STEP_ONE
        /// </summary>
        MagCalRunningStepOne = 2,
        /// <summary>
        /// MAG_CAL_RUNNING_STEP_TWO
        /// </summary>
        MagCalRunningStepTwo = 3,
        /// <summary>
        /// MAG_CAL_SUCCESS
        /// </summary>
        MagCalSuccess = 4,
        /// <summary>
        /// MAG_CAL_FAILED
        /// </summary>
        MagCalFailed = 5,
        /// <summary>
        /// MAG_CAL_BAD_ORIENTATION
        /// </summary>
        MagCalBadOrientation = 6,
        /// <summary>
        /// MAG_CAL_BAD_RADIUS
        /// </summary>
        MagCalBadRadius = 7,
    }
    public static class MagCalStatusHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAG_CAL_NOT_STARTED");
            yield return new EnumValue<T>(converter(1),"MAG_CAL_WAITING_TO_START");
            yield return new EnumValue<T>(converter(2),"MAG_CAL_RUNNING_STEP_ONE");
            yield return new EnumValue<T>(converter(3),"MAG_CAL_RUNNING_STEP_TWO");
            yield return new EnumValue<T>(converter(4),"MAG_CAL_SUCCESS");
            yield return new EnumValue<T>(converter(5),"MAG_CAL_FAILED");
            yield return new EnumValue<T>(converter(6),"MAG_CAL_BAD_ORIENTATION");
            yield return new EnumValue<T>(converter(7),"MAG_CAL_BAD_RADIUS");
        }
    }
    /// <summary>
    /// Reason for an event error response.
    ///  MAV_EVENT_ERROR_REASON
    /// </summary>
    public enum MavEventErrorReason : ulong
    {
        /// <summary>
        /// The requested event is not available (anymore).
        /// MAV_EVENT_ERROR_REASON_UNAVAILABLE
        /// </summary>
        MavEventErrorReasonUnavailable = 0,
    }
    public static class MavEventErrorReasonHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_EVENT_ERROR_REASON_UNAVAILABLE");
        }
    }
    /// <summary>
    /// Flags for CURRENT_EVENT_SEQUENCE.
    ///  MAV_EVENT_CURRENT_SEQUENCE_FLAGS
    /// </summary>
    public enum MavEventCurrentSequenceFlags : ulong
    {
        /// <summary>
        /// A sequence reset has happened (e.g. vehicle reboot).
        /// MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET
        /// </summary>
        MavEventCurrentSequenceFlagsReset = 1,
    }
    public static class MavEventCurrentSequenceFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(1);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(1),"MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET");
        }
    }
    /// <summary>
    /// Flags in the HIL_SENSOR message indicate which fields have updated since the last message
    ///  HIL_SENSOR_UPDATED_FLAGS
    /// </summary>
    public enum HilSensorUpdatedFlags : ulong
    {
        /// <summary>
        /// None of the fields in HIL_SENSOR have been updated
        /// HIL_SENSOR_UPDATED_NONE
        /// </summary>
        HilSensorUpdatedNone = 0,
        /// <summary>
        /// The value in the xacc field has been updated
        /// HIL_SENSOR_UPDATED_XACC
        /// </summary>
        HilSensorUpdatedXacc = 1,
        /// <summary>
        /// The value in the yacc field has been updated
        /// HIL_SENSOR_UPDATED_YACC
        /// </summary>
        HilSensorUpdatedYacc = 2,
        /// <summary>
        /// The value in the zacc field has been updated
        /// HIL_SENSOR_UPDATED_ZACC
        /// </summary>
        HilSensorUpdatedZacc = 4,
        /// <summary>
        /// The value in the xgyro field has been updated
        /// HIL_SENSOR_UPDATED_XGYRO
        /// </summary>
        HilSensorUpdatedXgyro = 8,
        /// <summary>
        /// The value in the ygyro field has been updated
        /// HIL_SENSOR_UPDATED_YGYRO
        /// </summary>
        HilSensorUpdatedYgyro = 16,
        /// <summary>
        /// The value in the zgyro field has been updated
        /// HIL_SENSOR_UPDATED_ZGYRO
        /// </summary>
        HilSensorUpdatedZgyro = 32,
        /// <summary>
        /// The value in the xmag field has been updated
        /// HIL_SENSOR_UPDATED_XMAG
        /// </summary>
        HilSensorUpdatedXmag = 64,
        /// <summary>
        /// The value in the ymag field has been updated
        /// HIL_SENSOR_UPDATED_YMAG
        /// </summary>
        HilSensorUpdatedYmag = 128,
        /// <summary>
        /// The value in the zmag field has been updated
        /// HIL_SENSOR_UPDATED_ZMAG
        /// </summary>
        HilSensorUpdatedZmag = 256,
        /// <summary>
        /// The value in the abs_pressure field has been updated
        /// HIL_SENSOR_UPDATED_ABS_PRESSURE
        /// </summary>
        HilSensorUpdatedAbsPressure = 512,
        /// <summary>
        /// The value in the diff_pressure field has been updated
        /// HIL_SENSOR_UPDATED_DIFF_PRESSURE
        /// </summary>
        HilSensorUpdatedDiffPressure = 1024,
        /// <summary>
        /// The value in the pressure_alt field has been updated
        /// HIL_SENSOR_UPDATED_PRESSURE_ALT
        /// </summary>
        HilSensorUpdatedPressureAlt = 2048,
        /// <summary>
        /// The value in the temperature field has been updated
        /// HIL_SENSOR_UPDATED_TEMPERATURE
        /// </summary>
        HilSensorUpdatedTemperature = 4096,
        /// <summary>
        /// Full reset of attitude/position/velocities/etc was performed in sim (Bit 31).
        /// HIL_SENSOR_UPDATED_RESET
        /// </summary>
        HilSensorUpdatedReset = 2147483648,
    }
    public static class HilSensorUpdatedFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(2147483648);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"HIL_SENSOR_UPDATED_NONE");
            yield return new EnumValue<T>(converter(1),"HIL_SENSOR_UPDATED_XACC");
            yield return new EnumValue<T>(converter(2),"HIL_SENSOR_UPDATED_YACC");
            yield return new EnumValue<T>(converter(4),"HIL_SENSOR_UPDATED_ZACC");
            yield return new EnumValue<T>(converter(8),"HIL_SENSOR_UPDATED_XGYRO");
            yield return new EnumValue<T>(converter(16),"HIL_SENSOR_UPDATED_YGYRO");
            yield return new EnumValue<T>(converter(32),"HIL_SENSOR_UPDATED_ZGYRO");
            yield return new EnumValue<T>(converter(64),"HIL_SENSOR_UPDATED_XMAG");
            yield return new EnumValue<T>(converter(128),"HIL_SENSOR_UPDATED_YMAG");
            yield return new EnumValue<T>(converter(256),"HIL_SENSOR_UPDATED_ZMAG");
            yield return new EnumValue<T>(converter(512),"HIL_SENSOR_UPDATED_ABS_PRESSURE");
            yield return new EnumValue<T>(converter(1024),"HIL_SENSOR_UPDATED_DIFF_PRESSURE");
            yield return new EnumValue<T>(converter(2048),"HIL_SENSOR_UPDATED_PRESSURE_ALT");
            yield return new EnumValue<T>(converter(4096),"HIL_SENSOR_UPDATED_TEMPERATURE");
            yield return new EnumValue<T>(converter(2147483648),"HIL_SENSOR_UPDATED_RESET");
        }
    }
    /// <summary>
    /// Flags in the HIGHRES_IMU message indicate which fields have updated since the last message
    ///  HIGHRES_IMU_UPDATED_FLAGS
    /// </summary>
    public enum HighresImuUpdatedFlags : ulong
    {
        /// <summary>
        /// None of the fields in HIGHRES_IMU have been updated
        /// HIGHRES_IMU_UPDATED_NONE
        /// </summary>
        HighresImuUpdatedNone = 0,
        /// <summary>
        /// The value in the xacc field has been updated
        /// HIGHRES_IMU_UPDATED_XACC
        /// </summary>
        HighresImuUpdatedXacc = 1,
        /// <summary>
        /// The value in the yacc field has been updated
        /// HIGHRES_IMU_UPDATED_YACC
        /// </summary>
        HighresImuUpdatedYacc = 2,
        /// <summary>
        /// The value in the zacc field has been updated since
        /// HIGHRES_IMU_UPDATED_ZACC
        /// </summary>
        HighresImuUpdatedZacc = 4,
        /// <summary>
        /// The value in the xgyro field has been updated
        /// HIGHRES_IMU_UPDATED_XGYRO
        /// </summary>
        HighresImuUpdatedXgyro = 8,
        /// <summary>
        /// The value in the ygyro field has been updated
        /// HIGHRES_IMU_UPDATED_YGYRO
        /// </summary>
        HighresImuUpdatedYgyro = 16,
        /// <summary>
        /// The value in the zgyro field has been updated
        /// HIGHRES_IMU_UPDATED_ZGYRO
        /// </summary>
        HighresImuUpdatedZgyro = 32,
        /// <summary>
        /// The value in the xmag field has been updated
        /// HIGHRES_IMU_UPDATED_XMAG
        /// </summary>
        HighresImuUpdatedXmag = 64,
        /// <summary>
        /// The value in the ymag field has been updated
        /// HIGHRES_IMU_UPDATED_YMAG
        /// </summary>
        HighresImuUpdatedYmag = 128,
        /// <summary>
        /// The value in the zmag field has been updated
        /// HIGHRES_IMU_UPDATED_ZMAG
        /// </summary>
        HighresImuUpdatedZmag = 256,
        /// <summary>
        /// The value in the abs_pressure field has been updated
        /// HIGHRES_IMU_UPDATED_ABS_PRESSURE
        /// </summary>
        HighresImuUpdatedAbsPressure = 512,
        /// <summary>
        /// The value in the diff_pressure field has been updated
        /// HIGHRES_IMU_UPDATED_DIFF_PRESSURE
        /// </summary>
        HighresImuUpdatedDiffPressure = 1024,
        /// <summary>
        /// The value in the pressure_alt field has been updated
        /// HIGHRES_IMU_UPDATED_PRESSURE_ALT
        /// </summary>
        HighresImuUpdatedPressureAlt = 2048,
        /// <summary>
        /// The value in the temperature field has been updated
        /// HIGHRES_IMU_UPDATED_TEMPERATURE
        /// </summary>
        HighresImuUpdatedTemperature = 4096,
        /// <summary>
        /// All fields in HIGHRES_IMU have been updated.
        /// HIGHRES_IMU_UPDATED_ALL
        /// </summary>
        HighresImuUpdatedAll = 65535,
    }
    public static class HighresImuUpdatedFlagsHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(4);
            yield return converter(8);
            yield return converter(16);
            yield return converter(32);
            yield return converter(64);
            yield return converter(128);
            yield return converter(256);
            yield return converter(512);
            yield return converter(1024);
            yield return converter(2048);
            yield return converter(4096);
            yield return converter(65535);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"HIGHRES_IMU_UPDATED_NONE");
            yield return new EnumValue<T>(converter(1),"HIGHRES_IMU_UPDATED_XACC");
            yield return new EnumValue<T>(converter(2),"HIGHRES_IMU_UPDATED_YACC");
            yield return new EnumValue<T>(converter(4),"HIGHRES_IMU_UPDATED_ZACC");
            yield return new EnumValue<T>(converter(8),"HIGHRES_IMU_UPDATED_XGYRO");
            yield return new EnumValue<T>(converter(16),"HIGHRES_IMU_UPDATED_YGYRO");
            yield return new EnumValue<T>(converter(32),"HIGHRES_IMU_UPDATED_ZGYRO");
            yield return new EnumValue<T>(converter(64),"HIGHRES_IMU_UPDATED_XMAG");
            yield return new EnumValue<T>(converter(128),"HIGHRES_IMU_UPDATED_YMAG");
            yield return new EnumValue<T>(converter(256),"HIGHRES_IMU_UPDATED_ZMAG");
            yield return new EnumValue<T>(converter(512),"HIGHRES_IMU_UPDATED_ABS_PRESSURE");
            yield return new EnumValue<T>(converter(1024),"HIGHRES_IMU_UPDATED_DIFF_PRESSURE");
            yield return new EnumValue<T>(converter(2048),"HIGHRES_IMU_UPDATED_PRESSURE_ALT");
            yield return new EnumValue<T>(converter(4096),"HIGHRES_IMU_UPDATED_TEMPERATURE");
            yield return new EnumValue<T>(converter(65535),"HIGHRES_IMU_UPDATED_ALL");
        }
    }
    /// <summary>
    ///  CAN_FILTER_OP
    /// </summary>
    public enum CanFilterOp : ulong
    {
        /// <summary>
        /// CAN_FILTER_REPLACE
        /// </summary>
        CanFilterReplace = 0,
        /// <summary>
        /// CAN_FILTER_ADD
        /// </summary>
        CanFilterAdd = 1,
        /// <summary>
        /// CAN_FILTER_REMOVE
        /// </summary>
        CanFilterRemove = 2,
    }
    public static class CanFilterOpHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"CAN_FILTER_REPLACE");
            yield return new EnumValue<T>(converter(1),"CAN_FILTER_ADD");
            yield return new EnumValue<T>(converter(2),"CAN_FILTER_REMOVE");
        }
    }
    /// <summary>
    /// MAV FTP error codes (https://mavlink.io/en/services/ftp.html)
    ///  MAV_FTP_ERR
    /// </summary>
    public enum MavFtpErr : ulong
    {
        /// <summary>
        /// None: No error
        /// MAV_FTP_ERR_NONE
        /// </summary>
        MavFtpErrNone = 0,
        /// <summary>
        /// Fail: Unknown failure
        /// MAV_FTP_ERR_FAIL
        /// </summary>
        MavFtpErrFail = 1,
        /// <summary>
        /// FailErrno: Command failed, Err number sent back in PayloadHeader.data[1].
        /// 		This is a file-system error number understood by the server operating system.
        /// MAV_FTP_ERR_FAILERRNO
        /// </summary>
        MavFtpErrFailerrno = 2,
        /// <summary>
        /// InvalidDataSize: Payload size is invalid
        /// MAV_FTP_ERR_INVALIDDATASIZE
        /// </summary>
        MavFtpErrInvaliddatasize = 3,
        /// <summary>
        /// InvalidSession: Session is not currently open
        /// MAV_FTP_ERR_INVALIDSESSION
        /// </summary>
        MavFtpErrInvalidsession = 4,
        /// <summary>
        /// NoSessionsAvailable: All available sessions are already in use
        /// MAV_FTP_ERR_NOSESSIONSAVAILABLE
        /// </summary>
        MavFtpErrNosessionsavailable = 5,
        /// <summary>
        /// EOF: Offset past end of file for ListDirectory and ReadFile commands
        /// MAV_FTP_ERR_EOF
        /// </summary>
        MavFtpErrEof = 6,
        /// <summary>
        /// UnknownCommand: Unknown command / opcode
        /// MAV_FTP_ERR_UNKNOWNCOMMAND
        /// </summary>
        MavFtpErrUnknowncommand = 7,
        /// <summary>
        /// FileExists: File/directory already exists
        /// MAV_FTP_ERR_FILEEXISTS
        /// </summary>
        MavFtpErrFileexists = 8,
        /// <summary>
        /// FileProtected: File/directory is write protected
        /// MAV_FTP_ERR_FILEPROTECTED
        /// </summary>
        MavFtpErrFileprotected = 9,
        /// <summary>
        /// FileNotFound: File/directory not found
        /// MAV_FTP_ERR_FILENOTFOUND
        /// </summary>
        MavFtpErrFilenotfound = 10,
    }
    public static class MavFtpErrHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_FTP_ERR_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_FTP_ERR_FAIL");
            yield return new EnumValue<T>(converter(2),"MAV_FTP_ERR_FAILERRNO");
            yield return new EnumValue<T>(converter(3),"MAV_FTP_ERR_INVALIDDATASIZE");
            yield return new EnumValue<T>(converter(4),"MAV_FTP_ERR_INVALIDSESSION");
            yield return new EnumValue<T>(converter(5),"MAV_FTP_ERR_NOSESSIONSAVAILABLE");
            yield return new EnumValue<T>(converter(6),"MAV_FTP_ERR_EOF");
            yield return new EnumValue<T>(converter(7),"MAV_FTP_ERR_UNKNOWNCOMMAND");
            yield return new EnumValue<T>(converter(8),"MAV_FTP_ERR_FILEEXISTS");
            yield return new EnumValue<T>(converter(9),"MAV_FTP_ERR_FILEPROTECTED");
            yield return new EnumValue<T>(converter(10),"MAV_FTP_ERR_FILENOTFOUND");
        }
    }
    /// <summary>
    /// MAV FTP opcodes: https://mavlink.io/en/services/ftp.html
    ///  MAV_FTP_OPCODE
    /// </summary>
    public enum MavFtpOpcode : ulong
    {
        /// <summary>
        /// None. Ignored, always ACKed
        /// MAV_FTP_OPCODE_NONE
        /// </summary>
        MavFtpOpcodeNone = 0,
        /// <summary>
        /// TerminateSession: Terminates open Read session
        /// MAV_FTP_OPCODE_TERMINATESESSION
        /// </summary>
        MavFtpOpcodeTerminatesession = 1,
        /// <summary>
        /// ResetSessions: Terminates all open read sessions
        /// MAV_FTP_OPCODE_RESETSESSION
        /// </summary>
        MavFtpOpcodeResetsession = 2,
        /// <summary>
        /// ListDirectory. List files and directories in path from offset
        /// MAV_FTP_OPCODE_LISTDIRECTORY
        /// </summary>
        MavFtpOpcodeListdirectory = 3,
        /// <summary>
        /// OpenFileRO: Opens file at path for reading, returns session
        /// MAV_FTP_OPCODE_OPENFILERO
        /// </summary>
        MavFtpOpcodeOpenfilero = 4,
        /// <summary>
        /// ReadFile: Reads size bytes from offset in session
        /// MAV_FTP_OPCODE_READFILE
        /// </summary>
        MavFtpOpcodeReadfile = 5,
        /// <summary>
        /// CreateFile: Creates file at path for writing, returns session
        /// MAV_FTP_OPCODE_CREATEFILE
        /// </summary>
        MavFtpOpcodeCreatefile = 6,
        /// <summary>
        /// WriteFile: Writes size bytes to offset in session
        /// MAV_FTP_OPCODE_WRITEFILE
        /// </summary>
        MavFtpOpcodeWritefile = 7,
        /// <summary>
        /// RemoveFile: Remove file at path
        /// MAV_FTP_OPCODE_REMOVEFILE
        /// </summary>
        MavFtpOpcodeRemovefile = 8,
        /// <summary>
        /// CreateDirectory: Creates directory at path
        /// MAV_FTP_OPCODE_CREATEDIRECTORY
        /// </summary>
        MavFtpOpcodeCreatedirectory = 9,
        /// <summary>
        /// RemoveDirectory: Removes directory at path. The directory must be empty.
        /// MAV_FTP_OPCODE_REMOVEDIRECTORY
        /// </summary>
        MavFtpOpcodeRemovedirectory = 10,
        /// <summary>
        /// OpenFileWO: Opens file at path for writing, returns session
        /// MAV_FTP_OPCODE_OPENFILEWO
        /// </summary>
        MavFtpOpcodeOpenfilewo = 11,
        /// <summary>
        /// TruncateFile: Truncate file at path to offset length
        /// MAV_FTP_OPCODE_TRUNCATEFILE
        /// </summary>
        MavFtpOpcodeTruncatefile = 12,
        /// <summary>
        /// Rename: Rename path1 to path2
        /// MAV_FTP_OPCODE_RENAME
        /// </summary>
        MavFtpOpcodeRename = 13,
        /// <summary>
        /// CalcFileCRC32: Calculate CRC32 for file at path
        /// MAV_FTP_OPCODE_CALCFILECRC
        /// </summary>
        MavFtpOpcodeCalcfilecrc = 14,
        /// <summary>
        /// BurstReadFile: Burst download session file
        /// MAV_FTP_OPCODE_BURSTREADFILE
        /// </summary>
        MavFtpOpcodeBurstreadfile = 15,
        /// <summary>
        /// ACK: ACK response
        /// MAV_FTP_OPCODE_ACK
        /// </summary>
        MavFtpOpcodeAck = 128,
        /// <summary>
        /// NAK: NAK response
        /// MAV_FTP_OPCODE_NAK
        /// </summary>
        MavFtpOpcodeNak = 129,
    }
    public static class MavFtpOpcodeHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
            yield return converter(6);
            yield return converter(7);
            yield return converter(8);
            yield return converter(9);
            yield return converter(10);
            yield return converter(11);
            yield return converter(12);
            yield return converter(13);
            yield return converter(14);
            yield return converter(15);
            yield return converter(128);
            yield return converter(129);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MAV_FTP_OPCODE_NONE");
            yield return new EnumValue<T>(converter(1),"MAV_FTP_OPCODE_TERMINATESESSION");
            yield return new EnumValue<T>(converter(2),"MAV_FTP_OPCODE_RESETSESSION");
            yield return new EnumValue<T>(converter(3),"MAV_FTP_OPCODE_LISTDIRECTORY");
            yield return new EnumValue<T>(converter(4),"MAV_FTP_OPCODE_OPENFILERO");
            yield return new EnumValue<T>(converter(5),"MAV_FTP_OPCODE_READFILE");
            yield return new EnumValue<T>(converter(6),"MAV_FTP_OPCODE_CREATEFILE");
            yield return new EnumValue<T>(converter(7),"MAV_FTP_OPCODE_WRITEFILE");
            yield return new EnumValue<T>(converter(8),"MAV_FTP_OPCODE_REMOVEFILE");
            yield return new EnumValue<T>(converter(9),"MAV_FTP_OPCODE_CREATEDIRECTORY");
            yield return new EnumValue<T>(converter(10),"MAV_FTP_OPCODE_REMOVEDIRECTORY");
            yield return new EnumValue<T>(converter(11),"MAV_FTP_OPCODE_OPENFILEWO");
            yield return new EnumValue<T>(converter(12),"MAV_FTP_OPCODE_TRUNCATEFILE");
            yield return new EnumValue<T>(converter(13),"MAV_FTP_OPCODE_RENAME");
            yield return new EnumValue<T>(converter(14),"MAV_FTP_OPCODE_CALCFILECRC");
            yield return new EnumValue<T>(converter(15),"MAV_FTP_OPCODE_BURSTREADFILE");
            yield return new EnumValue<T>(converter(128),"MAV_FTP_OPCODE_ACK");
            yield return new EnumValue<T>(converter(129),"MAV_FTP_OPCODE_NAK");
        }
    }
    /// <summary>
    /// 
    ///         States of the mission state machine.
    ///         Note that these states are independent of whether the mission is in a mode that can execute mission items or not (is suspended).
    ///         They may not all be relevant on all vehicles.
    ///       
    ///  MISSION_STATE
    /// </summary>
    public enum MissionState : ulong
    {
        /// <summary>
        /// The mission status reporting is not supported.
        /// MISSION_STATE_UNKNOWN
        /// </summary>
        MissionStateUnknown = 0,
        /// <summary>
        /// No mission on the vehicle.
        /// MISSION_STATE_NO_MISSION
        /// </summary>
        MissionStateNoMission = 1,
        /// <summary>
        /// Mission has not started. This is the case after a mission has uploaded but not yet started executing.
        /// MISSION_STATE_NOT_STARTED
        /// </summary>
        MissionStateNotStarted = 2,
        /// <summary>
        /// Mission is active, and will execute mission items when in auto mode.
        /// MISSION_STATE_ACTIVE
        /// </summary>
        MissionStateActive = 3,
        /// <summary>
        /// Mission is paused when in auto mode.
        /// MISSION_STATE_PAUSED
        /// </summary>
        MissionStatePaused = 4,
        /// <summary>
        /// Mission has executed all mission items.
        /// MISSION_STATE_COMPLETE
        /// </summary>
        MissionStateComplete = 5,
    }
    public static class MissionStateHelper
    {
        public static IEnumerable<T> GetValues<T>(Func<ulong, T> converter)
        {
            yield return converter(0);
            yield return converter(1);
            yield return converter(2);
            yield return converter(3);
            yield return converter(4);
            yield return converter(5);
        }
        public static IEnumerable<EnumValue<T>> GetEnumValues<T>(Func<ulong,T> converter)
        {
            yield return new EnumValue<T>(converter(0),"MISSION_STATE_UNKNOWN");
            yield return new EnumValue<T>(converter(1),"MISSION_STATE_NO_MISSION");
            yield return new EnumValue<T>(converter(2),"MISSION_STATE_NOT_STARTED");
            yield return new EnumValue<T>(converter(3),"MISSION_STATE_ACTIVE");
            yield return new EnumValue<T>(converter(4),"MISSION_STATE_PAUSED");
            yield return new EnumValue<T>(converter(5),"MISSION_STATE_COMPLETE");
        }
    }

#endregion

#region Messages

    /// <summary>
    /// The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occurred. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occurred it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
    ///  SYS_STATUS
    /// </summary>
    public class SysStatusPacket : MavlinkV2Message<SysStatusPayload>
    {
        public const int MessageId = 1;
        
        public const byte CrcExtra = 124;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SysStatusPayload Payload { get; } = new();

        public override string Name => "SYS_STATUS";
    }

    /// <summary>
    ///  SYS_STATUS
    /// </summary>
    public class SysStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 4 // uint32_t onboard_control_sensors_present
            + 4 // uint32_t onboard_control_sensors_enabled
            + 4 // uint32_t onboard_control_sensors_health
            +2 // uint16_t load
            +2 // uint16_t voltage_battery
            +2 // int16_t current_battery
            +2 // uint16_t drop_rate_comm
            +2 // uint16_t errors_comm
            +2 // uint16_t errors_count1
            +2 // uint16_t errors_count2
            +2 // uint16_t errors_count3
            +2 // uint16_t errors_count4
            +1 // int8_t battery_remaining
            + 4 // uint32_t onboard_control_sensors_present_extended
            + 4 // uint32_t onboard_control_sensors_enabled_extended
            + 4 // uint32_t onboard_control_sensors_health_extended
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            OnboardControlSensorsPresent = (MavSysStatusSensor)BinSerialize.ReadUInt(ref buffer);
            OnboardControlSensorsEnabled = (MavSysStatusSensor)BinSerialize.ReadUInt(ref buffer);
            OnboardControlSensorsHealth = (MavSysStatusSensor)BinSerialize.ReadUInt(ref buffer);
            Load = BinSerialize.ReadUShort(ref buffer);
            VoltageBattery = BinSerialize.ReadUShort(ref buffer);
            CurrentBattery = BinSerialize.ReadShort(ref buffer);
            DropRateComm = BinSerialize.ReadUShort(ref buffer);
            ErrorsComm = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount1 = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount2 = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount3 = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount4 = BinSerialize.ReadUShort(ref buffer);
            BatteryRemaining = (sbyte)BinSerialize.ReadByte(ref buffer);
            // extended field 'OnboardControlSensorsPresentExtended' can be empty
            if (buffer.IsEmpty) return;
            OnboardControlSensorsPresentExtended = (MavSysStatusSensorExtended)BinSerialize.ReadUInt(ref buffer);
            // extended field 'OnboardControlSensorsEnabledExtended' can be empty
            if (buffer.IsEmpty) return;
            OnboardControlSensorsEnabledExtended = (MavSysStatusSensorExtended)BinSerialize.ReadUInt(ref buffer);
            // extended field 'OnboardControlSensorsHealthExtended' can be empty
            if (buffer.IsEmpty) return;
            OnboardControlSensorsHealthExtended = (MavSysStatusSensorExtended)BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsPresent);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsEnabled);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsHealth);
            BinSerialize.WriteUShort(ref buffer,Load);
            BinSerialize.WriteUShort(ref buffer,VoltageBattery);
            BinSerialize.WriteShort(ref buffer,CurrentBattery);
            BinSerialize.WriteUShort(ref buffer,DropRateComm);
            BinSerialize.WriteUShort(ref buffer,ErrorsComm);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount1);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount2);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount3);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount4);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryRemaining);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsPresentExtended);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsEnabledExtended);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsHealthExtended);
            /* PayloadByteSize = 43 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpOnboardControlSensorsPresent = (uint)OnboardControlSensorsPresent;
            UInt32Type.Accept(visitor,OnboardControlSensorsPresentField, ref tmpOnboardControlSensorsPresent);
            OnboardControlSensorsPresent = (MavSysStatusSensor)tmpOnboardControlSensorsPresent;
            var tmpOnboardControlSensorsEnabled = (uint)OnboardControlSensorsEnabled;
            UInt32Type.Accept(visitor,OnboardControlSensorsEnabledField, ref tmpOnboardControlSensorsEnabled);
            OnboardControlSensorsEnabled = (MavSysStatusSensor)tmpOnboardControlSensorsEnabled;
            var tmpOnboardControlSensorsHealth = (uint)OnboardControlSensorsHealth;
            UInt32Type.Accept(visitor,OnboardControlSensorsHealthField, ref tmpOnboardControlSensorsHealth);
            OnboardControlSensorsHealth = (MavSysStatusSensor)tmpOnboardControlSensorsHealth;
            UInt16Type.Accept(visitor,LoadField, ref _load);    
            UInt16Type.Accept(visitor,VoltageBatteryField, ref _voltageBattery);    
            Int16Type.Accept(visitor,CurrentBatteryField, ref _currentBattery);
            UInt16Type.Accept(visitor,DropRateCommField, ref _dropRateComm);    
            UInt16Type.Accept(visitor,ErrorsCommField, ref _errorsComm);    
            UInt16Type.Accept(visitor,ErrorsCount1Field, ref _errorsCount1);    
            UInt16Type.Accept(visitor,ErrorsCount2Field, ref _errorsCount2);    
            UInt16Type.Accept(visitor,ErrorsCount3Field, ref _errorsCount3);    
            UInt16Type.Accept(visitor,ErrorsCount4Field, ref _errorsCount4);    
            Int8Type.Accept(visitor,BatteryRemainingField, ref _batteryRemaining);                
            var tmpOnboardControlSensorsPresentExtended = (uint)OnboardControlSensorsPresentExtended;
            UInt32Type.Accept(visitor,OnboardControlSensorsPresentExtendedField, ref tmpOnboardControlSensorsPresentExtended);
            OnboardControlSensorsPresentExtended = (MavSysStatusSensorExtended)tmpOnboardControlSensorsPresentExtended;
            var tmpOnboardControlSensorsEnabledExtended = (uint)OnboardControlSensorsEnabledExtended;
            UInt32Type.Accept(visitor,OnboardControlSensorsEnabledExtendedField, ref tmpOnboardControlSensorsEnabledExtended);
            OnboardControlSensorsEnabledExtended = (MavSysStatusSensorExtended)tmpOnboardControlSensorsEnabledExtended;
            var tmpOnboardControlSensorsHealthExtended = (uint)OnboardControlSensorsHealthExtended;
            UInt32Type.Accept(visitor,OnboardControlSensorsHealthExtendedField, ref tmpOnboardControlSensorsHealthExtended);
            OnboardControlSensorsHealthExtended = (MavSysStatusSensorExtended)tmpOnboardControlSensorsHealthExtended;

        }

        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.
        /// OriginName: onboard_control_sensors_present, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OnboardControlSensorsPresentField = new Field.Builder()
            .Name(nameof(OnboardControlSensorsPresent))
            .Title("bitmask")
            .Description("Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.")
.FormatString("0x%04x")            .DataType(new UInt32Type(MavSysStatusSensorHelper.GetValues(x=>(uint)x).Min(),MavSysStatusSensorHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavSysStatusSensorHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavSysStatusSensor _onboardControlSensorsPresent;
        public MavSysStatusSensor OnboardControlSensorsPresent { get => _onboardControlSensorsPresent; set => _onboardControlSensorsPresent = value; } 
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.
        /// OriginName: onboard_control_sensors_enabled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OnboardControlSensorsEnabledField = new Field.Builder()
            .Name(nameof(OnboardControlSensorsEnabled))
            .Title("bitmask")
            .Description("Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.")
.FormatString("0x%04x")            .DataType(new UInt32Type(MavSysStatusSensorHelper.GetValues(x=>(uint)x).Min(),MavSysStatusSensorHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavSysStatusSensorHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavSysStatusSensor _onboardControlSensorsEnabled;
        public MavSysStatusSensor OnboardControlSensorsEnabled { get => _onboardControlSensorsEnabled; set => _onboardControlSensorsEnabled = value; } 
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.
        /// OriginName: onboard_control_sensors_health, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OnboardControlSensorsHealthField = new Field.Builder()
            .Name(nameof(OnboardControlSensorsHealth))
            .Title("bitmask")
            .Description("Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.")
.FormatString("0x%04x")            .DataType(new UInt32Type(MavSysStatusSensorHelper.GetValues(x=>(uint)x).Min(),MavSysStatusSensorHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavSysStatusSensorHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavSysStatusSensor _onboardControlSensorsHealth;
        public MavSysStatusSensor OnboardControlSensorsHealth { get => _onboardControlSensorsHealth; set => _onboardControlSensorsHealth = value; } 
        /// <summary>
        /// Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000
        /// OriginName: load, Units: d%, IsExtended: false
        /// </summary>
        public static readonly Field LoadField = new Field.Builder()
            .Name(nameof(Load))
            .Title("load")
            .Description("Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000")
.Units(@"d%")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _load;
        public ushort Load { get => _load; set => _load = value; }
        /// <summary>
        /// Battery voltage, UINT16_MAX: Voltage not sent by autopilot
        /// OriginName: voltage_battery, Units: mV, IsExtended: false
        /// </summary>
        public static readonly Field VoltageBatteryField = new Field.Builder()
            .Name(nameof(VoltageBattery))
            .Title("voltage_battery")
            .Description("Battery voltage, UINT16_MAX: Voltage not sent by autopilot")
.Units(@"mV")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _voltageBattery;
        public ushort VoltageBattery { get => _voltageBattery; set => _voltageBattery = value; }
        /// <summary>
        /// Battery current, -1: Current not sent by autopilot
        /// OriginName: current_battery, Units: cA, IsExtended: false
        /// </summary>
        public static readonly Field CurrentBatteryField = new Field.Builder()
            .Name(nameof(CurrentBattery))
            .Title("current_battery")
            .Description("Battery current, -1: Current not sent by autopilot")
.Units(@"cA")
            .DataType(Int16Type.Default)
        .Build();
        private short _currentBattery;
        public short CurrentBattery { get => _currentBattery; set => _currentBattery = value; }
        /// <summary>
        /// Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
        /// OriginName: drop_rate_comm, Units: c%, IsExtended: false
        /// </summary>
        public static readonly Field DropRateCommField = new Field.Builder()
            .Name(nameof(DropRateComm))
            .Title("drop_rate_comm")
            .Description("Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)")
.Units(@"c%")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _dropRateComm;
        public ushort DropRateComm { get => _dropRateComm; set => _dropRateComm = value; }
        /// <summary>
        /// Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
        /// OriginName: errors_comm, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ErrorsCommField = new Field.Builder()
            .Name(nameof(ErrorsComm))
            .Title("errors_comm")
            .Description("Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _errorsComm;
        public ushort ErrorsComm { get => _errorsComm; set => _errorsComm = value; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ErrorsCount1Field = new Field.Builder()
            .Name(nameof(ErrorsCount1))
            .Title("errors_count1")
            .Description("Autopilot-specific errors")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _errorsCount1;
        public ushort ErrorsCount1 { get => _errorsCount1; set => _errorsCount1 = value; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ErrorsCount2Field = new Field.Builder()
            .Name(nameof(ErrorsCount2))
            .Title("errors_count2")
            .Description("Autopilot-specific errors")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _errorsCount2;
        public ushort ErrorsCount2 { get => _errorsCount2; set => _errorsCount2 = value; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ErrorsCount3Field = new Field.Builder()
            .Name(nameof(ErrorsCount3))
            .Title("errors_count3")
            .Description("Autopilot-specific errors")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _errorsCount3;
        public ushort ErrorsCount3 { get => _errorsCount3; set => _errorsCount3 = value; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ErrorsCount4Field = new Field.Builder()
            .Name(nameof(ErrorsCount4))
            .Title("errors_count4")
            .Description("Autopilot-specific errors")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _errorsCount4;
        public ushort ErrorsCount4 { get => _errorsCount4; set => _errorsCount4 = value; }
        /// <summary>
        /// Battery energy remaining, -1: Battery remaining energy not sent by autopilot
        /// OriginName: battery_remaining, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field BatteryRemainingField = new Field.Builder()
            .Name(nameof(BatteryRemaining))
            .Title("battery_remaining")
            .Description("Battery energy remaining, -1: Battery remaining energy not sent by autopilot")
.Units(@"%")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _batteryRemaining;
        public sbyte BatteryRemaining { get => _batteryRemaining; set => _batteryRemaining = value; }
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.
        /// OriginName: onboard_control_sensors_present_extended, Units: , IsExtended: true
        /// </summary>
        public static readonly Field OnboardControlSensorsPresentExtendedField = new Field.Builder()
            .Name(nameof(OnboardControlSensorsPresentExtended))
            .Title("bitmask")
            .Description("Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.")
.FormatString("0x%04x")            .DataType(new UInt32Type(MavSysStatusSensorExtendedHelper.GetValues(x=>(uint)x).Min(),MavSysStatusSensorExtendedHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavSysStatusSensorExtendedHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavSysStatusSensorExtended _onboardControlSensorsPresentExtended;
        public MavSysStatusSensorExtended OnboardControlSensorsPresentExtended { get => _onboardControlSensorsPresentExtended; set => _onboardControlSensorsPresentExtended = value; } 
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.
        /// OriginName: onboard_control_sensors_enabled_extended, Units: , IsExtended: true
        /// </summary>
        public static readonly Field OnboardControlSensorsEnabledExtendedField = new Field.Builder()
            .Name(nameof(OnboardControlSensorsEnabledExtended))
            .Title("bitmask")
            .Description("Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.")
.FormatString("0x%04x")            .DataType(new UInt32Type(MavSysStatusSensorExtendedHelper.GetValues(x=>(uint)x).Min(),MavSysStatusSensorExtendedHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavSysStatusSensorExtendedHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavSysStatusSensorExtended _onboardControlSensorsEnabledExtended;
        public MavSysStatusSensorExtended OnboardControlSensorsEnabledExtended { get => _onboardControlSensorsEnabledExtended; set => _onboardControlSensorsEnabledExtended = value; } 
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.
        /// OriginName: onboard_control_sensors_health_extended, Units: , IsExtended: true
        /// </summary>
        public static readonly Field OnboardControlSensorsHealthExtendedField = new Field.Builder()
            .Name(nameof(OnboardControlSensorsHealthExtended))
            .Title("bitmask")
            .Description("Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.")
.FormatString("0x%04x")            .DataType(new UInt32Type(MavSysStatusSensorExtendedHelper.GetValues(x=>(uint)x).Min(),MavSysStatusSensorExtendedHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavSysStatusSensorExtendedHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavSysStatusSensorExtended _onboardControlSensorsHealthExtended;
        public MavSysStatusSensorExtended OnboardControlSensorsHealthExtended { get => _onboardControlSensorsHealthExtended; set => _onboardControlSensorsHealthExtended = value; } 
    }
    /// <summary>
    /// The system time is the time of the master clock, typically the computer clock of the main onboard computer.
    ///  SYSTEM_TIME
    /// </summary>
    public class SystemTimePacket : MavlinkV2Message<SystemTimePayload>
    {
        public const int MessageId = 2;
        
        public const byte CrcExtra = 137;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SystemTimePayload Payload { get; } = new();

        public override string Name => "SYSTEM_TIME";
    }

    /// <summary>
    ///  SYSTEM_TIME
    /// </summary>
    public class SystemTimePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 12; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 12; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_unix_usec
            +4 // uint32_t time_boot_ms
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUnixUsec = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUnixUsec);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            /* PayloadByteSize = 12 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUnixUsecField, ref _timeUnixUsec);    
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    

        }

        /// <summary>
        /// Timestamp (UNIX epoch time).
        /// OriginName: time_unix_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUnixUsecField = new Field.Builder()
            .Name(nameof(TimeUnixUsec))
            .Title("time_unix_usec")
            .Description("Timestamp (UNIX epoch time).")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUnixUsec;
        public ulong TimeUnixUsec { get => _timeUnixUsec; set => _timeUnixUsec = value; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
    }
    /// <summary>
    /// A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections. The ping microservice is documented at https://mavlink.io/en/services/ping.html
    ///  PING
    /// </summary>
    public class PingPacket : MavlinkV2Message<PingPayload>
    {
        public const int MessageId = 4;
        
        public const byte CrcExtra = 237;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override PingPayload Payload { get; } = new();

        public override string Name => "PING";
    }

    /// <summary>
    ///  PING
    /// </summary>
    public class PingPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 14; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 14; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t seq
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Seq = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 14 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,SeqField, ref _seq);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// PING sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("PING sequence")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _seq;
        public uint Seq { get => _seq; set => _seq = value; }
        /// <summary>
        /// 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Request to control this MAV
    ///  CHANGE_OPERATOR_CONTROL
    /// </summary>
    public class ChangeOperatorControlPacket : MavlinkV2Message<ChangeOperatorControlPayload>
    {
        public const int MessageId = 5;
        
        public const byte CrcExtra = 217;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ChangeOperatorControlPayload Payload { get; } = new();

        public override string Name => "CHANGE_OPERATOR_CONTROL";
    }

    /// <summary>
    ///  CHANGE_OPERATOR_CONTROL
    /// </summary>
    public class ChangeOperatorControlPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t control_request
            +1 // uint8_t version
            +Passkey.Length // char[25] passkey
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            ControlRequest = (byte)BinSerialize.ReadByte(ref buffer);
            Version = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/25 - Math.Max(0,((/*PayloadByteSize*/28 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Passkey)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Passkey.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)ControlRequest);
            BinSerialize.WriteByte(ref buffer,(byte)Version);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Passkey)
                {
                    Encoding.ASCII.GetBytes(charPointer, Passkey.Length, bytePointer, Passkey.Length);
                }
            }
            buffer = buffer.Slice(Passkey.Length);
            
            /* PayloadByteSize = 28 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,ControlRequestField, ref _controlRequest);    
            UInt8Type.Accept(visitor,VersionField, ref _version);    
            ArrayType.Accept(visitor,PasskeyField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Passkey[index]));

        }

        /// <summary>
        /// System the GCS requests control for
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System the GCS requests control for")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// 0: request control of this MAV, 1: Release control of this MAV
        /// OriginName: control_request, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ControlRequestField = new Field.Builder()
            .Name(nameof(ControlRequest))
            .Title("control_request")
            .Description("0: request control of this MAV, 1: Release control of this MAV")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _controlRequest;
        public byte ControlRequest { get => _controlRequest; set => _controlRequest = value; }
        /// <summary>
        /// 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.
        /// OriginName: version, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field VersionField = new Field.Builder()
            .Name(nameof(Version))
            .Title("version")
            .Description("0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.")
.Units(@"rad")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _version;
        public byte Version { get => _version; set => _version = value; }
        /// <summary>
        /// Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"
        /// OriginName: passkey, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PasskeyField = new Field.Builder()
            .Name(nameof(Passkey))
            .Title("passkey")
            .Description("Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and \"!?,.-\"")

            .DataType(new ArrayType(CharType.Ascii,25))
        .Build();
        public const int PasskeyMaxItemsCount = 25;
        public char[] Passkey { get; } = new char[25];
        [Obsolete("This method is deprecated. Use GetPasskeyMaxItemsCount instead.")]
        public byte GetPasskeyMaxItemsCount() => 25;
    }
    /// <summary>
    /// Accept / deny control of this MAV
    ///  CHANGE_OPERATOR_CONTROL_ACK
    /// </summary>
    public class ChangeOperatorControlAckPacket : MavlinkV2Message<ChangeOperatorControlAckPayload>
    {
        public const int MessageId = 6;
        
        public const byte CrcExtra = 104;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ChangeOperatorControlAckPayload Payload { get; } = new();

        public override string Name => "CHANGE_OPERATOR_CONTROL_ACK";
    }

    /// <summary>
    ///  CHANGE_OPERATOR_CONTROL_ACK
    /// </summary>
    public class ChangeOperatorControlAckPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t gcs_system_id
            +1 // uint8_t control_request
            +1 // uint8_t ack
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            GcsSystemId = (byte)BinSerialize.ReadByte(ref buffer);
            ControlRequest = (byte)BinSerialize.ReadByte(ref buffer);
            Ack = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)GcsSystemId);
            BinSerialize.WriteByte(ref buffer,(byte)ControlRequest);
            BinSerialize.WriteByte(ref buffer,(byte)Ack);
            /* PayloadByteSize = 3 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,GcsSystemIdField, ref _gcsSystemId);    
            UInt8Type.Accept(visitor,ControlRequestField, ref _controlRequest);    
            UInt8Type.Accept(visitor,AckField, ref _ack);    

        }

        /// <summary>
        /// ID of the GCS this message 
        /// OriginName: gcs_system_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GcsSystemIdField = new Field.Builder()
            .Name(nameof(GcsSystemId))
            .Title("gcs_system_id")
            .Description("ID of the GCS this message ")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gcsSystemId;
        public byte GcsSystemId { get => _gcsSystemId; set => _gcsSystemId = value; }
        /// <summary>
        /// 0: request control of this MAV, 1: Release control of this MAV
        /// OriginName: control_request, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ControlRequestField = new Field.Builder()
            .Name(nameof(ControlRequest))
            .Title("control_request")
            .Description("0: request control of this MAV, 1: Release control of this MAV")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _controlRequest;
        public byte ControlRequest { get => _controlRequest; set => _controlRequest = value; }
        /// <summary>
        /// 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control
        /// OriginName: ack, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AckField = new Field.Builder()
            .Name(nameof(Ack))
            .Title("ack")
            .Description("0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _ack;
        public byte Ack { get => _ack; set => _ack = value; }
    }
    /// <summary>
    /// Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
    ///  AUTH_KEY
    /// </summary>
    public class AuthKeyPacket : MavlinkV2Message<AuthKeyPayload>
    {
        public const int MessageId = 7;
        
        public const byte CrcExtra = 119;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AuthKeyPayload Payload { get; } = new();

        public override string Name => "AUTH_KEY";
    }

    /// <summary>
    ///  AUTH_KEY
    /// </summary>
    public class AuthKeyPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +Key.Length // char[32] key
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/32 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Key)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Key.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Key)
                {
                    Encoding.ASCII.GetBytes(charPointer, Key.Length, bytePointer, Key.Length);
                }
            }
            buffer = buffer.Slice(Key.Length);
            
            /* PayloadByteSize = 32 */;
        }

        public void Accept(IVisitor visitor)
        {
            ArrayType.Accept(visitor,KeyField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Key[index]));

        }

        /// <summary>
        /// key
        /// OriginName: key, Units: , IsExtended: false
        /// </summary>
        public static readonly Field KeyField = new Field.Builder()
            .Name(nameof(Key))
            .Title("key")
            .Description("key")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int KeyMaxItemsCount = 32;
        public char[] Key { get; } = new char[32];
        [Obsolete("This method is deprecated. Use GetKeyMaxItemsCount instead.")]
        public byte GetKeyMaxItemsCount() => 32;
    }
    /// <summary>
    /// Status generated in each node in the communication chain and injected into MAVLink stream.
    ///  LINK_NODE_STATUS
    /// </summary>
    public class LinkNodeStatusPacket : MavlinkV2Message<LinkNodeStatusPayload>
    {
        public const int MessageId = 8;
        
        public const byte CrcExtra = 117;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LinkNodeStatusPayload Payload { get; } = new();

        public override string Name => "LINK_NODE_STATUS";
    }

    /// <summary>
    ///  LINK_NODE_STATUS
    /// </summary>
    public class LinkNodeStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 36; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 36; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t timestamp
            +4 // uint32_t tx_rate
            +4 // uint32_t rx_rate
            +4 // uint32_t messages_sent
            +4 // uint32_t messages_received
            +4 // uint32_t messages_lost
            +2 // uint16_t rx_parse_err
            +2 // uint16_t tx_overflows
            +2 // uint16_t rx_overflows
            +1 // uint8_t tx_buf
            +1 // uint8_t rx_buf
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Timestamp = BinSerialize.ReadULong(ref buffer);
            TxRate = BinSerialize.ReadUInt(ref buffer);
            RxRate = BinSerialize.ReadUInt(ref buffer);
            MessagesSent = BinSerialize.ReadUInt(ref buffer);
            MessagesReceived = BinSerialize.ReadUInt(ref buffer);
            MessagesLost = BinSerialize.ReadUInt(ref buffer);
            RxParseErr = BinSerialize.ReadUShort(ref buffer);
            TxOverflows = BinSerialize.ReadUShort(ref buffer);
            RxOverflows = BinSerialize.ReadUShort(ref buffer);
            TxBuf = (byte)BinSerialize.ReadByte(ref buffer);
            RxBuf = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Timestamp);
            BinSerialize.WriteUInt(ref buffer,TxRate);
            BinSerialize.WriteUInt(ref buffer,RxRate);
            BinSerialize.WriteUInt(ref buffer,MessagesSent);
            BinSerialize.WriteUInt(ref buffer,MessagesReceived);
            BinSerialize.WriteUInt(ref buffer,MessagesLost);
            BinSerialize.WriteUShort(ref buffer,RxParseErr);
            BinSerialize.WriteUShort(ref buffer,TxOverflows);
            BinSerialize.WriteUShort(ref buffer,RxOverflows);
            BinSerialize.WriteByte(ref buffer,(byte)TxBuf);
            BinSerialize.WriteByte(ref buffer,(byte)RxBuf);
            /* PayloadByteSize = 36 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimestampField, ref _timestamp);    
            UInt32Type.Accept(visitor,TxRateField, ref _txRate);    
            UInt32Type.Accept(visitor,RxRateField, ref _rxRate);    
            UInt32Type.Accept(visitor,MessagesSentField, ref _messagesSent);    
            UInt32Type.Accept(visitor,MessagesReceivedField, ref _messagesReceived);    
            UInt32Type.Accept(visitor,MessagesLostField, ref _messagesLost);    
            UInt16Type.Accept(visitor,RxParseErrField, ref _rxParseErr);    
            UInt16Type.Accept(visitor,TxOverflowsField, ref _txOverflows);    
            UInt16Type.Accept(visitor,RxOverflowsField, ref _rxOverflows);    
            UInt8Type.Accept(visitor,TxBufField, ref _txBuf);    
            UInt8Type.Accept(visitor,RxBufField, ref _rxBuf);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: timestamp, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timestamp;
        public ulong Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// Transmit rate
        /// OriginName: tx_rate, Units: bytes/s, IsExtended: false
        /// </summary>
        public static readonly Field TxRateField = new Field.Builder()
            .Name(nameof(TxRate))
            .Title("tx_rate")
            .Description("Transmit rate")
.Units(@"bytes/s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _txRate;
        public uint TxRate { get => _txRate; set => _txRate = value; }
        /// <summary>
        /// Receive rate
        /// OriginName: rx_rate, Units: bytes/s, IsExtended: false
        /// </summary>
        public static readonly Field RxRateField = new Field.Builder()
            .Name(nameof(RxRate))
            .Title("rx_rate")
            .Description("Receive rate")
.Units(@"bytes/s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _rxRate;
        public uint RxRate { get => _rxRate; set => _rxRate = value; }
        /// <summary>
        /// Messages sent
        /// OriginName: messages_sent, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MessagesSentField = new Field.Builder()
            .Name(nameof(MessagesSent))
            .Title("messages_sent")
            .Description("Messages sent")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _messagesSent;
        public uint MessagesSent { get => _messagesSent; set => _messagesSent = value; }
        /// <summary>
        /// Messages received (estimated from counting seq)
        /// OriginName: messages_received, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MessagesReceivedField = new Field.Builder()
            .Name(nameof(MessagesReceived))
            .Title("messages_received")
            .Description("Messages received (estimated from counting seq)")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _messagesReceived;
        public uint MessagesReceived { get => _messagesReceived; set => _messagesReceived = value; }
        /// <summary>
        /// Messages lost (estimated from counting seq)
        /// OriginName: messages_lost, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MessagesLostField = new Field.Builder()
            .Name(nameof(MessagesLost))
            .Title("messages_lost")
            .Description("Messages lost (estimated from counting seq)")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _messagesLost;
        public uint MessagesLost { get => _messagesLost; set => _messagesLost = value; }
        /// <summary>
        /// Number of bytes that could not be parsed correctly.
        /// OriginName: rx_parse_err, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field RxParseErrField = new Field.Builder()
            .Name(nameof(RxParseErr))
            .Title("rx_parse_err")
            .Description("Number of bytes that could not be parsed correctly.")
.Units(@"bytes")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _rxParseErr;
        public ushort RxParseErr { get => _rxParseErr; set => _rxParseErr = value; }
        /// <summary>
        /// Transmit buffer overflows. This number wraps around as it reaches UINT16_MAX
        /// OriginName: tx_overflows, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field TxOverflowsField = new Field.Builder()
            .Name(nameof(TxOverflows))
            .Title("tx_overflows")
            .Description("Transmit buffer overflows. This number wraps around as it reaches UINT16_MAX")
.Units(@"bytes")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _txOverflows;
        public ushort TxOverflows { get => _txOverflows; set => _txOverflows = value; }
        /// <summary>
        /// Receive buffer overflows. This number wraps around as it reaches UINT16_MAX
        /// OriginName: rx_overflows, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field RxOverflowsField = new Field.Builder()
            .Name(nameof(RxOverflows))
            .Title("rx_overflows")
            .Description("Receive buffer overflows. This number wraps around as it reaches UINT16_MAX")
.Units(@"bytes")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _rxOverflows;
        public ushort RxOverflows { get => _rxOverflows; set => _rxOverflows = value; }
        /// <summary>
        /// Remaining free transmit buffer space
        /// OriginName: tx_buf, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field TxBufField = new Field.Builder()
            .Name(nameof(TxBuf))
            .Title("tx_buf")
            .Description("Remaining free transmit buffer space")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _txBuf;
        public byte TxBuf { get => _txBuf; set => _txBuf = value; }
        /// <summary>
        /// Remaining free receive buffer space
        /// OriginName: rx_buf, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field RxBufField = new Field.Builder()
            .Name(nameof(RxBuf))
            .Title("rx_buf")
            .Description("Remaining free receive buffer space")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _rxBuf;
        public byte RxBuf { get => _rxBuf; set => _rxBuf = value; }
    }
    /// <summary>
    /// Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
    ///  SET_MODE
    /// </summary>
    public class SetModePacket : MavlinkV2Message<SetModePayload>
    {
        public const int MessageId = 11;
        
        public const byte CrcExtra = 89;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetModePayload Payload { get; } = new();

        public override string Name => "SET_MODE";
    }

    /// <summary>
    ///  SET_MODE
    /// </summary>
    public class SetModePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t custom_mode
            +1 // uint8_t target_system
            + 1 // uint8_t base_mode
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            CustomMode = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            BaseMode = (MavMode)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,CustomMode);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)BaseMode);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,CustomModeField, ref _customMode);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            var tmpBaseMode = (byte)BaseMode;
            UInt8Type.Accept(visitor,BaseModeField, ref tmpBaseMode);
            BaseMode = (MavMode)tmpBaseMode;

        }

        /// <summary>
        /// The new autopilot-specific mode. This field can be ignored by an autopilot.
        /// OriginName: custom_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CustomModeField = new Field.Builder()
            .Name(nameof(CustomMode))
            .Title("custom_mode")
            .Description("The new autopilot-specific mode. This field can be ignored by an autopilot.")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _customMode;
        public uint CustomMode { get => _customMode; set => _customMode = value; }
        /// <summary>
        /// The system setting the mode
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("The system setting the mode")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// The new base mode.
        /// OriginName: base_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BaseModeField = new Field.Builder()
            .Name(nameof(BaseMode))
            .Title("base_mode")
            .Description("The new base mode.")
            .DataType(new UInt8Type(MavModeHelper.GetValues(x=>(byte)x).Min(),MavModeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavModeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMode _baseMode;
        public MavMode BaseMode { get => _baseMode; set => _baseMode = value; } 
    }
    /// <summary>
    /// Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/services/parameter.html for a full documentation of QGroundControl and IMU code.
    ///  PARAM_REQUEST_READ
    /// </summary>
    public class ParamRequestReadPacket : MavlinkV2Message<ParamRequestReadPayload>
    {
        public const int MessageId = 20;
        
        public const byte CrcExtra = 214;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamRequestReadPayload Payload { get; } = new();

        public override string Name => "PARAM_REQUEST_READ";
    }

    /// <summary>
    ///  PARAM_REQUEST_READ
    /// </summary>
    public class ParamRequestReadPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // int16_t param_index
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +ParamId.Length // char[16] param_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/20 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,ParamIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            /* PayloadByteSize = 20 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int16Type.Accept(visitor,ParamIndexField, ref _paramIndex);
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));

        }

        /// <summary>
        /// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIndexField = new Field.Builder()
            .Name(nameof(ParamIndex))
            .Title("param_index")
            .Description("Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)")

            .DataType(Int16Type.Default)
        .Build();
        private short _paramIndex;
        public short ParamIndex { get => _paramIndex; set => _paramIndex = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
    }
    /// <summary>
    /// Request all parameters of this component. After this request, all parameters are emitted. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    ///  PARAM_REQUEST_LIST
    /// </summary>
    public class ParamRequestListPacket : MavlinkV2Message<ParamRequestListPayload>
    {
        public const int MessageId = 21;
        
        public const byte CrcExtra = 159;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamRequestListPayload Payload { get; } = new();

        public override string Name => "PARAM_REQUEST_LIST";
    }

    /// <summary>
    ///  PARAM_REQUEST_LIST
    /// </summary>
    public class ParamRequestListPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    ///  PARAM_VALUE
    /// </summary>
    public class ParamValuePacket : MavlinkV2Message<ParamValuePayload>
    {
        public const int MessageId = 22;
        
        public const byte CrcExtra = 220;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamValuePayload Payload { get; } = new();

        public override string Name => "PARAM_VALUE";
    }

    /// <summary>
    ///  PARAM_VALUE
    /// </summary>
    public class ParamValuePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 25; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 25; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float param_value
            +2 // uint16_t param_count
            +2 // uint16_t param_index
            +ParamId.Length // char[16] param_id
            + 1 // uint8_t param_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamValue = BinSerialize.ReadFloat(ref buffer);
            ParamCount = BinSerialize.ReadUShort(ref buffer);
            ParamIndex = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/25 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            ParamType = (MavParamType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,ParamValue);
            BinSerialize.WriteUShort(ref buffer,ParamCount);
            BinSerialize.WriteUShort(ref buffer,ParamIndex);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 25 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,ParamValueField, ref _paramValue);    
            UInt16Type.Accept(visitor,ParamCountField, ref _paramCount);    
            UInt16Type.Accept(visitor,ParamIndexField, ref _paramIndex);    
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));
            var tmpParamType = (byte)ParamType;
            UInt8Type.Accept(visitor,ParamTypeField, ref tmpParamType);
            ParamType = (MavParamType)tmpParamType;

        }

        /// <summary>
        /// Onboard parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValueField = new Field.Builder()
            .Name(nameof(ParamValue))
            .Title("param_value")
            .Description("Onboard parameter value")

            .DataType(FloatType.Default)
        .Build();
        private float _paramValue;
        public float ParamValue { get => _paramValue; set => _paramValue = value; }
        /// <summary>
        /// Total number of onboard parameters
        /// OriginName: param_count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamCountField = new Field.Builder()
            .Name(nameof(ParamCount))
            .Title("param_count")
            .Description("Total number of onboard parameters")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _paramCount;
        public ushort ParamCount { get => _paramCount; set => _paramCount = value; }
        /// <summary>
        /// Index of this onboard parameter
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIndexField = new Field.Builder()
            .Name(nameof(ParamIndex))
            .Title("param_index")
            .Description("Index of this onboard parameter")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _paramIndex;
        public ushort ParamIndex { get => _paramIndex; set => _paramIndex = value; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
        /// <summary>
        /// Onboard parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamTypeField = new Field.Builder()
            .Name(nameof(ParamType))
            .Title("param_type")
            .Description("Onboard parameter type.")
            .DataType(new UInt8Type(MavParamTypeHelper.GetValues(x=>(byte)x).Min(),MavParamTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavParamTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavParamType _paramType;
        public MavParamType ParamType { get => _paramType; set => _paramType = value; } 
    }
    /// <summary>
    /// Set a parameter value (write new value to permanent storage).
    ///         The receiving component should acknowledge the new parameter value by broadcasting a PARAM_VALUE message (broadcasting ensures that multiple GCS all have an up-to-date list of all parameters). If the sending GCS did not receive a PARAM_VALUE within its timeout time, it should re-send the PARAM_SET message. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html.
    ///         PARAM_SET may also be called within the context of a transaction (started with MAV_CMD_PARAM_TRANSACTION). Within a transaction the receiving component should respond with PARAM_ACK_TRANSACTION to the setter component (instead of broadcasting PARAM_VALUE), and PARAM_SET should be re-sent if this is ACK not received.
    ///  PARAM_SET
    /// </summary>
    public class ParamSetPacket : MavlinkV2Message<ParamSetPayload>
    {
        public const int MessageId = 23;
        
        public const byte CrcExtra = 168;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamSetPayload Payload { get; } = new();

        public override string Name => "PARAM_SET";
    }

    /// <summary>
    ///  PARAM_SET
    /// </summary>
    public class ParamSetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 23; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 23; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float param_value
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +ParamId.Length // char[16] param_id
            + 1 // uint8_t param_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamValue = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/23 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            ParamType = (MavParamType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,ParamValue);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 23 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,ParamValueField, ref _paramValue);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));
            var tmpParamType = (byte)ParamType;
            UInt8Type.Accept(visitor,ParamTypeField, ref tmpParamType);
            ParamType = (MavParamType)tmpParamType;

        }

        /// <summary>
        /// Onboard parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValueField = new Field.Builder()
            .Name(nameof(ParamValue))
            .Title("param_value")
            .Description("Onboard parameter value")

            .DataType(FloatType.Default)
        .Build();
        private float _paramValue;
        public float ParamValue { get => _paramValue; set => _paramValue = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
        /// <summary>
        /// Onboard parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamTypeField = new Field.Builder()
            .Name(nameof(ParamType))
            .Title("param_type")
            .Description("Onboard parameter type.")
            .DataType(new UInt8Type(MavParamTypeHelper.GetValues(x=>(byte)x).Min(),MavParamTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavParamTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavParamType _paramType;
        public MavParamType ParamType { get => _paramType; set => _paramType = value; } 
    }
    /// <summary>
    /// The global position, as returned by the Global Positioning System (GPS). This is
    ///                 NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION_INT for the global position estimate.
    ///  GPS_RAW_INT
    /// </summary>
    public class GpsRawIntPacket : MavlinkV2Message<GpsRawIntPayload>
    {
        public const int MessageId = 24;
        
        public const byte CrcExtra = 24;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GpsRawIntPayload Payload { get; } = new();

        public override string Name => "GPS_RAW_INT";
    }

    /// <summary>
    ///  GPS_RAW_INT
    /// </summary>
    public class GpsRawIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 52; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 52; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +2 // uint16_t eph
            +2 // uint16_t epv
            +2 // uint16_t vel
            +2 // uint16_t cog
            + 1 // uint8_t fix_type
            +1 // uint8_t satellites_visible
            +4 // int32_t alt_ellipsoid
            +4 // uint32_t h_acc
            +4 // uint32_t v_acc
            +4 // uint32_t vel_acc
            +4 // uint32_t hdg_acc
            +2 // uint16_t yaw
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Eph = BinSerialize.ReadUShort(ref buffer);
            Epv = BinSerialize.ReadUShort(ref buffer);
            Vel = BinSerialize.ReadUShort(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            FixType = (GpsFixType)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'AltEllipsoid' can be empty
            if (buffer.IsEmpty) return;
            AltEllipsoid = BinSerialize.ReadInt(ref buffer);
            // extended field 'HAcc' can be empty
            if (buffer.IsEmpty) return;
            HAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VAcc' can be empty
            if (buffer.IsEmpty) return;
            VAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VelAcc' can be empty
            if (buffer.IsEmpty) return;
            VelAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'HdgAcc' can be empty
            if (buffer.IsEmpty) return;
            HdgAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteUShort(ref buffer,Eph);
            BinSerialize.WriteUShort(ref buffer,Epv);
            BinSerialize.WriteUShort(ref buffer,Vel);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteInt(ref buffer,AltEllipsoid);
            BinSerialize.WriteUInt(ref buffer,HAcc);
            BinSerialize.WriteUInt(ref buffer,VAcc);
            BinSerialize.WriteUInt(ref buffer,VelAcc);
            BinSerialize.WriteUInt(ref buffer,HdgAcc);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            /* PayloadByteSize = 52 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            UInt16Type.Accept(visitor,EphField, ref _eph);    
            UInt16Type.Accept(visitor,EpvField, ref _epv);    
            UInt16Type.Accept(visitor,VelField, ref _vel);    
            UInt16Type.Accept(visitor,CogField, ref _cog);    
            var tmpFixType = (byte)FixType;
            UInt8Type.Accept(visitor,FixTypeField, ref tmpFixType);
            FixType = (GpsFixType)tmpFixType;
            UInt8Type.Accept(visitor,SatellitesVisibleField, ref _satellitesVisible);    
            Int32Type.Accept(visitor,AltEllipsoidField, ref _altEllipsoid);    
            UInt32Type.Accept(visitor,HAccField, ref _hAcc);    
            UInt32Type.Accept(visitor,VAccField, ref _vAcc);    
            UInt32Type.Accept(visitor,VelAccField, ref _velAcc);    
            UInt32Type.Accept(visitor,HdgAccField, ref _hdgAcc);    
            UInt16Type.Accept(visitor,YawField, ref _yaw);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Latitude (WGS84, EGM96 ellipsoid)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude (WGS84, EGM96 ellipsoid)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude (WGS84, EGM96 ellipsoid)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude (WGS84, EGM96 ellipsoid)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: eph, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EphField = new Field.Builder()
            .Name(nameof(Eph))
            .Title("eph")
            .Description("GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _eph;
        public ushort Eph { get => _eph; set => _eph = value; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: epv, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EpvField = new Field.Builder()
            .Name(nameof(Epv))
            .Title("epv")
            .Description("GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _epv;
        public ushort Epv { get => _epv; set => _epv = value; }
        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// OriginName: vel, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VelField = new Field.Builder()
            .Name(nameof(Vel))
            .Title("vel")
            .Description("GPS ground speed. If unknown, set to: UINT16_MAX")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vel;
        public ushort Vel { get => _vel; set => _vel = value; }
        /// <summary>
        /// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: cog, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field CogField = new Field.Builder()
            .Name(nameof(Cog))
            .Title("cog")
            .Description("Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _cog;
        public ushort Cog { get => _cog; set => _cog = value; }
        /// <summary>
        /// GPS fix type.
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FixTypeField = new Field.Builder()
            .Name(nameof(FixType))
            .Title("fix_type")
            .Description("GPS fix type.")
            .DataType(new UInt8Type(GpsFixTypeHelper.GetValues(x=>(byte)x).Min(),GpsFixTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(GpsFixTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private GpsFixType _fixType;
        public GpsFixType FixType { get => _fixType; set => _fixType = value; } 
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SatellitesVisibleField = new Field.Builder()
            .Name(nameof(SatellitesVisible))
            .Title("satellites_visible")
            .Description("Number of satellites visible. If unknown, set to UINT8_MAX")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _satellitesVisible;
        public byte SatellitesVisible { get => _satellitesVisible; set => _satellitesVisible = value; }
        /// <summary>
        /// Altitude (above WGS84, EGM96 ellipsoid). Positive for up.
        /// OriginName: alt_ellipsoid, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field AltEllipsoidField = new Field.Builder()
            .Name(nameof(AltEllipsoid))
            .Title("alt_ellipsoid")
            .Description("Altitude (above WGS84, EGM96 ellipsoid). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altEllipsoid;
        public int AltEllipsoid { get => _altEllipsoid; set => _altEllipsoid = value; }
        /// <summary>
        /// Position uncertainty.
        /// OriginName: h_acc, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field HAccField = new Field.Builder()
            .Name(nameof(HAcc))
            .Title("h_acc")
            .Description("Position uncertainty.")
.Units(@"mm")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _hAcc;
        public uint HAcc { get => _hAcc; set => _hAcc = value; }
        /// <summary>
        /// Altitude uncertainty.
        /// OriginName: v_acc, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field VAccField = new Field.Builder()
            .Name(nameof(VAcc))
            .Title("v_acc")
            .Description("Altitude uncertainty.")
.Units(@"mm")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _vAcc;
        public uint VAcc { get => _vAcc; set => _vAcc = value; }
        /// <summary>
        /// Speed uncertainty.
        /// OriginName: vel_acc, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field VelAccField = new Field.Builder()
            .Name(nameof(VelAcc))
            .Title("vel_acc")
            .Description("Speed uncertainty.")
.Units(@"mm")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _velAcc;
        public uint VelAcc { get => _velAcc; set => _velAcc = value; }
        /// <summary>
        /// Heading / track uncertainty
        /// OriginName: hdg_acc, Units: degE5, IsExtended: true
        /// </summary>
        public static readonly Field HdgAccField = new Field.Builder()
            .Name(nameof(HdgAcc))
            .Title("hdg_acc")
            .Description("Heading / track uncertainty")
.Units(@"degE5")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _hdgAcc;
        public uint HdgAcc { get => _hdgAcc; set => _hdgAcc = value; }
        /// <summary>
        /// Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _yaw;
        public ushort Yaw { get => _yaw; set => _yaw = value; }
    }
    /// <summary>
    /// The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION_INT for the global position estimate. This message can contain information for up to 20 satellites.
    ///  GPS_STATUS
    /// </summary>
    public class GpsStatusPacket : MavlinkV2Message<GpsStatusPayload>
    {
        public const int MessageId = 25;
        
        public const byte CrcExtra = 23;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GpsStatusPayload Payload { get; } = new();

        public override string Name => "GPS_STATUS";
    }

    /// <summary>
    ///  GPS_STATUS
    /// </summary>
    public class GpsStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 101; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 101; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t satellites_visible
            +SatellitePrn.Length // uint8_t[20] satellite_prn
            +SatelliteUsed.Length // uint8_t[20] satellite_used
            +SatelliteElevation.Length // uint8_t[20] satellite_elevation
            +SatelliteAzimuth.Length // uint8_t[20] satellite_azimuth
            +SatelliteSnr.Length // uint8_t[20] satellite_snr
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/101 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                SatellitePrn[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteUsed[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteElevation[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteAzimuth[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteSnr[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            for(var i=0;i<SatellitePrn.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatellitePrn[i]);
            }
            for(var i=0;i<SatelliteUsed.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteUsed[i]);
            }
            for(var i=0;i<SatelliteElevation.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteElevation[i]);
            }
            for(var i=0;i<SatelliteAzimuth.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteAzimuth[i]);
            }
            for(var i=0;i<SatelliteSnr.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteSnr[i]);
            }
            /* PayloadByteSize = 101 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,SatellitesVisibleField, ref _satellitesVisible);    
            ArrayType.Accept(visitor,SatellitePrnField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref SatellitePrn[index]));    
            ArrayType.Accept(visitor,SatelliteUsedField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref SatelliteUsed[index]));    
            ArrayType.Accept(visitor,SatelliteElevationField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref SatelliteElevation[index]));    
            ArrayType.Accept(visitor,SatelliteAzimuthField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref SatelliteAzimuth[index]));    
            ArrayType.Accept(visitor,SatelliteSnrField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref SatelliteSnr[index]));    

        }

        /// <summary>
        /// Number of satellites visible
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SatellitesVisibleField = new Field.Builder()
            .Name(nameof(SatellitesVisible))
            .Title("satellites_visible")
            .Description("Number of satellites visible")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _satellitesVisible;
        public byte SatellitesVisible { get => _satellitesVisible; set => _satellitesVisible = value; }
        /// <summary>
        /// Global satellite ID
        /// OriginName: satellite_prn, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SatellitePrnField = new Field.Builder()
            .Name(nameof(SatellitePrn))
            .Title("satellite_prn")
            .Description("Global satellite ID")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int SatellitePrnMaxItemsCount = 20;
        public byte[] SatellitePrn { get; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetSatellitePrnMaxItemsCount instead.")]
        public byte GetSatellitePrnMaxItemsCount() => 20;
        /// <summary>
        /// 0: Satellite not used, 1: used for localization
        /// OriginName: satellite_used, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SatelliteUsedField = new Field.Builder()
            .Name(nameof(SatelliteUsed))
            .Title("satellite_used")
            .Description("0: Satellite not used, 1: used for localization")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int SatelliteUsedMaxItemsCount = 20;
        public byte[] SatelliteUsed { get; } = new byte[20];
        /// <summary>
        /// Elevation (0: right on top of receiver, 90: on the horizon) of satellite
        /// OriginName: satellite_elevation, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field SatelliteElevationField = new Field.Builder()
            .Name(nameof(SatelliteElevation))
            .Title("satellite_elevation")
            .Description("Elevation (0: right on top of receiver, 90: on the horizon) of satellite")
.Units(@"deg")
            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int SatelliteElevationMaxItemsCount = 20;
        public byte[] SatelliteElevation { get; } = new byte[20];
        /// <summary>
        /// Direction of satellite, 0: 0 deg, 255: 360 deg.
        /// OriginName: satellite_azimuth, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field SatelliteAzimuthField = new Field.Builder()
            .Name(nameof(SatelliteAzimuth))
            .Title("satellite_azimuth")
            .Description("Direction of satellite, 0: 0 deg, 255: 360 deg.")
.Units(@"deg")
            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int SatelliteAzimuthMaxItemsCount = 20;
        public byte[] SatelliteAzimuth { get; } = new byte[20];
        /// <summary>
        /// Signal to noise ratio of satellite
        /// OriginName: satellite_snr, Units: dB, IsExtended: false
        /// </summary>
        public static readonly Field SatelliteSnrField = new Field.Builder()
            .Name(nameof(SatelliteSnr))
            .Title("satellite_snr")
            .Description("Signal to noise ratio of satellite")
.Units(@"dB")
            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int SatelliteSnrMaxItemsCount = 20;
        public byte[] SatelliteSnr { get; } = new byte[20];
    }
    /// <summary>
    /// The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
    ///  SCALED_IMU
    /// </summary>
    public class ScaledImuPacket : MavlinkV2Message<ScaledImuPayload>
    {
        public const int MessageId = 26;
        
        public const byte CrcExtra = 170;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ScaledImuPayload Payload { get; } = new();

        public override string Name => "SCALED_IMU";
    }

    /// <summary>
    ///  SCALED_IMU
    /// </summary>
    public class ScaledImuPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +2 // int16_t xacc
            +2 // int16_t yacc
            +2 // int16_t zacc
            +2 // int16_t xgyro
            +2 // int16_t ygyro
            +2 // int16_t zgyro
            +2 // int16_t xmag
            +2 // int16_t ymag
            +2 // int16_t zmag
            +2 // int16_t temperature
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 24 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int16Type.Accept(visitor,XaccField, ref _xacc);
            Int16Type.Accept(visitor,YaccField, ref _yacc);
            Int16Type.Accept(visitor,ZaccField, ref _zacc);
            Int16Type.Accept(visitor,XgyroField, ref _xgyro);
            Int16Type.Accept(visitor,YgyroField, ref _ygyro);
            Int16Type.Accept(visitor,ZgyroField, ref _zgyro);
            Int16Type.Accept(visitor,XmagField, ref _xmag);
            Int16Type.Accept(visitor,YmagField, ref _ymag);
            Int16Type.Accept(visitor,ZmagField, ref _zmag);
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _xacc;
        public short Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _yacc;
        public short Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _zacc;
        public short Zacc { get => _zacc; set => _zacc = value; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field XgyroField = new Field.Builder()
            .Name(nameof(Xgyro))
            .Title("xgyro")
            .Description("Angular speed around X axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _xgyro;
        public short Xgyro { get => _xgyro; set => _xgyro = value; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field YgyroField = new Field.Builder()
            .Name(nameof(Ygyro))
            .Title("ygyro")
            .Description("Angular speed around Y axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _ygyro;
        public short Ygyro { get => _ygyro; set => _ygyro = value; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field ZgyroField = new Field.Builder()
            .Name(nameof(Zgyro))
            .Title("zgyro")
            .Description("Angular speed around Z axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _zgyro;
        public short Zgyro { get => _zgyro; set => _zgyro = value; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field XmagField = new Field.Builder()
            .Name(nameof(Xmag))
            .Title("xmag")
            .Description("X Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _xmag;
        public short Xmag { get => _xmag; set => _xmag = value; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field YmagField = new Field.Builder()
            .Name(nameof(Ymag))
            .Title("ymag")
            .Description("Y Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _ymag;
        public short Ymag { get => _ymag; set => _ymag = value; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field ZmagField = new Field.Builder()
            .Name(nameof(Zmag))
            .Title("zmag")
            .Description("Z Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _zmag;
        public short Zmag { get => _zmag; set => _zmag = value; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
    }
    /// <summary>
    /// The RAW IMU readings for a 9DOF sensor, which is identified by the id (default IMU1). This message should always contain the true raw values without any scaling to allow data capture and system debugging.
    ///  RAW_IMU
    /// </summary>
    public class RawImuPacket : MavlinkV2Message<RawImuPayload>
    {
        public const int MessageId = 27;
        
        public const byte CrcExtra = 144;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RawImuPayload Payload { get; } = new();

        public override string Name => "RAW_IMU";
    }

    /// <summary>
    ///  RAW_IMU
    /// </summary>
    public class RawImuPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 29; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 29; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +2 // int16_t xacc
            +2 // int16_t yacc
            +2 // int16_t zacc
            +2 // int16_t xgyro
            +2 // int16_t ygyro
            +2 // int16_t zgyro
            +2 // int16_t xmag
            +2 // int16_t ymag
            +2 // int16_t zmag
            +1 // uint8_t id
            +2 // int16_t temperature
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 29 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            Int16Type.Accept(visitor,XaccField, ref _xacc);
            Int16Type.Accept(visitor,YaccField, ref _yacc);
            Int16Type.Accept(visitor,ZaccField, ref _zacc);
            Int16Type.Accept(visitor,XgyroField, ref _xgyro);
            Int16Type.Accept(visitor,YgyroField, ref _ygyro);
            Int16Type.Accept(visitor,ZgyroField, ref _zgyro);
            Int16Type.Accept(visitor,XmagField, ref _xmag);
            Int16Type.Accept(visitor,YmagField, ref _ymag);
            Int16Type.Accept(visitor,ZmagField, ref _zmag);
            UInt8Type.Accept(visitor,IdField, ref _id);    
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X acceleration (raw)
        /// OriginName: xacc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _xacc;
        public short Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration (raw)
        /// OriginName: yacc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _yacc;
        public short Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration (raw)
        /// OriginName: zacc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _zacc;
        public short Zacc { get => _zacc; set => _zacc = value; }
        /// <summary>
        /// Angular speed around X axis (raw)
        /// OriginName: xgyro, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XgyroField = new Field.Builder()
            .Name(nameof(Xgyro))
            .Title("xgyro")
            .Description("Angular speed around X axis (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _xgyro;
        public short Xgyro { get => _xgyro; set => _xgyro = value; }
        /// <summary>
        /// Angular speed around Y axis (raw)
        /// OriginName: ygyro, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YgyroField = new Field.Builder()
            .Name(nameof(Ygyro))
            .Title("ygyro")
            .Description("Angular speed around Y axis (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _ygyro;
        public short Ygyro { get => _ygyro; set => _ygyro = value; }
        /// <summary>
        /// Angular speed around Z axis (raw)
        /// OriginName: zgyro, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZgyroField = new Field.Builder()
            .Name(nameof(Zgyro))
            .Title("zgyro")
            .Description("Angular speed around Z axis (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _zgyro;
        public short Zgyro { get => _zgyro; set => _zgyro = value; }
        /// <summary>
        /// X Magnetic field (raw)
        /// OriginName: xmag, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XmagField = new Field.Builder()
            .Name(nameof(Xmag))
            .Title("xmag")
            .Description("X Magnetic field (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _xmag;
        public short Xmag { get => _xmag; set => _xmag = value; }
        /// <summary>
        /// Y Magnetic field (raw)
        /// OriginName: ymag, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YmagField = new Field.Builder()
            .Name(nameof(Ymag))
            .Title("ymag")
            .Description("Y Magnetic field (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _ymag;
        public short Ymag { get => _ymag; set => _ymag = value; }
        /// <summary>
        /// Z Magnetic field (raw)
        /// OriginName: zmag, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZmagField = new Field.Builder()
            .Name(nameof(Zmag))
            .Title("zmag")
            .Description("Z Magnetic field (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _zmag;
        public short Zmag { get => _zmag; set => _zmag = value; }
        /// <summary>
        /// Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
    }
    /// <summary>
    /// The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
    ///  RAW_PRESSURE
    /// </summary>
    public class RawPressurePacket : MavlinkV2Message<RawPressurePayload>
    {
        public const int MessageId = 28;
        
        public const byte CrcExtra = 67;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RawPressurePayload Payload { get; } = new();

        public override string Name => "RAW_PRESSURE";
    }

    /// <summary>
    ///  RAW_PRESSURE
    /// </summary>
    public class RawPressurePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +2 // int16_t press_abs
            +2 // int16_t press_diff1
            +2 // int16_t press_diff2
            +2 // int16_t temperature
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            PressAbs = BinSerialize.ReadShort(ref buffer);
            PressDiff1 = BinSerialize.ReadShort(ref buffer);
            PressDiff2 = BinSerialize.ReadShort(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteShort(ref buffer,PressAbs);
            BinSerialize.WriteShort(ref buffer,PressDiff1);
            BinSerialize.WriteShort(ref buffer,PressDiff2);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 16 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            Int16Type.Accept(visitor,PressAbsField, ref _pressAbs);
            Int16Type.Accept(visitor,PressDiff1Field, ref _pressDiff1);
            Int16Type.Accept(visitor,PressDiff2Field, ref _pressDiff2);
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Absolute pressure (raw)
        /// OriginName: press_abs, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PressAbsField = new Field.Builder()
            .Name(nameof(PressAbs))
            .Title("press_abs")
            .Description("Absolute pressure (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _pressAbs;
        public short PressAbs { get => _pressAbs; set => _pressAbs = value; }
        /// <summary>
        /// Differential pressure 1 (raw, 0 if nonexistent)
        /// OriginName: press_diff1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PressDiff1Field = new Field.Builder()
            .Name(nameof(PressDiff1))
            .Title("press_diff1")
            .Description("Differential pressure 1 (raw, 0 if nonexistent)")

            .DataType(Int16Type.Default)
        .Build();
        private short _pressDiff1;
        public short PressDiff1 { get => _pressDiff1; set => _pressDiff1 = value; }
        /// <summary>
        /// Differential pressure 2 (raw, 0 if nonexistent)
        /// OriginName: press_diff2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PressDiff2Field = new Field.Builder()
            .Name(nameof(PressDiff2))
            .Title("press_diff2")
            .Description("Differential pressure 2 (raw, 0 if nonexistent)")

            .DataType(Int16Type.Default)
        .Build();
        private short _pressDiff2;
        public short PressDiff2 { get => _pressDiff2; set => _pressDiff2 = value; }
        /// <summary>
        /// Raw Temperature measurement (raw)
        /// OriginName: temperature, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Raw Temperature measurement (raw)")

            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
    }
    /// <summary>
    /// The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
    ///  SCALED_PRESSURE
    /// </summary>
    public class ScaledPressurePacket : MavlinkV2Message<ScaledPressurePayload>
    {
        public const int MessageId = 29;
        
        public const byte CrcExtra = 115;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ScaledPressurePayload Payload { get; } = new();

        public override string Name => "SCALED_PRESSURE";
    }

    /// <summary>
    ///  SCALED_PRESSURE
    /// </summary>
    public class ScaledPressurePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float press_abs
            +4 // float press_diff
            +2 // int16_t temperature
            +2 // int16_t temperature_press_diff
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            PressAbs = BinSerialize.ReadFloat(ref buffer);
            PressDiff = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            // extended field 'TemperaturePressDiff' can be empty
            if (buffer.IsEmpty) return;
            TemperaturePressDiff = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,PressAbs);
            BinSerialize.WriteFloat(ref buffer,PressDiff);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteShort(ref buffer,TemperaturePressDiff);
            /* PayloadByteSize = 16 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,PressAbsField, ref _pressAbs);    
            FloatType.Accept(visitor,PressDiffField, ref _pressDiff);    
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);
            Int16Type.Accept(visitor,TemperaturePressDiffField, ref _temperaturePressDiff);

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: press_abs, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field PressAbsField = new Field.Builder()
            .Name(nameof(PressAbs))
            .Title("press_abs")
            .Description("Absolute pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _pressAbs;
        public float PressAbs { get => _pressAbs; set => _pressAbs = value; }
        /// <summary>
        /// Differential pressure 1
        /// OriginName: press_diff, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field PressDiffField = new Field.Builder()
            .Name(nameof(PressDiff))
            .Title("press_diff")
            .Description("Differential pressure 1")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _pressDiff;
        public float PressDiff { get => _pressDiff; set => _pressDiff = value; }
        /// <summary>
        /// Absolute pressure temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Absolute pressure temperature")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.
        /// OriginName: temperature_press_diff, Units: cdegC, IsExtended: true
        /// </summary>
        public static readonly Field TemperaturePressDiffField = new Field.Builder()
            .Name(nameof(TemperaturePressDiff))
            .Title("temperature_press_diff")
            .Description("Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperaturePressDiff;
        public short TemperaturePressDiff { get => _temperaturePressDiff; set => _temperaturePressDiff = value; }
    }
    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, Y-right, X-front, ZYX, intrinsic).
    ///  ATTITUDE
    /// </summary>
    public class AttitudePacket : MavlinkV2Message<AttitudePayload>
    {
        public const int MessageId = 30;
        
        public const byte CrcExtra = 39;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AttitudePayload Payload { get; } = new();

        public override string Name => "ATTITUDE";
    }

    /// <summary>
    ///  ATTITUDE
    /// </summary>
    public class AttitudePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +4 // float rollspeed
            +4 // float pitchspeed
            +4 // float yawspeed
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            /* PayloadByteSize = 28 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,RollspeedField, ref _rollspeed);    
            FloatType.Accept(visitor,PitchspeedField, ref _pitchspeed);    
            FloatType.Accept(visitor,YawspeedField, ref _yawspeed);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Roll angle (-pi..+pi)
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Roll angle (-pi..+pi)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Pitch angle (-pi..+pi)
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch angle (-pi..+pi)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw angle (-pi..+pi)
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw angle (-pi..+pi)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollspeedField = new Field.Builder()
            .Name(nameof(Rollspeed))
            .Title("rollspeed")
            .Description("Roll angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _rollspeed;
        public float Rollspeed { get => _rollspeed; set => _rollspeed = value; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchspeedField = new Field.Builder()
            .Name(nameof(Pitchspeed))
            .Title("pitchspeed")
            .Description("Pitch angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchspeed;
        public float Pitchspeed { get => _pitchspeed; set => _pitchspeed = value; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawspeedField = new Field.Builder()
            .Name(nameof(Yawspeed))
            .Title("yawspeed")
            .Description("Yaw angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawspeed;
        public float Yawspeed { get => _yawspeed; set => _yawspeed = value; }
    }
    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    ///  ATTITUDE_QUATERNION
    /// </summary>
    public class AttitudeQuaternionPacket : MavlinkV2Message<AttitudeQuaternionPayload>
    {
        public const int MessageId = 31;
        
        public const byte CrcExtra = 246;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AttitudeQuaternionPayload Payload { get; } = new();

        public override string Name => "ATTITUDE_QUATERNION";
    }

    /// <summary>
    ///  ATTITUDE_QUATERNION
    /// </summary>
    public class AttitudeQuaternionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 48; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 48; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float q1
            +4 // float q2
            +4 // float q3
            +4 // float q4
            +4 // float rollspeed
            +4 // float pitchspeed
            +4 // float yawspeed
            +ReprOffsetQ.Length * 4 // float[4] repr_offset_q
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Q1 = BinSerialize.ReadFloat(ref buffer);
            Q2 = BinSerialize.ReadFloat(ref buffer);
            Q3 = BinSerialize.ReadFloat(ref buffer);
            Q4 = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            // extended field 'ReprOffsetQ' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                ReprOffsetQ[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Q1);
            BinSerialize.WriteFloat(ref buffer,Q2);
            BinSerialize.WriteFloat(ref buffer,Q3);
            BinSerialize.WriteFloat(ref buffer,Q4);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            for(var i=0;i<ReprOffsetQ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,ReprOffsetQ[i]);
            }
            /* PayloadByteSize = 48 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,Q1Field, ref _q1);    
            FloatType.Accept(visitor,Q2Field, ref _q2);    
            FloatType.Accept(visitor,Q3Field, ref _q3);    
            FloatType.Accept(visitor,Q4Field, ref _q4);    
            FloatType.Accept(visitor,RollspeedField, ref _rollspeed);    
            FloatType.Accept(visitor,PitchspeedField, ref _pitchspeed);    
            FloatType.Accept(visitor,YawspeedField, ref _yawspeed);    
            ArrayType.Accept(visitor,ReprOffsetQField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref ReprOffsetQ[index]));

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Quaternion component 1, w (1 in null-rotation)
        /// OriginName: q1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q1Field = new Field.Builder()
            .Name(nameof(Q1))
            .Title("q1")
            .Description("Quaternion component 1, w (1 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q1;
        public float Q1 { get => _q1; set => _q1 = value; }
        /// <summary>
        /// Quaternion component 2, x (0 in null-rotation)
        /// OriginName: q2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q2Field = new Field.Builder()
            .Name(nameof(Q2))
            .Title("q2")
            .Description("Quaternion component 2, x (0 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q2;
        public float Q2 { get => _q2; set => _q2 = value; }
        /// <summary>
        /// Quaternion component 3, y (0 in null-rotation)
        /// OriginName: q3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q3Field = new Field.Builder()
            .Name(nameof(Q3))
            .Title("q3")
            .Description("Quaternion component 3, y (0 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q3;
        public float Q3 { get => _q3; set => _q3 = value; }
        /// <summary>
        /// Quaternion component 4, z (0 in null-rotation)
        /// OriginName: q4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q4Field = new Field.Builder()
            .Name(nameof(Q4))
            .Title("q4")
            .Description("Quaternion component 4, z (0 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q4;
        public float Q4 { get => _q4; set => _q4 = value; }
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollspeedField = new Field.Builder()
            .Name(nameof(Rollspeed))
            .Title("rollspeed")
            .Description("Roll angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _rollspeed;
        public float Rollspeed { get => _rollspeed; set => _rollspeed = value; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchspeedField = new Field.Builder()
            .Name(nameof(Pitchspeed))
            .Title("pitchspeed")
            .Description("Pitch angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchspeed;
        public float Pitchspeed { get => _pitchspeed; set => _pitchspeed = value; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawspeedField = new Field.Builder()
            .Name(nameof(Yawspeed))
            .Title("yawspeed")
            .Description("Yaw angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawspeed;
        public float Yawspeed { get => _yawspeed; set => _yawspeed = value; }
        /// <summary>
        /// Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode.
        /// OriginName: repr_offset_q, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ReprOffsetQField = new Field.Builder()
            .Name(nameof(ReprOffsetQ))
            .Title("repr_offset_q")
            .Description("Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode.")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int ReprOffsetQMaxItemsCount = 4;
        public float[] ReprOffsetQ { get; } = new float[4];
    }
    /// <summary>
    /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    ///  LOCAL_POSITION_NED
    /// </summary>
    public class LocalPositionNedPacket : MavlinkV2Message<LocalPositionNedPayload>
    {
        public const int MessageId = 32;
        
        public const byte CrcExtra = 185;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LocalPositionNedPayload Payload { get; } = new();

        public override string Name => "LOCAL_POSITION_NED";
    }

    /// <summary>
    ///  LOCAL_POSITION_NED
    /// </summary>
    public class LocalPositionNedPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float vx
            +4 // float vy
            +4 // float vz
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            /* PayloadByteSize = 28 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// X Speed
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X Speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y Speed
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y Speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z Speed
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z Speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
    }
    /// <summary>
    /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
    ///                is designed as scaled integer message since the resolution of float is not sufficient.
    ///  GLOBAL_POSITION_INT
    /// </summary>
    public class GlobalPositionIntPacket : MavlinkV2Message<GlobalPositionIntPayload>
    {
        public const int MessageId = 33;
        
        public const byte CrcExtra = 104;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GlobalPositionIntPayload Payload { get; } = new();

        public override string Name => "GLOBAL_POSITION_INT";
    }

    /// <summary>
    ///  GLOBAL_POSITION_INT
    /// </summary>
    public class GlobalPositionIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +4 // int32_t relative_alt
            +2 // int16_t vx
            +2 // int16_t vy
            +2 // int16_t vz
            +2 // uint16_t hdg
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            Hdg = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteUShort(ref buffer,Hdg);
            /* PayloadByteSize = 28 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            Int32Type.Accept(visitor,RelativeAltField, ref _relativeAlt);    
            Int16Type.Accept(visitor,VxField, ref _vx);
            Int16Type.Accept(visitor,VyField, ref _vy);
            Int16Type.Accept(visitor,VzField, ref _vz);
            UInt16Type.Accept(visitor,HdgField, ref _hdg);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Latitude, expressed
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude, expressed")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude, expressed
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude, expressed")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field RelativeAltField = new Field.Builder()
            .Name(nameof(RelativeAlt))
            .Title("relative_alt")
            .Description("Altitude above ground")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _relativeAlt;
        public int RelativeAlt { get => _relativeAlt; set => _relativeAlt = value; }
        /// <summary>
        /// Ground X Speed (Latitude, positive north)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("Ground X Speed (Latitude, positive north)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vx;
        public short Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Ground Y Speed (Longitude, positive east)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Ground Y Speed (Longitude, positive east)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vy;
        public short Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Ground Z Speed (Altitude, positive down)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Ground Z Speed (Altitude, positive down)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vz;
        public short Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: hdg, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field HdgField = new Field.Builder()
            .Name(nameof(Hdg))
            .Title("hdg")
            .Description("Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _hdg;
        public ushort Hdg { get => _hdg; set => _hdg = value; }
    }
    /// <summary>
    /// The scaled values of the RC channels received: (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to INT16_MAX.
    ///  RC_CHANNELS_SCALED
    /// </summary>
    public class RcChannelsScaledPacket : MavlinkV2Message<RcChannelsScaledPayload>
    {
        public const int MessageId = 34;
        
        public const byte CrcExtra = 237;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RcChannelsScaledPayload Payload { get; } = new();

        public override string Name => "RC_CHANNELS_SCALED";
    }

    /// <summary>
    ///  RC_CHANNELS_SCALED
    /// </summary>
    public class RcChannelsScaledPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +2 // int16_t chan1_scaled
            +2 // int16_t chan2_scaled
            +2 // int16_t chan3_scaled
            +2 // int16_t chan4_scaled
            +2 // int16_t chan5_scaled
            +2 // int16_t chan6_scaled
            +2 // int16_t chan7_scaled
            +2 // int16_t chan8_scaled
            +1 // uint8_t port
            +1 // uint8_t rssi
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Chan1Scaled = BinSerialize.ReadShort(ref buffer);
            Chan2Scaled = BinSerialize.ReadShort(ref buffer);
            Chan3Scaled = BinSerialize.ReadShort(ref buffer);
            Chan4Scaled = BinSerialize.ReadShort(ref buffer);
            Chan5Scaled = BinSerialize.ReadShort(ref buffer);
            Chan6Scaled = BinSerialize.ReadShort(ref buffer);
            Chan7Scaled = BinSerialize.ReadShort(ref buffer);
            Chan8Scaled = BinSerialize.ReadShort(ref buffer);
            Port = (byte)BinSerialize.ReadByte(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Chan1Scaled);
            BinSerialize.WriteShort(ref buffer,Chan2Scaled);
            BinSerialize.WriteShort(ref buffer,Chan3Scaled);
            BinSerialize.WriteShort(ref buffer,Chan4Scaled);
            BinSerialize.WriteShort(ref buffer,Chan5Scaled);
            BinSerialize.WriteShort(ref buffer,Chan6Scaled);
            BinSerialize.WriteShort(ref buffer,Chan7Scaled);
            BinSerialize.WriteShort(ref buffer,Chan8Scaled);
            BinSerialize.WriteByte(ref buffer,(byte)Port);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 22 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int16Type.Accept(visitor,Chan1ScaledField, ref _chan1Scaled);
            Int16Type.Accept(visitor,Chan2ScaledField, ref _chan2Scaled);
            Int16Type.Accept(visitor,Chan3ScaledField, ref _chan3Scaled);
            Int16Type.Accept(visitor,Chan4ScaledField, ref _chan4Scaled);
            Int16Type.Accept(visitor,Chan5ScaledField, ref _chan5Scaled);
            Int16Type.Accept(visitor,Chan6ScaledField, ref _chan6Scaled);
            Int16Type.Accept(visitor,Chan7ScaledField, ref _chan7Scaled);
            Int16Type.Accept(visitor,Chan8ScaledField, ref _chan8Scaled);
            UInt8Type.Accept(visitor,PortField, ref _port);    
            UInt8Type.Accept(visitor,RssiField, ref _rssi);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// RC channel 1 value scaled.
        /// OriginName: chan1_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan1ScaledField = new Field.Builder()
            .Name(nameof(Chan1Scaled))
            .Title("chan1_scaled")
            .Description("RC channel 1 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan1Scaled;
        public short Chan1Scaled { get => _chan1Scaled; set => _chan1Scaled = value; }
        /// <summary>
        /// RC channel 2 value scaled.
        /// OriginName: chan2_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan2ScaledField = new Field.Builder()
            .Name(nameof(Chan2Scaled))
            .Title("chan2_scaled")
            .Description("RC channel 2 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan2Scaled;
        public short Chan2Scaled { get => _chan2Scaled; set => _chan2Scaled = value; }
        /// <summary>
        /// RC channel 3 value scaled.
        /// OriginName: chan3_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan3ScaledField = new Field.Builder()
            .Name(nameof(Chan3Scaled))
            .Title("chan3_scaled")
            .Description("RC channel 3 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan3Scaled;
        public short Chan3Scaled { get => _chan3Scaled; set => _chan3Scaled = value; }
        /// <summary>
        /// RC channel 4 value scaled.
        /// OriginName: chan4_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan4ScaledField = new Field.Builder()
            .Name(nameof(Chan4Scaled))
            .Title("chan4_scaled")
            .Description("RC channel 4 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan4Scaled;
        public short Chan4Scaled { get => _chan4Scaled; set => _chan4Scaled = value; }
        /// <summary>
        /// RC channel 5 value scaled.
        /// OriginName: chan5_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan5ScaledField = new Field.Builder()
            .Name(nameof(Chan5Scaled))
            .Title("chan5_scaled")
            .Description("RC channel 5 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan5Scaled;
        public short Chan5Scaled { get => _chan5Scaled; set => _chan5Scaled = value; }
        /// <summary>
        /// RC channel 6 value scaled.
        /// OriginName: chan6_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan6ScaledField = new Field.Builder()
            .Name(nameof(Chan6Scaled))
            .Title("chan6_scaled")
            .Description("RC channel 6 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan6Scaled;
        public short Chan6Scaled { get => _chan6Scaled; set => _chan6Scaled = value; }
        /// <summary>
        /// RC channel 7 value scaled.
        /// OriginName: chan7_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan7ScaledField = new Field.Builder()
            .Name(nameof(Chan7Scaled))
            .Title("chan7_scaled")
            .Description("RC channel 7 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan7Scaled;
        public short Chan7Scaled { get => _chan7Scaled; set => _chan7Scaled = value; }
        /// <summary>
        /// RC channel 8 value scaled.
        /// OriginName: chan8_scaled, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Chan8ScaledField = new Field.Builder()
            .Name(nameof(Chan8Scaled))
            .Title("chan8_scaled")
            .Description("RC channel 8 value scaled.")

            .DataType(Int16Type.Default)
        .Build();
        private short _chan8Scaled;
        public short Chan8Scaled { get => _chan8Scaled; set => _chan8Scaled = value; }
        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// OriginName: port, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PortField = new Field.Builder()
            .Name(nameof(Port))
            .Title("port")
            .Description("Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _port;
        public byte Port { get => _port; set => _port = value; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RssiField = new Field.Builder()
            .Name(nameof(Rssi))
            .Title("rssi")
            .Description("Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rssi;
        public byte Rssi { get => _rssi; set => _rssi = value; }
    }
    /// <summary>
    /// The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    ///  RC_CHANNELS_RAW
    /// </summary>
    public class RcChannelsRawPacket : MavlinkV2Message<RcChannelsRawPayload>
    {
        public const int MessageId = 35;
        
        public const byte CrcExtra = 244;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RcChannelsRawPayload Payload { get; } = new();

        public override string Name => "RC_CHANNELS_RAW";
    }

    /// <summary>
    ///  RC_CHANNELS_RAW
    /// </summary>
    public class RcChannelsRawPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +2 // uint16_t chan1_raw
            +2 // uint16_t chan2_raw
            +2 // uint16_t chan3_raw
            +2 // uint16_t chan4_raw
            +2 // uint16_t chan5_raw
            +2 // uint16_t chan6_raw
            +2 // uint16_t chan7_raw
            +2 // uint16_t chan8_raw
            +1 // uint8_t port
            +1 // uint8_t rssi
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            Port = (byte)BinSerialize.ReadByte(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Port);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 22 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt16Type.Accept(visitor,Chan1RawField, ref _chan1Raw);    
            UInt16Type.Accept(visitor,Chan2RawField, ref _chan2Raw);    
            UInt16Type.Accept(visitor,Chan3RawField, ref _chan3Raw);    
            UInt16Type.Accept(visitor,Chan4RawField, ref _chan4Raw);    
            UInt16Type.Accept(visitor,Chan5RawField, ref _chan5Raw);    
            UInt16Type.Accept(visitor,Chan6RawField, ref _chan6Raw);    
            UInt16Type.Accept(visitor,Chan7RawField, ref _chan7Raw);    
            UInt16Type.Accept(visitor,Chan8RawField, ref _chan8Raw);    
            UInt8Type.Accept(visitor,PortField, ref _port);    
            UInt8Type.Accept(visitor,RssiField, ref _rssi);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// RC channel 1 value.
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan1RawField = new Field.Builder()
            .Name(nameof(Chan1Raw))
            .Title("chan1_raw")
            .Description("RC channel 1 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan1Raw;
        public ushort Chan1Raw { get => _chan1Raw; set => _chan1Raw = value; }
        /// <summary>
        /// RC channel 2 value.
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan2RawField = new Field.Builder()
            .Name(nameof(Chan2Raw))
            .Title("chan2_raw")
            .Description("RC channel 2 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan2Raw;
        public ushort Chan2Raw { get => _chan2Raw; set => _chan2Raw = value; }
        /// <summary>
        /// RC channel 3 value.
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan3RawField = new Field.Builder()
            .Name(nameof(Chan3Raw))
            .Title("chan3_raw")
            .Description("RC channel 3 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan3Raw;
        public ushort Chan3Raw { get => _chan3Raw; set => _chan3Raw = value; }
        /// <summary>
        /// RC channel 4 value.
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan4RawField = new Field.Builder()
            .Name(nameof(Chan4Raw))
            .Title("chan4_raw")
            .Description("RC channel 4 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan4Raw;
        public ushort Chan4Raw { get => _chan4Raw; set => _chan4Raw = value; }
        /// <summary>
        /// RC channel 5 value.
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan5RawField = new Field.Builder()
            .Name(nameof(Chan5Raw))
            .Title("chan5_raw")
            .Description("RC channel 5 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan5Raw;
        public ushort Chan5Raw { get => _chan5Raw; set => _chan5Raw = value; }
        /// <summary>
        /// RC channel 6 value.
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan6RawField = new Field.Builder()
            .Name(nameof(Chan6Raw))
            .Title("chan6_raw")
            .Description("RC channel 6 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan6Raw;
        public ushort Chan6Raw { get => _chan6Raw; set => _chan6Raw = value; }
        /// <summary>
        /// RC channel 7 value.
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan7RawField = new Field.Builder()
            .Name(nameof(Chan7Raw))
            .Title("chan7_raw")
            .Description("RC channel 7 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan7Raw;
        public ushort Chan7Raw { get => _chan7Raw; set => _chan7Raw = value; }
        /// <summary>
        /// RC channel 8 value.
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan8RawField = new Field.Builder()
            .Name(nameof(Chan8Raw))
            .Title("chan8_raw")
            .Description("RC channel 8 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan8Raw;
        public ushort Chan8Raw { get => _chan8Raw; set => _chan8Raw = value; }
        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// OriginName: port, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PortField = new Field.Builder()
            .Name(nameof(Port))
            .Title("port")
            .Description("Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _port;
        public byte Port { get => _port; set => _port = value; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RssiField = new Field.Builder()
            .Name(nameof(Rssi))
            .Title("rssi")
            .Description("Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rssi;
        public byte Rssi { get => _rssi; set => _rssi = value; }
    }
    /// <summary>
    /// Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
    ///  SERVO_OUTPUT_RAW
    /// </summary>
    public class ServoOutputRawPacket : MavlinkV2Message<ServoOutputRawPayload>
    {
        public const int MessageId = 36;
        
        public const byte CrcExtra = 222;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ServoOutputRawPayload Payload { get; } = new();

        public override string Name => "SERVO_OUTPUT_RAW";
    }

    /// <summary>
    ///  SERVO_OUTPUT_RAW
    /// </summary>
    public class ServoOutputRawPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_usec
            +2 // uint16_t servo1_raw
            +2 // uint16_t servo2_raw
            +2 // uint16_t servo3_raw
            +2 // uint16_t servo4_raw
            +2 // uint16_t servo5_raw
            +2 // uint16_t servo6_raw
            +2 // uint16_t servo7_raw
            +2 // uint16_t servo8_raw
            +1 // uint8_t port
            +2 // uint16_t servo9_raw
            +2 // uint16_t servo10_raw
            +2 // uint16_t servo11_raw
            +2 // uint16_t servo12_raw
            +2 // uint16_t servo13_raw
            +2 // uint16_t servo14_raw
            +2 // uint16_t servo15_raw
            +2 // uint16_t servo16_raw
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadUInt(ref buffer);
            Servo1Raw = BinSerialize.ReadUShort(ref buffer);
            Servo2Raw = BinSerialize.ReadUShort(ref buffer);
            Servo3Raw = BinSerialize.ReadUShort(ref buffer);
            Servo4Raw = BinSerialize.ReadUShort(ref buffer);
            Servo5Raw = BinSerialize.ReadUShort(ref buffer);
            Servo6Raw = BinSerialize.ReadUShort(ref buffer);
            Servo7Raw = BinSerialize.ReadUShort(ref buffer);
            Servo8Raw = BinSerialize.ReadUShort(ref buffer);
            Port = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Servo9Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo9Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo10Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo10Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo11Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo11Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo12Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo12Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo13Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo13Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo14Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo14Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo15Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo15Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo16Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo16Raw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeUsec);
            BinSerialize.WriteUShort(ref buffer,Servo1Raw);
            BinSerialize.WriteUShort(ref buffer,Servo2Raw);
            BinSerialize.WriteUShort(ref buffer,Servo3Raw);
            BinSerialize.WriteUShort(ref buffer,Servo4Raw);
            BinSerialize.WriteUShort(ref buffer,Servo5Raw);
            BinSerialize.WriteUShort(ref buffer,Servo6Raw);
            BinSerialize.WriteUShort(ref buffer,Servo7Raw);
            BinSerialize.WriteUShort(ref buffer,Servo8Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Port);
            BinSerialize.WriteUShort(ref buffer,Servo9Raw);
            BinSerialize.WriteUShort(ref buffer,Servo10Raw);
            BinSerialize.WriteUShort(ref buffer,Servo11Raw);
            BinSerialize.WriteUShort(ref buffer,Servo12Raw);
            BinSerialize.WriteUShort(ref buffer,Servo13Raw);
            BinSerialize.WriteUShort(ref buffer,Servo14Raw);
            BinSerialize.WriteUShort(ref buffer,Servo15Raw);
            BinSerialize.WriteUShort(ref buffer,Servo16Raw);
            /* PayloadByteSize = 37 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt16Type.Accept(visitor,Servo1RawField, ref _servo1Raw);    
            UInt16Type.Accept(visitor,Servo2RawField, ref _servo2Raw);    
            UInt16Type.Accept(visitor,Servo3RawField, ref _servo3Raw);    
            UInt16Type.Accept(visitor,Servo4RawField, ref _servo4Raw);    
            UInt16Type.Accept(visitor,Servo5RawField, ref _servo5Raw);    
            UInt16Type.Accept(visitor,Servo6RawField, ref _servo6Raw);    
            UInt16Type.Accept(visitor,Servo7RawField, ref _servo7Raw);    
            UInt16Type.Accept(visitor,Servo8RawField, ref _servo8Raw);    
            UInt8Type.Accept(visitor,PortField, ref _port);    
            UInt16Type.Accept(visitor,Servo9RawField, ref _servo9Raw);    
            UInt16Type.Accept(visitor,Servo10RawField, ref _servo10Raw);    
            UInt16Type.Accept(visitor,Servo11RawField, ref _servo11Raw);    
            UInt16Type.Accept(visitor,Servo12RawField, ref _servo12Raw);    
            UInt16Type.Accept(visitor,Servo13RawField, ref _servo13Raw);    
            UInt16Type.Accept(visitor,Servo14RawField, ref _servo14Raw);    
            UInt16Type.Accept(visitor,Servo15RawField, ref _servo15Raw);    
            UInt16Type.Accept(visitor,Servo16RawField, ref _servo16Raw);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeUsec;
        public uint TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Servo output 1 value
        /// OriginName: servo1_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo1RawField = new Field.Builder()
            .Name(nameof(Servo1Raw))
            .Title("servo1_raw")
            .Description("Servo output 1 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo1Raw;
        public ushort Servo1Raw { get => _servo1Raw; set => _servo1Raw = value; }
        /// <summary>
        /// Servo output 2 value
        /// OriginName: servo2_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo2RawField = new Field.Builder()
            .Name(nameof(Servo2Raw))
            .Title("servo2_raw")
            .Description("Servo output 2 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo2Raw;
        public ushort Servo2Raw { get => _servo2Raw; set => _servo2Raw = value; }
        /// <summary>
        /// Servo output 3 value
        /// OriginName: servo3_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo3RawField = new Field.Builder()
            .Name(nameof(Servo3Raw))
            .Title("servo3_raw")
            .Description("Servo output 3 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo3Raw;
        public ushort Servo3Raw { get => _servo3Raw; set => _servo3Raw = value; }
        /// <summary>
        /// Servo output 4 value
        /// OriginName: servo4_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo4RawField = new Field.Builder()
            .Name(nameof(Servo4Raw))
            .Title("servo4_raw")
            .Description("Servo output 4 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo4Raw;
        public ushort Servo4Raw { get => _servo4Raw; set => _servo4Raw = value; }
        /// <summary>
        /// Servo output 5 value
        /// OriginName: servo5_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo5RawField = new Field.Builder()
            .Name(nameof(Servo5Raw))
            .Title("servo5_raw")
            .Description("Servo output 5 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo5Raw;
        public ushort Servo5Raw { get => _servo5Raw; set => _servo5Raw = value; }
        /// <summary>
        /// Servo output 6 value
        /// OriginName: servo6_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo6RawField = new Field.Builder()
            .Name(nameof(Servo6Raw))
            .Title("servo6_raw")
            .Description("Servo output 6 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo6Raw;
        public ushort Servo6Raw { get => _servo6Raw; set => _servo6Raw = value; }
        /// <summary>
        /// Servo output 7 value
        /// OriginName: servo7_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo7RawField = new Field.Builder()
            .Name(nameof(Servo7Raw))
            .Title("servo7_raw")
            .Description("Servo output 7 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo7Raw;
        public ushort Servo7Raw { get => _servo7Raw; set => _servo7Raw = value; }
        /// <summary>
        /// Servo output 8 value
        /// OriginName: servo8_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Servo8RawField = new Field.Builder()
            .Name(nameof(Servo8Raw))
            .Title("servo8_raw")
            .Description("Servo output 8 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo8Raw;
        public ushort Servo8Raw { get => _servo8Raw; set => _servo8Raw = value; }
        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// OriginName: port, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PortField = new Field.Builder()
            .Name(nameof(Port))
            .Title("port")
            .Description("Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _port;
        public byte Port { get => _port; set => _port = value; }
        /// <summary>
        /// Servo output 9 value
        /// OriginName: servo9_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo9RawField = new Field.Builder()
            .Name(nameof(Servo9Raw))
            .Title("servo9_raw")
            .Description("Servo output 9 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo9Raw;
        public ushort Servo9Raw { get => _servo9Raw; set => _servo9Raw = value; }
        /// <summary>
        /// Servo output 10 value
        /// OriginName: servo10_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo10RawField = new Field.Builder()
            .Name(nameof(Servo10Raw))
            .Title("servo10_raw")
            .Description("Servo output 10 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo10Raw;
        public ushort Servo10Raw { get => _servo10Raw; set => _servo10Raw = value; }
        /// <summary>
        /// Servo output 11 value
        /// OriginName: servo11_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo11RawField = new Field.Builder()
            .Name(nameof(Servo11Raw))
            .Title("servo11_raw")
            .Description("Servo output 11 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo11Raw;
        public ushort Servo11Raw { get => _servo11Raw; set => _servo11Raw = value; }
        /// <summary>
        /// Servo output 12 value
        /// OriginName: servo12_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo12RawField = new Field.Builder()
            .Name(nameof(Servo12Raw))
            .Title("servo12_raw")
            .Description("Servo output 12 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo12Raw;
        public ushort Servo12Raw { get => _servo12Raw; set => _servo12Raw = value; }
        /// <summary>
        /// Servo output 13 value
        /// OriginName: servo13_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo13RawField = new Field.Builder()
            .Name(nameof(Servo13Raw))
            .Title("servo13_raw")
            .Description("Servo output 13 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo13Raw;
        public ushort Servo13Raw { get => _servo13Raw; set => _servo13Raw = value; }
        /// <summary>
        /// Servo output 14 value
        /// OriginName: servo14_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo14RawField = new Field.Builder()
            .Name(nameof(Servo14Raw))
            .Title("servo14_raw")
            .Description("Servo output 14 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo14Raw;
        public ushort Servo14Raw { get => _servo14Raw; set => _servo14Raw = value; }
        /// <summary>
        /// Servo output 15 value
        /// OriginName: servo15_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo15RawField = new Field.Builder()
            .Name(nameof(Servo15Raw))
            .Title("servo15_raw")
            .Description("Servo output 15 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo15Raw;
        public ushort Servo15Raw { get => _servo15Raw; set => _servo15Raw = value; }
        /// <summary>
        /// Servo output 16 value
        /// OriginName: servo16_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Servo16RawField = new Field.Builder()
            .Name(nameof(Servo16Raw))
            .Title("servo16_raw")
            .Description("Servo output 16 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _servo16Raw;
        public ushort Servo16Raw { get => _servo16Raw; set => _servo16Raw = value; }
    }
    /// <summary>
    /// Request a partial list of mission items from the system/component. https://mavlink.io/en/services/mission.html. If start and end index are the same, just send one waypoint.
    ///  MISSION_REQUEST_PARTIAL_LIST
    /// </summary>
    public class MissionRequestPartialListPacket : MavlinkV2Message<MissionRequestPartialListPayload>
    {
        public const int MessageId = 37;
        
        public const byte CrcExtra = 212;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionRequestPartialListPayload Payload { get; } = new();

        public override string Name => "MISSION_REQUEST_PARTIAL_LIST";
    }

    /// <summary>
    ///  MISSION_REQUEST_PARTIAL_LIST
    /// </summary>
    public class MissionRequestPartialListPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 7; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 7; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // int16_t start_index
            +2 // int16_t end_index
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            StartIndex = BinSerialize.ReadShort(ref buffer);
            EndIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,StartIndex);
            BinSerialize.WriteShort(ref buffer,EndIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 7 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int16Type.Accept(visitor,StartIndexField, ref _startIndex);
            Int16Type.Accept(visitor,EndIndexField, ref _endIndex);
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// Start index
        /// OriginName: start_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StartIndexField = new Field.Builder()
            .Name(nameof(StartIndex))
            .Title("start_index")
            .Description("Start index")

            .DataType(Int16Type.Default)
        .Build();
        private short _startIndex;
        public short StartIndex { get => _startIndex; set => _startIndex = value; }
        /// <summary>
        /// End index, -1 by default (-1: send list to end). Else a valid index of the list
        /// OriginName: end_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EndIndexField = new Field.Builder()
            .Name(nameof(EndIndex))
            .Title("end_index")
            .Description("End index, -1 by default (-1: send list to end). Else a valid index of the list")

            .DataType(Int16Type.Default)
        .Build();
        private short _endIndex;
        public short EndIndex { get => _endIndex; set => _endIndex = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
    ///  MISSION_WRITE_PARTIAL_LIST
    /// </summary>
    public class MissionWritePartialListPacket : MavlinkV2Message<MissionWritePartialListPayload>
    {
        public const int MessageId = 38;
        
        public const byte CrcExtra = 9;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionWritePartialListPayload Payload { get; } = new();

        public override string Name => "MISSION_WRITE_PARTIAL_LIST";
    }

    /// <summary>
    ///  MISSION_WRITE_PARTIAL_LIST
    /// </summary>
    public class MissionWritePartialListPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 7; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 7; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // int16_t start_index
            +2 // int16_t end_index
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            StartIndex = BinSerialize.ReadShort(ref buffer);
            EndIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,StartIndex);
            BinSerialize.WriteShort(ref buffer,EndIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 7 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int16Type.Accept(visitor,StartIndexField, ref _startIndex);
            Int16Type.Accept(visitor,EndIndexField, ref _endIndex);
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// Start index. Must be smaller / equal to the largest index of the current onboard list.
        /// OriginName: start_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StartIndexField = new Field.Builder()
            .Name(nameof(StartIndex))
            .Title("start_index")
            .Description("Start index. Must be smaller / equal to the largest index of the current onboard list.")

            .DataType(Int16Type.Default)
        .Build();
        private short _startIndex;
        public short StartIndex { get => _startIndex; set => _startIndex = value; }
        /// <summary>
        /// End index, equal or greater than start index.
        /// OriginName: end_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EndIndexField = new Field.Builder()
            .Name(nameof(EndIndex))
            .Title("end_index")
            .Description("End index, equal or greater than start index.")

            .DataType(Int16Type.Default)
        .Build();
        private short _endIndex;
        public short EndIndex { get => _endIndex; set => _endIndex = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// Message encoding a mission item. This message is emitted to announce
    ///                 the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN may be used to indicate an optional/default value (e.g. to use the system's current latitude or yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    ///  MISSION_ITEM
    /// </summary>
    public class MissionItemPacket : MavlinkV2Message<MissionItemPayload>
    {
        public const int MessageId = 39;
        
        public const byte CrcExtra = 254;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionItemPayload Payload { get; } = new();

        public override string Name => "MISSION_ITEM";
    }

    /// <summary>
    ///  MISSION_ITEM
    /// </summary>
    public class MissionItemPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float param1
            +4 // float param2
            +4 // float param3
            +4 // float param4
            +4 // float x
            +4 // float y
            +4 // float z
            +2 // uint16_t seq
            + 2 // uint16_t command
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t frame
            +1 // uint8_t current
            +1 // uint8_t autocontinue
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Seq = BinSerialize.ReadUShort(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            Current = (byte)BinSerialize.ReadByte(ref buffer);
            Autocontinue = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteByte(ref buffer,(byte)Current);
            BinSerialize.WriteByte(ref buffer,(byte)Autocontinue);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 38 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,Param1Field, ref _param1);    
            FloatType.Accept(visitor,Param2Field, ref _param2);    
            FloatType.Accept(visitor,Param3Field, ref _param3);    
            FloatType.Accept(visitor,Param4Field, ref _param4);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            UInt16Type.Accept(visitor,SeqField, ref _seq);    
            var tmpCommand = (ushort)Command;
            UInt16Type.Accept(visitor,CommandField, ref tmpCommand);
            Command = (MavCmd)tmpCommand;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;
            UInt8Type.Accept(visitor,CurrentField, ref _current);    
            UInt8Type.Accept(visitor,AutocontinueField, ref _autocontinue);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param1Field = new Field.Builder()
            .Name(nameof(Param1))
            .Title("param1")
            .Description("PARAM1, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param1;
        public float Param1 { get => _param1; set => _param1 = value; }
        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param2Field = new Field.Builder()
            .Name(nameof(Param2))
            .Title("param2")
            .Description("PARAM2, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param2;
        public float Param2 { get => _param2; set => _param2 = value; }
        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param3Field = new Field.Builder()
            .Name(nameof(Param3))
            .Title("param3")
            .Description("PARAM3, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param3;
        public float Param3 { get => _param3; set => _param3 = value; }
        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param4Field = new Field.Builder()
            .Name(nameof(Param4))
            .Title("param4")
            .Description("PARAM4, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param4;
        public float Param4 { get => _param4; set => _param4 = value; }
        /// <summary>
        /// PARAM5 / local: X coordinate, global: latitude
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("PARAM5 / local: X coordinate, global: latitude")

            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// PARAM6 / local: Y coordinate, global: longitude
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("PARAM6 / local: Y coordinate, global: longitude")

            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame).
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame).")

            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Sequence")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seq;
        public ushort Seq { get => _seq; set => _seq = value; }
        /// <summary>
        /// The scheduled action for the waypoint.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CommandField = new Field.Builder()
            .Name(nameof(Command))
            .Title("command")
            .Description("The scheduled action for the waypoint.")
            .DataType(new UInt16Type(MavCmdHelper.GetValues(x=>(ushort)x).Min(),MavCmdHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavCmdHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavCmd _command;
        public MavCmd Command { get => _command; set => _command = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// The coordinate system of the waypoint.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("The coordinate system of the waypoint.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
        /// <summary>
        /// false:0, true:1
        /// OriginName: current, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CurrentField = new Field.Builder()
            .Name(nameof(Current))
            .Title("current")
            .Description("false:0, true:1")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _current;
        public byte Current { get => _current; set => _current = value; }
        /// <summary>
        /// Autocontinue to next waypoint. 0: false, 1: true. Set false to pause mission after the item completes.
        /// OriginName: autocontinue, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AutocontinueField = new Field.Builder()
            .Name(nameof(Autocontinue))
            .Title("autocontinue")
            .Description("Autocontinue to next waypoint. 0: false, 1: true. Set false to pause mission after the item completes.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _autocontinue;
        public byte Autocontinue { get => _autocontinue; set => _autocontinue = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. https://mavlink.io/en/services/mission.html
    ///  MISSION_REQUEST
    /// </summary>
    public class MissionRequestPacket : MavlinkV2Message<MissionRequestPayload>
    {
        public const int MessageId = 40;
        
        public const byte CrcExtra = 230;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionRequestPayload Payload { get; } = new();

        public override string Name => "MISSION_REQUEST";
    }

    /// <summary>
    ///  MISSION_REQUEST
    /// </summary>
    public class MissionRequestPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t seq
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 5 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SeqField, ref _seq);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Sequence")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seq;
        public ushort Seq { get => _seq; set => _seq = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// 
    ///         Set the mission item with sequence number seq as the current item and emit MISSION_CURRENT (whether or not the mission number changed).
    ///         If a mission is currently being executed, the system will continue to this new mission item on the shortest path, skipping any intermediate mission items.
    ///         Note that mission jump repeat counters are not reset (see MAV_CMD_DO_JUMP param2).
    /// 
    ///         This message may trigger a mission state-machine change on some systems: for example from MISSION_STATE_NOT_STARTED or MISSION_STATE_PAUSED to MISSION_STATE_ACTIVE.
    ///         If the system is in mission mode, on those systems this command might therefore start, restart or resume the mission.
    ///         If the system is not in mission mode this message must not trigger a switch to mission mode.
    ///       
    ///  MISSION_SET_CURRENT
    /// </summary>
    public class MissionSetCurrentPacket : MavlinkV2Message<MissionSetCurrentPayload>
    {
        public const int MessageId = 41;
        
        public const byte CrcExtra = 28;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionSetCurrentPayload Payload { get; } = new();

        public override string Name => "MISSION_SET_CURRENT";
    }

    /// <summary>
    ///  MISSION_SET_CURRENT
    /// </summary>
    public class MissionSetCurrentPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t seq
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 4 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SeqField, ref _seq);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Sequence")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seq;
        public ushort Seq { get => _seq; set => _seq = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// 
    ///         Message that announces the sequence number of the current target mission item (that the system will fly towards/execute when the mission is running).
    ///         This message should be streamed all the time (nominally at 1Hz).
    ///         This message should be emitted following a call to MAV_CMD_DO_SET_MISSION_CURRENT or SET_MISSION_CURRENT.
    ///       
    ///  MISSION_CURRENT
    /// </summary>
    public class MissionCurrentPacket : MavlinkV2Message<MissionCurrentPayload>
    {
        public const int MessageId = 42;
        
        public const byte CrcExtra = 28;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionCurrentPayload Payload { get; } = new();

        public override string Name => "MISSION_CURRENT";
    }

    /// <summary>
    ///  MISSION_CURRENT
    /// </summary>
    public class MissionCurrentPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t seq
            +2 // uint16_t total
            + 1 // uint8_t mission_state
            +1 // uint8_t mission_mode
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Total' can be empty
            if (buffer.IsEmpty) return;
            Total = BinSerialize.ReadUShort(ref buffer);
            // extended field 'MissionState' can be empty
            if (buffer.IsEmpty) return;
            MissionState = (MissionState)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionMode' can be empty
            if (buffer.IsEmpty) return;
            MissionMode = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteUShort(ref buffer,Total);
            BinSerialize.WriteByte(ref buffer,(byte)MissionState);
            BinSerialize.WriteByte(ref buffer,(byte)MissionMode);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SeqField, ref _seq);    
            UInt16Type.Accept(visitor,TotalField, ref _total);    
            var tmpMissionState = (byte)MissionState;
            UInt8Type.Accept(visitor,MissionStateField, ref tmpMissionState);
            MissionState = (MissionState)tmpMissionState;
            UInt8Type.Accept(visitor,MissionModeField, ref _missionMode);    

        }

        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Sequence")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seq;
        public ushort Seq { get => _seq; set => _seq = value; }
        /// <summary>
        /// Total number of mission items on vehicle (on last item, sequence == total). If the autopilot stores its home location as part of the mission this will be excluded from the total. 0: Not supported, UINT16_MAX if no mission is present on the vehicle.
        /// OriginName: total, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TotalField = new Field.Builder()
            .Name(nameof(Total))
            .Title("total")
            .Description("Total number of mission items on vehicle (on last item, sequence == total). If the autopilot stores its home location as part of the mission this will be excluded from the total. 0: Not supported, UINT16_MAX if no mission is present on the vehicle.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _total;
        public ushort Total { get => _total; set => _total = value; }
        /// <summary>
        /// Mission state machine state. MISSION_STATE_UNKNOWN if state reporting not supported.
        /// OriginName: mission_state, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionStateField = new Field.Builder()
            .Name(nameof(MissionState))
            .Title("mission_state")
            .Description("Mission state machine state. MISSION_STATE_UNKNOWN if state reporting not supported.")
            .DataType(new UInt8Type(MissionStateHelper.GetValues(x=>(byte)x).Min(),MissionStateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MissionStateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MissionState _missionState;
        public MissionState MissionState { get => _missionState; set => _missionState = value; } 
        /// <summary>
        /// Vehicle is in a mode that can execute mission items or suspended. 0: Unknown, 1: In mission mode, 2: Suspended (not in mission mode).
        /// OriginName: mission_mode, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionModeField = new Field.Builder()
            .Name(nameof(MissionMode))
            .Title("mission_mode")
            .Description("Vehicle is in a mode that can execute mission items or suspended. 0: Unknown, 1: In mission mode, 2: Suspended (not in mission mode).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _missionMode;
        public byte MissionMode { get => _missionMode; set => _missionMode = value; }
    }
    /// <summary>
    /// Request the overall list of mission items from the system/component.
    ///  MISSION_REQUEST_LIST
    /// </summary>
    public class MissionRequestListPacket : MavlinkV2Message<MissionRequestListPayload>
    {
        public const int MessageId = 43;
        
        public const byte CrcExtra = 132;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionRequestListPayload Payload { get; } = new();

        public override string Name => "MISSION_REQUEST_LIST";
    }

    /// <summary>
    ///  MISSION_REQUEST_LIST
    /// </summary>
    public class MissionRequestListPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 3 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of waypoints.
    ///  MISSION_COUNT
    /// </summary>
    public class MissionCountPacket : MavlinkV2Message<MissionCountPayload>
    {
        public const int MessageId = 44;
        
        public const byte CrcExtra = 221;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionCountPayload Payload { get; } = new();

        public override string Name => "MISSION_COUNT";
    }

    /// <summary>
    ///  MISSION_COUNT
    /// </summary>
    public class MissionCountPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t count
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Count = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Count);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 5 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,CountField, ref _count);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// Number of mission items in the sequence
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CountField = new Field.Builder()
            .Name(nameof(Count))
            .Title("count")
            .Description("Number of mission items in the sequence")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _count;
        public ushort Count { get => _count; set => _count = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// Delete all mission items at once.
    ///  MISSION_CLEAR_ALL
    /// </summary>
    public class MissionClearAllPacket : MavlinkV2Message<MissionClearAllPayload>
    {
        public const int MessageId = 45;
        
        public const byte CrcExtra = 232;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionClearAllPayload Payload { get; } = new();

        public override string Name => "MISSION_CLEAR_ALL";
    }

    /// <summary>
    ///  MISSION_CLEAR_ALL
    /// </summary>
    public class MissionClearAllPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 3 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.
    ///  MISSION_ITEM_REACHED
    /// </summary>
    public class MissionItemReachedPacket : MavlinkV2Message<MissionItemReachedPayload>
    {
        public const int MessageId = 46;
        
        public const byte CrcExtra = 11;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionItemReachedPayload Payload { get; } = new();

        public override string Name => "MISSION_ITEM_REACHED";
    }

    /// <summary>
    ///  MISSION_ITEM_REACHED
    /// </summary>
    public class MissionItemReachedPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t seq
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            /* PayloadByteSize = 2 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SeqField, ref _seq);    

        }

        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Sequence")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seq;
        public ushort Seq { get => _seq; set => _seq = value; }
    }
    /// <summary>
    /// Acknowledgment message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
    ///  MISSION_ACK
    /// </summary>
    public class MissionAckPacket : MavlinkV2Message<MissionAckPayload>
    {
        public const int MessageId = 47;
        
        public const byte CrcExtra = 153;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionAckPayload Payload { get; } = new();

        public override string Name => "MISSION_ACK";
    }

    /// <summary>
    ///  MISSION_ACK
    /// </summary>
    public class MissionAckPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t type
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Type = (MavMissionResult)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 4 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (MavMissionResult)tmpType;
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission result.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Mission result.")
            .DataType(new UInt8Type(MavMissionResultHelper.GetValues(x=>(byte)x).Min(),MavMissionResultHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionResultHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionResult _type;
        public MavMissionResult Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// Sets the GPS coordinates of the vehicle local origin (0,0,0) position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of whether the origin is changed. This enables transform between the local coordinate frame and the global (GPS) coordinate frame, which may be necessary when (for example) indoor and outdoor settings are connected and the MAV should move from in- to outdoor.
    ///  SET_GPS_GLOBAL_ORIGIN
    /// </summary>
    public class SetGpsGlobalOriginPacket : MavlinkV2Message<SetGpsGlobalOriginPayload>
    {
        public const int MessageId = 48;
        
        public const byte CrcExtra = 41;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetGpsGlobalOriginPayload Payload { get; } = new();

        public override string Name => "SET_GPS_GLOBAL_ORIGIN";
    }

    /// <summary>
    ///  SET_GPS_GLOBAL_ORIGIN
    /// </summary>
    public class SetGpsGlobalOriginPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 21; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 21; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t latitude
            +4 // int32_t longitude
            +4 // int32_t altitude
            +1 // uint8_t target_system
            +8 // uint64_t time_usec
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 21 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatitudeField, ref _latitude);    
            Int32Type.Accept(visitor,LongitudeField, ref _longitude);    
            Int32Type.Accept(visitor,AltitudeField, ref _altitude);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    

        }

        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatitudeField = new Field.Builder()
            .Name(nameof(Latitude))
            .Title("latitude")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latitude;
        public int Latitude { get => _latitude; set => _latitude = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LongitudeField = new Field.Builder()
            .Name(nameof(Longitude))
            .Title("longitude")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _longitude;
        public int Longitude { get => _longitude; set => _longitude = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeField = new Field.Builder()
            .Name(nameof(Altitude))
            .Title("altitude")
            .Description("Altitude (MSL). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altitude;
        public int Altitude { get => _altitude; set => _altitude = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
    }
    /// <summary>
    /// Publishes the GPS coordinates of the vehicle local origin (0,0,0) position. Emitted whenever a new GPS-Local position mapping is requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.
    ///  GPS_GLOBAL_ORIGIN
    /// </summary>
    public class GpsGlobalOriginPacket : MavlinkV2Message<GpsGlobalOriginPayload>
    {
        public const int MessageId = 49;
        
        public const byte CrcExtra = 39;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GpsGlobalOriginPayload Payload { get; } = new();

        public override string Name => "GPS_GLOBAL_ORIGIN";
    }

    /// <summary>
    ///  GPS_GLOBAL_ORIGIN
    /// </summary>
    public class GpsGlobalOriginPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t latitude
            +4 // int32_t longitude
            +4 // int32_t altitude
            +8 // uint64_t time_usec
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 20 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatitudeField, ref _latitude);    
            Int32Type.Accept(visitor,LongitudeField, ref _longitude);    
            Int32Type.Accept(visitor,AltitudeField, ref _altitude);    
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    

        }

        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatitudeField = new Field.Builder()
            .Name(nameof(Latitude))
            .Title("latitude")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latitude;
        public int Latitude { get => _latitude; set => _latitude = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LongitudeField = new Field.Builder()
            .Name(nameof(Longitude))
            .Title("longitude")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _longitude;
        public int Longitude { get => _longitude; set => _longitude = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeField = new Field.Builder()
            .Name(nameof(Altitude))
            .Title("altitude")
            .Description("Altitude (MSL). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altitude;
        public int Altitude { get => _altitude; set => _altitude = value; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
    }
    /// <summary>
    /// Bind a RC channel to a parameter. The parameter should change according to the RC channel value.
    ///  PARAM_MAP_RC
    /// </summary>
    public class ParamMapRcPacket : MavlinkV2Message<ParamMapRcPayload>
    {
        public const int MessageId = 50;
        
        public const byte CrcExtra = 78;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamMapRcPayload Payload { get; } = new();

        public override string Name => "PARAM_MAP_RC";
    }

    /// <summary>
    ///  PARAM_MAP_RC
    /// </summary>
    public class ParamMapRcPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float param_value0
            +4 // float scale
            +4 // float param_value_min
            +4 // float param_value_max
            +2 // int16_t param_index
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +ParamId.Length // char[16] param_id
            +1 // uint8_t parameter_rc_channel_index
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamValue0 = BinSerialize.ReadFloat(ref buffer);
            Scale = BinSerialize.ReadFloat(ref buffer);
            ParamValueMin = BinSerialize.ReadFloat(ref buffer);
            ParamValueMax = BinSerialize.ReadFloat(ref buffer);
            ParamIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/37 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            ParameterRcChannelIndex = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,ParamValue0);
            BinSerialize.WriteFloat(ref buffer,Scale);
            BinSerialize.WriteFloat(ref buffer,ParamValueMin);
            BinSerialize.WriteFloat(ref buffer,ParamValueMax);
            BinSerialize.WriteShort(ref buffer,ParamIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParameterRcChannelIndex);
            /* PayloadByteSize = 37 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,ParamValue0Field, ref _paramValue0);    
            FloatType.Accept(visitor,ScaleField, ref _scale);    
            FloatType.Accept(visitor,ParamValueMinField, ref _paramValueMin);    
            FloatType.Accept(visitor,ParamValueMaxField, ref _paramValueMax);    
            Int16Type.Accept(visitor,ParamIndexField, ref _paramIndex);
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));
            UInt8Type.Accept(visitor,ParameterRcChannelIndexField, ref _parameterRcChannelIndex);    

        }

        /// <summary>
        /// Initial parameter value
        /// OriginName: param_value0, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValue0Field = new Field.Builder()
            .Name(nameof(ParamValue0))
            .Title("param_value0")
            .Description("Initial parameter value")

            .DataType(FloatType.Default)
        .Build();
        private float _paramValue0;
        public float ParamValue0 { get => _paramValue0; set => _paramValue0 = value; }
        /// <summary>
        /// Scale, maps the RC range [-1, 1] to a parameter value
        /// OriginName: scale, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ScaleField = new Field.Builder()
            .Name(nameof(Scale))
            .Title("scale")
            .Description("Scale, maps the RC range [-1, 1] to a parameter value")

            .DataType(FloatType.Default)
        .Build();
        private float _scale;
        public float Scale { get => _scale; set => _scale = value; }
        /// <summary>
        /// Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)
        /// OriginName: param_value_min, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValueMinField = new Field.Builder()
            .Name(nameof(ParamValueMin))
            .Title("param_value_min")
            .Description("Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)")

            .DataType(FloatType.Default)
        .Build();
        private float _paramValueMin;
        public float ParamValueMin { get => _paramValueMin; set => _paramValueMin = value; }
        /// <summary>
        /// Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)
        /// OriginName: param_value_max, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValueMaxField = new Field.Builder()
            .Name(nameof(ParamValueMax))
            .Title("param_value_max")
            .Description("Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)")

            .DataType(FloatType.Default)
        .Build();
        private float _paramValueMax;
        public float ParamValueMax { get => _paramValueMax; set => _paramValueMax = value; }
        /// <summary>
        /// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIndexField = new Field.Builder()
            .Name(nameof(ParamIndex))
            .Title("param_index")
            .Description("Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.")

            .DataType(Int16Type.Default)
        .Build();
        private short _paramIndex;
        public short ParamIndex { get => _paramIndex; set => _paramIndex = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
        /// <summary>
        /// Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC.
        /// OriginName: parameter_rc_channel_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParameterRcChannelIndexField = new Field.Builder()
            .Name(nameof(ParameterRcChannelIndex))
            .Title("parameter_rc_channel_index")
            .Description("Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _parameterRcChannelIndex;
        public byte ParameterRcChannelIndex { get => _parameterRcChannelIndex; set => _parameterRcChannelIndex = value; }
    }
    /// <summary>
    /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html
    ///  MISSION_REQUEST_INT
    /// </summary>
    public class MissionRequestIntPacket : MavlinkV2Message<MissionRequestIntPayload>
    {
        public const int MessageId = 51;
        
        public const byte CrcExtra = 196;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionRequestIntPayload Payload { get; } = new();

        public override string Name => "MISSION_REQUEST_INT";
    }

    /// <summary>
    ///  MISSION_REQUEST_INT
    /// </summary>
    public class MissionRequestIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t seq
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 5 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SeqField, ref _seq);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Sequence")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seq;
        public ushort Seq { get => _seq; set => _seq = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.
    ///  SAFETY_SET_ALLOWED_AREA
    /// </summary>
    public class SafetySetAllowedAreaPacket : MavlinkV2Message<SafetySetAllowedAreaPayload>
    {
        public const int MessageId = 54;
        
        public const byte CrcExtra = 15;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SafetySetAllowedAreaPayload Payload { get; } = new();

        public override string Name => "SAFETY_SET_ALLOWED_AREA";
    }

    /// <summary>
    ///  SAFETY_SET_ALLOWED_AREA
    /// </summary>
    public class SafetySetAllowedAreaPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 27; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 27; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float p1x
            +4 // float p1y
            +4 // float p1z
            +4 // float p2x
            +4 // float p2y
            +4 // float p2z
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            P1x = BinSerialize.ReadFloat(ref buffer);
            P1y = BinSerialize.ReadFloat(ref buffer);
            P1z = BinSerialize.ReadFloat(ref buffer);
            P2x = BinSerialize.ReadFloat(ref buffer);
            P2y = BinSerialize.ReadFloat(ref buffer);
            P2z = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,P1x);
            BinSerialize.WriteFloat(ref buffer,P1y);
            BinSerialize.WriteFloat(ref buffer,P1z);
            BinSerialize.WriteFloat(ref buffer,P2x);
            BinSerialize.WriteFloat(ref buffer,P2y);
            BinSerialize.WriteFloat(ref buffer,P2z);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 27 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,P1xField, ref _p1x);    
            FloatType.Accept(visitor,P1yField, ref _p1y);    
            FloatType.Accept(visitor,P1zField, ref _p1z);    
            FloatType.Accept(visitor,P2xField, ref _p2x);    
            FloatType.Accept(visitor,P2yField, ref _p2y);    
            FloatType.Accept(visitor,P2zField, ref _p2z);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;

        }

        /// <summary>
        /// x position 1 / Latitude 1
        /// OriginName: p1x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P1xField = new Field.Builder()
            .Name(nameof(P1x))
            .Title("p1x")
            .Description("x position 1 / Latitude 1")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p1x;
        public float P1x { get => _p1x; set => _p1x = value; }
        /// <summary>
        /// y position 1 / Longitude 1
        /// OriginName: p1y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P1yField = new Field.Builder()
            .Name(nameof(P1y))
            .Title("p1y")
            .Description("y position 1 / Longitude 1")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p1y;
        public float P1y { get => _p1y; set => _p1y = value; }
        /// <summary>
        /// z position 1 / Altitude 1
        /// OriginName: p1z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P1zField = new Field.Builder()
            .Name(nameof(P1z))
            .Title("p1z")
            .Description("z position 1 / Altitude 1")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p1z;
        public float P1z { get => _p1z; set => _p1z = value; }
        /// <summary>
        /// x position 2 / Latitude 2
        /// OriginName: p2x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P2xField = new Field.Builder()
            .Name(nameof(P2x))
            .Title("p2x")
            .Description("x position 2 / Latitude 2")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p2x;
        public float P2x { get => _p2x; set => _p2x = value; }
        /// <summary>
        /// y position 2 / Longitude 2
        /// OriginName: p2y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P2yField = new Field.Builder()
            .Name(nameof(P2y))
            .Title("p2y")
            .Description("y position 2 / Longitude 2")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p2y;
        public float P2y { get => _p2y; set => _p2y = value; }
        /// <summary>
        /// z position 2 / Altitude 2
        /// OriginName: p2z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P2zField = new Field.Builder()
            .Name(nameof(P2z))
            .Title("p2z")
            .Description("z position 2 / Altitude 2")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p2z;
        public float P2z { get => _p2z; set => _p2z = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
    }
    /// <summary>
    /// Read out the safety zone the MAV currently assumes.
    ///  SAFETY_ALLOWED_AREA
    /// </summary>
    public class SafetyAllowedAreaPacket : MavlinkV2Message<SafetyAllowedAreaPayload>
    {
        public const int MessageId = 55;
        
        public const byte CrcExtra = 3;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SafetyAllowedAreaPayload Payload { get; } = new();

        public override string Name => "SAFETY_ALLOWED_AREA";
    }

    /// <summary>
    ///  SAFETY_ALLOWED_AREA
    /// </summary>
    public class SafetyAllowedAreaPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 25; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 25; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float p1x
            +4 // float p1y
            +4 // float p1z
            +4 // float p2x
            +4 // float p2y
            +4 // float p2z
            + 1 // uint8_t frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            P1x = BinSerialize.ReadFloat(ref buffer);
            P1y = BinSerialize.ReadFloat(ref buffer);
            P1z = BinSerialize.ReadFloat(ref buffer);
            P2x = BinSerialize.ReadFloat(ref buffer);
            P2y = BinSerialize.ReadFloat(ref buffer);
            P2z = BinSerialize.ReadFloat(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,P1x);
            BinSerialize.WriteFloat(ref buffer,P1y);
            BinSerialize.WriteFloat(ref buffer,P1z);
            BinSerialize.WriteFloat(ref buffer,P2x);
            BinSerialize.WriteFloat(ref buffer,P2y);
            BinSerialize.WriteFloat(ref buffer,P2z);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 25 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,P1xField, ref _p1x);    
            FloatType.Accept(visitor,P1yField, ref _p1y);    
            FloatType.Accept(visitor,P1zField, ref _p1z);    
            FloatType.Accept(visitor,P2xField, ref _p2x);    
            FloatType.Accept(visitor,P2yField, ref _p2y);    
            FloatType.Accept(visitor,P2zField, ref _p2z);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;

        }

        /// <summary>
        /// x position 1 / Latitude 1
        /// OriginName: p1x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P1xField = new Field.Builder()
            .Name(nameof(P1x))
            .Title("p1x")
            .Description("x position 1 / Latitude 1")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p1x;
        public float P1x { get => _p1x; set => _p1x = value; }
        /// <summary>
        /// y position 1 / Longitude 1
        /// OriginName: p1y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P1yField = new Field.Builder()
            .Name(nameof(P1y))
            .Title("p1y")
            .Description("y position 1 / Longitude 1")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p1y;
        public float P1y { get => _p1y; set => _p1y = value; }
        /// <summary>
        /// z position 1 / Altitude 1
        /// OriginName: p1z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P1zField = new Field.Builder()
            .Name(nameof(P1z))
            .Title("p1z")
            .Description("z position 1 / Altitude 1")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p1z;
        public float P1z { get => _p1z; set => _p1z = value; }
        /// <summary>
        /// x position 2 / Latitude 2
        /// OriginName: p2x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P2xField = new Field.Builder()
            .Name(nameof(P2x))
            .Title("p2x")
            .Description("x position 2 / Latitude 2")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p2x;
        public float P2x { get => _p2x; set => _p2x = value; }
        /// <summary>
        /// y position 2 / Longitude 2
        /// OriginName: p2y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P2yField = new Field.Builder()
            .Name(nameof(P2y))
            .Title("p2y")
            .Description("y position 2 / Longitude 2")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p2y;
        public float P2y { get => _p2y; set => _p2y = value; }
        /// <summary>
        /// z position 2 / Altitude 2
        /// OriginName: p2z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field P2zField = new Field.Builder()
            .Name(nameof(P2z))
            .Title("p2z")
            .Description("z position 2 / Altitude 2")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _p2z;
        public float P2z { get => _p2z; set => _p2z = value; }
        /// <summary>
        /// Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
    }
    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    ///  ATTITUDE_QUATERNION_COV
    /// </summary>
    public class AttitudeQuaternionCovPacket : MavlinkV2Message<AttitudeQuaternionCovPayload>
    {
        public const int MessageId = 61;
        
        public const byte CrcExtra = 167;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AttitudeQuaternionCovPayload Payload { get; } = new();

        public override string Name => "ATTITUDE_QUATERNION_COV";
    }

    /// <summary>
    ///  ATTITUDE_QUATERNION_COV
    /// </summary>
    public class AttitudeQuaternionCovPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 72; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 72; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +Q.Length * 4 // float[4] q
            +4 // float rollspeed
            +4 // float pitchspeed
            +4 // float yawspeed
            +Covariance.Length * 4 // float[9] covariance
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/9 - Math.Max(0,((/*PayloadByteSize*/72 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            /* PayloadByteSize = 72 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,RollspeedField, ref _rollspeed);    
            FloatType.Accept(visitor,PitchspeedField, ref _pitchspeed);    
            FloatType.Accept(visitor,YawspeedField, ref _yawspeed);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollspeedField = new Field.Builder()
            .Name(nameof(Rollspeed))
            .Title("rollspeed")
            .Description("Roll angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _rollspeed;
        public float Rollspeed { get => _rollspeed; set => _rollspeed = value; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchspeedField = new Field.Builder()
            .Name(nameof(Pitchspeed))
            .Title("pitchspeed")
            .Description("Pitch angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchspeed;
        public float Pitchspeed { get => _pitchspeed; set => _pitchspeed = value; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawspeedField = new Field.Builder()
            .Name(nameof(Yawspeed))
            .Title("yawspeed")
            .Description("Yaw angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawspeed;
        public float Yawspeed { get => _yawspeed; set => _yawspeed = value; }
        /// <summary>
        /// Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,9))        
        .Build();
        public const int CovarianceMaxItemsCount = 9;
        public float[] Covariance { get; } = new float[9];
        [Obsolete("This method is deprecated. Use GetCovarianceMaxItemsCount instead.")]
        public byte GetCovarianceMaxItemsCount() => 9;
    }
    /// <summary>
    /// The state of the navigation and position controller.
    ///  NAV_CONTROLLER_OUTPUT
    /// </summary>
    public class NavControllerOutputPacket : MavlinkV2Message<NavControllerOutputPayload>
    {
        public const int MessageId = 62;
        
        public const byte CrcExtra = 183;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override NavControllerOutputPayload Payload { get; } = new();

        public override string Name => "NAV_CONTROLLER_OUTPUT";
    }

    /// <summary>
    ///  NAV_CONTROLLER_OUTPUT
    /// </summary>
    public class NavControllerOutputPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 26; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 26; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float nav_roll
            +4 // float nav_pitch
            +4 // float alt_error
            +4 // float aspd_error
            +4 // float xtrack_error
            +2 // int16_t nav_bearing
            +2 // int16_t target_bearing
            +2 // uint16_t wp_dist
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            NavRoll = BinSerialize.ReadFloat(ref buffer);
            NavPitch = BinSerialize.ReadFloat(ref buffer);
            AltError = BinSerialize.ReadFloat(ref buffer);
            AspdError = BinSerialize.ReadFloat(ref buffer);
            XtrackError = BinSerialize.ReadFloat(ref buffer);
            NavBearing = BinSerialize.ReadShort(ref buffer);
            TargetBearing = BinSerialize.ReadShort(ref buffer);
            WpDist = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,NavRoll);
            BinSerialize.WriteFloat(ref buffer,NavPitch);
            BinSerialize.WriteFloat(ref buffer,AltError);
            BinSerialize.WriteFloat(ref buffer,AspdError);
            BinSerialize.WriteFloat(ref buffer,XtrackError);
            BinSerialize.WriteShort(ref buffer,NavBearing);
            BinSerialize.WriteShort(ref buffer,TargetBearing);
            BinSerialize.WriteUShort(ref buffer,WpDist);
            /* PayloadByteSize = 26 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,NavRollField, ref _navRoll);    
            FloatType.Accept(visitor,NavPitchField, ref _navPitch);    
            FloatType.Accept(visitor,AltErrorField, ref _altError);    
            FloatType.Accept(visitor,AspdErrorField, ref _aspdError);    
            FloatType.Accept(visitor,XtrackErrorField, ref _xtrackError);    
            Int16Type.Accept(visitor,NavBearingField, ref _navBearing);
            Int16Type.Accept(visitor,TargetBearingField, ref _targetBearing);
            UInt16Type.Accept(visitor,WpDistField, ref _wpDist);    

        }

        /// <summary>
        /// Current desired roll
        /// OriginName: nav_roll, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field NavRollField = new Field.Builder()
            .Name(nameof(NavRoll))
            .Title("nav_roll")
            .Description("Current desired roll")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _navRoll;
        public float NavRoll { get => _navRoll; set => _navRoll = value; }
        /// <summary>
        /// Current desired pitch
        /// OriginName: nav_pitch, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field NavPitchField = new Field.Builder()
            .Name(nameof(NavPitch))
            .Title("nav_pitch")
            .Description("Current desired pitch")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _navPitch;
        public float NavPitch { get => _navPitch; set => _navPitch = value; }
        /// <summary>
        /// Current altitude error
        /// OriginName: alt_error, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltErrorField = new Field.Builder()
            .Name(nameof(AltError))
            .Title("alt_error")
            .Description("Current altitude error")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altError;
        public float AltError { get => _altError; set => _altError = value; }
        /// <summary>
        /// Current airspeed error
        /// OriginName: aspd_error, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field AspdErrorField = new Field.Builder()
            .Name(nameof(AspdError))
            .Title("aspd_error")
            .Description("Current airspeed error")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _aspdError;
        public float AspdError { get => _aspdError; set => _aspdError = value; }
        /// <summary>
        /// Current crosstrack error on x-y plane
        /// OriginName: xtrack_error, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XtrackErrorField = new Field.Builder()
            .Name(nameof(XtrackError))
            .Title("xtrack_error")
            .Description("Current crosstrack error on x-y plane")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _xtrackError;
        public float XtrackError { get => _xtrackError; set => _xtrackError = value; }
        /// <summary>
        /// Current desired heading
        /// OriginName: nav_bearing, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field NavBearingField = new Field.Builder()
            .Name(nameof(NavBearing))
            .Title("nav_bearing")
            .Description("Current desired heading")
.Units(@"deg")
            .DataType(Int16Type.Default)
        .Build();
        private short _navBearing;
        public short NavBearing { get => _navBearing; set => _navBearing = value; }
        /// <summary>
        /// Bearing to current waypoint/target
        /// OriginName: target_bearing, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field TargetBearingField = new Field.Builder()
            .Name(nameof(TargetBearing))
            .Title("target_bearing")
            .Description("Bearing to current waypoint/target")
.Units(@"deg")
            .DataType(Int16Type.Default)
        .Build();
        private short _targetBearing;
        public short TargetBearing { get => _targetBearing; set => _targetBearing = value; }
        /// <summary>
        /// Distance to active waypoint
        /// OriginName: wp_dist, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field WpDistField = new Field.Builder()
            .Name(nameof(WpDist))
            .Title("wp_dist")
            .Description("Distance to active waypoint")
.Units(@"m")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _wpDist;
        public ushort WpDist { get => _wpDist; set => _wpDist = value; }
    }
    /// <summary>
    /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.
    ///  GLOBAL_POSITION_INT_COV
    /// </summary>
    public class GlobalPositionIntCovPacket : MavlinkV2Message<GlobalPositionIntCovPayload>
    {
        public const int MessageId = 63;
        
        public const byte CrcExtra = 119;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GlobalPositionIntCovPayload Payload { get; } = new();

        public override string Name => "GLOBAL_POSITION_INT_COV";
    }

    /// <summary>
    ///  GLOBAL_POSITION_INT_COV
    /// </summary>
    public class GlobalPositionIntCovPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 181; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 181; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +4 // int32_t relative_alt
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +Covariance.Length * 4 // float[36] covariance
            + 1 // uint8_t estimator_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/36 - Math.Max(0,((/*PayloadByteSize*/181 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            EstimatorType = (MavEstimatorType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)EstimatorType);
            /* PayloadByteSize = 181 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            Int32Type.Accept(visitor,RelativeAltField, ref _relativeAlt);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));
            var tmpEstimatorType = (byte)EstimatorType;
            UInt8Type.Accept(visitor,EstimatorTypeField, ref tmpEstimatorType);
            EstimatorType = (MavEstimatorType)tmpEstimatorType;

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude in meters above MSL
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude in meters above MSL")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field RelativeAltField = new Field.Builder()
            .Name(nameof(RelativeAlt))
            .Title("relative_alt")
            .Description("Altitude above ground")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _relativeAlt;
        public int RelativeAlt { get => _relativeAlt; set => _relativeAlt = value; }
        /// <summary>
        /// Ground X Speed (Latitude)
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("Ground X Speed (Latitude)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Ground Y Speed (Longitude)
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Ground Y Speed (Longitude)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Ground Z Speed (Altitude)
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Ground Z Speed (Altitude)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,36))        
        .Build();
        public const int CovarianceMaxItemsCount = 36;
        public float[] Covariance { get; } = new float[36];
        [Obsolete("This method is deprecated. Use GetCovarianceMaxItemsCount instead.")]
        public byte GetCovarianceMaxItemsCount() => 36;
        /// <summary>
        /// Class id of the estimator this estimate originated from.
        /// OriginName: estimator_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EstimatorTypeField = new Field.Builder()
            .Name(nameof(EstimatorType))
            .Title("estimator_type")
            .Description("Class id of the estimator this estimate originated from.")
            .DataType(new UInt8Type(MavEstimatorTypeHelper.GetValues(x=>(byte)x).Min(),MavEstimatorTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavEstimatorTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavEstimatorType _estimatorType;
        public MavEstimatorType EstimatorType { get => _estimatorType; set => _estimatorType = value; } 
    }
    /// <summary>
    /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    ///  LOCAL_POSITION_NED_COV
    /// </summary>
    public class LocalPositionNedCovPacket : MavlinkV2Message<LocalPositionNedCovPayload>
    {
        public const int MessageId = 64;
        
        public const byte CrcExtra = 191;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LocalPositionNedCovPayload Payload { get; } = new();

        public override string Name => "LOCAL_POSITION_NED_COV";
    }

    /// <summary>
    ///  LOCAL_POSITION_NED_COV
    /// </summary>
    public class LocalPositionNedCovPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 225; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 225; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +4 // float ax
            +4 // float ay
            +4 // float az
            +Covariance.Length * 4 // float[45] covariance
            + 1 // uint8_t estimator_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Ax = BinSerialize.ReadFloat(ref buffer);
            Ay = BinSerialize.ReadFloat(ref buffer);
            Az = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/45 - Math.Max(0,((/*PayloadByteSize*/225 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            EstimatorType = (MavEstimatorType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Ax);
            BinSerialize.WriteFloat(ref buffer,Ay);
            BinSerialize.WriteFloat(ref buffer,Az);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)EstimatorType);
            /* PayloadByteSize = 225 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            FloatType.Accept(visitor,AxField, ref _ax);    
            FloatType.Accept(visitor,AyField, ref _ay);    
            FloatType.Accept(visitor,AzField, ref _az);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));
            var tmpEstimatorType = (byte)EstimatorType;
            UInt8Type.Accept(visitor,EstimatorTypeField, ref tmpEstimatorType);
            EstimatorType = (MavEstimatorType)tmpEstimatorType;

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// X Speed
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X Speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y Speed
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y Speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z Speed
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z Speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// X Acceleration
        /// OriginName: ax, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AxField = new Field.Builder()
            .Name(nameof(Ax))
            .Title("ax")
            .Description("X Acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _ax;
        public float Ax { get => _ax; set => _ax = value; }
        /// <summary>
        /// Y Acceleration
        /// OriginName: ay, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AyField = new Field.Builder()
            .Name(nameof(Ay))
            .Title("ay")
            .Description("Y Acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _ay;
        public float Ay { get => _ay; set => _ay = value; }
        /// <summary>
        /// Z Acceleration
        /// OriginName: az, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AzField = new Field.Builder()
            .Name(nameof(Az))
            .Title("az")
            .Description("Z Acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _az;
        public float Az { get => _az; set => _az = value; }
        /// <summary>
        /// Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,45))        
        .Build();
        public const int CovarianceMaxItemsCount = 45;
        public float[] Covariance { get; } = new float[45];
        [Obsolete("This method is deprecated. Use GetCovarianceMaxItemsCount instead.")]
        public byte GetCovarianceMaxItemsCount() => 45;
        /// <summary>
        /// Class id of the estimator this estimate originated from.
        /// OriginName: estimator_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EstimatorTypeField = new Field.Builder()
            .Name(nameof(EstimatorType))
            .Title("estimator_type")
            .Description("Class id of the estimator this estimate originated from.")
            .DataType(new UInt8Type(MavEstimatorTypeHelper.GetValues(x=>(byte)x).Min(),MavEstimatorTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavEstimatorTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavEstimatorType _estimatorType;
        public MavEstimatorType EstimatorType { get => _estimatorType; set => _estimatorType = value; } 
    }
    /// <summary>
    /// The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.  A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    ///  RC_CHANNELS
    /// </summary>
    public class RcChannelsPacket : MavlinkV2Message<RcChannelsPayload>
    {
        public const int MessageId = 65;
        
        public const byte CrcExtra = 118;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RcChannelsPayload Payload { get; } = new();

        public override string Name => "RC_CHANNELS";
    }

    /// <summary>
    ///  RC_CHANNELS
    /// </summary>
    public class RcChannelsPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +2 // uint16_t chan1_raw
            +2 // uint16_t chan2_raw
            +2 // uint16_t chan3_raw
            +2 // uint16_t chan4_raw
            +2 // uint16_t chan5_raw
            +2 // uint16_t chan6_raw
            +2 // uint16_t chan7_raw
            +2 // uint16_t chan8_raw
            +2 // uint16_t chan9_raw
            +2 // uint16_t chan10_raw
            +2 // uint16_t chan11_raw
            +2 // uint16_t chan12_raw
            +2 // uint16_t chan13_raw
            +2 // uint16_t chan14_raw
            +2 // uint16_t chan15_raw
            +2 // uint16_t chan16_raw
            +2 // uint16_t chan17_raw
            +2 // uint16_t chan18_raw
            +1 // uint8_t chancount
            +1 // uint8_t rssi
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            Chan9Raw = BinSerialize.ReadUShort(ref buffer);
            Chan10Raw = BinSerialize.ReadUShort(ref buffer);
            Chan11Raw = BinSerialize.ReadUShort(ref buffer);
            Chan12Raw = BinSerialize.ReadUShort(ref buffer);
            Chan13Raw = BinSerialize.ReadUShort(ref buffer);
            Chan14Raw = BinSerialize.ReadUShort(ref buffer);
            Chan15Raw = BinSerialize.ReadUShort(ref buffer);
            Chan16Raw = BinSerialize.ReadUShort(ref buffer);
            Chan17Raw = BinSerialize.ReadUShort(ref buffer);
            Chan18Raw = BinSerialize.ReadUShort(ref buffer);
            Chancount = (byte)BinSerialize.ReadByte(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteUShort(ref buffer,Chan9Raw);
            BinSerialize.WriteUShort(ref buffer,Chan10Raw);
            BinSerialize.WriteUShort(ref buffer,Chan11Raw);
            BinSerialize.WriteUShort(ref buffer,Chan12Raw);
            BinSerialize.WriteUShort(ref buffer,Chan13Raw);
            BinSerialize.WriteUShort(ref buffer,Chan14Raw);
            BinSerialize.WriteUShort(ref buffer,Chan15Raw);
            BinSerialize.WriteUShort(ref buffer,Chan16Raw);
            BinSerialize.WriteUShort(ref buffer,Chan17Raw);
            BinSerialize.WriteUShort(ref buffer,Chan18Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Chancount);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 42 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt16Type.Accept(visitor,Chan1RawField, ref _chan1Raw);    
            UInt16Type.Accept(visitor,Chan2RawField, ref _chan2Raw);    
            UInt16Type.Accept(visitor,Chan3RawField, ref _chan3Raw);    
            UInt16Type.Accept(visitor,Chan4RawField, ref _chan4Raw);    
            UInt16Type.Accept(visitor,Chan5RawField, ref _chan5Raw);    
            UInt16Type.Accept(visitor,Chan6RawField, ref _chan6Raw);    
            UInt16Type.Accept(visitor,Chan7RawField, ref _chan7Raw);    
            UInt16Type.Accept(visitor,Chan8RawField, ref _chan8Raw);    
            UInt16Type.Accept(visitor,Chan9RawField, ref _chan9Raw);    
            UInt16Type.Accept(visitor,Chan10RawField, ref _chan10Raw);    
            UInt16Type.Accept(visitor,Chan11RawField, ref _chan11Raw);    
            UInt16Type.Accept(visitor,Chan12RawField, ref _chan12Raw);    
            UInt16Type.Accept(visitor,Chan13RawField, ref _chan13Raw);    
            UInt16Type.Accept(visitor,Chan14RawField, ref _chan14Raw);    
            UInt16Type.Accept(visitor,Chan15RawField, ref _chan15Raw);    
            UInt16Type.Accept(visitor,Chan16RawField, ref _chan16Raw);    
            UInt16Type.Accept(visitor,Chan17RawField, ref _chan17Raw);    
            UInt16Type.Accept(visitor,Chan18RawField, ref _chan18Raw);    
            UInt8Type.Accept(visitor,ChancountField, ref _chancount);    
            UInt8Type.Accept(visitor,RssiField, ref _rssi);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// RC channel 1 value.
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan1RawField = new Field.Builder()
            .Name(nameof(Chan1Raw))
            .Title("chan1_raw")
            .Description("RC channel 1 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan1Raw;
        public ushort Chan1Raw { get => _chan1Raw; set => _chan1Raw = value; }
        /// <summary>
        /// RC channel 2 value.
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan2RawField = new Field.Builder()
            .Name(nameof(Chan2Raw))
            .Title("chan2_raw")
            .Description("RC channel 2 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan2Raw;
        public ushort Chan2Raw { get => _chan2Raw; set => _chan2Raw = value; }
        /// <summary>
        /// RC channel 3 value.
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan3RawField = new Field.Builder()
            .Name(nameof(Chan3Raw))
            .Title("chan3_raw")
            .Description("RC channel 3 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan3Raw;
        public ushort Chan3Raw { get => _chan3Raw; set => _chan3Raw = value; }
        /// <summary>
        /// RC channel 4 value.
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan4RawField = new Field.Builder()
            .Name(nameof(Chan4Raw))
            .Title("chan4_raw")
            .Description("RC channel 4 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan4Raw;
        public ushort Chan4Raw { get => _chan4Raw; set => _chan4Raw = value; }
        /// <summary>
        /// RC channel 5 value.
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan5RawField = new Field.Builder()
            .Name(nameof(Chan5Raw))
            .Title("chan5_raw")
            .Description("RC channel 5 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan5Raw;
        public ushort Chan5Raw { get => _chan5Raw; set => _chan5Raw = value; }
        /// <summary>
        /// RC channel 6 value.
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan6RawField = new Field.Builder()
            .Name(nameof(Chan6Raw))
            .Title("chan6_raw")
            .Description("RC channel 6 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan6Raw;
        public ushort Chan6Raw { get => _chan6Raw; set => _chan6Raw = value; }
        /// <summary>
        /// RC channel 7 value.
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan7RawField = new Field.Builder()
            .Name(nameof(Chan7Raw))
            .Title("chan7_raw")
            .Description("RC channel 7 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan7Raw;
        public ushort Chan7Raw { get => _chan7Raw; set => _chan7Raw = value; }
        /// <summary>
        /// RC channel 8 value.
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan8RawField = new Field.Builder()
            .Name(nameof(Chan8Raw))
            .Title("chan8_raw")
            .Description("RC channel 8 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan8Raw;
        public ushort Chan8Raw { get => _chan8Raw; set => _chan8Raw = value; }
        /// <summary>
        /// RC channel 9 value.
        /// OriginName: chan9_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan9RawField = new Field.Builder()
            .Name(nameof(Chan9Raw))
            .Title("chan9_raw")
            .Description("RC channel 9 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan9Raw;
        public ushort Chan9Raw { get => _chan9Raw; set => _chan9Raw = value; }
        /// <summary>
        /// RC channel 10 value.
        /// OriginName: chan10_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan10RawField = new Field.Builder()
            .Name(nameof(Chan10Raw))
            .Title("chan10_raw")
            .Description("RC channel 10 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan10Raw;
        public ushort Chan10Raw { get => _chan10Raw; set => _chan10Raw = value; }
        /// <summary>
        /// RC channel 11 value.
        /// OriginName: chan11_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan11RawField = new Field.Builder()
            .Name(nameof(Chan11Raw))
            .Title("chan11_raw")
            .Description("RC channel 11 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan11Raw;
        public ushort Chan11Raw { get => _chan11Raw; set => _chan11Raw = value; }
        /// <summary>
        /// RC channel 12 value.
        /// OriginName: chan12_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan12RawField = new Field.Builder()
            .Name(nameof(Chan12Raw))
            .Title("chan12_raw")
            .Description("RC channel 12 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan12Raw;
        public ushort Chan12Raw { get => _chan12Raw; set => _chan12Raw = value; }
        /// <summary>
        /// RC channel 13 value.
        /// OriginName: chan13_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan13RawField = new Field.Builder()
            .Name(nameof(Chan13Raw))
            .Title("chan13_raw")
            .Description("RC channel 13 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan13Raw;
        public ushort Chan13Raw { get => _chan13Raw; set => _chan13Raw = value; }
        /// <summary>
        /// RC channel 14 value.
        /// OriginName: chan14_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan14RawField = new Field.Builder()
            .Name(nameof(Chan14Raw))
            .Title("chan14_raw")
            .Description("RC channel 14 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan14Raw;
        public ushort Chan14Raw { get => _chan14Raw; set => _chan14Raw = value; }
        /// <summary>
        /// RC channel 15 value.
        /// OriginName: chan15_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan15RawField = new Field.Builder()
            .Name(nameof(Chan15Raw))
            .Title("chan15_raw")
            .Description("RC channel 15 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan15Raw;
        public ushort Chan15Raw { get => _chan15Raw; set => _chan15Raw = value; }
        /// <summary>
        /// RC channel 16 value.
        /// OriginName: chan16_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan16RawField = new Field.Builder()
            .Name(nameof(Chan16Raw))
            .Title("chan16_raw")
            .Description("RC channel 16 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan16Raw;
        public ushort Chan16Raw { get => _chan16Raw; set => _chan16Raw = value; }
        /// <summary>
        /// RC channel 17 value.
        /// OriginName: chan17_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan17RawField = new Field.Builder()
            .Name(nameof(Chan17Raw))
            .Title("chan17_raw")
            .Description("RC channel 17 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan17Raw;
        public ushort Chan17Raw { get => _chan17Raw; set => _chan17Raw = value; }
        /// <summary>
        /// RC channel 18 value.
        /// OriginName: chan18_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan18RawField = new Field.Builder()
            .Name(nameof(Chan18Raw))
            .Title("chan18_raw")
            .Description("RC channel 18 value.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan18Raw;
        public ushort Chan18Raw { get => _chan18Raw; set => _chan18Raw = value; }
        /// <summary>
        /// Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.
        /// OriginName: chancount, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ChancountField = new Field.Builder()
            .Name(nameof(Chancount))
            .Title("chancount")
            .Description("Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _chancount;
        public byte Chancount { get => _chancount; set => _chancount = value; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RssiField = new Field.Builder()
            .Name(nameof(Rssi))
            .Title("rssi")
            .Description("Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rssi;
        public byte Rssi { get => _rssi; set => _rssi = value; }
    }
    /// <summary>
    /// Request a data stream.
    ///  REQUEST_DATA_STREAM
    /// </summary>
    public class RequestDataStreamPacket : MavlinkV2Message<RequestDataStreamPayload>
    {
        public const int MessageId = 66;
        
        public const byte CrcExtra = 148;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RequestDataStreamPayload Payload { get; } = new();

        public override string Name => "REQUEST_DATA_STREAM";
    }

    /// <summary>
    ///  REQUEST_DATA_STREAM
    /// </summary>
    public class RequestDataStreamPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t req_message_rate
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t req_stream_id
            +1 // uint8_t start_stop
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            ReqMessageRate = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            ReqStreamId = (byte)BinSerialize.ReadByte(ref buffer);
            StartStop = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,ReqMessageRate);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)ReqStreamId);
            BinSerialize.WriteByte(ref buffer,(byte)StartStop);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,ReqMessageRateField, ref _reqMessageRate);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,ReqStreamIdField, ref _reqStreamId);    
            UInt8Type.Accept(visitor,StartStopField, ref _startStop);    

        }

        /// <summary>
        /// The requested message rate
        /// OriginName: req_message_rate, Units: Hz, IsExtended: false
        /// </summary>
        public static readonly Field ReqMessageRateField = new Field.Builder()
            .Name(nameof(ReqMessageRate))
            .Title("req_message_rate")
            .Description("The requested message rate")
.Units(@"Hz")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _reqMessageRate;
        public ushort ReqMessageRate { get => _reqMessageRate; set => _reqMessageRate = value; }
        /// <summary>
        /// The target requested to send the message stream.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("The target requested to send the message stream.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// The target requested to send the message stream.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("The target requested to send the message stream.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// The ID of the requested data stream
        /// OriginName: req_stream_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ReqStreamIdField = new Field.Builder()
            .Name(nameof(ReqStreamId))
            .Title("req_stream_id")
            .Description("The ID of the requested data stream")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _reqStreamId;
        public byte ReqStreamId { get => _reqStreamId; set => _reqStreamId = value; }
        /// <summary>
        /// 1 to start sending, 0 to stop sending.
        /// OriginName: start_stop, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StartStopField = new Field.Builder()
            .Name(nameof(StartStop))
            .Title("start_stop")
            .Description("1 to start sending, 0 to stop sending.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _startStop;
        public byte StartStop { get => _startStop; set => _startStop = value; }
    }
    /// <summary>
    /// Data stream status information.
    ///  DATA_STREAM
    /// </summary>
    public class DataStreamPacket : MavlinkV2Message<DataStreamPayload>
    {
        public const int MessageId = 67;
        
        public const byte CrcExtra = 21;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override DataStreamPayload Payload { get; } = new();

        public override string Name => "DATA_STREAM";
    }

    /// <summary>
    ///  DATA_STREAM
    /// </summary>
    public class DataStreamPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t message_rate
            +1 // uint8_t stream_id
            +1 // uint8_t on_off
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            MessageRate = BinSerialize.ReadUShort(ref buffer);
            StreamId = (byte)BinSerialize.ReadByte(ref buffer);
            OnOff = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,MessageRate);
            BinSerialize.WriteByte(ref buffer,(byte)StreamId);
            BinSerialize.WriteByte(ref buffer,(byte)OnOff);
            /* PayloadByteSize = 4 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,MessageRateField, ref _messageRate);    
            UInt8Type.Accept(visitor,StreamIdField, ref _streamId);    
            UInt8Type.Accept(visitor,OnOffField, ref _onOff);    

        }

        /// <summary>
        /// The message rate
        /// OriginName: message_rate, Units: Hz, IsExtended: false
        /// </summary>
        public static readonly Field MessageRateField = new Field.Builder()
            .Name(nameof(MessageRate))
            .Title("message_rate")
            .Description("The message rate")
.Units(@"Hz")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _messageRate;
        public ushort MessageRate { get => _messageRate; set => _messageRate = value; }
        /// <summary>
        /// The ID of the requested data stream
        /// OriginName: stream_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StreamIdField = new Field.Builder()
            .Name(nameof(StreamId))
            .Title("stream_id")
            .Description("The ID of the requested data stream")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _streamId;
        public byte StreamId { get => _streamId; set => _streamId = value; }
        /// <summary>
        /// 1 stream is enabled, 0 stream is stopped.
        /// OriginName: on_off, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OnOffField = new Field.Builder()
            .Name(nameof(OnOff))
            .Title("on_off")
            .Description("1 stream is enabled, 0 stream is stopped.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _onOff;
        public byte OnOff { get => _onOff; set => _onOff = value; }
    }
    /// <summary>
    /// This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled and buttons states are transmitted as individual on/off bits of a bitmask
    ///  MANUAL_CONTROL
    /// </summary>
    public class ManualControlPacket : MavlinkV2Message<ManualControlPayload>
    {
        public const int MessageId = 69;
        
        public const byte CrcExtra = 243;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ManualControlPayload Payload { get; } = new();

        public override string Name => "MANUAL_CONTROL";
    }

    /// <summary>
    ///  MANUAL_CONTROL
    /// </summary>
    public class ManualControlPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 30; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 30; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // int16_t x
            +2 // int16_t y
            +2 // int16_t z
            +2 // int16_t r
            +2 // uint16_t buttons
            +1 // uint8_t target
            +2 // uint16_t buttons2
            +1 // uint8_t enabled_extensions
            +2 // int16_t s
            +2 // int16_t t
            +2 // int16_t aux1
            +2 // int16_t aux2
            +2 // int16_t aux3
            +2 // int16_t aux4
            +2 // int16_t aux5
            +2 // int16_t aux6
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            X = BinSerialize.ReadShort(ref buffer);
            Y = BinSerialize.ReadShort(ref buffer);
            Z = BinSerialize.ReadShort(ref buffer);
            R = BinSerialize.ReadShort(ref buffer);
            Buttons = BinSerialize.ReadUShort(ref buffer);
            Target = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Buttons2' can be empty
            if (buffer.IsEmpty) return;
            Buttons2 = BinSerialize.ReadUShort(ref buffer);
            // extended field 'EnabledExtensions' can be empty
            if (buffer.IsEmpty) return;
            EnabledExtensions = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'S' can be empty
            if (buffer.IsEmpty) return;
            S = BinSerialize.ReadShort(ref buffer);
            // extended field 'T' can be empty
            if (buffer.IsEmpty) return;
            T = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux1' can be empty
            if (buffer.IsEmpty) return;
            Aux1 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux2' can be empty
            if (buffer.IsEmpty) return;
            Aux2 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux3' can be empty
            if (buffer.IsEmpty) return;
            Aux3 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux4' can be empty
            if (buffer.IsEmpty) return;
            Aux4 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux5' can be empty
            if (buffer.IsEmpty) return;
            Aux5 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux6' can be empty
            if (buffer.IsEmpty) return;
            Aux6 = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,X);
            BinSerialize.WriteShort(ref buffer,Y);
            BinSerialize.WriteShort(ref buffer,Z);
            BinSerialize.WriteShort(ref buffer,R);
            BinSerialize.WriteUShort(ref buffer,Buttons);
            BinSerialize.WriteByte(ref buffer,(byte)Target);
            BinSerialize.WriteUShort(ref buffer,Buttons2);
            BinSerialize.WriteByte(ref buffer,(byte)EnabledExtensions);
            BinSerialize.WriteShort(ref buffer,S);
            BinSerialize.WriteShort(ref buffer,T);
            BinSerialize.WriteShort(ref buffer,Aux1);
            BinSerialize.WriteShort(ref buffer,Aux2);
            BinSerialize.WriteShort(ref buffer,Aux3);
            BinSerialize.WriteShort(ref buffer,Aux4);
            BinSerialize.WriteShort(ref buffer,Aux5);
            BinSerialize.WriteShort(ref buffer,Aux6);
            /* PayloadByteSize = 30 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int16Type.Accept(visitor,XField, ref _x);
            Int16Type.Accept(visitor,YField, ref _y);
            Int16Type.Accept(visitor,ZField, ref _z);
            Int16Type.Accept(visitor,RField, ref _r);
            UInt16Type.Accept(visitor,ButtonsField, ref _buttons);    
            UInt8Type.Accept(visitor,TargetField, ref _target);    
            UInt16Type.Accept(visitor,Buttons2Field, ref _buttons2);    
            UInt8Type.Accept(visitor,EnabledExtensionsField, ref _enabledExtensions);    
            Int16Type.Accept(visitor,SField, ref _s);
            Int16Type.Accept(visitor,TField, ref _t);
            Int16Type.Accept(visitor,Aux1Field, ref _aux1);
            Int16Type.Accept(visitor,Aux2Field, ref _aux2);
            Int16Type.Accept(visitor,Aux3Field, ref _aux3);
            Int16Type.Accept(visitor,Aux4Field, ref _aux4);
            Int16Type.Accept(visitor,Aux5Field, ref _aux5);
            Int16Type.Accept(visitor,Aux6Field, ref _aux6);

        }

        /// <summary>
        /// X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.")

            .DataType(Int16Type.Default)
        .Build();
        private short _x;
        public short X { get => _x; set => _x = value; }
        /// <summary>
        /// Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.")

            .DataType(Int16Type.Default)
        .Build();
        private short _y;
        public short Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust.
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust.")

            .DataType(Int16Type.Default)
        .Build();
        private short _z;
        public short Z { get => _z; set => _z = value; }
        /// <summary>
        /// R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.
        /// OriginName: r, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RField = new Field.Builder()
            .Name(nameof(R))
            .Title("r")
            .Description("R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.")

            .DataType(Int16Type.Default)
        .Build();
        private short _r;
        public short R { get => _r; set => _r = value; }
        /// <summary>
        /// A bitfield corresponding to the joystick buttons' 0-15 current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.
        /// OriginName: buttons, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ButtonsField = new Field.Builder()
            .Name(nameof(Buttons))
            .Title("buttons")
            .Description("A bitfield corresponding to the joystick buttons' 0-15 current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _buttons;
        public ushort Buttons { get => _buttons; set => _buttons = value; }
        /// <summary>
        /// The system to be controlled.
        /// OriginName: target, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetField = new Field.Builder()
            .Name(nameof(Target))
            .Title("target")
            .Description("The system to be controlled.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _target;
        public byte Target { get => _target; set => _target = value; }
        /// <summary>
        /// A bitfield corresponding to the joystick buttons' 16-31 current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 16.
        /// OriginName: buttons2, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Buttons2Field = new Field.Builder()
            .Name(nameof(Buttons2))
            .Title("buttons2")
            .Description("A bitfield corresponding to the joystick buttons' 16-31 current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 16.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _buttons2;
        public ushort Buttons2 { get => _buttons2; set => _buttons2 = value; }
        /// <summary>
        /// Set bits to 1 to indicate which of the following extension fields contain valid data: bit 0: pitch, bit 1: roll, bit 2: aux1, bit 3: aux2, bit 4: aux3, bit 5: aux4, bit 6: aux5, bit 7: aux6
        /// OriginName: enabled_extensions, Units: , IsExtended: true
        /// </summary>
        public static readonly Field EnabledExtensionsField = new Field.Builder()
            .Name(nameof(EnabledExtensions))
            .Title("enabled_extensions")
            .Description("Set bits to 1 to indicate which of the following extension fields contain valid data: bit 0: pitch, bit 1: roll, bit 2: aux1, bit 3: aux2, bit 4: aux3, bit 5: aux4, bit 6: aux5, bit 7: aux6")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _enabledExtensions;
        public byte EnabledExtensions { get => _enabledExtensions; set => _enabledExtensions = value; }
        /// <summary>
        /// Pitch-only-axis, normalized to the range [-1000,1000]. Generally corresponds to pitch on vehicles with additional degrees of freedom. Valid if bit 0 of enabled_extensions field is set. Set to 0 if invalid.
        /// OriginName: s, Units: , IsExtended: true
        /// </summary>
        public static readonly Field SField = new Field.Builder()
            .Name(nameof(S))
            .Title("s")
            .Description("Pitch-only-axis, normalized to the range [-1000,1000]. Generally corresponds to pitch on vehicles with additional degrees of freedom. Valid if bit 0 of enabled_extensions field is set. Set to 0 if invalid.")

            .DataType(Int16Type.Default)
        .Build();
        private short _s;
        public short S { get => _s; set => _s = value; }
        /// <summary>
        /// Roll-only-axis, normalized to the range [-1000,1000]. Generally corresponds to roll on vehicles with additional degrees of freedom. Valid if bit 1 of enabled_extensions field is set. Set to 0 if invalid.
        /// OriginName: t, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TField = new Field.Builder()
            .Name(nameof(T))
            .Title("t")
            .Description("Roll-only-axis, normalized to the range [-1000,1000]. Generally corresponds to roll on vehicles with additional degrees of freedom. Valid if bit 1 of enabled_extensions field is set. Set to 0 if invalid.")

            .DataType(Int16Type.Default)
        .Build();
        private short _t;
        public short T { get => _t; set => _t = value; }
        /// <summary>
        /// Aux continuous input field 1. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 2 of enabled_extensions field is set. 0 if bit 2 is unset.
        /// OriginName: aux1, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Aux1Field = new Field.Builder()
            .Name(nameof(Aux1))
            .Title("aux1")
            .Description("Aux continuous input field 1. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 2 of enabled_extensions field is set. 0 if bit 2 is unset.")

            .DataType(Int16Type.Default)
        .Build();
        private short _aux1;
        public short Aux1 { get => _aux1; set => _aux1 = value; }
        /// <summary>
        /// Aux continuous input field 2. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 3 of enabled_extensions field is set. 0 if bit 3 is unset.
        /// OriginName: aux2, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Aux2Field = new Field.Builder()
            .Name(nameof(Aux2))
            .Title("aux2")
            .Description("Aux continuous input field 2. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 3 of enabled_extensions field is set. 0 if bit 3 is unset.")

            .DataType(Int16Type.Default)
        .Build();
        private short _aux2;
        public short Aux2 { get => _aux2; set => _aux2 = value; }
        /// <summary>
        /// Aux continuous input field 3. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 4 of enabled_extensions field is set. 0 if bit 4 is unset.
        /// OriginName: aux3, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Aux3Field = new Field.Builder()
            .Name(nameof(Aux3))
            .Title("aux3")
            .Description("Aux continuous input field 3. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 4 of enabled_extensions field is set. 0 if bit 4 is unset.")

            .DataType(Int16Type.Default)
        .Build();
        private short _aux3;
        public short Aux3 { get => _aux3; set => _aux3 = value; }
        /// <summary>
        /// Aux continuous input field 4. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 5 of enabled_extensions field is set. 0 if bit 5 is unset.
        /// OriginName: aux4, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Aux4Field = new Field.Builder()
            .Name(nameof(Aux4))
            .Title("aux4")
            .Description("Aux continuous input field 4. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 5 of enabled_extensions field is set. 0 if bit 5 is unset.")

            .DataType(Int16Type.Default)
        .Build();
        private short _aux4;
        public short Aux4 { get => _aux4; set => _aux4 = value; }
        /// <summary>
        /// Aux continuous input field 5. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 6 of enabled_extensions field is set. 0 if bit 6 is unset.
        /// OriginName: aux5, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Aux5Field = new Field.Builder()
            .Name(nameof(Aux5))
            .Title("aux5")
            .Description("Aux continuous input field 5. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 6 of enabled_extensions field is set. 0 if bit 6 is unset.")

            .DataType(Int16Type.Default)
        .Build();
        private short _aux5;
        public short Aux5 { get => _aux5; set => _aux5 = value; }
        /// <summary>
        /// Aux continuous input field 6. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 7 of enabled_extensions field is set. 0 if bit 7 is unset.
        /// OriginName: aux6, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Aux6Field = new Field.Builder()
            .Name(nameof(Aux6))
            .Title("aux6")
            .Description("Aux continuous input field 6. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 7 of enabled_extensions field is set. 0 if bit 7 is unset.")

            .DataType(Int16Type.Default)
        .Build();
        private short _aux6;
        public short Aux6 { get => _aux6; set => _aux6 = value; }
    }
    /// <summary>
    /// The RAW values of the RC channels sent to the MAV to override info received from the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.  Note carefully the semantic differences between the first 8 channels and the subsequent channels
    ///  RC_CHANNELS_OVERRIDE
    /// </summary>
    public class RcChannelsOverridePacket : MavlinkV2Message<RcChannelsOverridePayload>
    {
        public const int MessageId = 70;
        
        public const byte CrcExtra = 124;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RcChannelsOverridePayload Payload { get; } = new();

        public override string Name => "RC_CHANNELS_OVERRIDE";
    }

    /// <summary>
    ///  RC_CHANNELS_OVERRIDE
    /// </summary>
    public class RcChannelsOverridePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t chan1_raw
            +2 // uint16_t chan2_raw
            +2 // uint16_t chan3_raw
            +2 // uint16_t chan4_raw
            +2 // uint16_t chan5_raw
            +2 // uint16_t chan6_raw
            +2 // uint16_t chan7_raw
            +2 // uint16_t chan8_raw
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +2 // uint16_t chan9_raw
            +2 // uint16_t chan10_raw
            +2 // uint16_t chan11_raw
            +2 // uint16_t chan12_raw
            +2 // uint16_t chan13_raw
            +2 // uint16_t chan14_raw
            +2 // uint16_t chan15_raw
            +2 // uint16_t chan16_raw
            +2 // uint16_t chan17_raw
            +2 // uint16_t chan18_raw
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Chan9Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan9Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan10Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan10Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan11Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan11Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan12Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan12Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan13Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan13Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan14Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan14Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan15Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan15Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan16Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan16Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan17Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan17Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan18Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan18Raw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteUShort(ref buffer,Chan9Raw);
            BinSerialize.WriteUShort(ref buffer,Chan10Raw);
            BinSerialize.WriteUShort(ref buffer,Chan11Raw);
            BinSerialize.WriteUShort(ref buffer,Chan12Raw);
            BinSerialize.WriteUShort(ref buffer,Chan13Raw);
            BinSerialize.WriteUShort(ref buffer,Chan14Raw);
            BinSerialize.WriteUShort(ref buffer,Chan15Raw);
            BinSerialize.WriteUShort(ref buffer,Chan16Raw);
            BinSerialize.WriteUShort(ref buffer,Chan17Raw);
            BinSerialize.WriteUShort(ref buffer,Chan18Raw);
            /* PayloadByteSize = 38 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,Chan1RawField, ref _chan1Raw);    
            UInt16Type.Accept(visitor,Chan2RawField, ref _chan2Raw);    
            UInt16Type.Accept(visitor,Chan3RawField, ref _chan3Raw);    
            UInt16Type.Accept(visitor,Chan4RawField, ref _chan4Raw);    
            UInt16Type.Accept(visitor,Chan5RawField, ref _chan5Raw);    
            UInt16Type.Accept(visitor,Chan6RawField, ref _chan6Raw);    
            UInt16Type.Accept(visitor,Chan7RawField, ref _chan7Raw);    
            UInt16Type.Accept(visitor,Chan8RawField, ref _chan8Raw);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt16Type.Accept(visitor,Chan9RawField, ref _chan9Raw);    
            UInt16Type.Accept(visitor,Chan10RawField, ref _chan10Raw);    
            UInt16Type.Accept(visitor,Chan11RawField, ref _chan11Raw);    
            UInt16Type.Accept(visitor,Chan12RawField, ref _chan12Raw);    
            UInt16Type.Accept(visitor,Chan13RawField, ref _chan13Raw);    
            UInt16Type.Accept(visitor,Chan14RawField, ref _chan14Raw);    
            UInt16Type.Accept(visitor,Chan15RawField, ref _chan15Raw);    
            UInt16Type.Accept(visitor,Chan16RawField, ref _chan16Raw);    
            UInt16Type.Accept(visitor,Chan17RawField, ref _chan17Raw);    
            UInt16Type.Accept(visitor,Chan18RawField, ref _chan18Raw);    

        }

        /// <summary>
        /// RC channel 1 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan1RawField = new Field.Builder()
            .Name(nameof(Chan1Raw))
            .Title("chan1_raw")
            .Description("RC channel 1 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan1Raw;
        public ushort Chan1Raw { get => _chan1Raw; set => _chan1Raw = value; }
        /// <summary>
        /// RC channel 2 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan2RawField = new Field.Builder()
            .Name(nameof(Chan2Raw))
            .Title("chan2_raw")
            .Description("RC channel 2 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan2Raw;
        public ushort Chan2Raw { get => _chan2Raw; set => _chan2Raw = value; }
        /// <summary>
        /// RC channel 3 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan3RawField = new Field.Builder()
            .Name(nameof(Chan3Raw))
            .Title("chan3_raw")
            .Description("RC channel 3 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan3Raw;
        public ushort Chan3Raw { get => _chan3Raw; set => _chan3Raw = value; }
        /// <summary>
        /// RC channel 4 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan4RawField = new Field.Builder()
            .Name(nameof(Chan4Raw))
            .Title("chan4_raw")
            .Description("RC channel 4 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan4Raw;
        public ushort Chan4Raw { get => _chan4Raw; set => _chan4Raw = value; }
        /// <summary>
        /// RC channel 5 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan5RawField = new Field.Builder()
            .Name(nameof(Chan5Raw))
            .Title("chan5_raw")
            .Description("RC channel 5 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan5Raw;
        public ushort Chan5Raw { get => _chan5Raw; set => _chan5Raw = value; }
        /// <summary>
        /// RC channel 6 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan6RawField = new Field.Builder()
            .Name(nameof(Chan6Raw))
            .Title("chan6_raw")
            .Description("RC channel 6 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan6Raw;
        public ushort Chan6Raw { get => _chan6Raw; set => _chan6Raw = value; }
        /// <summary>
        /// RC channel 7 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan7RawField = new Field.Builder()
            .Name(nameof(Chan7Raw))
            .Title("chan7_raw")
            .Description("RC channel 7 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan7Raw;
        public ushort Chan7Raw { get => _chan7Raw; set => _chan7Raw = value; }
        /// <summary>
        /// RC channel 8 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan8RawField = new Field.Builder()
            .Name(nameof(Chan8Raw))
            .Title("chan8_raw")
            .Description("RC channel 8 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan8Raw;
        public ushort Chan8Raw { get => _chan8Raw; set => _chan8Raw = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan9_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan9RawField = new Field.Builder()
            .Name(nameof(Chan9Raw))
            .Title("chan9_raw")
            .Description("RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan9Raw;
        public ushort Chan9Raw { get => _chan9Raw; set => _chan9Raw = value; }
        /// <summary>
        /// RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan10_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan10RawField = new Field.Builder()
            .Name(nameof(Chan10Raw))
            .Title("chan10_raw")
            .Description("RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan10Raw;
        public ushort Chan10Raw { get => _chan10Raw; set => _chan10Raw = value; }
        /// <summary>
        /// RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan11_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan11RawField = new Field.Builder()
            .Name(nameof(Chan11Raw))
            .Title("chan11_raw")
            .Description("RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan11Raw;
        public ushort Chan11Raw { get => _chan11Raw; set => _chan11Raw = value; }
        /// <summary>
        /// RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan12_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan12RawField = new Field.Builder()
            .Name(nameof(Chan12Raw))
            .Title("chan12_raw")
            .Description("RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan12Raw;
        public ushort Chan12Raw { get => _chan12Raw; set => _chan12Raw = value; }
        /// <summary>
        /// RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan13_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan13RawField = new Field.Builder()
            .Name(nameof(Chan13Raw))
            .Title("chan13_raw")
            .Description("RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan13Raw;
        public ushort Chan13Raw { get => _chan13Raw; set => _chan13Raw = value; }
        /// <summary>
        /// RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan14_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan14RawField = new Field.Builder()
            .Name(nameof(Chan14Raw))
            .Title("chan14_raw")
            .Description("RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan14Raw;
        public ushort Chan14Raw { get => _chan14Raw; set => _chan14Raw = value; }
        /// <summary>
        /// RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan15_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan15RawField = new Field.Builder()
            .Name(nameof(Chan15Raw))
            .Title("chan15_raw")
            .Description("RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan15Raw;
        public ushort Chan15Raw { get => _chan15Raw; set => _chan15Raw = value; }
        /// <summary>
        /// RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan16_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan16RawField = new Field.Builder()
            .Name(nameof(Chan16Raw))
            .Title("chan16_raw")
            .Description("RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan16Raw;
        public ushort Chan16Raw { get => _chan16Raw; set => _chan16Raw = value; }
        /// <summary>
        /// RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan17_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan17RawField = new Field.Builder()
            .Name(nameof(Chan17Raw))
            .Title("chan17_raw")
            .Description("RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan17Raw;
        public ushort Chan17Raw { get => _chan17Raw; set => _chan17Raw = value; }
        /// <summary>
        /// RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan18_raw, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field Chan18RawField = new Field.Builder()
            .Name(nameof(Chan18Raw))
            .Title("chan18_raw")
            .Description("RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan18Raw;
        public ushort Chan18Raw { get => _chan18Raw; set => _chan18Raw = value; }
    }
    /// <summary>
    /// Message encoding a mission item. This message is emitted to announce
    ///                 the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    ///  MISSION_ITEM_INT
    /// </summary>
    public class MissionItemIntPacket : MavlinkV2Message<MissionItemIntPayload>
    {
        public const int MessageId = 73;
        
        public const byte CrcExtra = 38;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MissionItemIntPayload Payload { get; } = new();

        public override string Name => "MISSION_ITEM_INT";
    }

    /// <summary>
    ///  MISSION_ITEM_INT
    /// </summary>
    public class MissionItemIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float param1
            +4 // float param2
            +4 // float param3
            +4 // float param4
            +4 // int32_t x
            +4 // int32_t y
            +4 // float z
            +2 // uint16_t seq
            + 2 // uint16_t command
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t frame
            +1 // uint8_t current
            +1 // uint8_t autocontinue
            + 1 // uint8_t mission_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadInt(ref buffer);
            Y = BinSerialize.ReadInt(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Seq = BinSerialize.ReadUShort(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            Current = (byte)BinSerialize.ReadByte(ref buffer);
            Autocontinue = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteInt(ref buffer,X);
            BinSerialize.WriteInt(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteByte(ref buffer,(byte)Current);
            BinSerialize.WriteByte(ref buffer,(byte)Autocontinue);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 38 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,Param1Field, ref _param1);    
            FloatType.Accept(visitor,Param2Field, ref _param2);    
            FloatType.Accept(visitor,Param3Field, ref _param3);    
            FloatType.Accept(visitor,Param4Field, ref _param4);    
            Int32Type.Accept(visitor,XField, ref _x);    
            Int32Type.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            UInt16Type.Accept(visitor,SeqField, ref _seq);    
            var tmpCommand = (ushort)Command;
            UInt16Type.Accept(visitor,CommandField, ref tmpCommand);
            Command = (MavCmd)tmpCommand;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;
            UInt8Type.Accept(visitor,CurrentField, ref _current);    
            UInt8Type.Accept(visitor,AutocontinueField, ref _autocontinue);    
            var tmpMissionType = (byte)MissionType;
            UInt8Type.Accept(visitor,MissionTypeField, ref tmpMissionType);
            MissionType = (MavMissionType)tmpMissionType;

        }

        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param1Field = new Field.Builder()
            .Name(nameof(Param1))
            .Title("param1")
            .Description("PARAM1, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param1;
        public float Param1 { get => _param1; set => _param1 = value; }
        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param2Field = new Field.Builder()
            .Name(nameof(Param2))
            .Title("param2")
            .Description("PARAM2, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param2;
        public float Param2 { get => _param2; set => _param2 = value; }
        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param3Field = new Field.Builder()
            .Name(nameof(Param3))
            .Title("param3")
            .Description("PARAM3, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param3;
        public float Param3 { get => _param3; set => _param3 = value; }
        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param4Field = new Field.Builder()
            .Name(nameof(Param4))
            .Title("param4")
            .Description("PARAM4, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param4;
        public float Param4 { get => _param4; set => _param4 = value; }
        /// <summary>
        /// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7")

            .DataType(Int32Type.Default)
        .Build();
        private int _x;
        public int X { get => _x; set => _x = value; }
        /// <summary>
        /// PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7")

            .DataType(Int32Type.Default)
        .Build();
        private int _y;
        public int Y { get => _y; set => _y = value; }
        /// <summary>
        /// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.")

            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seq;
        public ushort Seq { get => _seq; set => _seq = value; }
        /// <summary>
        /// The scheduled action for the waypoint.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CommandField = new Field.Builder()
            .Name(nameof(Command))
            .Title("command")
            .Description("The scheduled action for the waypoint.")
            .DataType(new UInt16Type(MavCmdHelper.GetValues(x=>(ushort)x).Min(),MavCmdHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavCmdHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavCmd _command;
        public MavCmd Command { get => _command; set => _command = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// The coordinate system of the waypoint.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("The coordinate system of the waypoint.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
        /// <summary>
        /// false:0, true:1
        /// OriginName: current, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CurrentField = new Field.Builder()
            .Name(nameof(Current))
            .Title("current")
            .Description("false:0, true:1")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _current;
        public byte Current { get => _current; set => _current = value; }
        /// <summary>
        /// Autocontinue to next waypoint. 0: false, 1: true. Set false to pause mission after the item completes.
        /// OriginName: autocontinue, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AutocontinueField = new Field.Builder()
            .Name(nameof(Autocontinue))
            .Title("autocontinue")
            .Description("Autocontinue to next waypoint. 0: false, 1: true. Set false to pause mission after the item completes.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _autocontinue;
        public byte Autocontinue { get => _autocontinue; set => _autocontinue = value; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field MissionTypeField = new Field.Builder()
            .Name(nameof(MissionType))
            .Title("mission_type")
            .Description("Mission type.")
            .DataType(new UInt8Type(MavMissionTypeHelper.GetValues(x=>(byte)x).Min(),MavMissionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavMissionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMissionType _missionType;
        public MavMissionType MissionType { get => _missionType; set => _missionType = value; } 
    }
    /// <summary>
    /// Metrics typically displayed on a HUD for fixed wing aircraft.
    ///  VFR_HUD
    /// </summary>
    public class VfrHudPacket : MavlinkV2Message<VfrHudPayload>
    {
        public const int MessageId = 74;
        
        public const byte CrcExtra = 20;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override VfrHudPayload Payload { get; } = new();

        public override string Name => "VFR_HUD";
    }

    /// <summary>
    ///  VFR_HUD
    /// </summary>
    public class VfrHudPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float airspeed
            +4 // float groundspeed
            +4 // float alt
            +4 // float climb
            +2 // int16_t heading
            +2 // uint16_t throttle
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Airspeed = BinSerialize.ReadFloat(ref buffer);
            Groundspeed = BinSerialize.ReadFloat(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Climb = BinSerialize.ReadFloat(ref buffer);
            Heading = BinSerialize.ReadShort(ref buffer);
            Throttle = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Airspeed);
            BinSerialize.WriteFloat(ref buffer,Groundspeed);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Climb);
            BinSerialize.WriteShort(ref buffer,Heading);
            BinSerialize.WriteUShort(ref buffer,Throttle);
            /* PayloadByteSize = 20 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,AirspeedField, ref _airspeed);    
            FloatType.Accept(visitor,GroundspeedField, ref _groundspeed);    
            FloatType.Accept(visitor,AltField, ref _alt);    
            FloatType.Accept(visitor,ClimbField, ref _climb);    
            Int16Type.Accept(visitor,HeadingField, ref _heading);
            UInt16Type.Accept(visitor,ThrottleField, ref _throttle);    

        }

        /// <summary>
        /// Vehicle speed in form appropriate for vehicle type. For standard aircraft this is typically calibrated airspeed (CAS) or indicated airspeed (IAS) - either of which can be used by a pilot to estimate stall speed.
        /// OriginName: airspeed, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field AirspeedField = new Field.Builder()
            .Name(nameof(Airspeed))
            .Title("airspeed")
            .Description("Vehicle speed in form appropriate for vehicle type. For standard aircraft this is typically calibrated airspeed (CAS) or indicated airspeed (IAS) - either of which can be used by a pilot to estimate stall speed.")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _airspeed;
        public float Airspeed { get => _airspeed; set => _airspeed = value; }
        /// <summary>
        /// Current ground speed.
        /// OriginName: groundspeed, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field GroundspeedField = new Field.Builder()
            .Name(nameof(Groundspeed))
            .Title("groundspeed")
            .Description("Current ground speed.")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _groundspeed;
        public float Groundspeed { get => _groundspeed; set => _groundspeed = value; }
        /// <summary>
        /// Current altitude (MSL).
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Current altitude (MSL).")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _alt;
        public float Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Current climb rate.
        /// OriginName: climb, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field ClimbField = new Field.Builder()
            .Name(nameof(Climb))
            .Title("climb")
            .Description("Current climb rate.")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _climb;
        public float Climb { get => _climb; set => _climb = value; }
        /// <summary>
        /// Current heading in compass units (0-360, 0=north).
        /// OriginName: heading, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field HeadingField = new Field.Builder()
            .Name(nameof(Heading))
            .Title("heading")
            .Description("Current heading in compass units (0-360, 0=north).")
.Units(@"deg")
            .DataType(Int16Type.Default)
        .Build();
        private short _heading;
        public short Heading { get => _heading; set => _heading = value; }
        /// <summary>
        /// Current throttle setting (0 to 100).
        /// OriginName: throttle, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field ThrottleField = new Field.Builder()
            .Name(nameof(Throttle))
            .Title("throttle")
            .Description("Current throttle setting (0 to 100).")
.Units(@"%")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _throttle;
        public ushort Throttle { get => _throttle; set => _throttle = value; }
    }
    /// <summary>
    /// Send a command with up to seven parameters to the MAV, where params 5 and 6 are integers and the other values are floats. This is preferred over COMMAND_LONG as it allows the MAV_FRAME to be specified for interpreting positional information, such as altitude. COMMAND_INT is also preferred when sending latitude and longitude data in params 5 and 6, as it allows for greater precision. Param 5 and 6 encode positional data as scaled integers, where the scaling depends on the actual command value. NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_INT
    /// </summary>
    public class CommandIntPacket : MavlinkV2Message<CommandIntPayload>
    {
        public const int MessageId = 75;
        
        public const byte CrcExtra = 158;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CommandIntPayload Payload { get; } = new();

        public override string Name => "COMMAND_INT";
    }

    /// <summary>
    ///  COMMAND_INT
    /// </summary>
    public class CommandIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float param1
            +4 // float param2
            +4 // float param3
            +4 // float param4
            +4 // int32_t x
            +4 // int32_t y
            +4 // float z
            + 2 // uint16_t command
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t frame
            +1 // uint8_t current
            +1 // uint8_t autocontinue
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadInt(ref buffer);
            Y = BinSerialize.ReadInt(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            Current = (byte)BinSerialize.ReadByte(ref buffer);
            Autocontinue = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteInt(ref buffer,X);
            BinSerialize.WriteInt(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteByte(ref buffer,(byte)Current);
            BinSerialize.WriteByte(ref buffer,(byte)Autocontinue);
            /* PayloadByteSize = 35 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,Param1Field, ref _param1);    
            FloatType.Accept(visitor,Param2Field, ref _param2);    
            FloatType.Accept(visitor,Param3Field, ref _param3);    
            FloatType.Accept(visitor,Param4Field, ref _param4);    
            Int32Type.Accept(visitor,XField, ref _x);    
            Int32Type.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            var tmpCommand = (ushort)Command;
            UInt16Type.Accept(visitor,CommandField, ref tmpCommand);
            Command = (MavCmd)tmpCommand;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;
            UInt8Type.Accept(visitor,CurrentField, ref _current);    
            UInt8Type.Accept(visitor,AutocontinueField, ref _autocontinue);    

        }

        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param1Field = new Field.Builder()
            .Name(nameof(Param1))
            .Title("param1")
            .Description("PARAM1, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param1;
        public float Param1 { get => _param1; set => _param1 = value; }
        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param2Field = new Field.Builder()
            .Name(nameof(Param2))
            .Title("param2")
            .Description("PARAM2, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param2;
        public float Param2 { get => _param2; set => _param2 = value; }
        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param3Field = new Field.Builder()
            .Name(nameof(Param3))
            .Title("param3")
            .Description("PARAM3, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param3;
        public float Param3 { get => _param3; set => _param3 = value; }
        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param4Field = new Field.Builder()
            .Name(nameof(Param4))
            .Title("param4")
            .Description("PARAM4, see MAV_CMD enum")

            .DataType(FloatType.Default)
        .Build();
        private float _param4;
        public float Param4 { get => _param4; set => _param4 = value; }
        /// <summary>
        /// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7")

            .DataType(Int32Type.Default)
        .Build();
        private int _x;
        public int X { get => _x; set => _x = value; }
        /// <summary>
        /// PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7")

            .DataType(Int32Type.Default)
        .Build();
        private int _y;
        public int Y { get => _y; set => _y = value; }
        /// <summary>
        /// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame).
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame).")

            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// The scheduled action for the mission item.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CommandField = new Field.Builder()
            .Name(nameof(Command))
            .Title("command")
            .Description("The scheduled action for the mission item.")
            .DataType(new UInt16Type(MavCmdHelper.GetValues(x=>(ushort)x).Min(),MavCmdHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavCmdHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavCmd _command;
        public MavCmd Command { get => _command; set => _command = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// The coordinate system of the COMMAND.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("The coordinate system of the COMMAND.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
        /// <summary>
        /// Not used.
        /// OriginName: current, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CurrentField = new Field.Builder()
            .Name(nameof(Current))
            .Title("current")
            .Description("Not used.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _current;
        public byte Current { get => _current; set => _current = value; }
        /// <summary>
        /// Not used (set 0).
        /// OriginName: autocontinue, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AutocontinueField = new Field.Builder()
            .Name(nameof(Autocontinue))
            .Title("autocontinue")
            .Description("Not used (set 0).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _autocontinue;
        public byte Autocontinue { get => _autocontinue; set => _autocontinue = value; }
    }
    /// <summary>
    /// Send a command with up to seven parameters to the MAV. COMMAND_INT is generally preferred when sending MAV_CMD commands that include positional information; it offers higher precision and allows the MAV_FRAME to be specified (which may otherwise be ambiguous, particularly for altitude). The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_LONG
    /// </summary>
    public class CommandLongPacket : MavlinkV2Message<CommandLongPayload>
    {
        public const int MessageId = 76;
        
        public const byte CrcExtra = 152;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CommandLongPayload Payload { get; } = new();

        public override string Name => "COMMAND_LONG";
    }

    /// <summary>
    ///  COMMAND_LONG
    /// </summary>
    public class CommandLongPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 33; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 33; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float param1
            +4 // float param2
            +4 // float param3
            +4 // float param4
            +4 // float param5
            +4 // float param6
            +4 // float param7
            + 2 // uint16_t command
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t confirmation
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            Param5 = BinSerialize.ReadFloat(ref buffer);
            Param6 = BinSerialize.ReadFloat(ref buffer);
            Param7 = BinSerialize.ReadFloat(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Confirmation = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteFloat(ref buffer,Param5);
            BinSerialize.WriteFloat(ref buffer,Param6);
            BinSerialize.WriteFloat(ref buffer,Param7);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Confirmation);
            /* PayloadByteSize = 33 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,Param1Field, ref _param1);    
            FloatType.Accept(visitor,Param2Field, ref _param2);    
            FloatType.Accept(visitor,Param3Field, ref _param3);    
            FloatType.Accept(visitor,Param4Field, ref _param4);    
            FloatType.Accept(visitor,Param5Field, ref _param5);    
            FloatType.Accept(visitor,Param6Field, ref _param6);    
            FloatType.Accept(visitor,Param7Field, ref _param7);    
            var tmpCommand = (ushort)Command;
            UInt16Type.Accept(visitor,CommandField, ref tmpCommand);
            Command = (MavCmd)tmpCommand;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,ConfirmationField, ref _confirmation);    

        }

        /// <summary>
        /// Parameter 1 (for the specific command).
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param1Field = new Field.Builder()
            .Name(nameof(Param1))
            .Title("param1")
            .Description("Parameter 1 (for the specific command).")

            .DataType(FloatType.Default)
        .Build();
        private float _param1;
        public float Param1 { get => _param1; set => _param1 = value; }
        /// <summary>
        /// Parameter 2 (for the specific command).
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param2Field = new Field.Builder()
            .Name(nameof(Param2))
            .Title("param2")
            .Description("Parameter 2 (for the specific command).")

            .DataType(FloatType.Default)
        .Build();
        private float _param2;
        public float Param2 { get => _param2; set => _param2 = value; }
        /// <summary>
        /// Parameter 3 (for the specific command).
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param3Field = new Field.Builder()
            .Name(nameof(Param3))
            .Title("param3")
            .Description("Parameter 3 (for the specific command).")

            .DataType(FloatType.Default)
        .Build();
        private float _param3;
        public float Param3 { get => _param3; set => _param3 = value; }
        /// <summary>
        /// Parameter 4 (for the specific command).
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param4Field = new Field.Builder()
            .Name(nameof(Param4))
            .Title("param4")
            .Description("Parameter 4 (for the specific command).")

            .DataType(FloatType.Default)
        .Build();
        private float _param4;
        public float Param4 { get => _param4; set => _param4 = value; }
        /// <summary>
        /// Parameter 5 (for the specific command).
        /// OriginName: param5, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param5Field = new Field.Builder()
            .Name(nameof(Param5))
            .Title("param5")
            .Description("Parameter 5 (for the specific command).")

            .DataType(FloatType.Default)
        .Build();
        private float _param5;
        public float Param5 { get => _param5; set => _param5 = value; }
        /// <summary>
        /// Parameter 6 (for the specific command).
        /// OriginName: param6, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param6Field = new Field.Builder()
            .Name(nameof(Param6))
            .Title("param6")
            .Description("Parameter 6 (for the specific command).")

            .DataType(FloatType.Default)
        .Build();
        private float _param6;
        public float Param6 { get => _param6; set => _param6 = value; }
        /// <summary>
        /// Parameter 7 (for the specific command).
        /// OriginName: param7, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Param7Field = new Field.Builder()
            .Name(nameof(Param7))
            .Title("param7")
            .Description("Parameter 7 (for the specific command).")

            .DataType(FloatType.Default)
        .Build();
        private float _param7;
        public float Param7 { get => _param7; set => _param7 = value; }
        /// <summary>
        /// Command ID (of command to send).
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CommandField = new Field.Builder()
            .Name(nameof(Command))
            .Title("command")
            .Description("Command ID (of command to send).")
            .DataType(new UInt16Type(MavCmdHelper.GetValues(x=>(ushort)x).Min(),MavCmdHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavCmdHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavCmd _command;
        public MavCmd Command { get => _command; set => _command = value; } 
        /// <summary>
        /// System which should execute the command
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System which should execute the command")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component which should execute the command, 0 for all components
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component which should execute the command, 0 for all components")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
        /// OriginName: confirmation, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ConfirmationField = new Field.Builder()
            .Name(nameof(Confirmation))
            .Title("confirmation")
            .Description("0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _confirmation;
        public byte Confirmation { get => _confirmation; set => _confirmation = value; }
    }
    /// <summary>
    /// Report status of a command. Includes feedback whether the command was executed. The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_ACK
    /// </summary>
    public class CommandAckPacket : MavlinkV2Message<CommandAckPayload>
    {
        public const int MessageId = 77;
        
        public const byte CrcExtra = 143;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CommandAckPayload Payload { get; } = new();

        public override string Name => "COMMAND_ACK";
    }

    /// <summary>
    ///  COMMAND_ACK
    /// </summary>
    public class CommandAckPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 10; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 10; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 2 // uint16_t command
            + 1 // uint8_t result
            +1 // uint8_t progress
            +4 // int32_t result_param2
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            Result = (MavResult)BinSerialize.ReadByte(ref buffer);
            // extended field 'Progress' can be empty
            if (buffer.IsEmpty) return;
            Progress = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'ResultParam2' can be empty
            if (buffer.IsEmpty) return;
            ResultParam2 = BinSerialize.ReadInt(ref buffer);
            // extended field 'TargetSystem' can be empty
            if (buffer.IsEmpty) return;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TargetComponent' can be empty
            if (buffer.IsEmpty) return;
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)Result);
            BinSerialize.WriteByte(ref buffer,(byte)Progress);
            BinSerialize.WriteInt(ref buffer,ResultParam2);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 10 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpCommand = (ushort)Command;
            UInt16Type.Accept(visitor,CommandField, ref tmpCommand);
            Command = (MavCmd)tmpCommand;
            var tmpResult = (byte)Result;
            UInt8Type.Accept(visitor,ResultField, ref tmpResult);
            Result = (MavResult)tmpResult;
            UInt8Type.Accept(visitor,ProgressField, ref _progress);    
            Int32Type.Accept(visitor,ResultParam2Field, ref _resultParam2);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Command ID (of acknowledged command).
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CommandField = new Field.Builder()
            .Name(nameof(Command))
            .Title("command")
            .Description("Command ID (of acknowledged command).")
            .DataType(new UInt16Type(MavCmdHelper.GetValues(x=>(ushort)x).Min(),MavCmdHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavCmdHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavCmd _command;
        public MavCmd Command { get => _command; set => _command = value; } 
        /// <summary>
        /// Result of command.
        /// OriginName: result, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ResultField = new Field.Builder()
            .Name(nameof(Result))
            .Title("result")
            .Description("Result of command.")
            .DataType(new UInt8Type(MavResultHelper.GetValues(x=>(byte)x).Min(),MavResultHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavResultHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavResult _result;
        public MavResult Result { get => _result; set => _result = value; } 
        /// <summary>
        /// The progress percentage when result is MAV_RESULT_IN_PROGRESS. Values: [0-100], or UINT8_MAX if the progress is unknown.
        /// OriginName: progress, Units: %, IsExtended: true
        /// </summary>
        public static readonly Field ProgressField = new Field.Builder()
            .Name(nameof(Progress))
            .Title("progress")
            .Description("The progress percentage when result is MAV_RESULT_IN_PROGRESS. Values: [0-100], or UINT8_MAX if the progress is unknown.")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _progress;
        public byte Progress { get => _progress; set => _progress = value; }
        /// <summary>
        /// Additional result information. Can be set with a command-specific enum containing command-specific error reasons for why the command might be denied. If used, the associated enum must be documented in the corresponding MAV_CMD (this enum should have a 0 value to indicate "unused" or "unknown").
        /// OriginName: result_param2, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ResultParam2Field = new Field.Builder()
            .Name(nameof(ResultParam2))
            .Title("result_param2")
            .Description("Additional result information. Can be set with a command-specific enum containing command-specific error reasons for why the command might be denied. If used, the associated enum must be documented in the corresponding MAV_CMD (this enum should have a 0 value to indicate \"unused\" or \"unknown\").")

            .DataType(Int32Type.Default)
        .Build();
        private int _resultParam2;
        public int ResultParam2 { get => _resultParam2; set => _resultParam2 = value; }
        /// <summary>
        /// System ID of the target recipient. This is the ID of the system that sent the command for which this COMMAND_ACK is an acknowledgement.
        /// OriginName: target_system, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID of the target recipient. This is the ID of the system that sent the command for which this COMMAND_ACK is an acknowledgement.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID of the target recipient. This is the ID of the system that sent the command for which this COMMAND_ACK is an acknowledgement.
        /// OriginName: target_component, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID of the target recipient. This is the ID of the system that sent the command for which this COMMAND_ACK is an acknowledgement.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Cancel a long running command. The target system should respond with a COMMAND_ACK to the original command with result=MAV_RESULT_CANCELLED if the long running process was cancelled. If it has already completed, the cancel action can be ignored. The cancel action can be retried until some sort of acknowledgement to the original command has been received. The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_CANCEL
    /// </summary>
    public class CommandCancelPacket : MavlinkV2Message<CommandCancelPayload>
    {
        public const int MessageId = 80;
        
        public const byte CrcExtra = 14;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CommandCancelPayload Payload { get; } = new();

        public override string Name => "COMMAND_CANCEL";
    }

    /// <summary>
    ///  COMMAND_CANCEL
    /// </summary>
    public class CommandCancelPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 2 // uint16_t command
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 4 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpCommand = (ushort)Command;
            UInt16Type.Accept(visitor,CommandField, ref tmpCommand);
            Command = (MavCmd)tmpCommand;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Command ID (of command to cancel).
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CommandField = new Field.Builder()
            .Name(nameof(Command))
            .Title("command")
            .Description("Command ID (of command to cancel).")
            .DataType(new UInt16Type(MavCmdHelper.GetValues(x=>(ushort)x).Min(),MavCmdHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavCmdHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavCmd _command;
        public MavCmd Command { get => _command; set => _command = value; } 
        /// <summary>
        /// System executing long running command. Should not be broadcast (0).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System executing long running command. Should not be broadcast (0).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component executing long running command.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component executing long running command.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Setpoint in roll, pitch, yaw and thrust from the operator
    ///  MANUAL_SETPOINT
    /// </summary>
    public class ManualSetpointPacket : MavlinkV2Message<ManualSetpointPayload>
    {
        public const int MessageId = 81;
        
        public const byte CrcExtra = 106;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ManualSetpointPayload Payload { get; } = new();

        public override string Name => "MANUAL_SETPOINT";
    }

    /// <summary>
    ///  MANUAL_SETPOINT
    /// </summary>
    public class ManualSetpointPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +4 // float thrust
            +1 // uint8_t mode_switch
            +1 // uint8_t manual_override_switch
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Thrust = BinSerialize.ReadFloat(ref buffer);
            ModeSwitch = (byte)BinSerialize.ReadByte(ref buffer);
            ManualOverrideSwitch = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Thrust);
            BinSerialize.WriteByte(ref buffer,(byte)ModeSwitch);
            BinSerialize.WriteByte(ref buffer,(byte)ManualOverrideSwitch);
            /* PayloadByteSize = 22 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,ThrustField, ref _thrust);    
            UInt8Type.Accept(visitor,ModeSwitchField, ref _modeSwitch);    
            UInt8Type.Accept(visitor,ManualOverrideSwitchField, ref _manualOverrideSwitch);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Desired roll rate
        /// OriginName: roll, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Desired roll rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Desired pitch rate
        /// OriginName: pitch, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Desired pitch rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Desired yaw rate
        /// OriginName: yaw, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Desired yaw rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1
        /// OriginName: thrust, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ThrustField = new Field.Builder()
            .Name(nameof(Thrust))
            .Title("thrust")
            .Description("Collective thrust, normalized to 0 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _thrust;
        public float Thrust { get => _thrust; set => _thrust = value; }
        /// <summary>
        /// Flight mode switch position, 0.. 255
        /// OriginName: mode_switch, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ModeSwitchField = new Field.Builder()
            .Name(nameof(ModeSwitch))
            .Title("mode_switch")
            .Description("Flight mode switch position, 0.. 255")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _modeSwitch;
        public byte ModeSwitch { get => _modeSwitch; set => _modeSwitch = value; }
        /// <summary>
        /// Override mode switch position, 0.. 255
        /// OriginName: manual_override_switch, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ManualOverrideSwitchField = new Field.Builder()
            .Name(nameof(ManualOverrideSwitch))
            .Title("manual_override_switch")
            .Description("Override mode switch position, 0.. 255")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _manualOverrideSwitch;
        public byte ManualOverrideSwitch { get => _manualOverrideSwitch; set => _manualOverrideSwitch = value; }
    }
    /// <summary>
    /// Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).
    ///  SET_ATTITUDE_TARGET
    /// </summary>
    public class SetAttitudeTargetPacket : MavlinkV2Message<SetAttitudeTargetPayload>
    {
        public const int MessageId = 82;
        
        public const byte CrcExtra = 49;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetAttitudeTargetPayload Payload { get; } = new();

        public override string Name => "SET_ATTITUDE_TARGET";
    }

    /// <summary>
    ///  SET_ATTITUDE_TARGET
    /// </summary>
    public class SetAttitudeTargetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +Q.Length * 4 // float[4] q
            +4 // float body_roll_rate
            +4 // float body_pitch_rate
            +4 // float body_yaw_rate
            +4 // float thrust
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t type_mask
            +ThrustBody.Length * 4 // float[3] thrust_body
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/51 - payloadSize - /*ExtendedFieldsLength*/12)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            BodyRollRate = BinSerialize.ReadFloat(ref buffer);
            BodyPitchRate = BinSerialize.ReadFloat(ref buffer);
            BodyYawRate = BinSerialize.ReadFloat(ref buffer);
            Thrust = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            TypeMask = (AttitudeTargetTypemask)BinSerialize.ReadByte(ref buffer);
            // extended field 'ThrustBody' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                ThrustBody[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,BodyRollRate);
            BinSerialize.WriteFloat(ref buffer,BodyPitchRate);
            BinSerialize.WriteFloat(ref buffer,BodyYawRate);
            BinSerialize.WriteFloat(ref buffer,Thrust);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)TypeMask);
            for(var i=0;i<ThrustBody.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,ThrustBody[i]);
            }
            /* PayloadByteSize = 51 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,BodyRollRateField, ref _bodyRollRate);    
            FloatType.Accept(visitor,BodyPitchRateField, ref _bodyPitchRate);    
            FloatType.Accept(visitor,BodyYawRateField, ref _bodyYawRate);    
            FloatType.Accept(visitor,ThrustField, ref _thrust);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpTypeMask = (byte)TypeMask;
            UInt8Type.Accept(visitor,TypeMaskField, ref tmpTypeMask);
            TypeMask = (AttitudeTargetTypemask)tmpTypeMask;
            ArrayType.Accept(visitor,ThrustBodyField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref ThrustBody[index]));

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) from MAV_FRAME_LOCAL_NED to MAV_FRAME_BODY_FRD
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) from MAV_FRAME_LOCAL_NED to MAV_FRAME_BODY_FRD")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Body roll rate
        /// OriginName: body_roll_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field BodyRollRateField = new Field.Builder()
            .Name(nameof(BodyRollRate))
            .Title("body_roll_rate")
            .Description("Body roll rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _bodyRollRate;
        public float BodyRollRate { get => _bodyRollRate; set => _bodyRollRate = value; }
        /// <summary>
        /// Body pitch rate
        /// OriginName: body_pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field BodyPitchRateField = new Field.Builder()
            .Name(nameof(BodyPitchRate))
            .Title("body_pitch_rate")
            .Description("Body pitch rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _bodyPitchRate;
        public float BodyPitchRate { get => _bodyPitchRate; set => _bodyPitchRate = value; }
        /// <summary>
        /// Body yaw rate
        /// OriginName: body_yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field BodyYawRateField = new Field.Builder()
            .Name(nameof(BodyYawRate))
            .Title("body_yaw_rate")
            .Description("Body yaw rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _bodyYawRate;
        public float BodyYawRate { get => _bodyYawRate; set => _bodyYawRate = value; }
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// OriginName: thrust, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ThrustField = new Field.Builder()
            .Name(nameof(Thrust))
            .Title("thrust")
            .Description("Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)")

            .DataType(FloatType.Default)
        .Build();
        private float _thrust;
        public float Thrust { get => _thrust; set => _thrust = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeMaskField = new Field.Builder()
            .Name(nameof(TypeMask))
            .Title("bitmask")
            .Description("Bitmap to indicate which dimensions should be ignored by the vehicle.")
            .DataType(new UInt8Type(AttitudeTargetTypemaskHelper.GetValues(x=>(byte)x).Min(),AttitudeTargetTypemaskHelper.GetValues(x=>(byte)x).Max()))
            .Enum(AttitudeTargetTypemaskHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private AttitudeTargetTypemask _typeMask;
        public AttitudeTargetTypemask TypeMask { get => _typeMask; set => _typeMask = value; } 
        /// <summary>
        /// 3D thrust setpoint in the body NED frame, normalized to -1 .. 1
        /// OriginName: thrust_body, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ThrustBodyField = new Field.Builder()
            .Name(nameof(ThrustBody))
            .Title("thrust_body")
            .Description("3D thrust setpoint in the body NED frame, normalized to -1 .. 1")

            .DataType(new ArrayType(FloatType.Default,3))        
        .Build();
        public const int ThrustBodyMaxItemsCount = 3;
        public float[] ThrustBody { get; } = new float[3];
    }
    /// <summary>
    /// Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
    ///  ATTITUDE_TARGET
    /// </summary>
    public class AttitudeTargetPacket : MavlinkV2Message<AttitudeTargetPayload>
    {
        public const int MessageId = 83;
        
        public const byte CrcExtra = 22;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AttitudeTargetPayload Payload { get; } = new();

        public override string Name => "ATTITUDE_TARGET";
    }

    /// <summary>
    ///  ATTITUDE_TARGET
    /// </summary>
    public class AttitudeTargetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +Q.Length * 4 // float[4] q
            +4 // float body_roll_rate
            +4 // float body_pitch_rate
            +4 // float body_yaw_rate
            +4 // float thrust
            + 1 // uint8_t type_mask
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/37 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            BodyRollRate = BinSerialize.ReadFloat(ref buffer);
            BodyPitchRate = BinSerialize.ReadFloat(ref buffer);
            BodyYawRate = BinSerialize.ReadFloat(ref buffer);
            Thrust = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (AttitudeTargetTypemask)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,BodyRollRate);
            BinSerialize.WriteFloat(ref buffer,BodyPitchRate);
            BinSerialize.WriteFloat(ref buffer,BodyYawRate);
            BinSerialize.WriteFloat(ref buffer,Thrust);
            BinSerialize.WriteByte(ref buffer,(byte)TypeMask);
            /* PayloadByteSize = 37 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,BodyRollRateField, ref _bodyRollRate);    
            FloatType.Accept(visitor,BodyPitchRateField, ref _bodyPitchRate);    
            FloatType.Accept(visitor,BodyYawRateField, ref _bodyYawRate);    
            FloatType.Accept(visitor,ThrustField, ref _thrust);    
            var tmpTypeMask = (byte)TypeMask;
            UInt8Type.Accept(visitor,TypeMaskField, ref tmpTypeMask);
            TypeMask = (AttitudeTargetTypemask)tmpTypeMask;

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Body roll rate
        /// OriginName: body_roll_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field BodyRollRateField = new Field.Builder()
            .Name(nameof(BodyRollRate))
            .Title("body_roll_rate")
            .Description("Body roll rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _bodyRollRate;
        public float BodyRollRate { get => _bodyRollRate; set => _bodyRollRate = value; }
        /// <summary>
        /// Body pitch rate
        /// OriginName: body_pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field BodyPitchRateField = new Field.Builder()
            .Name(nameof(BodyPitchRate))
            .Title("body_pitch_rate")
            .Description("Body pitch rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _bodyPitchRate;
        public float BodyPitchRate { get => _bodyPitchRate; set => _bodyPitchRate = value; }
        /// <summary>
        /// Body yaw rate
        /// OriginName: body_yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field BodyYawRateField = new Field.Builder()
            .Name(nameof(BodyYawRate))
            .Title("body_yaw_rate")
            .Description("Body yaw rate")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _bodyYawRate;
        public float BodyYawRate { get => _bodyYawRate; set => _bodyYawRate = value; }
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// OriginName: thrust, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ThrustField = new Field.Builder()
            .Name(nameof(Thrust))
            .Title("thrust")
            .Description("Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)")

            .DataType(FloatType.Default)
        .Build();
        private float _thrust;
        public float Thrust { get => _thrust; set => _thrust = value; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeMaskField = new Field.Builder()
            .Name(nameof(TypeMask))
            .Title("bitmask")
            .Description("Bitmap to indicate which dimensions should be ignored by the vehicle.")
            .DataType(new UInt8Type(AttitudeTargetTypemaskHelper.GetValues(x=>(byte)x).Min(),AttitudeTargetTypemaskHelper.GetValues(x=>(byte)x).Max()))
            .Enum(AttitudeTargetTypemaskHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private AttitudeTargetTypemask _typeMask;
        public AttitudeTargetTypemask TypeMask { get => _typeMask; set => _typeMask = value; } 
    }
    /// <summary>
    /// Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).
    ///  SET_POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class SetPositionTargetLocalNedPacket : MavlinkV2Message<SetPositionTargetLocalNedPayload>
    {
        public const int MessageId = 84;
        
        public const byte CrcExtra = 143;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetPositionTargetLocalNedPayload Payload { get; } = new();

        public override string Name => "SET_POSITION_TARGET_LOCAL_NED";
    }

    /// <summary>
    ///  SET_POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class SetPositionTargetLocalNedPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +4 // float afx
            +4 // float afy
            +4 // float afz
            +4 // float yaw
            +4 // float yaw_rate
            + 2 // uint16_t type_mask
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t coordinate_frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 53 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            FloatType.Accept(visitor,AfxField, ref _afx);    
            FloatType.Accept(visitor,AfyField, ref _afy);    
            FloatType.Accept(visitor,AfzField, ref _afz);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,YawRateField, ref _yawRate);    
            var tmpTypeMask = (ushort)TypeMask;
            UInt16Type.Accept(visitor,TypeMaskField, ref tmpTypeMask);
            TypeMask = (PositionTargetTypemask)tmpTypeMask;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpCoordinateFrame = (byte)CoordinateFrame;
            UInt8Type.Accept(visitor,CoordinateFrameField, ref tmpCoordinateFrame);
            CoordinateFrame = (MavFrame)tmpCoordinateFrame;

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X Position in NED frame
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X Position in NED frame")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y Position in NED frame
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y Position in NED frame")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z Position in NED frame (note, altitude is negative in NED)
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z Position in NED frame (note, altitude is negative in NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfxField = new Field.Builder()
            .Name(nameof(Afx))
            .Title("afx")
            .Description("X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afx;
        public float Afx { get => _afx; set => _afx = value; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfyField = new Field.Builder()
            .Name(nameof(Afy))
            .Title("afy")
            .Description("Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afy;
        public float Afy { get => _afy; set => _afy = value; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfzField = new Field.Builder()
            .Name(nameof(Afz))
            .Title("afz")
            .Description("Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afz;
        public float Afz { get => _afz; set => _afz = value; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("yaw setpoint")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawRateField = new Field.Builder()
            .Name(nameof(YawRate))
            .Title("yaw_rate")
            .Description("yaw rate setpoint")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawRate;
        public float YawRate { get => _yawRate; set => _yawRate = value; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeMaskField = new Field.Builder()
            .Name(nameof(TypeMask))
            .Title("bitmask")
            .Description("Bitmap to indicate which dimensions should be ignored by the vehicle.")
            .DataType(new UInt16Type(PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Min(),PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(PositionTargetTypemaskHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private PositionTargetTypemask _typeMask;
        public PositionTargetTypemask TypeMask { get => _typeMask; set => _typeMask = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CoordinateFrameField = new Field.Builder()
            .Name(nameof(CoordinateFrame))
            .Title("coordinate_frame")
            .Description("Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _coordinateFrame;
        public MavFrame CoordinateFrame { get => _coordinateFrame; set => _coordinateFrame = value; } 
    }
    /// <summary>
    /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.
    ///  POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class PositionTargetLocalNedPacket : MavlinkV2Message<PositionTargetLocalNedPayload>
    {
        public const int MessageId = 85;
        
        public const byte CrcExtra = 140;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override PositionTargetLocalNedPayload Payload { get; } = new();

        public override string Name => "POSITION_TARGET_LOCAL_NED";
    }

    /// <summary>
    ///  POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class PositionTargetLocalNedPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +4 // float afx
            +4 // float afy
            +4 // float afz
            +4 // float yaw
            +4 // float yaw_rate
            + 2 // uint16_t type_mask
            + 1 // uint8_t coordinate_frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 51 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            FloatType.Accept(visitor,AfxField, ref _afx);    
            FloatType.Accept(visitor,AfyField, ref _afy);    
            FloatType.Accept(visitor,AfzField, ref _afz);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,YawRateField, ref _yawRate);    
            var tmpTypeMask = (ushort)TypeMask;
            UInt16Type.Accept(visitor,TypeMaskField, ref tmpTypeMask);
            TypeMask = (PositionTargetTypemask)tmpTypeMask;
            var tmpCoordinateFrame = (byte)CoordinateFrame;
            UInt8Type.Accept(visitor,CoordinateFrameField, ref tmpCoordinateFrame);
            CoordinateFrame = (MavFrame)tmpCoordinateFrame;

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X Position in NED frame
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X Position in NED frame")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y Position in NED frame
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y Position in NED frame")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z Position in NED frame (note, altitude is negative in NED)
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z Position in NED frame (note, altitude is negative in NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfxField = new Field.Builder()
            .Name(nameof(Afx))
            .Title("afx")
            .Description("X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afx;
        public float Afx { get => _afx; set => _afx = value; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfyField = new Field.Builder()
            .Name(nameof(Afy))
            .Title("afy")
            .Description("Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afy;
        public float Afy { get => _afy; set => _afy = value; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfzField = new Field.Builder()
            .Name(nameof(Afz))
            .Title("afz")
            .Description("Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afz;
        public float Afz { get => _afz; set => _afz = value; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("yaw setpoint")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawRateField = new Field.Builder()
            .Name(nameof(YawRate))
            .Title("yaw_rate")
            .Description("yaw rate setpoint")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawRate;
        public float YawRate { get => _yawRate; set => _yawRate = value; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeMaskField = new Field.Builder()
            .Name(nameof(TypeMask))
            .Title("bitmask")
            .Description("Bitmap to indicate which dimensions should be ignored by the vehicle.")
            .DataType(new UInt16Type(PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Min(),PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(PositionTargetTypemaskHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private PositionTargetTypemask _typeMask;
        public PositionTargetTypemask TypeMask { get => _typeMask; set => _typeMask = value; } 
        /// <summary>
        /// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CoordinateFrameField = new Field.Builder()
            .Name(nameof(CoordinateFrame))
            .Title("coordinate_frame")
            .Description("Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _coordinateFrame;
        public MavFrame CoordinateFrame { get => _coordinateFrame; set => _coordinateFrame = value; } 
    }
    /// <summary>
    /// Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).
    ///  SET_POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class SetPositionTargetGlobalIntPacket : MavlinkV2Message<SetPositionTargetGlobalIntPayload>
    {
        public const int MessageId = 86;
        
        public const byte CrcExtra = 5;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetPositionTargetGlobalIntPayload Payload { get; } = new();

        public override string Name => "SET_POSITION_TARGET_GLOBAL_INT";
    }

    /// <summary>
    ///  SET_POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class SetPositionTargetGlobalIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // int32_t lat_int
            +4 // int32_t lon_int
            +4 // float alt
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +4 // float afx
            +4 // float afy
            +4 // float afz
            +4 // float yaw
            +4 // float yaw_rate
            + 2 // uint16_t type_mask
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t coordinate_frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LatInt = BinSerialize.ReadInt(ref buffer);
            LonInt = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,LatInt);
            BinSerialize.WriteInt(ref buffer,LonInt);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 53 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int32Type.Accept(visitor,LatIntField, ref _latInt);    
            Int32Type.Accept(visitor,LonIntField, ref _lonInt);    
            FloatType.Accept(visitor,AltField, ref _alt);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            FloatType.Accept(visitor,AfxField, ref _afx);    
            FloatType.Accept(visitor,AfyField, ref _afy);    
            FloatType.Accept(visitor,AfzField, ref _afz);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,YawRateField, ref _yawRate);    
            var tmpTypeMask = (ushort)TypeMask;
            UInt16Type.Accept(visitor,TypeMaskField, ref tmpTypeMask);
            TypeMask = (PositionTargetTypemask)tmpTypeMask;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpCoordinateFrame = (byte)CoordinateFrame;
            UInt8Type.Accept(visitor,CoordinateFrameField, ref tmpCoordinateFrame);
            CoordinateFrame = (MavFrame)tmpCoordinateFrame;

        }

        /// <summary>
        /// Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X Position in WGS84 frame
        /// OriginName: lat_int, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatIntField = new Field.Builder()
            .Name(nameof(LatInt))
            .Title("lat_int")
            .Description("X Position in WGS84 frame")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latInt;
        public int LatInt { get => _latInt; set => _latInt = value; }
        /// <summary>
        /// Y Position in WGS84 frame
        /// OriginName: lon_int, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonIntField = new Field.Builder()
            .Name(nameof(LonInt))
            .Title("lon_int")
            .Description("Y Position in WGS84 frame")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lonInt;
        public int LonInt { get => _lonInt; set => _lonInt = value; }
        /// <summary>
        /// Altitude (MSL, Relative to home, or AGL - depending on frame)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL, Relative to home, or AGL - depending on frame)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _alt;
        public float Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfxField = new Field.Builder()
            .Name(nameof(Afx))
            .Title("afx")
            .Description("X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afx;
        public float Afx { get => _afx; set => _afx = value; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfyField = new Field.Builder()
            .Name(nameof(Afy))
            .Title("afy")
            .Description("Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afy;
        public float Afy { get => _afy; set => _afy = value; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfzField = new Field.Builder()
            .Name(nameof(Afz))
            .Title("afz")
            .Description("Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afz;
        public float Afz { get => _afz; set => _afz = value; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("yaw setpoint")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawRateField = new Field.Builder()
            .Name(nameof(YawRate))
            .Title("yaw_rate")
            .Description("yaw rate setpoint")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawRate;
        public float YawRate { get => _yawRate; set => _yawRate = value; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeMaskField = new Field.Builder()
            .Name(nameof(TypeMask))
            .Title("bitmask")
            .Description("Bitmap to indicate which dimensions should be ignored by the vehicle.")
            .DataType(new UInt16Type(PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Min(),PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(PositionTargetTypemaskHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private PositionTargetTypemask _typeMask;
        public PositionTargetTypemask TypeMask { get => _typeMask; set => _typeMask = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CoordinateFrameField = new Field.Builder()
            .Name(nameof(CoordinateFrame))
            .Title("coordinate_frame")
            .Description("Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _coordinateFrame;
        public MavFrame CoordinateFrame { get => _coordinateFrame; set => _coordinateFrame = value; } 
    }
    /// <summary>
    /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.
    ///  POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class PositionTargetGlobalIntPacket : MavlinkV2Message<PositionTargetGlobalIntPayload>
    {
        public const int MessageId = 87;
        
        public const byte CrcExtra = 150;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override PositionTargetGlobalIntPayload Payload { get; } = new();

        public override string Name => "POSITION_TARGET_GLOBAL_INT";
    }

    /// <summary>
    ///  POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class PositionTargetGlobalIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // int32_t lat_int
            +4 // int32_t lon_int
            +4 // float alt
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +4 // float afx
            +4 // float afy
            +4 // float afz
            +4 // float yaw
            +4 // float yaw_rate
            + 2 // uint16_t type_mask
            + 1 // uint8_t coordinate_frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LatInt = BinSerialize.ReadInt(ref buffer);
            LonInt = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,LatInt);
            BinSerialize.WriteInt(ref buffer,LonInt);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 51 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int32Type.Accept(visitor,LatIntField, ref _latInt);    
            Int32Type.Accept(visitor,LonIntField, ref _lonInt);    
            FloatType.Accept(visitor,AltField, ref _alt);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            FloatType.Accept(visitor,AfxField, ref _afx);    
            FloatType.Accept(visitor,AfyField, ref _afy);    
            FloatType.Accept(visitor,AfzField, ref _afz);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,YawRateField, ref _yawRate);    
            var tmpTypeMask = (ushort)TypeMask;
            UInt16Type.Accept(visitor,TypeMaskField, ref tmpTypeMask);
            TypeMask = (PositionTargetTypemask)tmpTypeMask;
            var tmpCoordinateFrame = (byte)CoordinateFrame;
            UInt8Type.Accept(visitor,CoordinateFrameField, ref tmpCoordinateFrame);
            CoordinateFrame = (MavFrame)tmpCoordinateFrame;

        }

        /// <summary>
        /// Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X Position in WGS84 frame
        /// OriginName: lat_int, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatIntField = new Field.Builder()
            .Name(nameof(LatInt))
            .Title("lat_int")
            .Description("X Position in WGS84 frame")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latInt;
        public int LatInt { get => _latInt; set => _latInt = value; }
        /// <summary>
        /// Y Position in WGS84 frame
        /// OriginName: lon_int, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonIntField = new Field.Builder()
            .Name(nameof(LonInt))
            .Title("lon_int")
            .Description("Y Position in WGS84 frame")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lonInt;
        public int LonInt { get => _lonInt; set => _lonInt = value; }
        /// <summary>
        /// Altitude (MSL, AGL or relative to home altitude, depending on frame)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL, AGL or relative to home altitude, depending on frame)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _alt;
        public float Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z velocity in NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfxField = new Field.Builder()
            .Name(nameof(Afx))
            .Title("afx")
            .Description("X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afx;
        public float Afx { get => _afx; set => _afx = value; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfyField = new Field.Builder()
            .Name(nameof(Afy))
            .Title("afy")
            .Description("Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afy;
        public float Afy { get => _afy; set => _afy = value; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AfzField = new Field.Builder()
            .Name(nameof(Afz))
            .Title("afz")
            .Description("Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _afz;
        public float Afz { get => _afz; set => _afz = value; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("yaw setpoint")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawRateField = new Field.Builder()
            .Name(nameof(YawRate))
            .Title("yaw_rate")
            .Description("yaw rate setpoint")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawRate;
        public float YawRate { get => _yawRate; set => _yawRate = value; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeMaskField = new Field.Builder()
            .Name(nameof(TypeMask))
            .Title("bitmask")
            .Description("Bitmap to indicate which dimensions should be ignored by the vehicle.")
            .DataType(new UInt16Type(PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Min(),PositionTargetTypemaskHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(PositionTargetTypemaskHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private PositionTargetTypemask _typeMask;
        public PositionTargetTypemask TypeMask { get => _typeMask; set => _typeMask = value; } 
        /// <summary>
        /// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CoordinateFrameField = new Field.Builder()
            .Name(nameof(CoordinateFrame))
            .Title("coordinate_frame")
            .Description("Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _coordinateFrame;
        public MavFrame CoordinateFrame { get => _coordinateFrame; set => _coordinateFrame = value; } 
    }
    /// <summary>
    /// The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    ///  LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
    /// </summary>
    public class LocalPositionNedSystemGlobalOffsetPacket : MavlinkV2Message<LocalPositionNedSystemGlobalOffsetPayload>
    {
        public const int MessageId = 89;
        
        public const byte CrcExtra = 231;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LocalPositionNedSystemGlobalOffsetPayload Payload { get; } = new();

        public override string Name => "LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET";
    }

    /// <summary>
    ///  LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
    /// </summary>
    public class LocalPositionNedSystemGlobalOffsetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            /* PayloadByteSize = 28 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Roll
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Roll")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Pitch
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
    }
    /// <summary>
    /// Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
    ///  HIL_STATE
    /// </summary>
    public class HilStatePacket : MavlinkV2Message<HilStatePayload>
    {
        public const int MessageId = 90;
        
        public const byte CrcExtra = 183;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilStatePayload Payload { get; } = new();

        public override string Name => "HIL_STATE";
    }

    /// <summary>
    ///  HIL_STATE
    /// </summary>
    public class HilStatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 56; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 56; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +4 // float rollspeed
            +4 // float pitchspeed
            +4 // float yawspeed
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +2 // int16_t vx
            +2 // int16_t vy
            +2 // int16_t vz
            +2 // int16_t xacc
            +2 // int16_t yacc
            +2 // int16_t zacc
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            /* PayloadByteSize = 56 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,RollspeedField, ref _rollspeed);    
            FloatType.Accept(visitor,PitchspeedField, ref _pitchspeed);    
            FloatType.Accept(visitor,YawspeedField, ref _yawspeed);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            Int16Type.Accept(visitor,VxField, ref _vx);
            Int16Type.Accept(visitor,VyField, ref _vy);
            Int16Type.Accept(visitor,VzField, ref _vz);
            Int16Type.Accept(visitor,XaccField, ref _xacc);
            Int16Type.Accept(visitor,YaccField, ref _yacc);
            Int16Type.Accept(visitor,ZaccField, ref _zacc);

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Roll angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Body frame roll / phi angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollspeedField = new Field.Builder()
            .Name(nameof(Rollspeed))
            .Title("rollspeed")
            .Description("Body frame roll / phi angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _rollspeed;
        public float Rollspeed { get => _rollspeed; set => _rollspeed = value; }
        /// <summary>
        /// Body frame pitch / theta angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchspeedField = new Field.Builder()
            .Name(nameof(Pitchspeed))
            .Title("pitchspeed")
            .Description("Body frame pitch / theta angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchspeed;
        public float Pitchspeed { get => _pitchspeed; set => _pitchspeed = value; }
        /// <summary>
        /// Body frame yaw / psi angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawspeedField = new Field.Builder()
            .Name(nameof(Yawspeed))
            .Title("yawspeed")
            .Description("Body frame yaw / psi angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawspeed;
        public float Yawspeed { get => _yawspeed; set => _yawspeed = value; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Ground X Speed (Latitude)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("Ground X Speed (Latitude)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vx;
        public short Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Ground Y Speed (Longitude)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Ground Y Speed (Longitude)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vy;
        public short Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Ground Z Speed (Altitude)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Ground Z Speed (Altitude)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vz;
        public short Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _xacc;
        public short Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _yacc;
        public short Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _zacc;
        public short Zacc { get => _zacc; set => _zacc = value; }
    }
    /// <summary>
    /// Sent from autopilot to simulation. Hardware in the loop control outputs
    ///  HIL_CONTROLS
    /// </summary>
    public class HilControlsPacket : MavlinkV2Message<HilControlsPayload>
    {
        public const int MessageId = 91;
        
        public const byte CrcExtra = 63;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilControlsPayload Payload { get; } = new();

        public override string Name => "HIL_CONTROLS";
    }

    /// <summary>
    ///  HIL_CONTROLS
    /// </summary>
    public class HilControlsPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float roll_ailerons
            +4 // float pitch_elevator
            +4 // float yaw_rudder
            +4 // float throttle
            +4 // float aux1
            +4 // float aux2
            +4 // float aux3
            +4 // float aux4
            + 1 // uint8_t mode
            +1 // uint8_t nav_mode
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            RollAilerons = BinSerialize.ReadFloat(ref buffer);
            PitchElevator = BinSerialize.ReadFloat(ref buffer);
            YawRudder = BinSerialize.ReadFloat(ref buffer);
            Throttle = BinSerialize.ReadFloat(ref buffer);
            Aux1 = BinSerialize.ReadFloat(ref buffer);
            Aux2 = BinSerialize.ReadFloat(ref buffer);
            Aux3 = BinSerialize.ReadFloat(ref buffer);
            Aux4 = BinSerialize.ReadFloat(ref buffer);
            Mode = (MavMode)BinSerialize.ReadByte(ref buffer);
            NavMode = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,RollAilerons);
            BinSerialize.WriteFloat(ref buffer,PitchElevator);
            BinSerialize.WriteFloat(ref buffer,YawRudder);
            BinSerialize.WriteFloat(ref buffer,Throttle);
            BinSerialize.WriteFloat(ref buffer,Aux1);
            BinSerialize.WriteFloat(ref buffer,Aux2);
            BinSerialize.WriteFloat(ref buffer,Aux3);
            BinSerialize.WriteFloat(ref buffer,Aux4);
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteByte(ref buffer,(byte)NavMode);
            /* PayloadByteSize = 42 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,RollAileronsField, ref _rollAilerons);    
            FloatType.Accept(visitor,PitchElevatorField, ref _pitchElevator);    
            FloatType.Accept(visitor,YawRudderField, ref _yawRudder);    
            FloatType.Accept(visitor,ThrottleField, ref _throttle);    
            FloatType.Accept(visitor,Aux1Field, ref _aux1);    
            FloatType.Accept(visitor,Aux2Field, ref _aux2);    
            FloatType.Accept(visitor,Aux3Field, ref _aux3);    
            FloatType.Accept(visitor,Aux4Field, ref _aux4);    
            var tmpMode = (byte)Mode;
            UInt8Type.Accept(visitor,ModeField, ref tmpMode);
            Mode = (MavMode)tmpMode;
            UInt8Type.Accept(visitor,NavModeField, ref _navMode);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Control output -1 .. 1
        /// OriginName: roll_ailerons, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RollAileronsField = new Field.Builder()
            .Name(nameof(RollAilerons))
            .Title("roll_ailerons")
            .Description("Control output -1 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _rollAilerons;
        public float RollAilerons { get => _rollAilerons; set => _rollAilerons = value; }
        /// <summary>
        /// Control output -1 .. 1
        /// OriginName: pitch_elevator, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PitchElevatorField = new Field.Builder()
            .Name(nameof(PitchElevator))
            .Title("pitch_elevator")
            .Description("Control output -1 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _pitchElevator;
        public float PitchElevator { get => _pitchElevator; set => _pitchElevator = value; }
        /// <summary>
        /// Control output -1 .. 1
        /// OriginName: yaw_rudder, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YawRudderField = new Field.Builder()
            .Name(nameof(YawRudder))
            .Title("yaw_rudder")
            .Description("Control output -1 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _yawRudder;
        public float YawRudder { get => _yawRudder; set => _yawRudder = value; }
        /// <summary>
        /// Throttle 0 .. 1
        /// OriginName: throttle, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ThrottleField = new Field.Builder()
            .Name(nameof(Throttle))
            .Title("throttle")
            .Description("Throttle 0 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _throttle;
        public float Throttle { get => _throttle; set => _throttle = value; }
        /// <summary>
        /// Aux 1, -1 .. 1
        /// OriginName: aux1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Aux1Field = new Field.Builder()
            .Name(nameof(Aux1))
            .Title("aux1")
            .Description("Aux 1, -1 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _aux1;
        public float Aux1 { get => _aux1; set => _aux1 = value; }
        /// <summary>
        /// Aux 2, -1 .. 1
        /// OriginName: aux2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Aux2Field = new Field.Builder()
            .Name(nameof(Aux2))
            .Title("aux2")
            .Description("Aux 2, -1 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _aux2;
        public float Aux2 { get => _aux2; set => _aux2 = value; }
        /// <summary>
        /// Aux 3, -1 .. 1
        /// OriginName: aux3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Aux3Field = new Field.Builder()
            .Name(nameof(Aux3))
            .Title("aux3")
            .Description("Aux 3, -1 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _aux3;
        public float Aux3 { get => _aux3; set => _aux3 = value; }
        /// <summary>
        /// Aux 4, -1 .. 1
        /// OriginName: aux4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Aux4Field = new Field.Builder()
            .Name(nameof(Aux4))
            .Title("aux4")
            .Description("Aux 4, -1 .. 1")

            .DataType(FloatType.Default)
        .Build();
        private float _aux4;
        public float Aux4 { get => _aux4; set => _aux4 = value; }
        /// <summary>
        /// System mode.
        /// OriginName: mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ModeField = new Field.Builder()
            .Name(nameof(Mode))
            .Title("mode")
            .Description("System mode.")
            .DataType(new UInt8Type(MavModeHelper.GetValues(x=>(byte)x).Min(),MavModeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavModeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavMode _mode;
        public MavMode Mode { get => _mode; set => _mode = value; } 
        /// <summary>
        /// Navigation mode (MAV_NAV_MODE)
        /// OriginName: nav_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NavModeField = new Field.Builder()
            .Name(nameof(NavMode))
            .Title("nav_mode")
            .Description("Navigation mode (MAV_NAV_MODE)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _navMode;
        public byte NavMode { get => _navMode; set => _navMode = value; }
    }
    /// <summary>
    /// Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
    ///  HIL_RC_INPUTS_RAW
    /// </summary>
    public class HilRcInputsRawPacket : MavlinkV2Message<HilRcInputsRawPayload>
    {
        public const int MessageId = 92;
        
        public const byte CrcExtra = 54;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilRcInputsRawPayload Payload { get; } = new();

        public override string Name => "HIL_RC_INPUTS_RAW";
    }

    /// <summary>
    ///  HIL_RC_INPUTS_RAW
    /// </summary>
    public class HilRcInputsRawPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 33; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 33; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +2 // uint16_t chan1_raw
            +2 // uint16_t chan2_raw
            +2 // uint16_t chan3_raw
            +2 // uint16_t chan4_raw
            +2 // uint16_t chan5_raw
            +2 // uint16_t chan6_raw
            +2 // uint16_t chan7_raw
            +2 // uint16_t chan8_raw
            +2 // uint16_t chan9_raw
            +2 // uint16_t chan10_raw
            +2 // uint16_t chan11_raw
            +2 // uint16_t chan12_raw
            +1 // uint8_t rssi
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            Chan9Raw = BinSerialize.ReadUShort(ref buffer);
            Chan10Raw = BinSerialize.ReadUShort(ref buffer);
            Chan11Raw = BinSerialize.ReadUShort(ref buffer);
            Chan12Raw = BinSerialize.ReadUShort(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteUShort(ref buffer,Chan9Raw);
            BinSerialize.WriteUShort(ref buffer,Chan10Raw);
            BinSerialize.WriteUShort(ref buffer,Chan11Raw);
            BinSerialize.WriteUShort(ref buffer,Chan12Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 33 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt16Type.Accept(visitor,Chan1RawField, ref _chan1Raw);    
            UInt16Type.Accept(visitor,Chan2RawField, ref _chan2Raw);    
            UInt16Type.Accept(visitor,Chan3RawField, ref _chan3Raw);    
            UInt16Type.Accept(visitor,Chan4RawField, ref _chan4Raw);    
            UInt16Type.Accept(visitor,Chan5RawField, ref _chan5Raw);    
            UInt16Type.Accept(visitor,Chan6RawField, ref _chan6Raw);    
            UInt16Type.Accept(visitor,Chan7RawField, ref _chan7Raw);    
            UInt16Type.Accept(visitor,Chan8RawField, ref _chan8Raw);    
            UInt16Type.Accept(visitor,Chan9RawField, ref _chan9Raw);    
            UInt16Type.Accept(visitor,Chan10RawField, ref _chan10Raw);    
            UInt16Type.Accept(visitor,Chan11RawField, ref _chan11Raw);    
            UInt16Type.Accept(visitor,Chan12RawField, ref _chan12Raw);    
            UInt8Type.Accept(visitor,RssiField, ref _rssi);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// RC channel 1 value
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan1RawField = new Field.Builder()
            .Name(nameof(Chan1Raw))
            .Title("chan1_raw")
            .Description("RC channel 1 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan1Raw;
        public ushort Chan1Raw { get => _chan1Raw; set => _chan1Raw = value; }
        /// <summary>
        /// RC channel 2 value
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan2RawField = new Field.Builder()
            .Name(nameof(Chan2Raw))
            .Title("chan2_raw")
            .Description("RC channel 2 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan2Raw;
        public ushort Chan2Raw { get => _chan2Raw; set => _chan2Raw = value; }
        /// <summary>
        /// RC channel 3 value
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan3RawField = new Field.Builder()
            .Name(nameof(Chan3Raw))
            .Title("chan3_raw")
            .Description("RC channel 3 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan3Raw;
        public ushort Chan3Raw { get => _chan3Raw; set => _chan3Raw = value; }
        /// <summary>
        /// RC channel 4 value
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan4RawField = new Field.Builder()
            .Name(nameof(Chan4Raw))
            .Title("chan4_raw")
            .Description("RC channel 4 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan4Raw;
        public ushort Chan4Raw { get => _chan4Raw; set => _chan4Raw = value; }
        /// <summary>
        /// RC channel 5 value
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan5RawField = new Field.Builder()
            .Name(nameof(Chan5Raw))
            .Title("chan5_raw")
            .Description("RC channel 5 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan5Raw;
        public ushort Chan5Raw { get => _chan5Raw; set => _chan5Raw = value; }
        /// <summary>
        /// RC channel 6 value
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan6RawField = new Field.Builder()
            .Name(nameof(Chan6Raw))
            .Title("chan6_raw")
            .Description("RC channel 6 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan6Raw;
        public ushort Chan6Raw { get => _chan6Raw; set => _chan6Raw = value; }
        /// <summary>
        /// RC channel 7 value
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan7RawField = new Field.Builder()
            .Name(nameof(Chan7Raw))
            .Title("chan7_raw")
            .Description("RC channel 7 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan7Raw;
        public ushort Chan7Raw { get => _chan7Raw; set => _chan7Raw = value; }
        /// <summary>
        /// RC channel 8 value
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan8RawField = new Field.Builder()
            .Name(nameof(Chan8Raw))
            .Title("chan8_raw")
            .Description("RC channel 8 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan8Raw;
        public ushort Chan8Raw { get => _chan8Raw; set => _chan8Raw = value; }
        /// <summary>
        /// RC channel 9 value
        /// OriginName: chan9_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan9RawField = new Field.Builder()
            .Name(nameof(Chan9Raw))
            .Title("chan9_raw")
            .Description("RC channel 9 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan9Raw;
        public ushort Chan9Raw { get => _chan9Raw; set => _chan9Raw = value; }
        /// <summary>
        /// RC channel 10 value
        /// OriginName: chan10_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan10RawField = new Field.Builder()
            .Name(nameof(Chan10Raw))
            .Title("chan10_raw")
            .Description("RC channel 10 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan10Raw;
        public ushort Chan10Raw { get => _chan10Raw; set => _chan10Raw = value; }
        /// <summary>
        /// RC channel 11 value
        /// OriginName: chan11_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan11RawField = new Field.Builder()
            .Name(nameof(Chan11Raw))
            .Title("chan11_raw")
            .Description("RC channel 11 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan11Raw;
        public ushort Chan11Raw { get => _chan11Raw; set => _chan11Raw = value; }
        /// <summary>
        /// RC channel 12 value
        /// OriginName: chan12_raw, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field Chan12RawField = new Field.Builder()
            .Name(nameof(Chan12Raw))
            .Title("chan12_raw")
            .Description("RC channel 12 value")
.Units(@"us")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chan12Raw;
        public ushort Chan12Raw { get => _chan12Raw; set => _chan12Raw = value; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RssiField = new Field.Builder()
            .Name(nameof(Rssi))
            .Title("rssi")
            .Description("Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rssi;
        public byte Rssi { get => _rssi; set => _rssi = value; }
    }
    /// <summary>
    /// Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)
    ///  HIL_ACTUATOR_CONTROLS
    /// </summary>
    public class HilActuatorControlsPacket : MavlinkV2Message<HilActuatorControlsPayload>
    {
        public const int MessageId = 93;
        
        public const byte CrcExtra = 47;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilActuatorControlsPayload Payload { get; } = new();

        public override string Name => "HIL_ACTUATOR_CONTROLS";
    }

    /// <summary>
    ///  HIL_ACTUATOR_CONTROLS
    /// </summary>
    public class HilActuatorControlsPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 81; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 81; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +8 // uint64_t flags
            +Controls.Length * 4 // float[16] controls
            + 1 // uint8_t mode
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Flags = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/81 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Controls[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Mode = (MavModeFlag)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteULong(ref buffer,Flags);
            for(var i=0;i<Controls.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Controls[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            /* PayloadByteSize = 81 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt64Type.Accept(visitor,FlagsField, ref _flags);    
            ArrayType.Accept(visitor,ControlsField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Controls[index]));
            var tmpMode = (byte)Mode;
            UInt8Type.Accept(visitor,ModeField, ref tmpMode);
            Mode = (MavModeFlag)tmpMode;

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Flags as bitfield, 1: indicate simulation using lockstep.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Flags as bitfield, 1: indicate simulation using lockstep.")

            .DataType(UInt64Type.Default)
        .Build();
        private ulong _flags;
        public ulong Flags { get => _flags; set => _flags = value; }
        /// <summary>
        /// Control outputs -1 .. 1. Channel assignment depends on the simulated hardware.
        /// OriginName: controls, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ControlsField = new Field.Builder()
            .Name(nameof(Controls))
            .Title("controls")
            .Description("Control outputs -1 .. 1. Channel assignment depends on the simulated hardware.")

            .DataType(new ArrayType(FloatType.Default,16))        
        .Build();
        public const int ControlsMaxItemsCount = 16;
        public float[] Controls { get; } = new float[16];
        [Obsolete("This method is deprecated. Use GetControlsMaxItemsCount instead.")]
        public byte GetControlsMaxItemsCount() => 16;
        /// <summary>
        /// System mode. Includes arming state.
        /// OriginName: mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ModeField = new Field.Builder()
            .Name(nameof(Mode))
            .Title("bitmask")
            .Description("System mode. Includes arming state.")
            .DataType(new UInt8Type(MavModeFlagHelper.GetValues(x=>(byte)x).Min(),MavModeFlagHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavModeFlagHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavModeFlag _mode;
        public MavModeFlag Mode { get => _mode; set => _mode = value; } 
    }
    /// <summary>
    /// Optical flow from a flow sensor (e.g. optical mouse sensor)
    ///  OPTICAL_FLOW
    /// </summary>
    public class OpticalFlowPacket : MavlinkV2Message<OpticalFlowPayload>
    {
        public const int MessageId = 100;
        
        public const byte CrcExtra = 175;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpticalFlowPayload Payload { get; } = new();

        public override string Name => "OPTICAL_FLOW";
    }

    /// <summary>
    ///  OPTICAL_FLOW
    /// </summary>
    public class OpticalFlowPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 34; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 34; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float flow_comp_m_x
            +4 // float flow_comp_m_y
            +4 // float ground_distance
            +2 // int16_t flow_x
            +2 // int16_t flow_y
            +1 // uint8_t sensor_id
            +1 // uint8_t quality
            +4 // float flow_rate_x
            +4 // float flow_rate_y
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            FlowCompMX = BinSerialize.ReadFloat(ref buffer);
            FlowCompMY = BinSerialize.ReadFloat(ref buffer);
            GroundDistance = BinSerialize.ReadFloat(ref buffer);
            FlowX = BinSerialize.ReadShort(ref buffer);
            FlowY = BinSerialize.ReadShort(ref buffer);
            SensorId = (byte)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'FlowRateX' can be empty
            if (buffer.IsEmpty) return;
            FlowRateX = BinSerialize.ReadFloat(ref buffer);
            // extended field 'FlowRateY' can be empty
            if (buffer.IsEmpty) return;
            FlowRateY = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,FlowCompMX);
            BinSerialize.WriteFloat(ref buffer,FlowCompMY);
            BinSerialize.WriteFloat(ref buffer,GroundDistance);
            BinSerialize.WriteShort(ref buffer,FlowX);
            BinSerialize.WriteShort(ref buffer,FlowY);
            BinSerialize.WriteByte(ref buffer,(byte)SensorId);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            BinSerialize.WriteFloat(ref buffer,FlowRateX);
            BinSerialize.WriteFloat(ref buffer,FlowRateY);
            /* PayloadByteSize = 34 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,FlowCompMXField, ref _flowCompMX);    
            FloatType.Accept(visitor,FlowCompMYField, ref _flowCompMY);    
            FloatType.Accept(visitor,GroundDistanceField, ref _groundDistance);    
            Int16Type.Accept(visitor,FlowXField, ref _flowX);
            Int16Type.Accept(visitor,FlowYField, ref _flowY);
            UInt8Type.Accept(visitor,SensorIdField, ref _sensorId);    
            UInt8Type.Accept(visitor,QualityField, ref _quality);    
            FloatType.Accept(visitor,FlowRateXField, ref _flowRateX);    
            FloatType.Accept(visitor,FlowRateYField, ref _flowRateY);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Flow in x-sensor direction, angular-speed compensated
        /// OriginName: flow_comp_m_x, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field FlowCompMXField = new Field.Builder()
            .Name(nameof(FlowCompMX))
            .Title("flow_comp_m_x")
            .Description("Flow in x-sensor direction, angular-speed compensated")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _flowCompMX;
        public float FlowCompMX { get => _flowCompMX; set => _flowCompMX = value; }
        /// <summary>
        /// Flow in y-sensor direction, angular-speed compensated
        /// OriginName: flow_comp_m_y, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field FlowCompMYField = new Field.Builder()
            .Name(nameof(FlowCompMY))
            .Title("flow_comp_m_y")
            .Description("Flow in y-sensor direction, angular-speed compensated")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _flowCompMY;
        public float FlowCompMY { get => _flowCompMY; set => _flowCompMY = value; }
        /// <summary>
        /// Ground distance. Positive value: distance known. Negative value: Unknown distance
        /// OriginName: ground_distance, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field GroundDistanceField = new Field.Builder()
            .Name(nameof(GroundDistance))
            .Title("ground_distance")
            .Description("Ground distance. Positive value: distance known. Negative value: Unknown distance")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _groundDistance;
        public float GroundDistance { get => _groundDistance; set => _groundDistance = value; }
        /// <summary>
        /// Flow in x-sensor direction
        /// OriginName: flow_x, Units: dpix, IsExtended: false
        /// </summary>
        public static readonly Field FlowXField = new Field.Builder()
            .Name(nameof(FlowX))
            .Title("flow_x")
            .Description("Flow in x-sensor direction")
.Units(@"dpix")
            .DataType(Int16Type.Default)
        .Build();
        private short _flowX;
        public short FlowX { get => _flowX; set => _flowX = value; }
        /// <summary>
        /// Flow in y-sensor direction
        /// OriginName: flow_y, Units: dpix, IsExtended: false
        /// </summary>
        public static readonly Field FlowYField = new Field.Builder()
            .Name(nameof(FlowY))
            .Title("flow_y")
            .Description("Flow in y-sensor direction")
.Units(@"dpix")
            .DataType(Int16Type.Default)
        .Build();
        private short _flowY;
        public short FlowY { get => _flowY; set => _flowY = value; }
        /// <summary>
        /// Sensor ID
        /// OriginName: sensor_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SensorIdField = new Field.Builder()
            .Name(nameof(SensorId))
            .Title("sensor_id")
            .Description("Sensor ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _sensorId;
        public byte SensorId { get => _sensorId; set => _sensorId = value; }
        /// <summary>
        /// Optical flow quality / confidence. 0: bad, 255: maximum quality
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QualityField = new Field.Builder()
            .Name(nameof(Quality))
            .Title("quality")
            .Description("Optical flow quality / confidence. 0: bad, 255: maximum quality")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _quality;
        public byte Quality { get => _quality; set => _quality = value; }
        /// <summary>
        /// Flow rate about X axis
        /// OriginName: flow_rate_x, Units: rad/s, IsExtended: true
        /// </summary>
        public static readonly Field FlowRateXField = new Field.Builder()
            .Name(nameof(FlowRateX))
            .Title("flow_rate_x")
            .Description("Flow rate about X axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _flowRateX;
        public float FlowRateX { get => _flowRateX; set => _flowRateX = value; }
        /// <summary>
        /// Flow rate about Y axis
        /// OriginName: flow_rate_y, Units: rad/s, IsExtended: true
        /// </summary>
        public static readonly Field FlowRateYField = new Field.Builder()
            .Name(nameof(FlowRateY))
            .Title("flow_rate_y")
            .Description("Flow rate about Y axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _flowRateY;
        public float FlowRateY { get => _flowRateY; set => _flowRateY = value; }
    }
    /// <summary>
    /// Global position/attitude estimate from a vision source.
    ///  GLOBAL_VISION_POSITION_ESTIMATE
    /// </summary>
    public class GlobalVisionPositionEstimatePacket : MavlinkV2Message<GlobalVisionPositionEstimatePayload>
    {
        public const int MessageId = 101;
        
        public const byte CrcExtra = 102;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GlobalVisionPositionEstimatePayload Payload { get; } = new();

        public override string Name => "GLOBAL_VISION_POSITION_ESTIMATE";
    }

    /// <summary>
    ///  GLOBAL_VISION_POSITION_ESTIMATE
    /// </summary>
    public class GlobalVisionPositionEstimatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 117; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 117; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t usec
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +Covariance.Length * 4 // float[21] covariance
            +1 // uint8_t reset_counter
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            /* PayloadByteSize = 117 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,UsecField, ref _usec);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));
            UInt8Type.Accept(visitor,ResetCounterField, ref _resetCounter);    

        }

        /// <summary>
        /// Timestamp (UNIX time or since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field UsecField = new Field.Builder()
            .Name(nameof(Usec))
            .Title("usec")
            .Description("Timestamp (UNIX time or since system boot)")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _usec;
        public ulong Usec { get => _usec; set => _usec = value; }
        /// <summary>
        /// Global X position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("Global X position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Global Y position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Global Y position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Global Z position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Global Z position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Roll angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,21))        
        .Build();
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ResetCounterField = new Field.Builder()
            .Name(nameof(ResetCounter))
            .Title("reset_counter")
            .Description("Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _resetCounter;
        public byte ResetCounter { get => _resetCounter; set => _resetCounter = value; }
    }
    /// <summary>
    /// Local position/attitude estimate from a vision source.
    ///  VISION_POSITION_ESTIMATE
    /// </summary>
    public class VisionPositionEstimatePacket : MavlinkV2Message<VisionPositionEstimatePayload>
    {
        public const int MessageId = 102;
        
        public const byte CrcExtra = 158;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override VisionPositionEstimatePayload Payload { get; } = new();

        public override string Name => "VISION_POSITION_ESTIMATE";
    }

    /// <summary>
    ///  VISION_POSITION_ESTIMATE
    /// </summary>
    public class VisionPositionEstimatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 117; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 117; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t usec
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +Covariance.Length * 4 // float[21] covariance
            +1 // uint8_t reset_counter
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            /* PayloadByteSize = 117 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,UsecField, ref _usec);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));
            UInt8Type.Accept(visitor,ResetCounterField, ref _resetCounter);    

        }

        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field UsecField = new Field.Builder()
            .Name(nameof(Usec))
            .Title("usec")
            .Description("Timestamp (UNIX time or time since system boot)")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _usec;
        public ulong Usec { get => _usec; set => _usec = value; }
        /// <summary>
        /// Local X position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("Local X position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Local Y position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Local Y position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Local Z position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Local Z position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Roll angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,21))        
        .Build();
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ResetCounterField = new Field.Builder()
            .Name(nameof(ResetCounter))
            .Title("reset_counter")
            .Description("Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _resetCounter;
        public byte ResetCounter { get => _resetCounter; set => _resetCounter = value; }
    }
    /// <summary>
    /// Speed estimate from a vision source.
    ///  VISION_SPEED_ESTIMATE
    /// </summary>
    public class VisionSpeedEstimatePacket : MavlinkV2Message<VisionSpeedEstimatePayload>
    {
        public const int MessageId = 103;
        
        public const byte CrcExtra = 208;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override VisionSpeedEstimatePayload Payload { get; } = new();

        public override string Name => "VISION_SPEED_ESTIMATE";
    }

    /// <summary>
    ///  VISION_SPEED_ESTIMATE
    /// </summary>
    public class VisionSpeedEstimatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t usec
            +4 // float x
            +4 // float y
            +4 // float z
            +Covariance.Length * 4 // float[9] covariance
            +1 // uint8_t reset_counter
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 9;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            /* PayloadByteSize = 57 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,UsecField, ref _usec);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));
            UInt8Type.Accept(visitor,ResetCounterField, ref _resetCounter);    

        }

        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field UsecField = new Field.Builder()
            .Name(nameof(Usec))
            .Title("usec")
            .Description("Timestamp (UNIX time or time since system boot)")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _usec;
        public ulong Usec { get => _usec; set => _usec = value; }
        /// <summary>
        /// Global X speed
        /// OriginName: x, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("Global X speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Global Y speed
        /// OriginName: y, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Global Y speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Global Z speed
        /// OriginName: z, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Global Z speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,9))        
        .Build();
        public const int CovarianceMaxItemsCount = 9;
        public float[] Covariance { get; } = new float[9];
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ResetCounterField = new Field.Builder()
            .Name(nameof(ResetCounter))
            .Title("reset_counter")
            .Description("Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _resetCounter;
        public byte ResetCounter { get => _resetCounter; set => _resetCounter = value; }
    }
    /// <summary>
    /// Global position estimate from a Vicon motion system source.
    ///  VICON_POSITION_ESTIMATE
    /// </summary>
    public class ViconPositionEstimatePacket : MavlinkV2Message<ViconPositionEstimatePayload>
    {
        public const int MessageId = 104;
        
        public const byte CrcExtra = 56;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ViconPositionEstimatePayload Payload { get; } = new();

        public override string Name => "VICON_POSITION_ESTIMATE";
    }

    /// <summary>
    ///  VICON_POSITION_ESTIMATE
    /// </summary>
    public class ViconPositionEstimatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 116; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 116; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t usec
            +4 // float x
            +4 // float y
            +4 // float z
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +Covariance.Length * 4 // float[21] covariance
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            /* PayloadByteSize = 116 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,UsecField, ref _usec);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));

        }

        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field UsecField = new Field.Builder()
            .Name(nameof(Usec))
            .Title("usec")
            .Description("Timestamp (UNIX time or time since system boot)")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _usec;
        public ulong Usec { get => _usec; set => _usec = value; }
        /// <summary>
        /// Global X position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("Global X position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Global Y position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Global Y position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Global Z position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Global Z position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Roll angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw angle")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,21))        
        .Build();
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
    }
    /// <summary>
    /// The IMU readings in SI units in NED body frame
    ///  HIGHRES_IMU
    /// </summary>
    public class HighresImuPacket : MavlinkV2Message<HighresImuPayload>
    {
        public const int MessageId = 105;
        
        public const byte CrcExtra = 93;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HighresImuPayload Payload { get; } = new();

        public override string Name => "HIGHRES_IMU";
    }

    /// <summary>
    ///  HIGHRES_IMU
    /// </summary>
    public class HighresImuPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 63; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 63; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float xacc
            +4 // float yacc
            +4 // float zacc
            +4 // float xgyro
            +4 // float ygyro
            +4 // float zgyro
            +4 // float xmag
            +4 // float ymag
            +4 // float zmag
            +4 // float abs_pressure
            +4 // float diff_pressure
            +4 // float pressure_alt
            +4 // float temperature
            + 2 // uint16_t fields_updated
            +1 // uint8_t id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Xacc = BinSerialize.ReadFloat(ref buffer);
            Yacc = BinSerialize.ReadFloat(ref buffer);
            Zacc = BinSerialize.ReadFloat(ref buffer);
            Xgyro = BinSerialize.ReadFloat(ref buffer);
            Ygyro = BinSerialize.ReadFloat(ref buffer);
            Zgyro = BinSerialize.ReadFloat(ref buffer);
            Xmag = BinSerialize.ReadFloat(ref buffer);
            Ymag = BinSerialize.ReadFloat(ref buffer);
            Zmag = BinSerialize.ReadFloat(ref buffer);
            AbsPressure = BinSerialize.ReadFloat(ref buffer);
            DiffPressure = BinSerialize.ReadFloat(ref buffer);
            PressureAlt = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadFloat(ref buffer);
            FieldsUpdated = (HighresImuUpdatedFlags)BinSerialize.ReadUShort(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Xacc);
            BinSerialize.WriteFloat(ref buffer,Yacc);
            BinSerialize.WriteFloat(ref buffer,Zacc);
            BinSerialize.WriteFloat(ref buffer,Xgyro);
            BinSerialize.WriteFloat(ref buffer,Ygyro);
            BinSerialize.WriteFloat(ref buffer,Zgyro);
            BinSerialize.WriteFloat(ref buffer,Xmag);
            BinSerialize.WriteFloat(ref buffer,Ymag);
            BinSerialize.WriteFloat(ref buffer,Zmag);
            BinSerialize.WriteFloat(ref buffer,AbsPressure);
            BinSerialize.WriteFloat(ref buffer,DiffPressure);
            BinSerialize.WriteFloat(ref buffer,PressureAlt);
            BinSerialize.WriteFloat(ref buffer,Temperature);
            BinSerialize.WriteUShort(ref buffer,(ushort)FieldsUpdated);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            /* PayloadByteSize = 63 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,XaccField, ref _xacc);    
            FloatType.Accept(visitor,YaccField, ref _yacc);    
            FloatType.Accept(visitor,ZaccField, ref _zacc);    
            FloatType.Accept(visitor,XgyroField, ref _xgyro);    
            FloatType.Accept(visitor,YgyroField, ref _ygyro);    
            FloatType.Accept(visitor,ZgyroField, ref _zgyro);    
            FloatType.Accept(visitor,XmagField, ref _xmag);    
            FloatType.Accept(visitor,YmagField, ref _ymag);    
            FloatType.Accept(visitor,ZmagField, ref _zmag);    
            FloatType.Accept(visitor,AbsPressureField, ref _absPressure);    
            FloatType.Accept(visitor,DiffPressureField, ref _diffPressure);    
            FloatType.Accept(visitor,PressureAltField, ref _pressureAlt);    
            FloatType.Accept(visitor,TemperatureField, ref _temperature);    
            var tmpFieldsUpdated = (ushort)FieldsUpdated;
            UInt16Type.Accept(visitor,FieldsUpdatedField, ref tmpFieldsUpdated);
            FieldsUpdated = (HighresImuUpdatedFlags)tmpFieldsUpdated;
            UInt8Type.Accept(visitor,IdField, ref _id);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xacc;
        public float Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yacc;
        public float Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zacc;
        public float Zacc { get => _zacc; set => _zacc = value; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field XgyroField = new Field.Builder()
            .Name(nameof(Xgyro))
            .Title("xgyro")
            .Description("Angular speed around X axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xgyro;
        public float Xgyro { get => _xgyro; set => _xgyro = value; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YgyroField = new Field.Builder()
            .Name(nameof(Ygyro))
            .Title("ygyro")
            .Description("Angular speed around Y axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _ygyro;
        public float Ygyro { get => _ygyro; set => _ygyro = value; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field ZgyroField = new Field.Builder()
            .Name(nameof(Zgyro))
            .Title("zgyro")
            .Description("Angular speed around Z axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zgyro;
        public float Zgyro { get => _zgyro; set => _zgyro = value; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: gauss, IsExtended: false
        /// </summary>
        public static readonly Field XmagField = new Field.Builder()
            .Name(nameof(Xmag))
            .Title("xmag")
            .Description("X Magnetic field")
.Units(@"gauss")
            .DataType(FloatType.Default)
        .Build();
        private float _xmag;
        public float Xmag { get => _xmag; set => _xmag = value; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: gauss, IsExtended: false
        /// </summary>
        public static readonly Field YmagField = new Field.Builder()
            .Name(nameof(Ymag))
            .Title("ymag")
            .Description("Y Magnetic field")
.Units(@"gauss")
            .DataType(FloatType.Default)
        .Build();
        private float _ymag;
        public float Ymag { get => _ymag; set => _ymag = value; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: gauss, IsExtended: false
        /// </summary>
        public static readonly Field ZmagField = new Field.Builder()
            .Name(nameof(Zmag))
            .Title("zmag")
            .Description("Z Magnetic field")
.Units(@"gauss")
            .DataType(FloatType.Default)
        .Build();
        private float _zmag;
        public float Zmag { get => _zmag; set => _zmag = value; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: abs_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field AbsPressureField = new Field.Builder()
            .Name(nameof(AbsPressure))
            .Title("abs_pressure")
            .Description("Absolute pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _absPressure;
        public float AbsPressure { get => _absPressure; set => _absPressure = value; }
        /// <summary>
        /// Differential pressure
        /// OriginName: diff_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field DiffPressureField = new Field.Builder()
            .Name(nameof(DiffPressure))
            .Title("diff_pressure")
            .Description("Differential pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _diffPressure;
        public float DiffPressure { get => _diffPressure; set => _diffPressure = value; }
        /// <summary>
        /// Altitude calculated from pressure
        /// OriginName: pressure_alt, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PressureAltField = new Field.Builder()
            .Name(nameof(PressureAlt))
            .Title("pressure_alt")
            .Description("Altitude calculated from pressure")

            .DataType(FloatType.Default)
        .Build();
        private float _pressureAlt;
        public float PressureAlt { get => _pressureAlt; set => _pressureAlt = value; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature")
.Units(@"degC")
            .DataType(FloatType.Default)
        .Build();
        private float _temperature;
        public float Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Bitmap for fields that have updated since last message
        /// OriginName: fields_updated, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FieldsUpdatedField = new Field.Builder()
            .Name(nameof(FieldsUpdated))
            .Title("bitmask")
            .Description("Bitmap for fields that have updated since last message")
            .DataType(new UInt16Type(HighresImuUpdatedFlagsHelper.GetValues(x=>(ushort)x).Min(),HighresImuUpdatedFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(HighresImuUpdatedFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private HighresImuUpdatedFlags _fieldsUpdated;
        public HighresImuUpdatedFlags FieldsUpdated { get => _fieldsUpdated; set => _fieldsUpdated = value; } 
        /// <summary>
        /// Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
    }
    /// <summary>
    /// Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)
    ///  OPTICAL_FLOW_RAD
    /// </summary>
    public class OpticalFlowRadPacket : MavlinkV2Message<OpticalFlowRadPayload>
    {
        public const int MessageId = 106;
        
        public const byte CrcExtra = 138;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpticalFlowRadPayload Payload { get; } = new();

        public override string Name => "OPTICAL_FLOW_RAD";
    }

    /// <summary>
    ///  OPTICAL_FLOW_RAD
    /// </summary>
    public class OpticalFlowRadPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 44; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 44; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t integration_time_us
            +4 // float integrated_x
            +4 // float integrated_y
            +4 // float integrated_xgyro
            +4 // float integrated_ygyro
            +4 // float integrated_zgyro
            +4 // uint32_t time_delta_distance_us
            +4 // float distance
            +2 // int16_t temperature
            +1 // uint8_t sensor_id
            +1 // uint8_t quality
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            IntegrationTimeUs = BinSerialize.ReadUInt(ref buffer);
            IntegratedX = BinSerialize.ReadFloat(ref buffer);
            IntegratedY = BinSerialize.ReadFloat(ref buffer);
            IntegratedXgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedYgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedZgyro = BinSerialize.ReadFloat(ref buffer);
            TimeDeltaDistanceUs = BinSerialize.ReadUInt(ref buffer);
            Distance = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            SensorId = (byte)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,IntegrationTimeUs);
            BinSerialize.WriteFloat(ref buffer,IntegratedX);
            BinSerialize.WriteFloat(ref buffer,IntegratedY);
            BinSerialize.WriteFloat(ref buffer,IntegratedXgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedYgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedZgyro);
            BinSerialize.WriteUInt(ref buffer,TimeDeltaDistanceUs);
            BinSerialize.WriteFloat(ref buffer,Distance);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteByte(ref buffer,(byte)SensorId);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 44 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,IntegrationTimeUsField, ref _integrationTimeUs);    
            FloatType.Accept(visitor,IntegratedXField, ref _integratedX);    
            FloatType.Accept(visitor,IntegratedYField, ref _integratedY);    
            FloatType.Accept(visitor,IntegratedXgyroField, ref _integratedXgyro);    
            FloatType.Accept(visitor,IntegratedYgyroField, ref _integratedYgyro);    
            FloatType.Accept(visitor,IntegratedZgyroField, ref _integratedZgyro);    
            UInt32Type.Accept(visitor,TimeDeltaDistanceUsField, ref _timeDeltaDistanceUs);    
            FloatType.Accept(visitor,DistanceField, ref _distance);    
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);
            UInt8Type.Accept(visitor,SensorIdField, ref _sensorId);    
            UInt8Type.Accept(visitor,QualityField, ref _quality);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
        /// OriginName: integration_time_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field IntegrationTimeUsField = new Field.Builder()
            .Name(nameof(IntegrationTimeUs))
            .Title("integration_time_us")
            .Description("Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.")
.Units(@"us")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _integrationTimeUs;
        public uint IntegrationTimeUs { get => _integrationTimeUs; set => _integrationTimeUs = value; }
        /// <summary>
        /// Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
        /// OriginName: integrated_x, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedXField = new Field.Builder()
            .Name(nameof(IntegratedX))
            .Title("integrated_x")
            .Description("Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedX;
        public float IntegratedX { get => _integratedX; set => _integratedX = value; }
        /// <summary>
        /// Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
        /// OriginName: integrated_y, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedYField = new Field.Builder()
            .Name(nameof(IntegratedY))
            .Title("integrated_y")
            .Description("Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedY;
        public float IntegratedY { get => _integratedY; set => _integratedY = value; }
        /// <summary>
        /// RH rotation around X axis
        /// OriginName: integrated_xgyro, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedXgyroField = new Field.Builder()
            .Name(nameof(IntegratedXgyro))
            .Title("integrated_xgyro")
            .Description("RH rotation around X axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedXgyro;
        public float IntegratedXgyro { get => _integratedXgyro; set => _integratedXgyro = value; }
        /// <summary>
        /// RH rotation around Y axis
        /// OriginName: integrated_ygyro, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedYgyroField = new Field.Builder()
            .Name(nameof(IntegratedYgyro))
            .Title("integrated_ygyro")
            .Description("RH rotation around Y axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedYgyro;
        public float IntegratedYgyro { get => _integratedYgyro; set => _integratedYgyro = value; }
        /// <summary>
        /// RH rotation around Z axis
        /// OriginName: integrated_zgyro, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedZgyroField = new Field.Builder()
            .Name(nameof(IntegratedZgyro))
            .Title("integrated_zgyro")
            .Description("RH rotation around Z axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedZgyro;
        public float IntegratedZgyro { get => _integratedZgyro; set => _integratedZgyro = value; }
        /// <summary>
        /// Time since the distance was sampled.
        /// OriginName: time_delta_distance_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeDeltaDistanceUsField = new Field.Builder()
            .Name(nameof(TimeDeltaDistanceUs))
            .Title("time_delta_distance_us")
            .Description("Time since the distance was sampled.")
.Units(@"us")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeDeltaDistanceUs;
        public uint TimeDeltaDistanceUs { get => _timeDeltaDistanceUs; set => _timeDeltaDistanceUs = value; }
        /// <summary>
        /// Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DistanceField = new Field.Builder()
            .Name(nameof(Distance))
            .Title("distance")
            .Description("Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _distance;
        public float Distance { get => _distance; set => _distance = value; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Sensor ID
        /// OriginName: sensor_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SensorIdField = new Field.Builder()
            .Name(nameof(SensorId))
            .Title("sensor_id")
            .Description("Sensor ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _sensorId;
        public byte SensorId { get => _sensorId; set => _sensorId = value; }
        /// <summary>
        /// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QualityField = new Field.Builder()
            .Name(nameof(Quality))
            .Title("quality")
            .Description("Optical flow quality / confidence. 0: no valid flow, 255: maximum quality")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _quality;
        public byte Quality { get => _quality; set => _quality = value; }
    }
    /// <summary>
    /// The IMU readings in SI units in NED body frame
    ///  HIL_SENSOR
    /// </summary>
    public class HilSensorPacket : MavlinkV2Message<HilSensorPayload>
    {
        public const int MessageId = 107;
        
        public const byte CrcExtra = 108;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilSensorPayload Payload { get; } = new();

        public override string Name => "HIL_SENSOR";
    }

    /// <summary>
    ///  HIL_SENSOR
    /// </summary>
    public class HilSensorPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 65; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 65; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float xacc
            +4 // float yacc
            +4 // float zacc
            +4 // float xgyro
            +4 // float ygyro
            +4 // float zgyro
            +4 // float xmag
            +4 // float ymag
            +4 // float zmag
            +4 // float abs_pressure
            +4 // float diff_pressure
            +4 // float pressure_alt
            +4 // float temperature
            + 4 // uint32_t fields_updated
            +1 // uint8_t id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Xacc = BinSerialize.ReadFloat(ref buffer);
            Yacc = BinSerialize.ReadFloat(ref buffer);
            Zacc = BinSerialize.ReadFloat(ref buffer);
            Xgyro = BinSerialize.ReadFloat(ref buffer);
            Ygyro = BinSerialize.ReadFloat(ref buffer);
            Zgyro = BinSerialize.ReadFloat(ref buffer);
            Xmag = BinSerialize.ReadFloat(ref buffer);
            Ymag = BinSerialize.ReadFloat(ref buffer);
            Zmag = BinSerialize.ReadFloat(ref buffer);
            AbsPressure = BinSerialize.ReadFloat(ref buffer);
            DiffPressure = BinSerialize.ReadFloat(ref buffer);
            PressureAlt = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadFloat(ref buffer);
            FieldsUpdated = (HilSensorUpdatedFlags)BinSerialize.ReadUInt(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Xacc);
            BinSerialize.WriteFloat(ref buffer,Yacc);
            BinSerialize.WriteFloat(ref buffer,Zacc);
            BinSerialize.WriteFloat(ref buffer,Xgyro);
            BinSerialize.WriteFloat(ref buffer,Ygyro);
            BinSerialize.WriteFloat(ref buffer,Zgyro);
            BinSerialize.WriteFloat(ref buffer,Xmag);
            BinSerialize.WriteFloat(ref buffer,Ymag);
            BinSerialize.WriteFloat(ref buffer,Zmag);
            BinSerialize.WriteFloat(ref buffer,AbsPressure);
            BinSerialize.WriteFloat(ref buffer,DiffPressure);
            BinSerialize.WriteFloat(ref buffer,PressureAlt);
            BinSerialize.WriteFloat(ref buffer,Temperature);
            BinSerialize.WriteUInt(ref buffer,(uint)FieldsUpdated);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            /* PayloadByteSize = 65 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,XaccField, ref _xacc);    
            FloatType.Accept(visitor,YaccField, ref _yacc);    
            FloatType.Accept(visitor,ZaccField, ref _zacc);    
            FloatType.Accept(visitor,XgyroField, ref _xgyro);    
            FloatType.Accept(visitor,YgyroField, ref _ygyro);    
            FloatType.Accept(visitor,ZgyroField, ref _zgyro);    
            FloatType.Accept(visitor,XmagField, ref _xmag);    
            FloatType.Accept(visitor,YmagField, ref _ymag);    
            FloatType.Accept(visitor,ZmagField, ref _zmag);    
            FloatType.Accept(visitor,AbsPressureField, ref _absPressure);    
            FloatType.Accept(visitor,DiffPressureField, ref _diffPressure);    
            FloatType.Accept(visitor,PressureAltField, ref _pressureAlt);    
            FloatType.Accept(visitor,TemperatureField, ref _temperature);    
            var tmpFieldsUpdated = (uint)FieldsUpdated;
            UInt32Type.Accept(visitor,FieldsUpdatedField, ref tmpFieldsUpdated);
            FieldsUpdated = (HilSensorUpdatedFlags)tmpFieldsUpdated;
            UInt8Type.Accept(visitor,IdField, ref _id);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xacc;
        public float Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yacc;
        public float Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zacc;
        public float Zacc { get => _zacc; set => _zacc = value; }
        /// <summary>
        /// Angular speed around X axis in body frame
        /// OriginName: xgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field XgyroField = new Field.Builder()
            .Name(nameof(Xgyro))
            .Title("xgyro")
            .Description("Angular speed around X axis in body frame")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xgyro;
        public float Xgyro { get => _xgyro; set => _xgyro = value; }
        /// <summary>
        /// Angular speed around Y axis in body frame
        /// OriginName: ygyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YgyroField = new Field.Builder()
            .Name(nameof(Ygyro))
            .Title("ygyro")
            .Description("Angular speed around Y axis in body frame")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _ygyro;
        public float Ygyro { get => _ygyro; set => _ygyro = value; }
        /// <summary>
        /// Angular speed around Z axis in body frame
        /// OriginName: zgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field ZgyroField = new Field.Builder()
            .Name(nameof(Zgyro))
            .Title("zgyro")
            .Description("Angular speed around Z axis in body frame")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zgyro;
        public float Zgyro { get => _zgyro; set => _zgyro = value; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: gauss, IsExtended: false
        /// </summary>
        public static readonly Field XmagField = new Field.Builder()
            .Name(nameof(Xmag))
            .Title("xmag")
            .Description("X Magnetic field")
.Units(@"gauss")
            .DataType(FloatType.Default)
        .Build();
        private float _xmag;
        public float Xmag { get => _xmag; set => _xmag = value; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: gauss, IsExtended: false
        /// </summary>
        public static readonly Field YmagField = new Field.Builder()
            .Name(nameof(Ymag))
            .Title("ymag")
            .Description("Y Magnetic field")
.Units(@"gauss")
            .DataType(FloatType.Default)
        .Build();
        private float _ymag;
        public float Ymag { get => _ymag; set => _ymag = value; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: gauss, IsExtended: false
        /// </summary>
        public static readonly Field ZmagField = new Field.Builder()
            .Name(nameof(Zmag))
            .Title("zmag")
            .Description("Z Magnetic field")
.Units(@"gauss")
            .DataType(FloatType.Default)
        .Build();
        private float _zmag;
        public float Zmag { get => _zmag; set => _zmag = value; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: abs_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field AbsPressureField = new Field.Builder()
            .Name(nameof(AbsPressure))
            .Title("abs_pressure")
            .Description("Absolute pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _absPressure;
        public float AbsPressure { get => _absPressure; set => _absPressure = value; }
        /// <summary>
        /// Differential pressure (airspeed)
        /// OriginName: diff_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field DiffPressureField = new Field.Builder()
            .Name(nameof(DiffPressure))
            .Title("diff_pressure")
            .Description("Differential pressure (airspeed)")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _diffPressure;
        public float DiffPressure { get => _diffPressure; set => _diffPressure = value; }
        /// <summary>
        /// Altitude calculated from pressure
        /// OriginName: pressure_alt, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PressureAltField = new Field.Builder()
            .Name(nameof(PressureAlt))
            .Title("pressure_alt")
            .Description("Altitude calculated from pressure")

            .DataType(FloatType.Default)
        .Build();
        private float _pressureAlt;
        public float PressureAlt { get => _pressureAlt; set => _pressureAlt = value; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature")
.Units(@"degC")
            .DataType(FloatType.Default)
        .Build();
        private float _temperature;
        public float Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Bitmap for fields that have updated since last message
        /// OriginName: fields_updated, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FieldsUpdatedField = new Field.Builder()
            .Name(nameof(FieldsUpdated))
            .Title("bitmask")
            .Description("Bitmap for fields that have updated since last message")
            .DataType(new UInt32Type(HilSensorUpdatedFlagsHelper.GetValues(x=>(uint)x).Min(),HilSensorUpdatedFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(HilSensorUpdatedFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private HilSensorUpdatedFlags _fieldsUpdated;
        public HilSensorUpdatedFlags FieldsUpdated { get => _fieldsUpdated; set => _fieldsUpdated = value; } 
        /// <summary>
        /// Sensor ID (zero indexed). Used for multiple sensor inputs
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Sensor ID (zero indexed). Used for multiple sensor inputs")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
    }
    /// <summary>
    /// Status of simulation environment, if used
    ///  SIM_STATE
    /// </summary>
    public class SimStatePacket : MavlinkV2Message<SimStatePayload>
    {
        public const int MessageId = 108;
        
        public const byte CrcExtra = 32;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SimStatePayload Payload { get; } = new();

        public override string Name => "SIM_STATE";
    }

    /// <summary>
    ///  SIM_STATE
    /// </summary>
    public class SimStatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 92; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 92; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float q1
            +4 // float q2
            +4 // float q3
            +4 // float q4
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +4 // float xacc
            +4 // float yacc
            +4 // float zacc
            +4 // float xgyro
            +4 // float ygyro
            +4 // float zgyro
            +4 // float lat
            +4 // float lon
            +4 // float alt
            +4 // float std_dev_horz
            +4 // float std_dev_vert
            +4 // float vn
            +4 // float ve
            +4 // float vd
            +4 // int32_t lat_int
            +4 // int32_t lon_int
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Q1 = BinSerialize.ReadFloat(ref buffer);
            Q2 = BinSerialize.ReadFloat(ref buffer);
            Q3 = BinSerialize.ReadFloat(ref buffer);
            Q4 = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Xacc = BinSerialize.ReadFloat(ref buffer);
            Yacc = BinSerialize.ReadFloat(ref buffer);
            Zacc = BinSerialize.ReadFloat(ref buffer);
            Xgyro = BinSerialize.ReadFloat(ref buffer);
            Ygyro = BinSerialize.ReadFloat(ref buffer);
            Zgyro = BinSerialize.ReadFloat(ref buffer);
            Lat = BinSerialize.ReadFloat(ref buffer);
            Lon = BinSerialize.ReadFloat(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            StdDevHorz = BinSerialize.ReadFloat(ref buffer);
            StdDevVert = BinSerialize.ReadFloat(ref buffer);
            Vn = BinSerialize.ReadFloat(ref buffer);
            Ve = BinSerialize.ReadFloat(ref buffer);
            Vd = BinSerialize.ReadFloat(ref buffer);
            // extended field 'LatInt' can be empty
            if (buffer.IsEmpty) return;
            LatInt = BinSerialize.ReadInt(ref buffer);
            // extended field 'LonInt' can be empty
            if (buffer.IsEmpty) return;
            LonInt = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Q1);
            BinSerialize.WriteFloat(ref buffer,Q2);
            BinSerialize.WriteFloat(ref buffer,Q3);
            BinSerialize.WriteFloat(ref buffer,Q4);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Xacc);
            BinSerialize.WriteFloat(ref buffer,Yacc);
            BinSerialize.WriteFloat(ref buffer,Zacc);
            BinSerialize.WriteFloat(ref buffer,Xgyro);
            BinSerialize.WriteFloat(ref buffer,Ygyro);
            BinSerialize.WriteFloat(ref buffer,Zgyro);
            BinSerialize.WriteFloat(ref buffer,Lat);
            BinSerialize.WriteFloat(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,StdDevHorz);
            BinSerialize.WriteFloat(ref buffer,StdDevVert);
            BinSerialize.WriteFloat(ref buffer,Vn);
            BinSerialize.WriteFloat(ref buffer,Ve);
            BinSerialize.WriteFloat(ref buffer,Vd);
            BinSerialize.WriteInt(ref buffer,LatInt);
            BinSerialize.WriteInt(ref buffer,LonInt);
            /* PayloadByteSize = 92 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,Q1Field, ref _q1);    
            FloatType.Accept(visitor,Q2Field, ref _q2);    
            FloatType.Accept(visitor,Q3Field, ref _q3);    
            FloatType.Accept(visitor,Q4Field, ref _q4);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,XaccField, ref _xacc);    
            FloatType.Accept(visitor,YaccField, ref _yacc);    
            FloatType.Accept(visitor,ZaccField, ref _zacc);    
            FloatType.Accept(visitor,XgyroField, ref _xgyro);    
            FloatType.Accept(visitor,YgyroField, ref _ygyro);    
            FloatType.Accept(visitor,ZgyroField, ref _zgyro);    
            FloatType.Accept(visitor,LatField, ref _lat);    
            FloatType.Accept(visitor,LonField, ref _lon);    
            FloatType.Accept(visitor,AltField, ref _alt);    
            FloatType.Accept(visitor,StdDevHorzField, ref _stdDevHorz);    
            FloatType.Accept(visitor,StdDevVertField, ref _stdDevVert);    
            FloatType.Accept(visitor,VnField, ref _vn);    
            FloatType.Accept(visitor,VeField, ref _ve);    
            FloatType.Accept(visitor,VdField, ref _vd);    
            Int32Type.Accept(visitor,LatIntField, ref _latInt);    
            Int32Type.Accept(visitor,LonIntField, ref _lonInt);    

        }

        /// <summary>
        /// True attitude quaternion component 1, w (1 in null-rotation)
        /// OriginName: q1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q1Field = new Field.Builder()
            .Name(nameof(Q1))
            .Title("q1")
            .Description("True attitude quaternion component 1, w (1 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q1;
        public float Q1 { get => _q1; set => _q1 = value; }
        /// <summary>
        /// True attitude quaternion component 2, x (0 in null-rotation)
        /// OriginName: q2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q2Field = new Field.Builder()
            .Name(nameof(Q2))
            .Title("q2")
            .Description("True attitude quaternion component 2, x (0 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q2;
        public float Q2 { get => _q2; set => _q2 = value; }
        /// <summary>
        /// True attitude quaternion component 3, y (0 in null-rotation)
        /// OriginName: q3, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q3Field = new Field.Builder()
            .Name(nameof(Q3))
            .Title("q3")
            .Description("True attitude quaternion component 3, y (0 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q3;
        public float Q3 { get => _q3; set => _q3 = value; }
        /// <summary>
        /// True attitude quaternion component 4, z (0 in null-rotation)
        /// OriginName: q4, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Q4Field = new Field.Builder()
            .Name(nameof(Q4))
            .Title("q4")
            .Description("True attitude quaternion component 4, z (0 in null-rotation)")

            .DataType(FloatType.Default)
        .Build();
        private float _q4;
        public float Q4 { get => _q4; set => _q4 = value; }
        /// <summary>
        /// Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
        /// OriginName: roll, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Attitude roll expressed as Euler angles, not recommended except for human-readable outputs")

            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
        /// OriginName: pitch, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs")

            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
        /// OriginName: yaw, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs")

            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xacc;
        public float Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yacc;
        public float Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zacc;
        public float Zacc { get => _zacc; set => _zacc = value; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field XgyroField = new Field.Builder()
            .Name(nameof(Xgyro))
            .Title("xgyro")
            .Description("Angular speed around X axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xgyro;
        public float Xgyro { get => _xgyro; set => _xgyro = value; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YgyroField = new Field.Builder()
            .Name(nameof(Ygyro))
            .Title("ygyro")
            .Description("Angular speed around Y axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _ygyro;
        public float Ygyro { get => _ygyro; set => _ygyro = value; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field ZgyroField = new Field.Builder()
            .Name(nameof(Zgyro))
            .Title("zgyro")
            .Description("Angular speed around Z axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zgyro;
        public float Zgyro { get => _zgyro; set => _zgyro = value; }
        /// <summary>
        /// Latitude (lower precision). Both this and the lat_int field should be set.
        /// OriginName: lat, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude (lower precision). Both this and the lat_int field should be set.")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _lat;
        public float Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude (lower precision). Both this and the lon_int field should be set.
        /// OriginName: lon, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude (lower precision). Both this and the lon_int field should be set.")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _lon;
        public float Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _alt;
        public float Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Horizontal position standard deviation
        /// OriginName: std_dev_horz, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StdDevHorzField = new Field.Builder()
            .Name(nameof(StdDevHorz))
            .Title("std_dev_horz")
            .Description("Horizontal position standard deviation")

            .DataType(FloatType.Default)
        .Build();
        private float _stdDevHorz;
        public float StdDevHorz { get => _stdDevHorz; set => _stdDevHorz = value; }
        /// <summary>
        /// Vertical position standard deviation
        /// OriginName: std_dev_vert, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StdDevVertField = new Field.Builder()
            .Name(nameof(StdDevVert))
            .Title("std_dev_vert")
            .Description("Vertical position standard deviation")

            .DataType(FloatType.Default)
        .Build();
        private float _stdDevVert;
        public float StdDevVert { get => _stdDevVert; set => _stdDevVert = value; }
        /// <summary>
        /// True velocity in north direction in earth-fixed NED frame
        /// OriginName: vn, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VnField = new Field.Builder()
            .Name(nameof(Vn))
            .Title("vn")
            .Description("True velocity in north direction in earth-fixed NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vn;
        public float Vn { get => _vn; set => _vn = value; }
        /// <summary>
        /// True velocity in east direction in earth-fixed NED frame
        /// OriginName: ve, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VeField = new Field.Builder()
            .Name(nameof(Ve))
            .Title("ve")
            .Description("True velocity in east direction in earth-fixed NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _ve;
        public float Ve { get => _ve; set => _ve = value; }
        /// <summary>
        /// True velocity in down direction in earth-fixed NED frame
        /// OriginName: vd, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VdField = new Field.Builder()
            .Name(nameof(Vd))
            .Title("vd")
            .Description("True velocity in down direction in earth-fixed NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vd;
        public float Vd { get => _vd; set => _vd = value; }
        /// <summary>
        /// Latitude (higher precision). If 0, recipients should use the lat field value (otherwise this field is preferred).
        /// OriginName: lat_int, Units: degE7, IsExtended: true
        /// </summary>
        public static readonly Field LatIntField = new Field.Builder()
            .Name(nameof(LatInt))
            .Title("lat_int")
            .Description("Latitude (higher precision). If 0, recipients should use the lat field value (otherwise this field is preferred).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latInt;
        public int LatInt { get => _latInt; set => _latInt = value; }
        /// <summary>
        /// Longitude (higher precision). If 0, recipients should use the lon field value (otherwise this field is preferred).
        /// OriginName: lon_int, Units: degE7, IsExtended: true
        /// </summary>
        public static readonly Field LonIntField = new Field.Builder()
            .Name(nameof(LonInt))
            .Title("lon_int")
            .Description("Longitude (higher precision). If 0, recipients should use the lon field value (otherwise this field is preferred).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lonInt;
        public int LonInt { get => _lonInt; set => _lonInt = value; }
    }
    /// <summary>
    /// Status generated by radio and injected into MAVLink stream.
    ///  RADIO_STATUS
    /// </summary>
    public class RadioStatusPacket : MavlinkV2Message<RadioStatusPayload>
    {
        public const int MessageId = 109;
        
        public const byte CrcExtra = 185;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RadioStatusPayload Payload { get; } = new();

        public override string Name => "RADIO_STATUS";
    }

    /// <summary>
    ///  RADIO_STATUS
    /// </summary>
    public class RadioStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t rxerrors
            +2 // uint16_t fixed
            +1 // uint8_t rssi
            +1 // uint8_t remrssi
            +1 // uint8_t txbuf
            +1 // uint8_t noise
            +1 // uint8_t remnoise
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Rxerrors = BinSerialize.ReadUShort(ref buffer);
            Fixed = BinSerialize.ReadUShort(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);
            Remrssi = (byte)BinSerialize.ReadByte(ref buffer);
            Txbuf = (byte)BinSerialize.ReadByte(ref buffer);
            Noise = (byte)BinSerialize.ReadByte(ref buffer);
            Remnoise = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Rxerrors);
            BinSerialize.WriteUShort(ref buffer,Fixed);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            BinSerialize.WriteByte(ref buffer,(byte)Remrssi);
            BinSerialize.WriteByte(ref buffer,(byte)Txbuf);
            BinSerialize.WriteByte(ref buffer,(byte)Noise);
            BinSerialize.WriteByte(ref buffer,(byte)Remnoise);
            /* PayloadByteSize = 9 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,RxerrorsField, ref _rxerrors);    
            UInt16Type.Accept(visitor,FixedField, ref _fixed);    
            UInt8Type.Accept(visitor,RssiField, ref _rssi);    
            UInt8Type.Accept(visitor,RemrssiField, ref _remrssi);    
            UInt8Type.Accept(visitor,TxbufField, ref _txbuf);    
            UInt8Type.Accept(visitor,NoiseField, ref _noise);    
            UInt8Type.Accept(visitor,RemnoiseField, ref _remnoise);    

        }

        /// <summary>
        /// Count of radio packet receive errors (since boot).
        /// OriginName: rxerrors, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RxerrorsField = new Field.Builder()
            .Name(nameof(Rxerrors))
            .Title("rxerrors")
            .Description("Count of radio packet receive errors (since boot).")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _rxerrors;
        public ushort Rxerrors { get => _rxerrors; set => _rxerrors = value; }
        /// <summary>
        /// Count of error corrected radio packets (since boot).
        /// OriginName: fixed, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FixedField = new Field.Builder()
            .Name(nameof(Fixed))
            .Title("fixed")
            .Description("Count of error corrected radio packets (since boot).")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _fixed;
        public ushort Fixed { get => _fixed; set => _fixed = value; }
        /// <summary>
        /// Local (message sender) received signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RssiField = new Field.Builder()
            .Name(nameof(Rssi))
            .Title("rssi")
            .Description("Local (message sender) received signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rssi;
        public byte Rssi { get => _rssi; set => _rssi = value; }
        /// <summary>
        /// Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: remrssi, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RemrssiField = new Field.Builder()
            .Name(nameof(Remrssi))
            .Title("remrssi")
            .Description("Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _remrssi;
        public byte Remrssi { get => _remrssi; set => _remrssi = value; }
        /// <summary>
        /// Remaining free transmitter buffer space.
        /// OriginName: txbuf, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field TxbufField = new Field.Builder()
            .Name(nameof(Txbuf))
            .Title("txbuf")
            .Description("Remaining free transmitter buffer space.")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _txbuf;
        public byte Txbuf { get => _txbuf; set => _txbuf = value; }
        /// <summary>
        /// Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: noise, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NoiseField = new Field.Builder()
            .Name(nameof(Noise))
            .Title("noise")
            .Description("Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _noise;
        public byte Noise { get => _noise; set => _noise = value; }
        /// <summary>
        /// Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: remnoise, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RemnoiseField = new Field.Builder()
            .Name(nameof(Remnoise))
            .Title("remnoise")
            .Description("Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _remnoise;
        public byte Remnoise { get => _remnoise; set => _remnoise = value; }
    }
    /// <summary>
    /// File transfer protocol message: https://mavlink.io/en/services/ftp.html.
    ///  FILE_TRANSFER_PROTOCOL
    /// </summary>
    public class FileTransferProtocolPacket : MavlinkV2Message<FileTransferProtocolPayload>
    {
        public const int MessageId = 110;
        
        public const byte CrcExtra = 84;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override FileTransferProtocolPayload Payload { get; } = new();

        public override string Name => "FILE_TRANSFER_PROTOCOL";
    }

    /// <summary>
    ///  FILE_TRANSFER_PROTOCOL
    /// </summary>
    public class FileTransferProtocolPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 254; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 254; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_network
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +Payload.Length // uint8_t[251] payload
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetNetwork = (byte)BinSerialize.ReadByte(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/251 - Math.Max(0,((/*PayloadByteSize*/254 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Payload[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetNetwork);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<Payload.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Payload[i]);
            }
            /* PayloadByteSize = 254 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetNetworkField, ref _targetNetwork);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,PayloadField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Payload[index]));    

        }

        /// <summary>
        /// Network ID (0 for broadcast)
        /// OriginName: target_network, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetNetworkField = new Field.Builder()
            .Name(nameof(TargetNetwork))
            .Title("target_network")
            .Description("Network ID (0 for broadcast)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetNetwork;
        public byte TargetNetwork { get => _targetNetwork; set => _targetNetwork = value; }
        /// <summary>
        /// System ID (0 for broadcast)
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast)
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields. The content/format of this block is defined in https://mavlink.io/en/services/ftp.html.
        /// OriginName: payload, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PayloadField = new Field.Builder()
            .Name(nameof(Payload))
            .Title("payload")
            .Description("Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields. The content/format of this block is defined in https://mavlink.io/en/services/ftp.html.")

            .DataType(new ArrayType(UInt8Type.Default,251))
        .Build();
        public const int PayloadMaxItemsCount = 251;
        public byte[] Payload { get; } = new byte[251];
        [Obsolete("This method is deprecated. Use GetPayloadMaxItemsCount instead.")]
        public byte GetPayloadMaxItemsCount() => 251;
    }
    /// <summary>
    /// 
    ///         Time synchronization message.
    ///         The message is used for both timesync requests and responses.
    ///         The request is sent with `ts1=syncing component timestamp` and `tc1=0`, and may be broadcast or targeted to a specific system/component.
    ///         The response is sent with `ts1=syncing component timestamp` (mirror back unchanged), and `tc1=responding component timestamp`, with the `target_system` and `target_component` set to ids of the original request.
    ///         Systems can determine if they are receiving a request or response based on the value of `tc`.
    ///         If the response has `target_system==target_component==0` the remote system has not been updated to use the component IDs and cannot reliably timesync; the requestor may report an error.
    ///         Timestamps are UNIX Epoch time or time since system boot in nanoseconds (the timestamp format can be inferred by checking for the magnitude of the number; generally it doesn't matter as only the offset is used).
    ///         The message sequence is repeated numerous times with results being filtered/averaged to estimate the offset.
    ///       
    ///  TIMESYNC
    /// </summary>
    public class TimesyncPacket : MavlinkV2Message<TimesyncPayload>
    {
        public const int MessageId = 111;
        
        public const byte CrcExtra = 34;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TimesyncPayload Payload { get; } = new();

        public override string Name => "TIMESYNC";
    }

    /// <summary>
    ///  TIMESYNC
    /// </summary>
    public class TimesyncPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // int64_t tc1
            +8 // int64_t ts1
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Tc1 = BinSerialize.ReadLong(ref buffer);
            Ts1 = BinSerialize.ReadLong(ref buffer);
            // extended field 'TargetSystem' can be empty
            if (buffer.IsEmpty) return;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TargetComponent' can be empty
            if (buffer.IsEmpty) return;
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteLong(ref buffer,Tc1);
            BinSerialize.WriteLong(ref buffer,Ts1);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 18 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int64Type.Accept(visitor,Tc1Field, ref _tc1);    
            Int64Type.Accept(visitor,Ts1Field, ref _ts1);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Time sync timestamp 1. Syncing: 0. Responding: Timestamp of responding component.
        /// OriginName: tc1, Units: ns, IsExtended: false
        /// </summary>
        public static readonly Field Tc1Field = new Field.Builder()
            .Name(nameof(Tc1))
            .Title("tc1")
            .Description("Time sync timestamp 1. Syncing: 0. Responding: Timestamp of responding component.")
.Units(@"ns")
            .DataType(Int64Type.Default)
        .Build();
        private long _tc1;
        public long Tc1 { get => _tc1; set => _tc1 = value; }
        /// <summary>
        /// Time sync timestamp 2. Timestamp of syncing component (mirrored in response).
        /// OriginName: ts1, Units: ns, IsExtended: false
        /// </summary>
        public static readonly Field Ts1Field = new Field.Builder()
            .Name(nameof(Ts1))
            .Title("ts1")
            .Description("Time sync timestamp 2. Timestamp of syncing component (mirrored in response).")
.Units(@"ns")
            .DataType(Int64Type.Default)
        .Build();
        private long _ts1;
        public long Ts1 { get => _ts1; set => _ts1 = value; }
        /// <summary>
        /// Target system id. Request: 0 (broadcast) or id of specific system. Response must contain system id of the requesting component.
        /// OriginName: target_system, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("Target system id. Request: 0 (broadcast) or id of specific system. Response must contain system id of the requesting component.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Target component id. Request: 0 (broadcast) or id of specific component. Response must contain component id of the requesting component.
        /// OriginName: target_component, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Target component id. Request: 0 (broadcast) or id of specific component. Response must contain component id of the requesting component.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Camera-IMU triggering and synchronisation message.
    ///  CAMERA_TRIGGER
    /// </summary>
    public class CameraTriggerPacket : MavlinkV2Message<CameraTriggerPayload>
    {
        public const int MessageId = 112;
        
        public const byte CrcExtra = 174;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraTriggerPayload Payload { get; } = new();

        public override string Name => "CAMERA_TRIGGER";
    }

    /// <summary>
    ///  CAMERA_TRIGGER
    /// </summary>
    public class CameraTriggerPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 12; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 12; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t seq
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Seq = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Seq);
            /* PayloadByteSize = 12 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,SeqField, ref _seq);    

        }

        /// <summary>
        /// Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Image frame sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqField = new Field.Builder()
            .Name(nameof(Seq))
            .Title("seq")
            .Description("Image frame sequence")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _seq;
        public uint Seq { get => _seq; set => _seq = value; }
    }
    /// <summary>
    /// The global position, as returned by the Global Positioning System (GPS). This is
    ///                  NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION_INT for the global position estimate.
    ///  HIL_GPS
    /// </summary>
    public class HilGpsPacket : MavlinkV2Message<HilGpsPayload>
    {
        public const int MessageId = 113;
        
        public const byte CrcExtra = 124;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilGpsPayload Payload { get; } = new();

        public override string Name => "HIL_GPS";
    }

    /// <summary>
    ///  HIL_GPS
    /// </summary>
    public class HilGpsPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 39; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 39; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +2 // uint16_t eph
            +2 // uint16_t epv
            +2 // uint16_t vel
            +2 // int16_t vn
            +2 // int16_t ve
            +2 // int16_t vd
            +2 // uint16_t cog
            +1 // uint8_t fix_type
            +1 // uint8_t satellites_visible
            +1 // uint8_t id
            +2 // uint16_t yaw
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Eph = BinSerialize.ReadUShort(ref buffer);
            Epv = BinSerialize.ReadUShort(ref buffer);
            Vel = BinSerialize.ReadUShort(ref buffer);
            Vn = BinSerialize.ReadShort(ref buffer);
            Ve = BinSerialize.ReadShort(ref buffer);
            Vd = BinSerialize.ReadShort(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            FixType = (byte)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteUShort(ref buffer,Eph);
            BinSerialize.WriteUShort(ref buffer,Epv);
            BinSerialize.WriteUShort(ref buffer,Vel);
            BinSerialize.WriteShort(ref buffer,Vn);
            BinSerialize.WriteShort(ref buffer,Ve);
            BinSerialize.WriteShort(ref buffer,Vd);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            /* PayloadByteSize = 39 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            UInt16Type.Accept(visitor,EphField, ref _eph);    
            UInt16Type.Accept(visitor,EpvField, ref _epv);    
            UInt16Type.Accept(visitor,VelField, ref _vel);    
            Int16Type.Accept(visitor,VnField, ref _vn);
            Int16Type.Accept(visitor,VeField, ref _ve);
            Int16Type.Accept(visitor,VdField, ref _vd);
            UInt16Type.Accept(visitor,CogField, ref _cog);    
            UInt8Type.Accept(visitor,FixTypeField, ref _fixType);    
            UInt8Type.Accept(visitor,SatellitesVisibleField, ref _satellitesVisible);    
            UInt8Type.Accept(visitor,IdField, ref _id);    
            UInt16Type.Accept(visitor,YawField, ref _yaw);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: eph, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EphField = new Field.Builder()
            .Name(nameof(Eph))
            .Title("eph")
            .Description("GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _eph;
        public ushort Eph { get => _eph; set => _eph = value; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: epv, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EpvField = new Field.Builder()
            .Name(nameof(Epv))
            .Title("epv")
            .Description("GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _epv;
        public ushort Epv { get => _epv; set => _epv = value; }
        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// OriginName: vel, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VelField = new Field.Builder()
            .Name(nameof(Vel))
            .Title("vel")
            .Description("GPS ground speed. If unknown, set to: UINT16_MAX")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vel;
        public ushort Vel { get => _vel; set => _vel = value; }
        /// <summary>
        /// GPS velocity in north direction in earth-fixed NED frame
        /// OriginName: vn, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VnField = new Field.Builder()
            .Name(nameof(Vn))
            .Title("vn")
            .Description("GPS velocity in north direction in earth-fixed NED frame")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vn;
        public short Vn { get => _vn; set => _vn = value; }
        /// <summary>
        /// GPS velocity in east direction in earth-fixed NED frame
        /// OriginName: ve, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VeField = new Field.Builder()
            .Name(nameof(Ve))
            .Title("ve")
            .Description("GPS velocity in east direction in earth-fixed NED frame")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _ve;
        public short Ve { get => _ve; set => _ve = value; }
        /// <summary>
        /// GPS velocity in down direction in earth-fixed NED frame
        /// OriginName: vd, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VdField = new Field.Builder()
            .Name(nameof(Vd))
            .Title("vd")
            .Description("GPS velocity in down direction in earth-fixed NED frame")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vd;
        public short Vd { get => _vd; set => _vd = value; }
        /// <summary>
        /// Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: cog, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field CogField = new Field.Builder()
            .Name(nameof(Cog))
            .Title("cog")
            .Description("Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _cog;
        public ushort Cog { get => _cog; set => _cog = value; }
        /// <summary>
        /// 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FixTypeField = new Field.Builder()
            .Name(nameof(FixType))
            .Title("fix_type")
            .Description("0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _fixType;
        public byte FixType { get => _fixType; set => _fixType = value; }
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SatellitesVisibleField = new Field.Builder()
            .Name(nameof(SatellitesVisible))
            .Title("satellites_visible")
            .Description("Number of satellites visible. If unknown, set to UINT8_MAX")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _satellitesVisible;
        public byte SatellitesVisible { get => _satellitesVisible; set => _satellitesVisible = value; }
        /// <summary>
        /// GPS ID (zero indexed). Used for multiple GPS inputs
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("GPS ID (zero indexed). Used for multiple GPS inputs")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
        /// <summary>
        /// Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _yaw;
        public ushort Yaw { get => _yaw; set => _yaw = value; }
    }
    /// <summary>
    /// Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)
    ///  HIL_OPTICAL_FLOW
    /// </summary>
    public class HilOpticalFlowPacket : MavlinkV2Message<HilOpticalFlowPayload>
    {
        public const int MessageId = 114;
        
        public const byte CrcExtra = 237;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilOpticalFlowPayload Payload { get; } = new();

        public override string Name => "HIL_OPTICAL_FLOW";
    }

    /// <summary>
    ///  HIL_OPTICAL_FLOW
    /// </summary>
    public class HilOpticalFlowPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 44; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 44; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t integration_time_us
            +4 // float integrated_x
            +4 // float integrated_y
            +4 // float integrated_xgyro
            +4 // float integrated_ygyro
            +4 // float integrated_zgyro
            +4 // uint32_t time_delta_distance_us
            +4 // float distance
            +2 // int16_t temperature
            +1 // uint8_t sensor_id
            +1 // uint8_t quality
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            IntegrationTimeUs = BinSerialize.ReadUInt(ref buffer);
            IntegratedX = BinSerialize.ReadFloat(ref buffer);
            IntegratedY = BinSerialize.ReadFloat(ref buffer);
            IntegratedXgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedYgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedZgyro = BinSerialize.ReadFloat(ref buffer);
            TimeDeltaDistanceUs = BinSerialize.ReadUInt(ref buffer);
            Distance = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            SensorId = (byte)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,IntegrationTimeUs);
            BinSerialize.WriteFloat(ref buffer,IntegratedX);
            BinSerialize.WriteFloat(ref buffer,IntegratedY);
            BinSerialize.WriteFloat(ref buffer,IntegratedXgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedYgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedZgyro);
            BinSerialize.WriteUInt(ref buffer,TimeDeltaDistanceUs);
            BinSerialize.WriteFloat(ref buffer,Distance);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteByte(ref buffer,(byte)SensorId);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 44 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,IntegrationTimeUsField, ref _integrationTimeUs);    
            FloatType.Accept(visitor,IntegratedXField, ref _integratedX);    
            FloatType.Accept(visitor,IntegratedYField, ref _integratedY);    
            FloatType.Accept(visitor,IntegratedXgyroField, ref _integratedXgyro);    
            FloatType.Accept(visitor,IntegratedYgyroField, ref _integratedYgyro);    
            FloatType.Accept(visitor,IntegratedZgyroField, ref _integratedZgyro);    
            UInt32Type.Accept(visitor,TimeDeltaDistanceUsField, ref _timeDeltaDistanceUs);    
            FloatType.Accept(visitor,DistanceField, ref _distance);    
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);
            UInt8Type.Accept(visitor,SensorIdField, ref _sensorId);    
            UInt8Type.Accept(visitor,QualityField, ref _quality);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
        /// OriginName: integration_time_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field IntegrationTimeUsField = new Field.Builder()
            .Name(nameof(IntegrationTimeUs))
            .Title("integration_time_us")
            .Description("Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.")
.Units(@"us")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _integrationTimeUs;
        public uint IntegrationTimeUs { get => _integrationTimeUs; set => _integrationTimeUs = value; }
        /// <summary>
        /// Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
        /// OriginName: integrated_x, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedXField = new Field.Builder()
            .Name(nameof(IntegratedX))
            .Title("integrated_x")
            .Description("Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedX;
        public float IntegratedX { get => _integratedX; set => _integratedX = value; }
        /// <summary>
        /// Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
        /// OriginName: integrated_y, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedYField = new Field.Builder()
            .Name(nameof(IntegratedY))
            .Title("integrated_y")
            .Description("Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedY;
        public float IntegratedY { get => _integratedY; set => _integratedY = value; }
        /// <summary>
        /// RH rotation around X axis
        /// OriginName: integrated_xgyro, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedXgyroField = new Field.Builder()
            .Name(nameof(IntegratedXgyro))
            .Title("integrated_xgyro")
            .Description("RH rotation around X axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedXgyro;
        public float IntegratedXgyro { get => _integratedXgyro; set => _integratedXgyro = value; }
        /// <summary>
        /// RH rotation around Y axis
        /// OriginName: integrated_ygyro, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedYgyroField = new Field.Builder()
            .Name(nameof(IntegratedYgyro))
            .Title("integrated_ygyro")
            .Description("RH rotation around Y axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedYgyro;
        public float IntegratedYgyro { get => _integratedYgyro; set => _integratedYgyro = value; }
        /// <summary>
        /// RH rotation around Z axis
        /// OriginName: integrated_zgyro, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field IntegratedZgyroField = new Field.Builder()
            .Name(nameof(IntegratedZgyro))
            .Title("integrated_zgyro")
            .Description("RH rotation around Z axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _integratedZgyro;
        public float IntegratedZgyro { get => _integratedZgyro; set => _integratedZgyro = value; }
        /// <summary>
        /// Time since the distance was sampled.
        /// OriginName: time_delta_distance_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeDeltaDistanceUsField = new Field.Builder()
            .Name(nameof(TimeDeltaDistanceUs))
            .Title("time_delta_distance_us")
            .Description("Time since the distance was sampled.")
.Units(@"us")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeDeltaDistanceUs;
        public uint TimeDeltaDistanceUs { get => _timeDeltaDistanceUs; set => _timeDeltaDistanceUs = value; }
        /// <summary>
        /// Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DistanceField = new Field.Builder()
            .Name(nameof(Distance))
            .Title("distance")
            .Description("Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _distance;
        public float Distance { get => _distance; set => _distance = value; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Sensor ID
        /// OriginName: sensor_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SensorIdField = new Field.Builder()
            .Name(nameof(SensorId))
            .Title("sensor_id")
            .Description("Sensor ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _sensorId;
        public byte SensorId { get => _sensorId; set => _sensorId = value; }
        /// <summary>
        /// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QualityField = new Field.Builder()
            .Name(nameof(Quality))
            .Title("quality")
            .Description("Optical flow quality / confidence. 0: no valid flow, 255: maximum quality")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _quality;
        public byte Quality { get => _quality; set => _quality = value; }
    }
    /// <summary>
    /// Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
    ///  HIL_STATE_QUATERNION
    /// </summary>
    public class HilStateQuaternionPacket : MavlinkV2Message<HilStateQuaternionPayload>
    {
        public const int MessageId = 115;
        
        public const byte CrcExtra = 4;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HilStateQuaternionPayload Payload { get; } = new();

        public override string Name => "HIL_STATE_QUATERNION";
    }

    /// <summary>
    ///  HIL_STATE_QUATERNION
    /// </summary>
    public class HilStateQuaternionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 64; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 64; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +AttitudeQuaternion.Length * 4 // float[4] attitude_quaternion
            +4 // float rollspeed
            +4 // float pitchspeed
            +4 // float yawspeed
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +2 // int16_t vx
            +2 // int16_t vy
            +2 // int16_t vz
            +2 // uint16_t ind_airspeed
            +2 // uint16_t true_airspeed
            +2 // int16_t xacc
            +2 // int16_t yacc
            +2 // int16_t zacc
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/64 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                AttitudeQuaternion[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            IndAirspeed = BinSerialize.ReadUShort(ref buffer);
            TrueAirspeed = BinSerialize.ReadUShort(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<AttitudeQuaternion.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AttitudeQuaternion[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteUShort(ref buffer,IndAirspeed);
            BinSerialize.WriteUShort(ref buffer,TrueAirspeed);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            /* PayloadByteSize = 64 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,AttitudeQuaternionField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref AttitudeQuaternion[index]));
            FloatType.Accept(visitor,RollspeedField, ref _rollspeed);    
            FloatType.Accept(visitor,PitchspeedField, ref _pitchspeed);    
            FloatType.Accept(visitor,YawspeedField, ref _yawspeed);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            Int16Type.Accept(visitor,VxField, ref _vx);
            Int16Type.Accept(visitor,VyField, ref _vy);
            Int16Type.Accept(visitor,VzField, ref _vz);
            UInt16Type.Accept(visitor,IndAirspeedField, ref _indAirspeed);    
            UInt16Type.Accept(visitor,TrueAirspeedField, ref _trueAirspeed);    
            Int16Type.Accept(visitor,XaccField, ref _xacc);
            Int16Type.Accept(visitor,YaccField, ref _yacc);
            Int16Type.Accept(visitor,ZaccField, ref _zacc);

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)
        /// OriginName: attitude_quaternion, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AttitudeQuaternionField = new Field.Builder()
            .Name(nameof(AttitudeQuaternion))
            .Title("attitude_quaternion")
            .Description("Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int AttitudeQuaternionMaxItemsCount = 4;
        public float[] AttitudeQuaternion { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetAttitudeQuaternionMaxItemsCount instead.")]
        public byte GetAttitudeQuaternionMaxItemsCount() => 4;
        /// <summary>
        /// Body frame roll / phi angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollspeedField = new Field.Builder()
            .Name(nameof(Rollspeed))
            .Title("rollspeed")
            .Description("Body frame roll / phi angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _rollspeed;
        public float Rollspeed { get => _rollspeed; set => _rollspeed = value; }
        /// <summary>
        /// Body frame pitch / theta angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchspeedField = new Field.Builder()
            .Name(nameof(Pitchspeed))
            .Title("pitchspeed")
            .Description("Body frame pitch / theta angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchspeed;
        public float Pitchspeed { get => _pitchspeed; set => _pitchspeed = value; }
        /// <summary>
        /// Body frame yaw / psi angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawspeedField = new Field.Builder()
            .Name(nameof(Yawspeed))
            .Title("yawspeed")
            .Description("Body frame yaw / psi angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawspeed;
        public float Yawspeed { get => _yawspeed; set => _yawspeed = value; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Ground X Speed (Latitude)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("Ground X Speed (Latitude)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vx;
        public short Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Ground Y Speed (Longitude)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Ground Y Speed (Longitude)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vy;
        public short Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Ground Z Speed (Altitude)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Ground Z Speed (Altitude)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vz;
        public short Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// Indicated airspeed
        /// OriginName: ind_airspeed, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field IndAirspeedField = new Field.Builder()
            .Name(nameof(IndAirspeed))
            .Title("ind_airspeed")
            .Description("Indicated airspeed")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _indAirspeed;
        public ushort IndAirspeed { get => _indAirspeed; set => _indAirspeed = value; }
        /// <summary>
        /// True airspeed
        /// OriginName: true_airspeed, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field TrueAirspeedField = new Field.Builder()
            .Name(nameof(TrueAirspeed))
            .Title("true_airspeed")
            .Description("True airspeed")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _trueAirspeed;
        public ushort TrueAirspeed { get => _trueAirspeed; set => _trueAirspeed = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _xacc;
        public short Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _yacc;
        public short Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _zacc;
        public short Zacc { get => _zacc; set => _zacc = value; }
    }
    /// <summary>
    /// The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
    ///  SCALED_IMU2
    /// </summary>
    public class ScaledImu2Packet : MavlinkV2Message<ScaledImu2Payload>
    {
        public const int MessageId = 116;
        
        public const byte CrcExtra = 76;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ScaledImu2Payload Payload { get; } = new();

        public override string Name => "SCALED_IMU2";
    }

    /// <summary>
    ///  SCALED_IMU2
    /// </summary>
    public class ScaledImu2Payload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +2 // int16_t xacc
            +2 // int16_t yacc
            +2 // int16_t zacc
            +2 // int16_t xgyro
            +2 // int16_t ygyro
            +2 // int16_t zgyro
            +2 // int16_t xmag
            +2 // int16_t ymag
            +2 // int16_t zmag
            +2 // int16_t temperature
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 24 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int16Type.Accept(visitor,XaccField, ref _xacc);
            Int16Type.Accept(visitor,YaccField, ref _yacc);
            Int16Type.Accept(visitor,ZaccField, ref _zacc);
            Int16Type.Accept(visitor,XgyroField, ref _xgyro);
            Int16Type.Accept(visitor,YgyroField, ref _ygyro);
            Int16Type.Accept(visitor,ZgyroField, ref _zgyro);
            Int16Type.Accept(visitor,XmagField, ref _xmag);
            Int16Type.Accept(visitor,YmagField, ref _ymag);
            Int16Type.Accept(visitor,ZmagField, ref _zmag);
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _xacc;
        public short Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _yacc;
        public short Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _zacc;
        public short Zacc { get => _zacc; set => _zacc = value; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field XgyroField = new Field.Builder()
            .Name(nameof(Xgyro))
            .Title("xgyro")
            .Description("Angular speed around X axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _xgyro;
        public short Xgyro { get => _xgyro; set => _xgyro = value; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field YgyroField = new Field.Builder()
            .Name(nameof(Ygyro))
            .Title("ygyro")
            .Description("Angular speed around Y axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _ygyro;
        public short Ygyro { get => _ygyro; set => _ygyro = value; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field ZgyroField = new Field.Builder()
            .Name(nameof(Zgyro))
            .Title("zgyro")
            .Description("Angular speed around Z axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _zgyro;
        public short Zgyro { get => _zgyro; set => _zgyro = value; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field XmagField = new Field.Builder()
            .Name(nameof(Xmag))
            .Title("xmag")
            .Description("X Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _xmag;
        public short Xmag { get => _xmag; set => _xmag = value; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field YmagField = new Field.Builder()
            .Name(nameof(Ymag))
            .Title("ymag")
            .Description("Y Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _ymag;
        public short Ymag { get => _ymag; set => _ymag = value; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field ZmagField = new Field.Builder()
            .Name(nameof(Zmag))
            .Title("zmag")
            .Description("Z Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _zmag;
        public short Zmag { get => _zmag; set => _zmag = value; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
    }
    /// <summary>
    /// Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called. If there are no log files available this request shall be answered with one LOG_ENTRY message with id = 0 and num_logs = 0.
    ///  LOG_REQUEST_LIST
    /// </summary>
    public class LogRequestListPacket : MavlinkV2Message<LogRequestListPayload>
    {
        public const int MessageId = 117;
        
        public const byte CrcExtra = 128;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LogRequestListPayload Payload { get; } = new();

        public override string Name => "LOG_REQUEST_LIST";
    }

    /// <summary>
    ///  LOG_REQUEST_LIST
    /// </summary>
    public class LogRequestListPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t start
            +2 // uint16_t end
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Start = BinSerialize.ReadUShort(ref buffer);
            End = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Start);
            BinSerialize.WriteUShort(ref buffer,End);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,StartField, ref _start);    
            UInt16Type.Accept(visitor,EndField, ref _end);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// First log id (0 for first available)
        /// OriginName: start, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StartField = new Field.Builder()
            .Name(nameof(Start))
            .Title("start")
            .Description("First log id (0 for first available)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _start;
        public ushort Start { get => _start; set => _start = value; }
        /// <summary>
        /// Last log id (0xffff for last available)
        /// OriginName: end, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EndField = new Field.Builder()
            .Name(nameof(End))
            .Title("end")
            .Description("Last log id (0xffff for last available)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _end;
        public ushort End { get => _end; set => _end = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Reply to LOG_REQUEST_LIST
    ///  LOG_ENTRY
    /// </summary>
    public class LogEntryPacket : MavlinkV2Message<LogEntryPayload>
    {
        public const int MessageId = 118;
        
        public const byte CrcExtra = 56;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LogEntryPayload Payload { get; } = new();

        public override string Name => "LOG_ENTRY";
    }

    /// <summary>
    ///  LOG_ENTRY
    /// </summary>
    public class LogEntryPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 14; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 14; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_utc
            +4 // uint32_t size
            +2 // uint16_t id
            +2 // uint16_t num_logs
            +2 // uint16_t last_log_num
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUtc = BinSerialize.ReadUInt(ref buffer);
            Size = BinSerialize.ReadUInt(ref buffer);
            Id = BinSerialize.ReadUShort(ref buffer);
            NumLogs = BinSerialize.ReadUShort(ref buffer);
            LastLogNum = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeUtc);
            BinSerialize.WriteUInt(ref buffer,Size);
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteUShort(ref buffer,NumLogs);
            BinSerialize.WriteUShort(ref buffer,LastLogNum);
            /* PayloadByteSize = 14 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeUtcField, ref _timeUtc);    
            UInt32Type.Accept(visitor,SizeField, ref _size);    
            UInt16Type.Accept(visitor,IdField, ref _id);    
            UInt16Type.Accept(visitor,NumLogsField, ref _numLogs);    
            UInt16Type.Accept(visitor,LastLogNumField, ref _lastLogNum);    

        }

        /// <summary>
        /// UTC timestamp of log since 1970, or 0 if not available
        /// OriginName: time_utc, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TimeUtcField = new Field.Builder()
            .Name(nameof(TimeUtc))
            .Title("time_utc")
            .Description("UTC timestamp of log since 1970, or 0 if not available")
.Units(@"s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeUtc;
        public uint TimeUtc { get => _timeUtc; set => _timeUtc = value; }
        /// <summary>
        /// Size of the log (may be approximate)
        /// OriginName: size, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field SizeField = new Field.Builder()
            .Name(nameof(Size))
            .Title("size")
            .Description("Size of the log (may be approximate)")
.Units(@"bytes")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _size;
        public uint Size { get => _size; set => _size = value; }
        /// <summary>
        /// LoggerFactory id
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("LoggerFactory id")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _id;
        public ushort Id { get => _id; set => _id = value; }
        /// <summary>
        /// Total number of logs
        /// OriginName: num_logs, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NumLogsField = new Field.Builder()
            .Name(nameof(NumLogs))
            .Title("num_logs")
            .Description("Total number of logs")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _numLogs;
        public ushort NumLogs { get => _numLogs; set => _numLogs = value; }
        /// <summary>
        /// High log number
        /// OriginName: last_log_num, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LastLogNumField = new Field.Builder()
            .Name(nameof(LastLogNum))
            .Title("last_log_num")
            .Description("High log number")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _lastLogNum;
        public ushort LastLogNum { get => _lastLogNum; set => _lastLogNum = value; }
    }
    /// <summary>
    /// Request a chunk of a log
    ///  LOG_REQUEST_DATA
    /// </summary>
    public class LogRequestDataPacket : MavlinkV2Message<LogRequestDataPayload>
    {
        public const int MessageId = 119;
        
        public const byte CrcExtra = 116;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LogRequestDataPayload Payload { get; } = new();

        public override string Name => "LOG_REQUEST_DATA";
    }

    /// <summary>
    ///  LOG_REQUEST_DATA
    /// </summary>
    public class LogRequestDataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 12; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 12; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t ofs
            +4 // uint32_t count
            +2 // uint16_t id
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Ofs = BinSerialize.ReadUInt(ref buffer);
            Count = BinSerialize.ReadUInt(ref buffer);
            Id = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Ofs);
            BinSerialize.WriteUInt(ref buffer,Count);
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 12 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,OfsField, ref _ofs);    
            UInt32Type.Accept(visitor,CountField, ref _count);    
            UInt16Type.Accept(visitor,IdField, ref _id);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Offset into the log
        /// OriginName: ofs, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OfsField = new Field.Builder()
            .Name(nameof(Ofs))
            .Title("ofs")
            .Description("Offset into the log")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _ofs;
        public uint Ofs { get => _ofs; set => _ofs = value; }
        /// <summary>
        /// Number of bytes
        /// OriginName: count, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field CountField = new Field.Builder()
            .Name(nameof(Count))
            .Title("count")
            .Description("Number of bytes")
.Units(@"bytes")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _count;
        public uint Count { get => _count; set => _count = value; }
        /// <summary>
        /// LoggerFactory id (from LOG_ENTRY reply)
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("LoggerFactory id (from LOG_ENTRY reply)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _id;
        public ushort Id { get => _id; set => _id = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Reply to LOG_REQUEST_DATA
    ///  LOG_DATA
    /// </summary>
    public class LogDataPacket : MavlinkV2Message<LogDataPayload>
    {
        public const int MessageId = 120;
        
        public const byte CrcExtra = 134;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LogDataPayload Payload { get; } = new();

        public override string Name => "LOG_DATA";
    }

    /// <summary>
    ///  LOG_DATA
    /// </summary>
    public class LogDataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 97; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 97; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t ofs
            +2 // uint16_t id
            +1 // uint8_t count
            +Data.Length // uint8_t[90] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Ofs = BinSerialize.ReadUInt(ref buffer);
            Id = BinSerialize.ReadUShort(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/90 - Math.Max(0,((/*PayloadByteSize*/97 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Ofs);
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 97 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,OfsField, ref _ofs);    
            UInt16Type.Accept(visitor,IdField, ref _id);    
            UInt8Type.Accept(visitor,CountField, ref _count);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// Offset into the log
        /// OriginName: ofs, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OfsField = new Field.Builder()
            .Name(nameof(Ofs))
            .Title("ofs")
            .Description("Offset into the log")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _ofs;
        public uint Ofs { get => _ofs; set => _ofs = value; }
        /// <summary>
        /// LoggerFactory id (from LOG_ENTRY reply)
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("LoggerFactory id (from LOG_ENTRY reply)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _id;
        public ushort Id { get => _id; set => _id = value; }
        /// <summary>
        /// Number of bytes (zero for end of log)
        /// OriginName: count, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field CountField = new Field.Builder()
            .Name(nameof(Count))
            .Title("count")
            .Description("Number of bytes (zero for end of log)")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _count;
        public byte Count { get => _count; set => _count = value; }
        /// <summary>
        /// log data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("log data")

            .DataType(new ArrayType(UInt8Type.Default,90))
        .Build();
        public const int DataMaxItemsCount = 90;
        public byte[] Data { get; } = new byte[90];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 90;
    }
    /// <summary>
    /// Erase all logs
    ///  LOG_ERASE
    /// </summary>
    public class LogErasePacket : MavlinkV2Message<LogErasePayload>
    {
        public const int MessageId = 121;
        
        public const byte CrcExtra = 237;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LogErasePayload Payload { get; } = new();

        public override string Name => "LOG_ERASE";
    }

    /// <summary>
    ///  LOG_ERASE
    /// </summary>
    public class LogErasePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Stop log transfer and resume normal logging
    ///  LOG_REQUEST_END
    /// </summary>
    public class LogRequestEndPacket : MavlinkV2Message<LogRequestEndPayload>
    {
        public const int MessageId = 122;
        
        public const byte CrcExtra = 203;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LogRequestEndPayload Payload { get; } = new();

        public override string Name => "LOG_REQUEST_END";
    }

    /// <summary>
    ///  LOG_REQUEST_END
    /// </summary>
    public class LogRequestEndPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Data for injecting into the onboard GPS (used for DGPS)
    ///  GPS_INJECT_DATA
    /// </summary>
    public class GpsInjectDataPacket : MavlinkV2Message<GpsInjectDataPayload>
    {
        public const int MessageId = 123;
        
        public const byte CrcExtra = 250;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GpsInjectDataPayload Payload { get; } = new();

        public override string Name => "GPS_INJECT_DATA";
    }

    /// <summary>
    ///  GPS_INJECT_DATA
    /// </summary>
    public class GpsInjectDataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 113; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 113; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t len
            +Data.Length // uint8_t[110] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/110 - Math.Max(0,((/*PayloadByteSize*/113 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 113 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,LenField, ref _len);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Data length
        /// OriginName: len, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field LenField = new Field.Builder()
            .Name(nameof(Len))
            .Title("len")
            .Description("Data length")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _len;
        public byte Len { get => _len; set => _len = value; }
        /// <summary>
        /// Raw data (110 is enough for 12 satellites of RTCMv2)
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("Raw data (110 is enough for 12 satellites of RTCMv2)")

            .DataType(new ArrayType(UInt8Type.Default,110))
        .Build();
        public const int DataMaxItemsCount = 110;
        public byte[] Data { get; } = new byte[110];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 110;
    }
    /// <summary>
    /// Second GPS data.
    ///  GPS2_RAW
    /// </summary>
    public class Gps2RawPacket : MavlinkV2Message<Gps2RawPayload>
    {
        public const int MessageId = 124;
        
        public const byte CrcExtra = 87;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override Gps2RawPayload Payload { get; } = new();

        public override string Name => "GPS2_RAW";
    }

    /// <summary>
    ///  GPS2_RAW
    /// </summary>
    public class Gps2RawPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +4 // uint32_t dgps_age
            +2 // uint16_t eph
            +2 // uint16_t epv
            +2 // uint16_t vel
            +2 // uint16_t cog
            + 1 // uint8_t fix_type
            +1 // uint8_t satellites_visible
            +1 // uint8_t dgps_numch
            +2 // uint16_t yaw
            +4 // int32_t alt_ellipsoid
            +4 // uint32_t h_acc
            +4 // uint32_t v_acc
            +4 // uint32_t vel_acc
            +4 // uint32_t hdg_acc
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            DgpsAge = BinSerialize.ReadUInt(ref buffer);
            Eph = BinSerialize.ReadUShort(ref buffer);
            Epv = BinSerialize.ReadUShort(ref buffer);
            Vel = BinSerialize.ReadUShort(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            FixType = (GpsFixType)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            DgpsNumch = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'AltEllipsoid' can be empty
            if (buffer.IsEmpty) return;
            AltEllipsoid = BinSerialize.ReadInt(ref buffer);
            // extended field 'HAcc' can be empty
            if (buffer.IsEmpty) return;
            HAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VAcc' can be empty
            if (buffer.IsEmpty) return;
            VAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VelAcc' can be empty
            if (buffer.IsEmpty) return;
            VelAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'HdgAcc' can be empty
            if (buffer.IsEmpty) return;
            HdgAcc = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteUInt(ref buffer,DgpsAge);
            BinSerialize.WriteUShort(ref buffer,Eph);
            BinSerialize.WriteUShort(ref buffer,Epv);
            BinSerialize.WriteUShort(ref buffer,Vel);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteByte(ref buffer,(byte)DgpsNumch);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            BinSerialize.WriteInt(ref buffer,AltEllipsoid);
            BinSerialize.WriteUInt(ref buffer,HAcc);
            BinSerialize.WriteUInt(ref buffer,VAcc);
            BinSerialize.WriteUInt(ref buffer,VelAcc);
            BinSerialize.WriteUInt(ref buffer,HdgAcc);
            /* PayloadByteSize = 57 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            UInt32Type.Accept(visitor,DgpsAgeField, ref _dgpsAge);    
            UInt16Type.Accept(visitor,EphField, ref _eph);    
            UInt16Type.Accept(visitor,EpvField, ref _epv);    
            UInt16Type.Accept(visitor,VelField, ref _vel);    
            UInt16Type.Accept(visitor,CogField, ref _cog);    
            var tmpFixType = (byte)FixType;
            UInt8Type.Accept(visitor,FixTypeField, ref tmpFixType);
            FixType = (GpsFixType)tmpFixType;
            UInt8Type.Accept(visitor,SatellitesVisibleField, ref _satellitesVisible);    
            UInt8Type.Accept(visitor,DgpsNumchField, ref _dgpsNumch);    
            UInt16Type.Accept(visitor,YawField, ref _yaw);    
            Int32Type.Accept(visitor,AltEllipsoidField, ref _altEllipsoid);    
            UInt32Type.Accept(visitor,HAccField, ref _hAcc);    
            UInt32Type.Accept(visitor,VAccField, ref _vAcc);    
            UInt32Type.Accept(visitor,VelAccField, ref _velAcc);    
            UInt32Type.Accept(visitor,HdgAccField, ref _hdgAcc);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Age of DGPS info
        /// OriginName: dgps_age, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field DgpsAgeField = new Field.Builder()
            .Name(nameof(DgpsAge))
            .Title("dgps_age")
            .Description("Age of DGPS info")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _dgpsAge;
        public uint DgpsAge { get => _dgpsAge; set => _dgpsAge = value; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: eph, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EphField = new Field.Builder()
            .Name(nameof(Eph))
            .Title("eph")
            .Description("GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _eph;
        public ushort Eph { get => _eph; set => _eph = value; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: epv, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EpvField = new Field.Builder()
            .Name(nameof(Epv))
            .Title("epv")
            .Description("GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _epv;
        public ushort Epv { get => _epv; set => _epv = value; }
        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// OriginName: vel, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VelField = new Field.Builder()
            .Name(nameof(Vel))
            .Title("vel")
            .Description("GPS ground speed. If unknown, set to: UINT16_MAX")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vel;
        public ushort Vel { get => _vel; set => _vel = value; }
        /// <summary>
        /// Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: cog, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field CogField = new Field.Builder()
            .Name(nameof(Cog))
            .Title("cog")
            .Description("Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _cog;
        public ushort Cog { get => _cog; set => _cog = value; }
        /// <summary>
        /// GPS fix type.
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FixTypeField = new Field.Builder()
            .Name(nameof(FixType))
            .Title("fix_type")
            .Description("GPS fix type.")
            .DataType(new UInt8Type(GpsFixTypeHelper.GetValues(x=>(byte)x).Min(),GpsFixTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(GpsFixTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private GpsFixType _fixType;
        public GpsFixType FixType { get => _fixType; set => _fixType = value; } 
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SatellitesVisibleField = new Field.Builder()
            .Name(nameof(SatellitesVisible))
            .Title("satellites_visible")
            .Description("Number of satellites visible. If unknown, set to UINT8_MAX")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _satellitesVisible;
        public byte SatellitesVisible { get => _satellitesVisible; set => _satellitesVisible = value; }
        /// <summary>
        /// Number of DGPS satellites
        /// OriginName: dgps_numch, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DgpsNumchField = new Field.Builder()
            .Name(nameof(DgpsNumch))
            .Title("dgps_numch")
            .Description("Number of DGPS satellites")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _dgpsNumch;
        public byte DgpsNumch { get => _dgpsNumch; set => _dgpsNumch = value; }
        /// <summary>
        /// Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _yaw;
        public ushort Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Altitude (above WGS84, EGM96 ellipsoid). Positive for up.
        /// OriginName: alt_ellipsoid, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field AltEllipsoidField = new Field.Builder()
            .Name(nameof(AltEllipsoid))
            .Title("alt_ellipsoid")
            .Description("Altitude (above WGS84, EGM96 ellipsoid). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altEllipsoid;
        public int AltEllipsoid { get => _altEllipsoid; set => _altEllipsoid = value; }
        /// <summary>
        /// Position uncertainty.
        /// OriginName: h_acc, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field HAccField = new Field.Builder()
            .Name(nameof(HAcc))
            .Title("h_acc")
            .Description("Position uncertainty.")
.Units(@"mm")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _hAcc;
        public uint HAcc { get => _hAcc; set => _hAcc = value; }
        /// <summary>
        /// Altitude uncertainty.
        /// OriginName: v_acc, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field VAccField = new Field.Builder()
            .Name(nameof(VAcc))
            .Title("v_acc")
            .Description("Altitude uncertainty.")
.Units(@"mm")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _vAcc;
        public uint VAcc { get => _vAcc; set => _vAcc = value; }
        /// <summary>
        /// Speed uncertainty.
        /// OriginName: vel_acc, Units: mm, IsExtended: true
        /// </summary>
        public static readonly Field VelAccField = new Field.Builder()
            .Name(nameof(VelAcc))
            .Title("vel_acc")
            .Description("Speed uncertainty.")
.Units(@"mm")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _velAcc;
        public uint VelAcc { get => _velAcc; set => _velAcc = value; }
        /// <summary>
        /// Heading / track uncertainty
        /// OriginName: hdg_acc, Units: degE5, IsExtended: true
        /// </summary>
        public static readonly Field HdgAccField = new Field.Builder()
            .Name(nameof(HdgAcc))
            .Title("hdg_acc")
            .Description("Heading / track uncertainty")
.Units(@"degE5")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _hdgAcc;
        public uint HdgAcc { get => _hdgAcc; set => _hdgAcc = value; }
    }
    /// <summary>
    /// Power supply status
    ///  POWER_STATUS
    /// </summary>
    public class PowerStatusPacket : MavlinkV2Message<PowerStatusPayload>
    {
        public const int MessageId = 125;
        
        public const byte CrcExtra = 203;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override PowerStatusPayload Payload { get; } = new();

        public override string Name => "POWER_STATUS";
    }

    /// <summary>
    ///  POWER_STATUS
    /// </summary>
    public class PowerStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t Vcc
            +2 // uint16_t Vservo
            + 2 // uint16_t flags
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Vcc = BinSerialize.ReadUShort(ref buffer);
            Vservo = BinSerialize.ReadUShort(ref buffer);
            Flags = (MavPowerStatus)BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Vcc);
            BinSerialize.WriteUShort(ref buffer,Vservo);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,VccField, ref _vcc);    
            UInt16Type.Accept(visitor,VservoField, ref _vservo);    
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (MavPowerStatus)tmpFlags;

        }

        /// <summary>
        /// 5V rail voltage.
        /// OriginName: Vcc, Units: mV, IsExtended: false
        /// </summary>
        public static readonly Field VccField = new Field.Builder()
            .Name(nameof(Vcc))
            .Title("Vcc")
            .Description("5V rail voltage.")
.Units(@"mV")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vcc;
        public ushort Vcc { get => _vcc; set => _vcc = value; }
        /// <summary>
        /// Servo rail voltage.
        /// OriginName: Vservo, Units: mV, IsExtended: false
        /// </summary>
        public static readonly Field VservoField = new Field.Builder()
            .Name(nameof(Vservo))
            .Title("Vservo")
            .Description("Servo rail voltage.")
.Units(@"mV")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vservo;
        public ushort Vservo { get => _vservo; set => _vservo = value; }
        /// <summary>
        /// Bitmap of power supply status flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Bitmap of power supply status flags.")
            .DataType(new UInt16Type(MavPowerStatusHelper.GetValues(x=>(ushort)x).Min(),MavPowerStatusHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavPowerStatusHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavPowerStatus _flags;
        public MavPowerStatus Flags { get => _flags; set => _flags = value; } 
    }
    /// <summary>
    /// Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.
    ///  SERIAL_CONTROL
    /// </summary>
    public class SerialControlPacket : MavlinkV2Message<SerialControlPayload>
    {
        public const int MessageId = 126;
        
        public const byte CrcExtra = 220;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SerialControlPayload Payload { get; } = new();

        public override string Name => "SERIAL_CONTROL";
    }

    /// <summary>
    ///  SERIAL_CONTROL
    /// </summary>
    public class SerialControlPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 81; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 81; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t baudrate
            +2 // uint16_t timeout
            + 1 // uint8_t device
            + 1 // uint8_t flags
            +1 // uint8_t count
            +Data.Length // uint8_t[70] data
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Baudrate = BinSerialize.ReadUInt(ref buffer);
            Timeout = BinSerialize.ReadUShort(ref buffer);
            Device = (SerialControlDev)BinSerialize.ReadByte(ref buffer);
            Flags = (SerialControlFlag)BinSerialize.ReadByte(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/70 - Math.Max(0,((/*PayloadByteSize*/81 - payloadSize - /*ExtendedFieldsLength*/2)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            // extended field 'TargetSystem' can be empty
            if (buffer.IsEmpty) return;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TargetComponent' can be empty
            if (buffer.IsEmpty) return;
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Baudrate);
            BinSerialize.WriteUShort(ref buffer,Timeout);
            BinSerialize.WriteByte(ref buffer,(byte)Device);
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 81 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,BaudrateField, ref _baudrate);    
            UInt16Type.Accept(visitor,TimeoutField, ref _timeout);    
            var tmpDevice = (byte)Device;
            UInt8Type.Accept(visitor,DeviceField, ref tmpDevice);
            Device = (SerialControlDev)tmpDevice;
            var tmpFlags = (byte)Flags;
            UInt8Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (SerialControlFlag)tmpFlags;
            UInt8Type.Accept(visitor,CountField, ref _count);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Baudrate of transfer. Zero means no change.
        /// OriginName: baudrate, Units: bits/s, IsExtended: false
        /// </summary>
        public static readonly Field BaudrateField = new Field.Builder()
            .Name(nameof(Baudrate))
            .Title("baudrate")
            .Description("Baudrate of transfer. Zero means no change.")
.Units(@"bits/s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _baudrate;
        public uint Baudrate { get => _baudrate; set => _baudrate = value; }
        /// <summary>
        /// Timeout for reply data
        /// OriginName: timeout, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeoutField = new Field.Builder()
            .Name(nameof(Timeout))
            .Title("timeout")
            .Description("Timeout for reply data")
.Units(@"ms")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _timeout;
        public ushort Timeout { get => _timeout; set => _timeout = value; }
        /// <summary>
        /// Serial control device type.
        /// OriginName: device, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DeviceField = new Field.Builder()
            .Name(nameof(Device))
            .Title("device")
            .Description("Serial control device type.")
            .DataType(new UInt8Type(SerialControlDevHelper.GetValues(x=>(byte)x).Min(),SerialControlDevHelper.GetValues(x=>(byte)x).Max()))
            .Enum(SerialControlDevHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private SerialControlDev _device;
        public SerialControlDev Device { get => _device; set => _device = value; } 
        /// <summary>
        /// Bitmap of serial control flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Bitmap of serial control flags.")
            .DataType(new UInt8Type(SerialControlFlagHelper.GetValues(x=>(byte)x).Min(),SerialControlFlagHelper.GetValues(x=>(byte)x).Max()))
            .Enum(SerialControlFlagHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private SerialControlFlag _flags;
        public SerialControlFlag Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// how many bytes in this transfer
        /// OriginName: count, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field CountField = new Field.Builder()
            .Name(nameof(Count))
            .Title("count")
            .Description("how many bytes in this transfer")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _count;
        public byte Count { get => _count; set => _count = value; }
        /// <summary>
        /// serial data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("serial data")

            .DataType(new ArrayType(UInt8Type.Default,70))
        .Build();
        public const int DataMaxItemsCount = 70;
        public byte[] Data { get; } = new byte[70];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 70;
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    ///  GPS_RTK
    /// </summary>
    public class GpsRtkPacket : MavlinkV2Message<GpsRtkPayload>
    {
        public const int MessageId = 127;
        
        public const byte CrcExtra = 25;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GpsRtkPayload Payload { get; } = new();

        public override string Name => "GPS_RTK";
    }

    /// <summary>
    ///  GPS_RTK
    /// </summary>
    public class GpsRtkPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_last_baseline_ms
            +4 // uint32_t tow
            +4 // int32_t baseline_a_mm
            +4 // int32_t baseline_b_mm
            +4 // int32_t baseline_c_mm
            +4 // uint32_t accuracy
            +4 // int32_t iar_num_hypotheses
            +2 // uint16_t wn
            +1 // uint8_t rtk_receiver_id
            +1 // uint8_t rtk_health
            +1 // uint8_t rtk_rate
            +1 // uint8_t nsats
            + 1 // uint8_t baseline_coords_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeLastBaselineMs = BinSerialize.ReadUInt(ref buffer);
            Tow = BinSerialize.ReadUInt(ref buffer);
            BaselineAMm = BinSerialize.ReadInt(ref buffer);
            BaselineBMm = BinSerialize.ReadInt(ref buffer);
            BaselineCMm = BinSerialize.ReadInt(ref buffer);
            Accuracy = BinSerialize.ReadUInt(ref buffer);
            IarNumHypotheses = BinSerialize.ReadInt(ref buffer);
            Wn = BinSerialize.ReadUShort(ref buffer);
            RtkReceiverId = (byte)BinSerialize.ReadByte(ref buffer);
            RtkHealth = (byte)BinSerialize.ReadByte(ref buffer);
            RtkRate = (byte)BinSerialize.ReadByte(ref buffer);
            Nsats = (byte)BinSerialize.ReadByte(ref buffer);
            BaselineCoordsType = (RtkBaselineCoordinateSystem)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeLastBaselineMs);
            BinSerialize.WriteUInt(ref buffer,Tow);
            BinSerialize.WriteInt(ref buffer,BaselineAMm);
            BinSerialize.WriteInt(ref buffer,BaselineBMm);
            BinSerialize.WriteInt(ref buffer,BaselineCMm);
            BinSerialize.WriteUInt(ref buffer,Accuracy);
            BinSerialize.WriteInt(ref buffer,IarNumHypotheses);
            BinSerialize.WriteUShort(ref buffer,Wn);
            BinSerialize.WriteByte(ref buffer,(byte)RtkReceiverId);
            BinSerialize.WriteByte(ref buffer,(byte)RtkHealth);
            BinSerialize.WriteByte(ref buffer,(byte)RtkRate);
            BinSerialize.WriteByte(ref buffer,(byte)Nsats);
            BinSerialize.WriteByte(ref buffer,(byte)BaselineCoordsType);
            /* PayloadByteSize = 35 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeLastBaselineMsField, ref _timeLastBaselineMs);    
            UInt32Type.Accept(visitor,TowField, ref _tow);    
            Int32Type.Accept(visitor,BaselineAMmField, ref _baselineAMm);    
            Int32Type.Accept(visitor,BaselineBMmField, ref _baselineBMm);    
            Int32Type.Accept(visitor,BaselineCMmField, ref _baselineCMm);    
            UInt32Type.Accept(visitor,AccuracyField, ref _accuracy);    
            Int32Type.Accept(visitor,IarNumHypothesesField, ref _iarNumHypotheses);    
            UInt16Type.Accept(visitor,WnField, ref _wn);    
            UInt8Type.Accept(visitor,RtkReceiverIdField, ref _rtkReceiverId);    
            UInt8Type.Accept(visitor,RtkHealthField, ref _rtkHealth);    
            UInt8Type.Accept(visitor,RtkRateField, ref _rtkRate);    
            UInt8Type.Accept(visitor,NsatsField, ref _nsats);    
            var tmpBaselineCoordsType = (byte)BaselineCoordsType;
            UInt8Type.Accept(visitor,BaselineCoordsTypeField, ref tmpBaselineCoordsType);
            BaselineCoordsType = (RtkBaselineCoordinateSystem)tmpBaselineCoordsType;

        }

        /// <summary>
        /// Time since boot of last baseline message received.
        /// OriginName: time_last_baseline_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeLastBaselineMsField = new Field.Builder()
            .Name(nameof(TimeLastBaselineMs))
            .Title("time_last_baseline_ms")
            .Description("Time since boot of last baseline message received.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeLastBaselineMs;
        public uint TimeLastBaselineMs { get => _timeLastBaselineMs; set => _timeLastBaselineMs = value; }
        /// <summary>
        /// GPS Time of Week of last baseline
        /// OriginName: tow, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TowField = new Field.Builder()
            .Name(nameof(Tow))
            .Title("tow")
            .Description("GPS Time of Week of last baseline")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _tow;
        public uint Tow { get => _tow; set => _tow = value; }
        /// <summary>
        /// Current baseline in ECEF x or NED north component.
        /// OriginName: baseline_a_mm, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field BaselineAMmField = new Field.Builder()
            .Name(nameof(BaselineAMm))
            .Title("baseline_a_mm")
            .Description("Current baseline in ECEF x or NED north component.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _baselineAMm;
        public int BaselineAMm { get => _baselineAMm; set => _baselineAMm = value; }
        /// <summary>
        /// Current baseline in ECEF y or NED east component.
        /// OriginName: baseline_b_mm, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field BaselineBMmField = new Field.Builder()
            .Name(nameof(BaselineBMm))
            .Title("baseline_b_mm")
            .Description("Current baseline in ECEF y or NED east component.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _baselineBMm;
        public int BaselineBMm { get => _baselineBMm; set => _baselineBMm = value; }
        /// <summary>
        /// Current baseline in ECEF z or NED down component.
        /// OriginName: baseline_c_mm, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field BaselineCMmField = new Field.Builder()
            .Name(nameof(BaselineCMm))
            .Title("baseline_c_mm")
            .Description("Current baseline in ECEF z or NED down component.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _baselineCMm;
        public int BaselineCMm { get => _baselineCMm; set => _baselineCMm = value; }
        /// <summary>
        /// Current estimate of baseline accuracy.
        /// OriginName: accuracy, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AccuracyField = new Field.Builder()
            .Name(nameof(Accuracy))
            .Title("accuracy")
            .Description("Current estimate of baseline accuracy.")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _accuracy;
        public uint Accuracy { get => _accuracy; set => _accuracy = value; }
        /// <summary>
        /// Current number of integer ambiguity hypotheses.
        /// OriginName: iar_num_hypotheses, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IarNumHypothesesField = new Field.Builder()
            .Name(nameof(IarNumHypotheses))
            .Title("iar_num_hypotheses")
            .Description("Current number of integer ambiguity hypotheses.")

            .DataType(Int32Type.Default)
        .Build();
        private int _iarNumHypotheses;
        public int IarNumHypotheses { get => _iarNumHypotheses; set => _iarNumHypotheses = value; }
        /// <summary>
        /// GPS Week Number of last baseline
        /// OriginName: wn, Units: , IsExtended: false
        /// </summary>
        public static readonly Field WnField = new Field.Builder()
            .Name(nameof(Wn))
            .Title("wn")
            .Description("GPS Week Number of last baseline")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _wn;
        public ushort Wn { get => _wn; set => _wn = value; }
        /// <summary>
        /// Identification of connected RTK receiver.
        /// OriginName: rtk_receiver_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RtkReceiverIdField = new Field.Builder()
            .Name(nameof(RtkReceiverId))
            .Title("rtk_receiver_id")
            .Description("Identification of connected RTK receiver.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rtkReceiverId;
        public byte RtkReceiverId { get => _rtkReceiverId; set => _rtkReceiverId = value; }
        /// <summary>
        /// GPS-specific health report for RTK data.
        /// OriginName: rtk_health, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RtkHealthField = new Field.Builder()
            .Name(nameof(RtkHealth))
            .Title("rtk_health")
            .Description("GPS-specific health report for RTK data.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rtkHealth;
        public byte RtkHealth { get => _rtkHealth; set => _rtkHealth = value; }
        /// <summary>
        /// Rate of baseline messages being received by GPS
        /// OriginName: rtk_rate, Units: Hz, IsExtended: false
        /// </summary>
        public static readonly Field RtkRateField = new Field.Builder()
            .Name(nameof(RtkRate))
            .Title("rtk_rate")
            .Description("Rate of baseline messages being received by GPS")
.Units(@"Hz")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _rtkRate;
        public byte RtkRate { get => _rtkRate; set => _rtkRate = value; }
        /// <summary>
        /// Current number of sats used for RTK calculation.
        /// OriginName: nsats, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NsatsField = new Field.Builder()
            .Name(nameof(Nsats))
            .Title("nsats")
            .Description("Current number of sats used for RTK calculation.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _nsats;
        public byte Nsats { get => _nsats; set => _nsats = value; }
        /// <summary>
        /// Coordinate system of baseline
        /// OriginName: baseline_coords_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BaselineCoordsTypeField = new Field.Builder()
            .Name(nameof(BaselineCoordsType))
            .Title("baseline_coords_type")
            .Description("Coordinate system of baseline")
            .DataType(new UInt8Type(RtkBaselineCoordinateSystemHelper.GetValues(x=>(byte)x).Min(),RtkBaselineCoordinateSystemHelper.GetValues(x=>(byte)x).Max()))
            .Enum(RtkBaselineCoordinateSystemHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private RtkBaselineCoordinateSystem _baselineCoordsType;
        public RtkBaselineCoordinateSystem BaselineCoordsType { get => _baselineCoordsType; set => _baselineCoordsType = value; } 
    }
    /// <summary>
    /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    ///  GPS2_RTK
    /// </summary>
    public class Gps2RtkPacket : MavlinkV2Message<Gps2RtkPayload>
    {
        public const int MessageId = 128;
        
        public const byte CrcExtra = 226;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override Gps2RtkPayload Payload { get; } = new();

        public override string Name => "GPS2_RTK";
    }

    /// <summary>
    ///  GPS2_RTK
    /// </summary>
    public class Gps2RtkPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_last_baseline_ms
            +4 // uint32_t tow
            +4 // int32_t baseline_a_mm
            +4 // int32_t baseline_b_mm
            +4 // int32_t baseline_c_mm
            +4 // uint32_t accuracy
            +4 // int32_t iar_num_hypotheses
            +2 // uint16_t wn
            +1 // uint8_t rtk_receiver_id
            +1 // uint8_t rtk_health
            +1 // uint8_t rtk_rate
            +1 // uint8_t nsats
            + 1 // uint8_t baseline_coords_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeLastBaselineMs = BinSerialize.ReadUInt(ref buffer);
            Tow = BinSerialize.ReadUInt(ref buffer);
            BaselineAMm = BinSerialize.ReadInt(ref buffer);
            BaselineBMm = BinSerialize.ReadInt(ref buffer);
            BaselineCMm = BinSerialize.ReadInt(ref buffer);
            Accuracy = BinSerialize.ReadUInt(ref buffer);
            IarNumHypotheses = BinSerialize.ReadInt(ref buffer);
            Wn = BinSerialize.ReadUShort(ref buffer);
            RtkReceiverId = (byte)BinSerialize.ReadByte(ref buffer);
            RtkHealth = (byte)BinSerialize.ReadByte(ref buffer);
            RtkRate = (byte)BinSerialize.ReadByte(ref buffer);
            Nsats = (byte)BinSerialize.ReadByte(ref buffer);
            BaselineCoordsType = (RtkBaselineCoordinateSystem)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeLastBaselineMs);
            BinSerialize.WriteUInt(ref buffer,Tow);
            BinSerialize.WriteInt(ref buffer,BaselineAMm);
            BinSerialize.WriteInt(ref buffer,BaselineBMm);
            BinSerialize.WriteInt(ref buffer,BaselineCMm);
            BinSerialize.WriteUInt(ref buffer,Accuracy);
            BinSerialize.WriteInt(ref buffer,IarNumHypotheses);
            BinSerialize.WriteUShort(ref buffer,Wn);
            BinSerialize.WriteByte(ref buffer,(byte)RtkReceiverId);
            BinSerialize.WriteByte(ref buffer,(byte)RtkHealth);
            BinSerialize.WriteByte(ref buffer,(byte)RtkRate);
            BinSerialize.WriteByte(ref buffer,(byte)Nsats);
            BinSerialize.WriteByte(ref buffer,(byte)BaselineCoordsType);
            /* PayloadByteSize = 35 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeLastBaselineMsField, ref _timeLastBaselineMs);    
            UInt32Type.Accept(visitor,TowField, ref _tow);    
            Int32Type.Accept(visitor,BaselineAMmField, ref _baselineAMm);    
            Int32Type.Accept(visitor,BaselineBMmField, ref _baselineBMm);    
            Int32Type.Accept(visitor,BaselineCMmField, ref _baselineCMm);    
            UInt32Type.Accept(visitor,AccuracyField, ref _accuracy);    
            Int32Type.Accept(visitor,IarNumHypothesesField, ref _iarNumHypotheses);    
            UInt16Type.Accept(visitor,WnField, ref _wn);    
            UInt8Type.Accept(visitor,RtkReceiverIdField, ref _rtkReceiverId);    
            UInt8Type.Accept(visitor,RtkHealthField, ref _rtkHealth);    
            UInt8Type.Accept(visitor,RtkRateField, ref _rtkRate);    
            UInt8Type.Accept(visitor,NsatsField, ref _nsats);    
            var tmpBaselineCoordsType = (byte)BaselineCoordsType;
            UInt8Type.Accept(visitor,BaselineCoordsTypeField, ref tmpBaselineCoordsType);
            BaselineCoordsType = (RtkBaselineCoordinateSystem)tmpBaselineCoordsType;

        }

        /// <summary>
        /// Time since boot of last baseline message received.
        /// OriginName: time_last_baseline_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeLastBaselineMsField = new Field.Builder()
            .Name(nameof(TimeLastBaselineMs))
            .Title("time_last_baseline_ms")
            .Description("Time since boot of last baseline message received.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeLastBaselineMs;
        public uint TimeLastBaselineMs { get => _timeLastBaselineMs; set => _timeLastBaselineMs = value; }
        /// <summary>
        /// GPS Time of Week of last baseline
        /// OriginName: tow, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TowField = new Field.Builder()
            .Name(nameof(Tow))
            .Title("tow")
            .Description("GPS Time of Week of last baseline")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _tow;
        public uint Tow { get => _tow; set => _tow = value; }
        /// <summary>
        /// Current baseline in ECEF x or NED north component.
        /// OriginName: baseline_a_mm, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field BaselineAMmField = new Field.Builder()
            .Name(nameof(BaselineAMm))
            .Title("baseline_a_mm")
            .Description("Current baseline in ECEF x or NED north component.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _baselineAMm;
        public int BaselineAMm { get => _baselineAMm; set => _baselineAMm = value; }
        /// <summary>
        /// Current baseline in ECEF y or NED east component.
        /// OriginName: baseline_b_mm, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field BaselineBMmField = new Field.Builder()
            .Name(nameof(BaselineBMm))
            .Title("baseline_b_mm")
            .Description("Current baseline in ECEF y or NED east component.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _baselineBMm;
        public int BaselineBMm { get => _baselineBMm; set => _baselineBMm = value; }
        /// <summary>
        /// Current baseline in ECEF z or NED down component.
        /// OriginName: baseline_c_mm, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field BaselineCMmField = new Field.Builder()
            .Name(nameof(BaselineCMm))
            .Title("baseline_c_mm")
            .Description("Current baseline in ECEF z or NED down component.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _baselineCMm;
        public int BaselineCMm { get => _baselineCMm; set => _baselineCMm = value; }
        /// <summary>
        /// Current estimate of baseline accuracy.
        /// OriginName: accuracy, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AccuracyField = new Field.Builder()
            .Name(nameof(Accuracy))
            .Title("accuracy")
            .Description("Current estimate of baseline accuracy.")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _accuracy;
        public uint Accuracy { get => _accuracy; set => _accuracy = value; }
        /// <summary>
        /// Current number of integer ambiguity hypotheses.
        /// OriginName: iar_num_hypotheses, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IarNumHypothesesField = new Field.Builder()
            .Name(nameof(IarNumHypotheses))
            .Title("iar_num_hypotheses")
            .Description("Current number of integer ambiguity hypotheses.")

            .DataType(Int32Type.Default)
        .Build();
        private int _iarNumHypotheses;
        public int IarNumHypotheses { get => _iarNumHypotheses; set => _iarNumHypotheses = value; }
        /// <summary>
        /// GPS Week Number of last baseline
        /// OriginName: wn, Units: , IsExtended: false
        /// </summary>
        public static readonly Field WnField = new Field.Builder()
            .Name(nameof(Wn))
            .Title("wn")
            .Description("GPS Week Number of last baseline")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _wn;
        public ushort Wn { get => _wn; set => _wn = value; }
        /// <summary>
        /// Identification of connected RTK receiver.
        /// OriginName: rtk_receiver_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RtkReceiverIdField = new Field.Builder()
            .Name(nameof(RtkReceiverId))
            .Title("rtk_receiver_id")
            .Description("Identification of connected RTK receiver.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rtkReceiverId;
        public byte RtkReceiverId { get => _rtkReceiverId; set => _rtkReceiverId = value; }
        /// <summary>
        /// GPS-specific health report for RTK data.
        /// OriginName: rtk_health, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RtkHealthField = new Field.Builder()
            .Name(nameof(RtkHealth))
            .Title("rtk_health")
            .Description("GPS-specific health report for RTK data.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rtkHealth;
        public byte RtkHealth { get => _rtkHealth; set => _rtkHealth = value; }
        /// <summary>
        /// Rate of baseline messages being received by GPS
        /// OriginName: rtk_rate, Units: Hz, IsExtended: false
        /// </summary>
        public static readonly Field RtkRateField = new Field.Builder()
            .Name(nameof(RtkRate))
            .Title("rtk_rate")
            .Description("Rate of baseline messages being received by GPS")
.Units(@"Hz")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _rtkRate;
        public byte RtkRate { get => _rtkRate; set => _rtkRate = value; }
        /// <summary>
        /// Current number of sats used for RTK calculation.
        /// OriginName: nsats, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NsatsField = new Field.Builder()
            .Name(nameof(Nsats))
            .Title("nsats")
            .Description("Current number of sats used for RTK calculation.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _nsats;
        public byte Nsats { get => _nsats; set => _nsats = value; }
        /// <summary>
        /// Coordinate system of baseline
        /// OriginName: baseline_coords_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BaselineCoordsTypeField = new Field.Builder()
            .Name(nameof(BaselineCoordsType))
            .Title("baseline_coords_type")
            .Description("Coordinate system of baseline")
            .DataType(new UInt8Type(RtkBaselineCoordinateSystemHelper.GetValues(x=>(byte)x).Min(),RtkBaselineCoordinateSystemHelper.GetValues(x=>(byte)x).Max()))
            .Enum(RtkBaselineCoordinateSystemHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private RtkBaselineCoordinateSystem _baselineCoordsType;
        public RtkBaselineCoordinateSystem BaselineCoordsType { get => _baselineCoordsType; set => _baselineCoordsType = value; } 
    }
    /// <summary>
    /// The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units
    ///  SCALED_IMU3
    /// </summary>
    public class ScaledImu3Packet : MavlinkV2Message<ScaledImu3Payload>
    {
        public const int MessageId = 129;
        
        public const byte CrcExtra = 46;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ScaledImu3Payload Payload { get; } = new();

        public override string Name => "SCALED_IMU3";
    }

    /// <summary>
    ///  SCALED_IMU3
    /// </summary>
    public class ScaledImu3Payload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +2 // int16_t xacc
            +2 // int16_t yacc
            +2 // int16_t zacc
            +2 // int16_t xgyro
            +2 // int16_t ygyro
            +2 // int16_t zgyro
            +2 // int16_t xmag
            +2 // int16_t ymag
            +2 // int16_t zmag
            +2 // int16_t temperature
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 24 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int16Type.Accept(visitor,XaccField, ref _xacc);
            Int16Type.Accept(visitor,YaccField, ref _yacc);
            Int16Type.Accept(visitor,ZaccField, ref _zacc);
            Int16Type.Accept(visitor,XgyroField, ref _xgyro);
            Int16Type.Accept(visitor,YgyroField, ref _ygyro);
            Int16Type.Accept(visitor,ZgyroField, ref _zgyro);
            Int16Type.Accept(visitor,XmagField, ref _xmag);
            Int16Type.Accept(visitor,YmagField, ref _ymag);
            Int16Type.Accept(visitor,ZmagField, ref _zmag);
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field XaccField = new Field.Builder()
            .Name(nameof(Xacc))
            .Title("xacc")
            .Description("X acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _xacc;
        public short Xacc { get => _xacc; set => _xacc = value; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field YaccField = new Field.Builder()
            .Name(nameof(Yacc))
            .Title("yacc")
            .Description("Y acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _yacc;
        public short Yacc { get => _yacc; set => _yacc = value; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public static readonly Field ZaccField = new Field.Builder()
            .Name(nameof(Zacc))
            .Title("zacc")
            .Description("Z acceleration")
.Units(@"mG")
            .DataType(Int16Type.Default)
        .Build();
        private short _zacc;
        public short Zacc { get => _zacc; set => _zacc = value; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field XgyroField = new Field.Builder()
            .Name(nameof(Xgyro))
            .Title("xgyro")
            .Description("Angular speed around X axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _xgyro;
        public short Xgyro { get => _xgyro; set => _xgyro = value; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field YgyroField = new Field.Builder()
            .Name(nameof(Ygyro))
            .Title("ygyro")
            .Description("Angular speed around Y axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _ygyro;
        public short Ygyro { get => _ygyro; set => _ygyro = value; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public static readonly Field ZgyroField = new Field.Builder()
            .Name(nameof(Zgyro))
            .Title("zgyro")
            .Description("Angular speed around Z axis")
.Units(@"mrad/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _zgyro;
        public short Zgyro { get => _zgyro; set => _zgyro = value; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field XmagField = new Field.Builder()
            .Name(nameof(Xmag))
            .Title("xmag")
            .Description("X Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _xmag;
        public short Xmag { get => _xmag; set => _xmag = value; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field YmagField = new Field.Builder()
            .Name(nameof(Ymag))
            .Title("ymag")
            .Description("Y Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _ymag;
        public short Ymag { get => _ymag; set => _ymag = value; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field ZmagField = new Field.Builder()
            .Name(nameof(Zmag))
            .Title("zmag")
            .Description("Z Magnetic field")
.Units(@"mgauss")
            .DataType(Int16Type.Default)
        .Build();
        private short _zmag;
        public short Zmag { get => _zmag; set => _zmag = value; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
    }
    /// <summary>
    /// Handshake message to initiate, control and stop image streaming when using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    ///  DATA_TRANSMISSION_HANDSHAKE
    /// </summary>
    public class DataTransmissionHandshakePacket : MavlinkV2Message<DataTransmissionHandshakePayload>
    {
        public const int MessageId = 130;
        
        public const byte CrcExtra = 29;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override DataTransmissionHandshakePayload Payload { get; } = new();

        public override string Name => "DATA_TRANSMISSION_HANDSHAKE";
    }

    /// <summary>
    ///  DATA_TRANSMISSION_HANDSHAKE
    /// </summary>
    public class DataTransmissionHandshakePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 13; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 13; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t size
            +2 // uint16_t width
            +2 // uint16_t height
            +2 // uint16_t packets
            + 1 // uint8_t type
            +1 // uint8_t payload
            +1 // uint8_t jpg_quality
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Size = BinSerialize.ReadUInt(ref buffer);
            Width = BinSerialize.ReadUShort(ref buffer);
            Height = BinSerialize.ReadUShort(ref buffer);
            Packets = BinSerialize.ReadUShort(ref buffer);
            Type = (MavlinkDataStreamType)BinSerialize.ReadByte(ref buffer);
            Payload = (byte)BinSerialize.ReadByte(ref buffer);
            JpgQuality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Size);
            BinSerialize.WriteUShort(ref buffer,Width);
            BinSerialize.WriteUShort(ref buffer,Height);
            BinSerialize.WriteUShort(ref buffer,Packets);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Payload);
            BinSerialize.WriteByte(ref buffer,(byte)JpgQuality);
            /* PayloadByteSize = 13 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,SizeField, ref _size);    
            UInt16Type.Accept(visitor,WidthField, ref _width);    
            UInt16Type.Accept(visitor,HeightField, ref _height);    
            UInt16Type.Accept(visitor,PacketsField, ref _packets);    
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (MavlinkDataStreamType)tmpType;
            UInt8Type.Accept(visitor,PayloadField, ref _payload);    
            UInt8Type.Accept(visitor,JpgQualityField, ref _jpgQuality);    

        }

        /// <summary>
        /// total data size (set on ACK only).
        /// OriginName: size, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field SizeField = new Field.Builder()
            .Name(nameof(Size))
            .Title("size")
            .Description("total data size (set on ACK only).")
.Units(@"bytes")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _size;
        public uint Size { get => _size; set => _size = value; }
        /// <summary>
        /// Width of a matrix or image.
        /// OriginName: width, Units: , IsExtended: false
        /// </summary>
        public static readonly Field WidthField = new Field.Builder()
            .Name(nameof(Width))
            .Title("width")
            .Description("Width of a matrix or image.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _width;
        public ushort Width { get => _width; set => _width = value; }
        /// <summary>
        /// Height of a matrix or image.
        /// OriginName: height, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HeightField = new Field.Builder()
            .Name(nameof(Height))
            .Title("height")
            .Description("Height of a matrix or image.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _height;
        public ushort Height { get => _height; set => _height = value; }
        /// <summary>
        /// Number of packets being sent (set on ACK only).
        /// OriginName: packets, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PacketsField = new Field.Builder()
            .Name(nameof(Packets))
            .Title("packets")
            .Description("Number of packets being sent (set on ACK only).")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _packets;
        public ushort Packets { get => _packets; set => _packets = value; }
        /// <summary>
        /// Type of requested/acknowledged data.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of requested/acknowledged data.")
            .DataType(new UInt8Type(MavlinkDataStreamTypeHelper.GetValues(x=>(byte)x).Min(),MavlinkDataStreamTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavlinkDataStreamTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavlinkDataStreamType _type;
        public MavlinkDataStreamType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only).
        /// OriginName: payload, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field PayloadField = new Field.Builder()
            .Name(nameof(Payload))
            .Title("payload")
            .Description("Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only).")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _payload;
        public byte Payload { get => _payload; set => _payload = value; }
        /// <summary>
        /// JPEG quality. Values: [1-100].
        /// OriginName: jpg_quality, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field JpgQualityField = new Field.Builder()
            .Name(nameof(JpgQuality))
            .Title("jpg_quality")
            .Description("JPEG quality. Values: [1-100].")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _jpgQuality;
        public byte JpgQuality { get => _jpgQuality; set => _jpgQuality = value; }
    }
    /// <summary>
    /// Data packet for images sent using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    ///  ENCAPSULATED_DATA
    /// </summary>
    public class EncapsulatedDataPacket : MavlinkV2Message<EncapsulatedDataPayload>
    {
        public const int MessageId = 131;
        
        public const byte CrcExtra = 223;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override EncapsulatedDataPayload Payload { get; } = new();

        public override string Name => "ENCAPSULATED_DATA";
    }

    /// <summary>
    ///  ENCAPSULATED_DATA
    /// </summary>
    public class EncapsulatedDataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t seqnr
            +Data.Length // uint8_t[253] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Seqnr = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/253 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seqnr);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 255 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SeqnrField, ref _seqnr);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// sequence number (starting with 0 on every transmission)
        /// OriginName: seqnr, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeqnrField = new Field.Builder()
            .Name(nameof(Seqnr))
            .Title("seqnr")
            .Description("sequence number (starting with 0 on every transmission)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _seqnr;
        public ushort Seqnr { get => _seqnr; set => _seqnr = value; }
        /// <summary>
        /// image data bytes
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("image data bytes")

            .DataType(new ArrayType(UInt8Type.Default,253))
        .Build();
        public const int DataMaxItemsCount = 253;
        public byte[] Data { get; } = new byte[253];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 253;
    }
    /// <summary>
    /// Distance sensor information for an onboard rangefinder.
    ///  DISTANCE_SENSOR
    /// </summary>
    public class DistanceSensorPacket : MavlinkV2Message<DistanceSensorPayload>
    {
        public const int MessageId = 132;
        
        public const byte CrcExtra = 85;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override DistanceSensorPayload Payload { get; } = new();

        public override string Name => "DISTANCE_SENSOR";
    }

    /// <summary>
    ///  DISTANCE_SENSOR
    /// </summary>
    public class DistanceSensorPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 39; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 39; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +2 // uint16_t min_distance
            +2 // uint16_t max_distance
            +2 // uint16_t current_distance
            + 1 // uint8_t type
            +1 // uint8_t id
            + 1 // uint8_t orientation
            +1 // uint8_t covariance
            +4 // float horizontal_fov
            +4 // float vertical_fov
            +Quaternion.Length * 4 // float[4] quaternion
            +1 // uint8_t signal_quality
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            MinDistance = BinSerialize.ReadUShort(ref buffer);
            MaxDistance = BinSerialize.ReadUShort(ref buffer);
            CurrentDistance = BinSerialize.ReadUShort(ref buffer);
            Type = (MavDistanceSensor)BinSerialize.ReadByte(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            Orientation = (MavSensorOrientation)BinSerialize.ReadByte(ref buffer);
            Covariance = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'HorizontalFov' can be empty
            if (buffer.IsEmpty) return;
            HorizontalFov = BinSerialize.ReadFloat(ref buffer);
            // extended field 'VerticalFov' can be empty
            if (buffer.IsEmpty) return;
            VerticalFov = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Quaternion' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Quaternion[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'SignalQuality' can be empty
            if (buffer.IsEmpty) return;
            SignalQuality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUShort(ref buffer,MinDistance);
            BinSerialize.WriteUShort(ref buffer,MaxDistance);
            BinSerialize.WriteUShort(ref buffer,CurrentDistance);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteByte(ref buffer,(byte)Orientation);
            BinSerialize.WriteByte(ref buffer,(byte)Covariance);
            BinSerialize.WriteFloat(ref buffer,HorizontalFov);
            BinSerialize.WriteFloat(ref buffer,VerticalFov);
            for(var i=0;i<Quaternion.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Quaternion[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)SignalQuality);
            /* PayloadByteSize = 39 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt16Type.Accept(visitor,MinDistanceField, ref _minDistance);    
            UInt16Type.Accept(visitor,MaxDistanceField, ref _maxDistance);    
            UInt16Type.Accept(visitor,CurrentDistanceField, ref _currentDistance);    
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (MavDistanceSensor)tmpType;
            UInt8Type.Accept(visitor,IdField, ref _id);    
            var tmpOrientation = (byte)Orientation;
            UInt8Type.Accept(visitor,OrientationField, ref tmpOrientation);
            Orientation = (MavSensorOrientation)tmpOrientation;
            UInt8Type.Accept(visitor,CovarianceField, ref _covariance);    
            FloatType.Accept(visitor,HorizontalFovField, ref _horizontalFov);    
            FloatType.Accept(visitor,VerticalFovField, ref _verticalFov);    
            ArrayType.Accept(visitor,QuaternionField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Quaternion[index]));
            UInt8Type.Accept(visitor,SignalQualityField, ref _signalQuality);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Minimum distance the sensor can measure
        /// OriginName: min_distance, Units: cm, IsExtended: false
        /// </summary>
        public static readonly Field MinDistanceField = new Field.Builder()
            .Name(nameof(MinDistance))
            .Title("min_distance")
            .Description("Minimum distance the sensor can measure")
.Units(@"cm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _minDistance;
        public ushort MinDistance { get => _minDistance; set => _minDistance = value; }
        /// <summary>
        /// Maximum distance the sensor can measure
        /// OriginName: max_distance, Units: cm, IsExtended: false
        /// </summary>
        public static readonly Field MaxDistanceField = new Field.Builder()
            .Name(nameof(MaxDistance))
            .Title("max_distance")
            .Description("Maximum distance the sensor can measure")
.Units(@"cm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _maxDistance;
        public ushort MaxDistance { get => _maxDistance; set => _maxDistance = value; }
        /// <summary>
        /// Current distance reading
        /// OriginName: current_distance, Units: cm, IsExtended: false
        /// </summary>
        public static readonly Field CurrentDistanceField = new Field.Builder()
            .Name(nameof(CurrentDistance))
            .Title("current_distance")
            .Description("Current distance reading")
.Units(@"cm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _currentDistance;
        public ushort CurrentDistance { get => _currentDistance; set => _currentDistance = value; }
        /// <summary>
        /// Type of distance sensor.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of distance sensor.")
            .DataType(new UInt8Type(MavDistanceSensorHelper.GetValues(x=>(byte)x).Min(),MavDistanceSensorHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavDistanceSensorHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavDistanceSensor _type;
        public MavDistanceSensor Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Onboard ID of the sensor
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Onboard ID of the sensor")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
        /// <summary>
        /// Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270
        /// OriginName: orientation, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OrientationField = new Field.Builder()
            .Name(nameof(Orientation))
            .Title("orientation")
            .Description("Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270")
            .DataType(new UInt8Type(MavSensorOrientationHelper.GetValues(x=>(byte)x).Min(),MavSensorOrientationHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavSensorOrientationHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavSensorOrientation _orientation;
        public MavSensorOrientation Orientation { get => _orientation; set => _orientation = value; } 
        /// <summary>
        /// Measurement variance. Max standard deviation is 6cm. UINT8_MAX if unknown.
        /// OriginName: covariance, Units: cm^2, IsExtended: false
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Measurement variance. Max standard deviation is 6cm. UINT8_MAX if unknown.")
.Units(@"cm^2")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _covariance;
        public byte Covariance { get => _covariance; set => _covariance = value; }
        /// <summary>
        /// Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
        /// OriginName: horizontal_fov, Units: rad, IsExtended: true
        /// </summary>
        public static readonly Field HorizontalFovField = new Field.Builder()
            .Name(nameof(HorizontalFov))
            .Title("horizontal_fov")
            .Description("Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _horizontalFov;
        public float HorizontalFov { get => _horizontalFov; set => _horizontalFov = value; }
        /// <summary>
        /// Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
        /// OriginName: vertical_fov, Units: rad, IsExtended: true
        /// </summary>
        public static readonly Field VerticalFovField = new Field.Builder()
            .Name(nameof(VerticalFov))
            .Title("vertical_fov")
            .Description("Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _verticalFov;
        public float VerticalFov { get => _verticalFov; set => _verticalFov = value; }
        /// <summary>
        /// Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid."
        /// OriginName: quaternion, Units: , IsExtended: true
        /// </summary>
        public static readonly Field QuaternionField = new Field.Builder()
            .Name(nameof(Quaternion))
            .Title("quaternion")
            .Description("Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid.\"")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QuaternionMaxItemsCount = 4;
        public float[] Quaternion { get; } = new float[4];
        /// <summary>
        /// Signal quality of the sensor. Specific to each sensor type, representing the relation of the signal strength with the target reflectivity, distance, size or aspect, but normalised as a percentage. 0 = unknown/unset signal quality, 1 = invalid signal, 100 = perfect signal.
        /// OriginName: signal_quality, Units: %, IsExtended: true
        /// </summary>
        public static readonly Field SignalQualityField = new Field.Builder()
            .Name(nameof(SignalQuality))
            .Title("signal_quality")
            .Description("Signal quality of the sensor. Specific to each sensor type, representing the relation of the signal strength with the target reflectivity, distance, size or aspect, but normalised as a percentage. 0 = unknown/unset signal quality, 1 = invalid signal, 100 = perfect signal.")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _signalQuality;
        public byte SignalQuality { get => _signalQuality; set => _signalQuality = value; }
    }
    /// <summary>
    /// Request for terrain data and terrain status. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    ///  TERRAIN_REQUEST
    /// </summary>
    public class TerrainRequestPacket : MavlinkV2Message<TerrainRequestPayload>
    {
        public const int MessageId = 133;
        
        public const byte CrcExtra = 6;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TerrainRequestPayload Payload { get; } = new();

        public override string Name => "TERRAIN_REQUEST";
    }

    /// <summary>
    ///  TERRAIN_REQUEST
    /// </summary>
    public class TerrainRequestPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t mask
            +4 // int32_t lat
            +4 // int32_t lon
            +2 // uint16_t grid_spacing
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Mask = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            GridSpacing = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Mask);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteUShort(ref buffer,GridSpacing);
            /* PayloadByteSize = 18 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,MaskField, ref _mask);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            UInt16Type.Accept(visitor,GridSpacingField, ref _gridSpacing);    

        }

        /// <summary>
        /// Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)
        /// OriginName: mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MaskField = new Field.Builder()
            .Name(nameof(Mask))
            .Title("bitmask")
            .Description("Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)")
.FormatString("0x%07x")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _mask;
        public ulong Mask { get => _mask; set => _mask = value; }
        /// <summary>
        /// Latitude of SW corner of first grid
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude of SW corner of first grid")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude of SW corner of first grid
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude of SW corner of first grid")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Grid spacing
        /// OriginName: grid_spacing, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field GridSpacingField = new Field.Builder()
            .Name(nameof(GridSpacing))
            .Title("grid_spacing")
            .Description("Grid spacing")
.Units(@"m")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _gridSpacing;
        public ushort GridSpacing { get => _gridSpacing; set => _gridSpacing = value; }
    }
    /// <summary>
    /// Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    ///  TERRAIN_DATA
    /// </summary>
    public class TerrainDataPacket : MavlinkV2Message<TerrainDataPayload>
    {
        public const int MessageId = 134;
        
        public const byte CrcExtra = 229;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TerrainDataPayload Payload { get; } = new();

        public override string Name => "TERRAIN_DATA";
    }

    /// <summary>
    ///  TERRAIN_DATA
    /// </summary>
    public class TerrainDataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t lat
            +4 // int32_t lon
            +2 // uint16_t grid_spacing
            +Data.Length * 2 // int16_t[16] data
            +1 // uint8_t gridbit
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            GridSpacing = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/43 - payloadSize - /*ExtendedFieldsLength*/0)/2 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = BinSerialize.ReadShort(ref buffer);
            }
            Gridbit = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteUShort(ref buffer,GridSpacing);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteShort(ref buffer,Data[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Gridbit);
            /* PayloadByteSize = 43 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            UInt16Type.Accept(visitor,GridSpacingField, ref _gridSpacing);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => Int16Type.Accept(v, f, t, ref Data[index]));    
            UInt8Type.Accept(visitor,GridbitField, ref _gridbit);    

        }

        /// <summary>
        /// Latitude of SW corner of first grid
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude of SW corner of first grid")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude of SW corner of first grid
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude of SW corner of first grid")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Grid spacing
        /// OriginName: grid_spacing, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field GridSpacingField = new Field.Builder()
            .Name(nameof(GridSpacing))
            .Title("grid_spacing")
            .Description("Grid spacing")
.Units(@"m")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _gridSpacing;
        public ushort GridSpacing { get => _gridSpacing; set => _gridSpacing = value; }
        /// <summary>
        /// Terrain data MSL
        /// OriginName: data, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("Terrain data MSL")
.Units(@"m")
            .DataType(new ArrayType(Int16Type.Default,16))
        .Build();
        public const int DataMaxItemsCount = 16;
        public short[] Data { get; } = new short[16];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 16;
        /// <summary>
        /// bit within the terrain request mask
        /// OriginName: gridbit, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GridbitField = new Field.Builder()
            .Name(nameof(Gridbit))
            .Title("gridbit")
            .Description("bit within the terrain request mask")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gridbit;
        public byte Gridbit { get => _gridbit; set => _gridbit = value; }
    }
    /// <summary>
    /// Request that the vehicle report terrain height at the given location (expected response is a TERRAIN_REPORT). Used by GCS to check if vehicle has all terrain data needed for a mission.
    ///  TERRAIN_CHECK
    /// </summary>
    public class TerrainCheckPacket : MavlinkV2Message<TerrainCheckPayload>
    {
        public const int MessageId = 135;
        
        public const byte CrcExtra = 203;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TerrainCheckPayload Payload { get; } = new();

        public override string Name => "TERRAIN_CHECK";
    }

    /// <summary>
    ///  TERRAIN_CHECK
    /// </summary>
    public class TerrainCheckPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 8; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 8; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t lat
            +4 // int32_t lon
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            /* PayloadByteSize = 8 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    

        }

        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
    }
    /// <summary>
    /// Streamed from drone to report progress of terrain map download (initiated by TERRAIN_REQUEST), or sent as a response to a TERRAIN_CHECK request. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    ///  TERRAIN_REPORT
    /// </summary>
    public class TerrainReportPacket : MavlinkV2Message<TerrainReportPayload>
    {
        public const int MessageId = 136;
        
        public const byte CrcExtra = 1;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TerrainReportPayload Payload { get; } = new();

        public override string Name => "TERRAIN_REPORT";
    }

    /// <summary>
    ///  TERRAIN_REPORT
    /// </summary>
    public class TerrainReportPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // float terrain_height
            +4 // float current_height
            +2 // uint16_t spacing
            +2 // uint16_t pending
            +2 // uint16_t loaded
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            TerrainHeight = BinSerialize.ReadFloat(ref buffer);
            CurrentHeight = BinSerialize.ReadFloat(ref buffer);
            Spacing = BinSerialize.ReadUShort(ref buffer);
            Pending = BinSerialize.ReadUShort(ref buffer);
            Loaded = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,TerrainHeight);
            BinSerialize.WriteFloat(ref buffer,CurrentHeight);
            BinSerialize.WriteUShort(ref buffer,Spacing);
            BinSerialize.WriteUShort(ref buffer,Pending);
            BinSerialize.WriteUShort(ref buffer,Loaded);
            /* PayloadByteSize = 22 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            FloatType.Accept(visitor,TerrainHeightField, ref _terrainHeight);    
            FloatType.Accept(visitor,CurrentHeightField, ref _currentHeight);    
            UInt16Type.Accept(visitor,SpacingField, ref _spacing);    
            UInt16Type.Accept(visitor,PendingField, ref _pending);    
            UInt16Type.Accept(visitor,LoadedField, ref _loaded);    

        }

        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Terrain height MSL
        /// OriginName: terrain_height, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field TerrainHeightField = new Field.Builder()
            .Name(nameof(TerrainHeight))
            .Title("terrain_height")
            .Description("Terrain height MSL")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _terrainHeight;
        public float TerrainHeight { get => _terrainHeight; set => _terrainHeight = value; }
        /// <summary>
        /// Current vehicle height above lat/lon terrain height
        /// OriginName: current_height, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field CurrentHeightField = new Field.Builder()
            .Name(nameof(CurrentHeight))
            .Title("current_height")
            .Description("Current vehicle height above lat/lon terrain height")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _currentHeight;
        public float CurrentHeight { get => _currentHeight; set => _currentHeight = value; }
        /// <summary>
        /// grid spacing (zero if terrain at this location unavailable)
        /// OriginName: spacing, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SpacingField = new Field.Builder()
            .Name(nameof(Spacing))
            .Title("spacing")
            .Description("grid spacing (zero if terrain at this location unavailable)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _spacing;
        public ushort Spacing { get => _spacing; set => _spacing = value; }
        /// <summary>
        /// Number of 4x4 terrain blocks waiting to be received or read from disk
        /// OriginName: pending, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PendingField = new Field.Builder()
            .Name(nameof(Pending))
            .Title("pending")
            .Description("Number of 4x4 terrain blocks waiting to be received or read from disk")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _pending;
        public ushort Pending { get => _pending; set => _pending = value; }
        /// <summary>
        /// Number of 4x4 terrain blocks in memory
        /// OriginName: loaded, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LoadedField = new Field.Builder()
            .Name(nameof(Loaded))
            .Title("loaded")
            .Description("Number of 4x4 terrain blocks in memory")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _loaded;
        public ushort Loaded { get => _loaded; set => _loaded = value; }
    }
    /// <summary>
    /// Barometer readings for 2nd barometer
    ///  SCALED_PRESSURE2
    /// </summary>
    public class ScaledPressure2Packet : MavlinkV2Message<ScaledPressure2Payload>
    {
        public const int MessageId = 137;
        
        public const byte CrcExtra = 195;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ScaledPressure2Payload Payload { get; } = new();

        public override string Name => "SCALED_PRESSURE2";
    }

    /// <summary>
    ///  SCALED_PRESSURE2
    /// </summary>
    public class ScaledPressure2Payload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float press_abs
            +4 // float press_diff
            +2 // int16_t temperature
            +2 // int16_t temperature_press_diff
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            PressAbs = BinSerialize.ReadFloat(ref buffer);
            PressDiff = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            // extended field 'TemperaturePressDiff' can be empty
            if (buffer.IsEmpty) return;
            TemperaturePressDiff = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,PressAbs);
            BinSerialize.WriteFloat(ref buffer,PressDiff);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteShort(ref buffer,TemperaturePressDiff);
            /* PayloadByteSize = 16 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,PressAbsField, ref _pressAbs);    
            FloatType.Accept(visitor,PressDiffField, ref _pressDiff);    
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);
            Int16Type.Accept(visitor,TemperaturePressDiffField, ref _temperaturePressDiff);

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: press_abs, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field PressAbsField = new Field.Builder()
            .Name(nameof(PressAbs))
            .Title("press_abs")
            .Description("Absolute pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _pressAbs;
        public float PressAbs { get => _pressAbs; set => _pressAbs = value; }
        /// <summary>
        /// Differential pressure
        /// OriginName: press_diff, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field PressDiffField = new Field.Builder()
            .Name(nameof(PressDiff))
            .Title("press_diff")
            .Description("Differential pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _pressDiff;
        public float PressDiff { get => _pressDiff; set => _pressDiff = value; }
        /// <summary>
        /// Absolute pressure temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Absolute pressure temperature")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.
        /// OriginName: temperature_press_diff, Units: cdegC, IsExtended: true
        /// </summary>
        public static readonly Field TemperaturePressDiffField = new Field.Builder()
            .Name(nameof(TemperaturePressDiff))
            .Title("temperature_press_diff")
            .Description("Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperaturePressDiff;
        public short TemperaturePressDiff { get => _temperaturePressDiff; set => _temperaturePressDiff = value; }
    }
    /// <summary>
    /// Motion capture attitude and position
    ///  ATT_POS_MOCAP
    /// </summary>
    public class AttPosMocapPacket : MavlinkV2Message<AttPosMocapPayload>
    {
        public const int MessageId = 138;
        
        public const byte CrcExtra = 109;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AttPosMocapPayload Payload { get; } = new();

        public override string Name => "ATT_POS_MOCAP";
    }

    /// <summary>
    ///  ATT_POS_MOCAP
    /// </summary>
    public class AttPosMocapPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 120; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 120; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +Q.Length * 4 // float[4] q
            +4 // float x
            +4 // float y
            +4 // float z
            +Covariance.Length * 4 // float[21] covariance
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/120 - payloadSize - /*ExtendedFieldsLength*/84)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            /* PayloadByteSize = 120 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            ArrayType.Accept(visitor,CovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Covariance[index]));

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X position (NED)
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X position (NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y position (NED)
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y position (NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z position (NED)
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z position (NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public static readonly Field CovarianceField = new Field.Builder()
            .Name(nameof(Covariance))
            .Title("covariance")
            .Description("Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,21))        
        .Build();
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
    }
    /// <summary>
    /// Set the vehicle attitude and body angular rates.
    ///  SET_ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class SetActuatorControlTargetPacket : MavlinkV2Message<SetActuatorControlTargetPayload>
    {
        public const int MessageId = 139;
        
        public const byte CrcExtra = 168;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetActuatorControlTargetPayload Payload { get; } = new();

        public override string Name => "SET_ACTUATOR_CONTROL_TARGET";
    }

    /// <summary>
    ///  SET_ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class SetActuatorControlTargetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +Controls.Length * 4 // float[8] controls
            +1 // uint8_t group_mlx
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/43 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Controls[i] = BinSerialize.ReadFloat(ref buffer);
            }
            GroupMlx = (byte)BinSerialize.ReadByte(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Controls.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Controls[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)GroupMlx);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 43 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,ControlsField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Controls[index]));
            UInt8Type.Accept(visitor,GroupMlxField, ref _groupMlx);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// OriginName: controls, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ControlsField = new Field.Builder()
            .Name(nameof(Controls))
            .Title("controls")
            .Description("Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.")

            .DataType(new ArrayType(FloatType.Default,8))        
        .Build();
        public const int ControlsMaxItemsCount = 8;
        public float[] Controls { get; } = new float[8];
        [Obsolete("This method is deprecated. Use GetControlsMaxItemsCount instead.")]
        public byte GetControlsMaxItemsCount() => 8;
        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// OriginName: group_mlx, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GroupMlxField = new Field.Builder()
            .Name(nameof(GroupMlx))
            .Title("group_mlx")
            .Description("Actuator group. The \"_mlx\" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _groupMlx;
        public byte GroupMlx { get => _groupMlx; set => _groupMlx = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Set the vehicle attitude and body angular rates.
    ///  ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class ActuatorControlTargetPacket : MavlinkV2Message<ActuatorControlTargetPayload>
    {
        public const int MessageId = 140;
        
        public const byte CrcExtra = 181;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ActuatorControlTargetPayload Payload { get; } = new();

        public override string Name => "ACTUATOR_CONTROL_TARGET";
    }

    /// <summary>
    ///  ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class ActuatorControlTargetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 41; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 41; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +Controls.Length * 4 // float[8] controls
            +1 // uint8_t group_mlx
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/41 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Controls[i] = BinSerialize.ReadFloat(ref buffer);
            }
            GroupMlx = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Controls.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Controls[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)GroupMlx);
            /* PayloadByteSize = 41 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,ControlsField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Controls[index]));
            UInt8Type.Accept(visitor,GroupMlxField, ref _groupMlx);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// OriginName: controls, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ControlsField = new Field.Builder()
            .Name(nameof(Controls))
            .Title("controls")
            .Description("Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.")

            .DataType(new ArrayType(FloatType.Default,8))        
        .Build();
        public const int ControlsMaxItemsCount = 8;
        public float[] Controls { get; } = new float[8];
        [Obsolete("This method is deprecated. Use GetControlsMaxItemsCount instead.")]
        public byte GetControlsMaxItemsCount() => 8;
        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// OriginName: group_mlx, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GroupMlxField = new Field.Builder()
            .Name(nameof(GroupMlx))
            .Title("group_mlx")
            .Description("Actuator group. The \"_mlx\" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _groupMlx;
        public byte GroupMlx { get => _groupMlx; set => _groupMlx = value; }
    }
    /// <summary>
    /// The current system altitude.
    ///  ALTITUDE
    /// </summary>
    public class AltitudePacket : MavlinkV2Message<AltitudePayload>
    {
        public const int MessageId = 141;
        
        public const byte CrcExtra = 47;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AltitudePayload Payload { get; } = new();

        public override string Name => "ALTITUDE";
    }

    /// <summary>
    ///  ALTITUDE
    /// </summary>
    public class AltitudePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float altitude_monotonic
            +4 // float altitude_amsl
            +4 // float altitude_local
            +4 // float altitude_relative
            +4 // float altitude_terrain
            +4 // float bottom_clearance
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            AltitudeMonotonic = BinSerialize.ReadFloat(ref buffer);
            AltitudeAmsl = BinSerialize.ReadFloat(ref buffer);
            AltitudeLocal = BinSerialize.ReadFloat(ref buffer);
            AltitudeRelative = BinSerialize.ReadFloat(ref buffer);
            AltitudeTerrain = BinSerialize.ReadFloat(ref buffer);
            BottomClearance = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,AltitudeMonotonic);
            BinSerialize.WriteFloat(ref buffer,AltitudeAmsl);
            BinSerialize.WriteFloat(ref buffer,AltitudeLocal);
            BinSerialize.WriteFloat(ref buffer,AltitudeRelative);
            BinSerialize.WriteFloat(ref buffer,AltitudeTerrain);
            BinSerialize.WriteFloat(ref buffer,BottomClearance);
            /* PayloadByteSize = 32 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,AltitudeMonotonicField, ref _altitudeMonotonic);    
            FloatType.Accept(visitor,AltitudeAmslField, ref _altitudeAmsl);    
            FloatType.Accept(visitor,AltitudeLocalField, ref _altitudeLocal);    
            FloatType.Accept(visitor,AltitudeRelativeField, ref _altitudeRelative);    
            FloatType.Accept(visitor,AltitudeTerrainField, ref _altitudeTerrain);    
            FloatType.Accept(visitor,BottomClearanceField, ref _bottomClearance);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.
        /// OriginName: altitude_monotonic, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeMonotonicField = new Field.Builder()
            .Name(nameof(AltitudeMonotonic))
            .Title("altitude_monotonic")
            .Description("This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeMonotonic;
        public float AltitudeMonotonic { get => _altitudeMonotonic; set => _altitudeMonotonic = value; }
        /// <summary>
        /// This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.
        /// OriginName: altitude_amsl, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeAmslField = new Field.Builder()
            .Name(nameof(AltitudeAmsl))
            .Title("altitude_amsl")
            .Description("This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeAmsl;
        public float AltitudeAmsl { get => _altitudeAmsl; set => _altitudeAmsl = value; }
        /// <summary>
        /// This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.
        /// OriginName: altitude_local, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeLocalField = new Field.Builder()
            .Name(nameof(AltitudeLocal))
            .Title("altitude_local")
            .Description("This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeLocal;
        public float AltitudeLocal { get => _altitudeLocal; set => _altitudeLocal = value; }
        /// <summary>
        /// This is the altitude above the home position. It resets on each change of the current home position.
        /// OriginName: altitude_relative, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeRelativeField = new Field.Builder()
            .Name(nameof(AltitudeRelative))
            .Title("altitude_relative")
            .Description("This is the altitude above the home position. It resets on each change of the current home position.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeRelative;
        public float AltitudeRelative { get => _altitudeRelative; set => _altitudeRelative = value; }
        /// <summary>
        /// This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.
        /// OriginName: altitude_terrain, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeTerrainField = new Field.Builder()
            .Name(nameof(AltitudeTerrain))
            .Title("altitude_terrain")
            .Description("This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeTerrain;
        public float AltitudeTerrain { get => _altitudeTerrain; set => _altitudeTerrain = value; }
        /// <summary>
        /// This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.
        /// OriginName: bottom_clearance, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field BottomClearanceField = new Field.Builder()
            .Name(nameof(BottomClearance))
            .Title("bottom_clearance")
            .Description("This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _bottomClearance;
        public float BottomClearance { get => _bottomClearance; set => _bottomClearance = value; }
    }
    /// <summary>
    /// The autopilot is requesting a resource (file, binary, other type of data)
    ///  RESOURCE_REQUEST
    /// </summary>
    public class ResourceRequestPacket : MavlinkV2Message<ResourceRequestPayload>
    {
        public const int MessageId = 142;
        
        public const byte CrcExtra = 72;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ResourceRequestPayload Payload { get; } = new();

        public override string Name => "RESOURCE_REQUEST";
    }

    /// <summary>
    ///  RESOURCE_REQUEST
    /// </summary>
    public class ResourceRequestPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 243; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 243; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t request_id
            +1 // uint8_t uri_type
            +Uri.Length // uint8_t[120] uri
            +1 // uint8_t transfer_type
            +Storage.Length // uint8_t[120] storage
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            RequestId = (byte)BinSerialize.ReadByte(ref buffer);
            UriType = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/120 - Math.Max(0,((/*PayloadByteSize*/243 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Uri[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            TransferType = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 120;
            for(var i=0;i<arraySize;i++)
            {
                Storage[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)RequestId);
            BinSerialize.WriteByte(ref buffer,(byte)UriType);
            for(var i=0;i<Uri.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Uri[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TransferType);
            for(var i=0;i<Storage.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Storage[i]);
            }
            /* PayloadByteSize = 243 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,RequestIdField, ref _requestId);    
            UInt8Type.Accept(visitor,UriTypeField, ref _uriType);    
            ArrayType.Accept(visitor,UriField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Uri[index]));    
            UInt8Type.Accept(visitor,TransferTypeField, ref _transferType);    
            ArrayType.Accept(visitor,StorageField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Storage[index]));    

        }

        /// <summary>
        /// Request ID. This ID should be re-used when sending back URI contents
        /// OriginName: request_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RequestIdField = new Field.Builder()
            .Name(nameof(RequestId))
            .Title("request_id")
            .Description("Request ID. This ID should be re-used when sending back URI contents")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _requestId;
        public byte RequestId { get => _requestId; set => _requestId = value; }
        /// <summary>
        /// The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary
        /// OriginName: uri_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UriTypeField = new Field.Builder()
            .Name(nameof(UriType))
            .Title("uri_type")
            .Description("The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _uriType;
        public byte UriType { get => _uriType; set => _uriType = value; }
        /// <summary>
        /// The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)
        /// OriginName: uri, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UriField = new Field.Builder()
            .Name(nameof(Uri))
            .Title("uri")
            .Description("The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)")

            .DataType(new ArrayType(UInt8Type.Default,120))
        .Build();
        public const int UriMaxItemsCount = 120;
        public byte[] Uri { get; } = new byte[120];
        [Obsolete("This method is deprecated. Use GetUriMaxItemsCount instead.")]
        public byte GetUriMaxItemsCount() => 120;
        /// <summary>
        /// The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.
        /// OriginName: transfer_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TransferTypeField = new Field.Builder()
            .Name(nameof(TransferType))
            .Title("transfer_type")
            .Description("The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _transferType;
        public byte TransferType { get => _transferType; set => _transferType = value; }
        /// <summary>
        /// The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).
        /// OriginName: storage, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StorageField = new Field.Builder()
            .Name(nameof(Storage))
            .Title("storage")
            .Description("The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).")

            .DataType(new ArrayType(UInt8Type.Default,120))
        .Build();
        public const int StorageMaxItemsCount = 120;
        public byte[] Storage { get; } = new byte[120];
    }
    /// <summary>
    /// Barometer readings for 3rd barometer
    ///  SCALED_PRESSURE3
    /// </summary>
    public class ScaledPressure3Packet : MavlinkV2Message<ScaledPressure3Payload>
    {
        public const int MessageId = 143;
        
        public const byte CrcExtra = 131;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ScaledPressure3Payload Payload { get; } = new();

        public override string Name => "SCALED_PRESSURE3";
    }

    /// <summary>
    ///  SCALED_PRESSURE3
    /// </summary>
    public class ScaledPressure3Payload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float press_abs
            +4 // float press_diff
            +2 // int16_t temperature
            +2 // int16_t temperature_press_diff
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            PressAbs = BinSerialize.ReadFloat(ref buffer);
            PressDiff = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            // extended field 'TemperaturePressDiff' can be empty
            if (buffer.IsEmpty) return;
            TemperaturePressDiff = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,PressAbs);
            BinSerialize.WriteFloat(ref buffer,PressDiff);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteShort(ref buffer,TemperaturePressDiff);
            /* PayloadByteSize = 16 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,PressAbsField, ref _pressAbs);    
            FloatType.Accept(visitor,PressDiffField, ref _pressDiff);    
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);
            Int16Type.Accept(visitor,TemperaturePressDiffField, ref _temperaturePressDiff);

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: press_abs, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field PressAbsField = new Field.Builder()
            .Name(nameof(PressAbs))
            .Title("press_abs")
            .Description("Absolute pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _pressAbs;
        public float PressAbs { get => _pressAbs; set => _pressAbs = value; }
        /// <summary>
        /// Differential pressure
        /// OriginName: press_diff, Units: hPa, IsExtended: false
        /// </summary>
        public static readonly Field PressDiffField = new Field.Builder()
            .Name(nameof(PressDiff))
            .Title("press_diff")
            .Description("Differential pressure")
.Units(@"hPa")
            .DataType(FloatType.Default)
        .Build();
        private float _pressDiff;
        public float PressDiff { get => _pressDiff; set => _pressDiff = value; }
        /// <summary>
        /// Absolute pressure temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Absolute pressure temperature")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.
        /// OriginName: temperature_press_diff, Units: cdegC, IsExtended: true
        /// </summary>
        public static readonly Field TemperaturePressDiffField = new Field.Builder()
            .Name(nameof(TemperaturePressDiff))
            .Title("temperature_press_diff")
            .Description("Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperaturePressDiff;
        public short TemperaturePressDiff { get => _temperaturePressDiff; set => _temperaturePressDiff = value; }
    }
    /// <summary>
    /// Current motion information from a designated system
    ///  FOLLOW_TARGET
    /// </summary>
    public class FollowTargetPacket : MavlinkV2Message<FollowTargetPayload>
    {
        public const int MessageId = 144;
        
        public const byte CrcExtra = 127;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override FollowTargetPayload Payload { get; } = new();

        public override string Name => "FOLLOW_TARGET";
    }

    /// <summary>
    ///  FOLLOW_TARGET
    /// </summary>
    public class FollowTargetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 93; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 93; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t timestamp
            +8 // uint64_t custom_state
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // float alt
            +Vel.Length * 4 // float[3] vel
            +Acc.Length * 4 // float[3] acc
            +AttitudeQ.Length * 4 // float[4] attitude_q
            +Rates.Length * 4 // float[3] rates
            +PositionCov.Length * 4 // float[3] position_cov
            +1 // uint8_t est_capabilities
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Timestamp = BinSerialize.ReadULong(ref buffer);
            CustomState = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                Vel[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                Acc[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/93 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                AttitudeQ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                Rates[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                PositionCov[i] = BinSerialize.ReadFloat(ref buffer);
            }
            EstCapabilities = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Timestamp);
            BinSerialize.WriteULong(ref buffer,CustomState);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            for(var i=0;i<Vel.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Vel[i]);
            }
            for(var i=0;i<Acc.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Acc[i]);
            }
            for(var i=0;i<AttitudeQ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AttitudeQ[i]);
            }
            for(var i=0;i<Rates.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Rates[i]);
            }
            for(var i=0;i<PositionCov.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PositionCov[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)EstCapabilities);
            /* PayloadByteSize = 93 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimestampField, ref _timestamp);    
            UInt64Type.Accept(visitor,CustomStateField, ref _customState);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            FloatType.Accept(visitor,AltField, ref _alt);    
            ArrayType.Accept(visitor,VelField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Vel[index]));
            ArrayType.Accept(visitor,AccField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Acc[index]));
            ArrayType.Accept(visitor,AttitudeQField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref AttitudeQ[index]));
            ArrayType.Accept(visitor,RatesField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Rates[index]));
            ArrayType.Accept(visitor,PositionCovField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PositionCov[index]));
            UInt8Type.Accept(visitor,EstCapabilitiesField, ref _estCapabilities);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: timestamp, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timestamp;
        public ulong Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// button states or switches of a tracker device
        /// OriginName: custom_state, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CustomStateField = new Field.Builder()
            .Name(nameof(CustomState))
            .Title("custom_state")
            .Description("button states or switches of a tracker device")

            .DataType(UInt64Type.Default)
        .Build();
        private ulong _customState;
        public ulong CustomState { get => _customState; set => _customState = value; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (MSL)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _alt;
        public float Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// target velocity (0,0,0) for unknown
        /// OriginName: vel, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelField = new Field.Builder()
            .Name(nameof(Vel))
            .Title("vel")
            .Description("target velocity (0,0,0) for unknown")
.Units(@"m/s")
            .DataType(new ArrayType(FloatType.Default,3))        
        .Build();
        public const int VelMaxItemsCount = 3;
        public float[] Vel { get; } = new float[3];
        /// <summary>
        /// linear target acceleration (0,0,0) for unknown
        /// OriginName: acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AccField = new Field.Builder()
            .Name(nameof(Acc))
            .Title("acc")
            .Description("linear target acceleration (0,0,0) for unknown")
.Units(@"m/s/s")
            .DataType(new ArrayType(FloatType.Default,3))        
        .Build();
        public const int AccMaxItemsCount = 3;
        public float[] Acc { get; } = new float[3];
        /// <summary>
        /// (0 0 0 0 for unknown)
        /// OriginName: attitude_q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AttitudeQField = new Field.Builder()
            .Name(nameof(AttitudeQ))
            .Title("attitude_q")
            .Description("(0 0 0 0 for unknown)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int AttitudeQMaxItemsCount = 4;
        public float[] AttitudeQ { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetAttitudeQMaxItemsCount instead.")]
        public byte GetAttitudeQMaxItemsCount() => 4;
        /// <summary>
        /// (0 0 0 for unknown)
        /// OriginName: rates, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RatesField = new Field.Builder()
            .Name(nameof(Rates))
            .Title("rates")
            .Description("(0 0 0 for unknown)")

            .DataType(new ArrayType(FloatType.Default,3))        
        .Build();
        public const int RatesMaxItemsCount = 3;
        public float[] Rates { get; } = new float[3];
        /// <summary>
        /// eph epv
        /// OriginName: position_cov, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PositionCovField = new Field.Builder()
            .Name(nameof(PositionCov))
            .Title("position_cov")
            .Description("eph epv")

            .DataType(new ArrayType(FloatType.Default,3))        
        .Build();
        public const int PositionCovMaxItemsCount = 3;
        public float[] PositionCov { get; } = new float[3];
        /// <summary>
        /// bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)
        /// OriginName: est_capabilities, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EstCapabilitiesField = new Field.Builder()
            .Name(nameof(EstCapabilities))
            .Title("est_capabilities")
            .Description("bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _estCapabilities;
        public byte EstCapabilities { get => _estCapabilities; set => _estCapabilities = value; }
    }
    /// <summary>
    /// The smoothed, monotonic system state used to feed the control loops of the system.
    ///  CONTROL_SYSTEM_STATE
    /// </summary>
    public class ControlSystemStatePacket : MavlinkV2Message<ControlSystemStatePayload>
    {
        public const int MessageId = 146;
        
        public const byte CrcExtra = 103;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ControlSystemStatePayload Payload { get; } = new();

        public override string Name => "CONTROL_SYSTEM_STATE";
    }

    /// <summary>
    ///  CONTROL_SYSTEM_STATE
    /// </summary>
    public class ControlSystemStatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 100; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 100; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float x_acc
            +4 // float y_acc
            +4 // float z_acc
            +4 // float x_vel
            +4 // float y_vel
            +4 // float z_vel
            +4 // float x_pos
            +4 // float y_pos
            +4 // float z_pos
            +4 // float airspeed
            +VelVariance.Length * 4 // float[3] vel_variance
            +PosVariance.Length * 4 // float[3] pos_variance
            +Q.Length * 4 // float[4] q
            +4 // float roll_rate
            +4 // float pitch_rate
            +4 // float yaw_rate
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            XAcc = BinSerialize.ReadFloat(ref buffer);
            YAcc = BinSerialize.ReadFloat(ref buffer);
            ZAcc = BinSerialize.ReadFloat(ref buffer);
            XVel = BinSerialize.ReadFloat(ref buffer);
            YVel = BinSerialize.ReadFloat(ref buffer);
            ZVel = BinSerialize.ReadFloat(ref buffer);
            XPos = BinSerialize.ReadFloat(ref buffer);
            YPos = BinSerialize.ReadFloat(ref buffer);
            ZPos = BinSerialize.ReadFloat(ref buffer);
            Airspeed = BinSerialize.ReadFloat(ref buffer);
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                VelVariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                PosVariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/100 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            RollRate = BinSerialize.ReadFloat(ref buffer);
            PitchRate = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,XAcc);
            BinSerialize.WriteFloat(ref buffer,YAcc);
            BinSerialize.WriteFloat(ref buffer,ZAcc);
            BinSerialize.WriteFloat(ref buffer,XVel);
            BinSerialize.WriteFloat(ref buffer,YVel);
            BinSerialize.WriteFloat(ref buffer,ZVel);
            BinSerialize.WriteFloat(ref buffer,XPos);
            BinSerialize.WriteFloat(ref buffer,YPos);
            BinSerialize.WriteFloat(ref buffer,ZPos);
            BinSerialize.WriteFloat(ref buffer,Airspeed);
            for(var i=0;i<VelVariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelVariance[i]);
            }
            for(var i=0;i<PosVariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosVariance[i]);
            }
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,RollRate);
            BinSerialize.WriteFloat(ref buffer,PitchRate);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            /* PayloadByteSize = 100 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,XAccField, ref _xAcc);    
            FloatType.Accept(visitor,YAccField, ref _yAcc);    
            FloatType.Accept(visitor,ZAccField, ref _zAcc);    
            FloatType.Accept(visitor,XVelField, ref _xVel);    
            FloatType.Accept(visitor,YVelField, ref _yVel);    
            FloatType.Accept(visitor,ZVelField, ref _zVel);    
            FloatType.Accept(visitor,XPosField, ref _xPos);    
            FloatType.Accept(visitor,YPosField, ref _yPos);    
            FloatType.Accept(visitor,ZPosField, ref _zPos);    
            FloatType.Accept(visitor,AirspeedField, ref _airspeed);    
            ArrayType.Accept(visitor,VelVarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref VelVariance[index]));
            ArrayType.Accept(visitor,PosVarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosVariance[index]));
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,RollRateField, ref _rollRate);    
            FloatType.Accept(visitor,PitchRateField, ref _pitchRate);    
            FloatType.Accept(visitor,YawRateField, ref _yawRate);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X acceleration in body frame
        /// OriginName: x_acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field XAccField = new Field.Builder()
            .Name(nameof(XAcc))
            .Title("x_acc")
            .Description("X acceleration in body frame")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xAcc;
        public float XAcc { get => _xAcc; set => _xAcc = value; }
        /// <summary>
        /// Y acceleration in body frame
        /// OriginName: y_acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field YAccField = new Field.Builder()
            .Name(nameof(YAcc))
            .Title("y_acc")
            .Description("Y acceleration in body frame")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yAcc;
        public float YAcc { get => _yAcc; set => _yAcc = value; }
        /// <summary>
        /// Z acceleration in body frame
        /// OriginName: z_acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field ZAccField = new Field.Builder()
            .Name(nameof(ZAcc))
            .Title("z_acc")
            .Description("Z acceleration in body frame")
.Units(@"m/s/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zAcc;
        public float ZAcc { get => _zAcc; set => _zAcc = value; }
        /// <summary>
        /// X velocity in body frame
        /// OriginName: x_vel, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field XVelField = new Field.Builder()
            .Name(nameof(XVel))
            .Title("x_vel")
            .Description("X velocity in body frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _xVel;
        public float XVel { get => _xVel; set => _xVel = value; }
        /// <summary>
        /// Y velocity in body frame
        /// OriginName: y_vel, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field YVelField = new Field.Builder()
            .Name(nameof(YVel))
            .Title("y_vel")
            .Description("Y velocity in body frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yVel;
        public float YVel { get => _yVel; set => _yVel = value; }
        /// <summary>
        /// Z velocity in body frame
        /// OriginName: z_vel, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field ZVelField = new Field.Builder()
            .Name(nameof(ZVel))
            .Title("z_vel")
            .Description("Z velocity in body frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _zVel;
        public float ZVel { get => _zVel; set => _zVel = value; }
        /// <summary>
        /// X position in local frame
        /// OriginName: x_pos, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XPosField = new Field.Builder()
            .Name(nameof(XPos))
            .Title("x_pos")
            .Description("X position in local frame")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _xPos;
        public float XPos { get => _xPos; set => _xPos = value; }
        /// <summary>
        /// Y position in local frame
        /// OriginName: y_pos, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YPosField = new Field.Builder()
            .Name(nameof(YPos))
            .Title("y_pos")
            .Description("Y position in local frame")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _yPos;
        public float YPos { get => _yPos; set => _yPos = value; }
        /// <summary>
        /// Z position in local frame
        /// OriginName: z_pos, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZPosField = new Field.Builder()
            .Name(nameof(ZPos))
            .Title("z_pos")
            .Description("Z position in local frame")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _zPos;
        public float ZPos { get => _zPos; set => _zPos = value; }
        /// <summary>
        /// Airspeed, set to -1 if unknown
        /// OriginName: airspeed, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field AirspeedField = new Field.Builder()
            .Name(nameof(Airspeed))
            .Title("airspeed")
            .Description("Airspeed, set to -1 if unknown")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _airspeed;
        public float Airspeed { get => _airspeed; set => _airspeed = value; }
        /// <summary>
        /// Variance of body velocity estimate
        /// OriginName: vel_variance, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VelVarianceField = new Field.Builder()
            .Name(nameof(VelVariance))
            .Title("vel_variance")
            .Description("Variance of body velocity estimate")

            .DataType(new ArrayType(FloatType.Default,3))        
        .Build();
        public const int VelVarianceMaxItemsCount = 3;
        public float[] VelVariance { get; } = new float[3];
        /// <summary>
        /// Variance in local position
        /// OriginName: pos_variance, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PosVarianceField = new Field.Builder()
            .Name(nameof(PosVariance))
            .Title("pos_variance")
            .Description("Variance in local position")

            .DataType(new ArrayType(FloatType.Default,3))        
        .Build();
        public const int PosVarianceMaxItemsCount = 3;
        public float[] PosVariance { get; } = new float[3];
        /// <summary>
        /// The attitude, represented as Quaternion
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("The attitude, represented as Quaternion")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Angular rate in roll axis
        /// OriginName: roll_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollRateField = new Field.Builder()
            .Name(nameof(RollRate))
            .Title("roll_rate")
            .Description("Angular rate in roll axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _rollRate;
        public float RollRate { get => _rollRate; set => _rollRate = value; }
        /// <summary>
        /// Angular rate in pitch axis
        /// OriginName: pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchRateField = new Field.Builder()
            .Name(nameof(PitchRate))
            .Title("pitch_rate")
            .Description("Angular rate in pitch axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchRate;
        public float PitchRate { get => _pitchRate; set => _pitchRate = value; }
        /// <summary>
        /// Angular rate in yaw axis
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawRateField = new Field.Builder()
            .Name(nameof(YawRate))
            .Title("yaw_rate")
            .Description("Angular rate in yaw axis")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawRate;
        public float YawRate { get => _yawRate; set => _yawRate = value; }
    }
    /// <summary>
    /// Battery information. Updates GCS with flight controller battery status. Smart batteries also use this message, but may additionally send SMART_BATTERY_INFO.
    ///  BATTERY_STATUS
    /// </summary>
    public class BatteryStatusPacket : MavlinkV2Message<BatteryStatusPayload>
    {
        public const int MessageId = 147;
        
        public const byte CrcExtra = 154;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override BatteryStatusPayload Payload { get; } = new();

        public override string Name => "BATTERY_STATUS";
    }

    /// <summary>
    ///  BATTERY_STATUS
    /// </summary>
    public class BatteryStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t current_consumed
            +4 // int32_t energy_consumed
            +2 // int16_t temperature
            +Voltages.Length * 2 // uint16_t[10] voltages
            +2 // int16_t current_battery
            +1 // uint8_t id
            + 1 // uint8_t battery_function
            + 1 // uint8_t type
            +1 // int8_t battery_remaining
            +4 // int32_t time_remaining
            + 1 // uint8_t charge_state
            +VoltagesExt.Length * 2 // uint16_t[4] voltages_ext
            + 1 // uint8_t mode
            + 4 // uint32_t fault_bitmask
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            CurrentConsumed = BinSerialize.ReadInt(ref buffer);
            EnergyConsumed = BinSerialize.ReadInt(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/54 - payloadSize - /*ExtendedFieldsLength*/18)/2 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Voltages[i] = BinSerialize.ReadUShort(ref buffer);
            }
            CurrentBattery = BinSerialize.ReadShort(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            BatteryFunction = (MavBatteryFunction)BinSerialize.ReadByte(ref buffer);
            Type = (MavBatteryType)BinSerialize.ReadByte(ref buffer);
            BatteryRemaining = (sbyte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TimeRemaining' can be empty
            if (buffer.IsEmpty) return;
            TimeRemaining = BinSerialize.ReadInt(ref buffer);
            // extended field 'ChargeState' can be empty
            if (buffer.IsEmpty) return;
            ChargeState = (MavBatteryChargeState)BinSerialize.ReadByte(ref buffer);
            // extended field 'VoltagesExt' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                VoltagesExt[i] = BinSerialize.ReadUShort(ref buffer);
            }
            // extended field 'Mode' can be empty
            if (buffer.IsEmpty) return;
            Mode = (MavBatteryMode)BinSerialize.ReadByte(ref buffer);
            // extended field 'FaultBitmask' can be empty
            if (buffer.IsEmpty) return;
            FaultBitmask = (MavBatteryFault)BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,CurrentConsumed);
            BinSerialize.WriteInt(ref buffer,EnergyConsumed);
            BinSerialize.WriteShort(ref buffer,Temperature);
            for(var i=0;i<Voltages.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,Voltages[i]);
            }
            BinSerialize.WriteShort(ref buffer,CurrentBattery);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryFunction);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryRemaining);
            BinSerialize.WriteInt(ref buffer,TimeRemaining);
            BinSerialize.WriteByte(ref buffer,(byte)ChargeState);
            for(var i=0;i<VoltagesExt.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,VoltagesExt[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteUInt(ref buffer,(uint)FaultBitmask);
            /* PayloadByteSize = 54 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,CurrentConsumedField, ref _currentConsumed);    
            Int32Type.Accept(visitor,EnergyConsumedField, ref _energyConsumed);    
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);
            ArrayType.Accept(visitor,VoltagesField, 
                (index, v, f, t) => UInt16Type.Accept(v, f, t, ref Voltages[index]));    
            Int16Type.Accept(visitor,CurrentBatteryField, ref _currentBattery);
            UInt8Type.Accept(visitor,IdField, ref _id);    
            var tmpBatteryFunction = (byte)BatteryFunction;
            UInt8Type.Accept(visitor,BatteryFunctionField, ref tmpBatteryFunction);
            BatteryFunction = (MavBatteryFunction)tmpBatteryFunction;
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (MavBatteryType)tmpType;
            Int8Type.Accept(visitor,BatteryRemainingField, ref _batteryRemaining);                
            Int32Type.Accept(visitor,TimeRemainingField, ref _timeRemaining);    
            var tmpChargeState = (byte)ChargeState;
            UInt8Type.Accept(visitor,ChargeStateField, ref tmpChargeState);
            ChargeState = (MavBatteryChargeState)tmpChargeState;
            ArrayType.Accept(visitor,VoltagesExtField, 
                (index, v, f, t) => UInt16Type.Accept(v, f, t, ref VoltagesExt[index]));    
            var tmpMode = (byte)Mode;
            UInt8Type.Accept(visitor,ModeField, ref tmpMode);
            Mode = (MavBatteryMode)tmpMode;
            var tmpFaultBitmask = (uint)FaultBitmask;
            UInt32Type.Accept(visitor,FaultBitmaskField, ref tmpFaultBitmask);
            FaultBitmask = (MavBatteryFault)tmpFaultBitmask;

        }

        /// <summary>
        /// Consumed charge, -1: autopilot does not provide consumption estimate
        /// OriginName: current_consumed, Units: mAh, IsExtended: false
        /// </summary>
        public static readonly Field CurrentConsumedField = new Field.Builder()
            .Name(nameof(CurrentConsumed))
            .Title("current_consumed")
            .Description("Consumed charge, -1: autopilot does not provide consumption estimate")
.Units(@"mAh")
            .DataType(Int32Type.Default)
        .Build();
        private int _currentConsumed;
        public int CurrentConsumed { get => _currentConsumed; set => _currentConsumed = value; }
        /// <summary>
        /// Consumed energy, -1: autopilot does not provide energy consumption estimate
        /// OriginName: energy_consumed, Units: hJ, IsExtended: false
        /// </summary>
        public static readonly Field EnergyConsumedField = new Field.Builder()
            .Name(nameof(EnergyConsumed))
            .Title("energy_consumed")
            .Description("Consumed energy, -1: autopilot does not provide energy consumption estimate")
.Units(@"hJ")
            .DataType(Int32Type.Default)
        .Build();
        private int _energyConsumed;
        public int EnergyConsumed { get => _energyConsumed; set => _energyConsumed = value; }
        /// <summary>
        /// Temperature of the battery. INT16_MAX for unknown temperature.
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature of the battery. INT16_MAX for unknown temperature.")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Battery voltage of cells 1 to 10 (see voltages_ext for cells 11-14). Cells in this field above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1).
        /// OriginName: voltages, Units: mV, IsExtended: false
        /// </summary>
        public static readonly Field VoltagesField = new Field.Builder()
            .Name(nameof(Voltages))
            .Title("voltages")
            .Description("Battery voltage of cells 1 to 10 (see voltages_ext for cells 11-14). Cells in this field above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1).")
.Units(@"mV")
            .DataType(new ArrayType(UInt16Type.Default,10))
        .Build();
        public const int VoltagesMaxItemsCount = 10;
        public ushort[] Voltages { get; } = new ushort[10];
        [Obsolete("This method is deprecated. Use GetVoltagesMaxItemsCount instead.")]
        public byte GetVoltagesMaxItemsCount() => 10;
        /// <summary>
        /// Battery current, -1: autopilot does not measure the current
        /// OriginName: current_battery, Units: cA, IsExtended: false
        /// </summary>
        public static readonly Field CurrentBatteryField = new Field.Builder()
            .Name(nameof(CurrentBattery))
            .Title("current_battery")
            .Description("Battery current, -1: autopilot does not measure the current")
.Units(@"cA")
            .DataType(Int16Type.Default)
        .Build();
        private short _currentBattery;
        public short CurrentBattery { get => _currentBattery; set => _currentBattery = value; }
        /// <summary>
        /// Battery ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Battery ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
        /// <summary>
        /// Function of the battery
        /// OriginName: battery_function, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BatteryFunctionField = new Field.Builder()
            .Name(nameof(BatteryFunction))
            .Title("battery_function")
            .Description("Function of the battery")
            .DataType(new UInt8Type(MavBatteryFunctionHelper.GetValues(x=>(byte)x).Min(),MavBatteryFunctionHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavBatteryFunctionHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavBatteryFunction _batteryFunction;
        public MavBatteryFunction BatteryFunction { get => _batteryFunction; set => _batteryFunction = value; } 
        /// <summary>
        /// Type (chemistry) of the battery
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type (chemistry) of the battery")
            .DataType(new UInt8Type(MavBatteryTypeHelper.GetValues(x=>(byte)x).Min(),MavBatteryTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavBatteryTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavBatteryType _type;
        public MavBatteryType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery.
        /// OriginName: battery_remaining, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field BatteryRemainingField = new Field.Builder()
            .Name(nameof(BatteryRemaining))
            .Title("battery_remaining")
            .Description("Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery.")
.Units(@"%")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _batteryRemaining;
        public sbyte BatteryRemaining { get => _batteryRemaining; set => _batteryRemaining = value; }
        /// <summary>
        /// Remaining battery time, 0: autopilot does not provide remaining battery time estimate
        /// OriginName: time_remaining, Units: s, IsExtended: true
        /// </summary>
        public static readonly Field TimeRemainingField = new Field.Builder()
            .Name(nameof(TimeRemaining))
            .Title("time_remaining")
            .Description("Remaining battery time, 0: autopilot does not provide remaining battery time estimate")
.Units(@"s")
            .DataType(Int32Type.Default)
        .Build();
        private int _timeRemaining;
        public int TimeRemaining { get => _timeRemaining; set => _timeRemaining = value; }
        /// <summary>
        /// State for extent of discharge, provided by autopilot for warning or external reactions
        /// OriginName: charge_state, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ChargeStateField = new Field.Builder()
            .Name(nameof(ChargeState))
            .Title("charge_state")
            .Description("State for extent of discharge, provided by autopilot for warning or external reactions")
            .DataType(new UInt8Type(MavBatteryChargeStateHelper.GetValues(x=>(byte)x).Min(),MavBatteryChargeStateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavBatteryChargeStateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavBatteryChargeState _chargeState;
        public MavBatteryChargeState ChargeState { get => _chargeState; set => _chargeState = value; } 
        /// <summary>
        /// Battery voltages for cells 11 to 14. Cells above the valid cell count for this battery should have a value of 0, where zero indicates not supported (note, this is different than for the voltages field and allows empty byte truncation). If the measured value is 0 then 1 should be sent instead.
        /// OriginName: voltages_ext, Units: mV, IsExtended: true
        /// </summary>
        public static readonly Field VoltagesExtField = new Field.Builder()
            .Name(nameof(VoltagesExt))
            .Title("voltages_ext")
            .Description("Battery voltages for cells 11 to 14. Cells above the valid cell count for this battery should have a value of 0, where zero indicates not supported (note, this is different than for the voltages field and allows empty byte truncation). If the measured value is 0 then 1 should be sent instead.")
.Units(@"mV")
            .DataType(new ArrayType(UInt16Type.Default,4))
        .Build();
        public const int VoltagesExtMaxItemsCount = 4;
        public ushort[] VoltagesExt { get; } = new ushort[4];
        /// <summary>
        /// Battery mode. Default (0) is that battery mode reporting is not supported or battery is in normal-use mode.
        /// OriginName: mode, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ModeField = new Field.Builder()
            .Name(nameof(Mode))
            .Title("mode")
            .Description("Battery mode. Default (0) is that battery mode reporting is not supported or battery is in normal-use mode.")
            .DataType(new UInt8Type(MavBatteryModeHelper.GetValues(x=>(byte)x).Min(),MavBatteryModeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavBatteryModeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavBatteryMode _mode;
        public MavBatteryMode Mode { get => _mode; set => _mode = value; } 
        /// <summary>
        /// Fault/health indications. These should be set when charge_state is MAV_BATTERY_CHARGE_STATE_FAILED or MAV_BATTERY_CHARGE_STATE_UNHEALTHY (if not, fault reporting is not supported).
        /// OriginName: fault_bitmask, Units: , IsExtended: true
        /// </summary>
        public static readonly Field FaultBitmaskField = new Field.Builder()
            .Name(nameof(FaultBitmask))
            .Title("bitmask")
            .Description("Fault/health indications. These should be set when charge_state is MAV_BATTERY_CHARGE_STATE_FAILED or MAV_BATTERY_CHARGE_STATE_UNHEALTHY (if not, fault reporting is not supported).")
            .DataType(new UInt32Type(MavBatteryFaultHelper.GetValues(x=>(uint)x).Min(),MavBatteryFaultHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavBatteryFaultHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavBatteryFault _faultBitmask;
        public MavBatteryFault FaultBitmask { get => _faultBitmask; set => _faultBitmask = value; } 
    }
    /// <summary>
    /// Version and capability of autopilot software. This should be emitted in response to a request with MAV_CMD_REQUEST_MESSAGE.
    ///  AUTOPILOT_VERSION
    /// </summary>
    public class AutopilotVersionPacket : MavlinkV2Message<AutopilotVersionPayload>
    {
        public const int MessageId = 148;
        
        public const byte CrcExtra = 178;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AutopilotVersionPayload Payload { get; } = new();

        public override string Name => "AUTOPILOT_VERSION";
    }

    /// <summary>
    ///  AUTOPILOT_VERSION
    /// </summary>
    public class AutopilotVersionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 78; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 78; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 8 // uint64_t capabilities
            +8 // uint64_t uid
            +4 // uint32_t flight_sw_version
            +4 // uint32_t middleware_sw_version
            +4 // uint32_t os_sw_version
            +4 // uint32_t board_version
            +2 // uint16_t vendor_id
            +2 // uint16_t product_id
            +FlightCustomVersion.Length // uint8_t[8] flight_custom_version
            +MiddlewareCustomVersion.Length // uint8_t[8] middleware_custom_version
            +OsCustomVersion.Length // uint8_t[8] os_custom_version
            +Uid2.Length // uint8_t[18] uid2
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Capabilities = (MavProtocolCapability)BinSerialize.ReadULong(ref buffer);
            Uid = BinSerialize.ReadULong(ref buffer);
            FlightSwVersion = BinSerialize.ReadUInt(ref buffer);
            MiddlewareSwVersion = BinSerialize.ReadUInt(ref buffer);
            OsSwVersion = BinSerialize.ReadUInt(ref buffer);
            BoardVersion = BinSerialize.ReadUInt(ref buffer);
            VendorId = BinSerialize.ReadUShort(ref buffer);
            ProductId = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/78 - payloadSize - /*ExtendedFieldsLength*/18)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                FlightCustomVersion[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                MiddlewareCustomVersion[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                OsCustomVersion[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            // extended field 'Uid2' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 18;
            for(var i=0;i<arraySize;i++)
            {
                Uid2[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,(ulong)Capabilities);
            BinSerialize.WriteULong(ref buffer,Uid);
            BinSerialize.WriteUInt(ref buffer,FlightSwVersion);
            BinSerialize.WriteUInt(ref buffer,MiddlewareSwVersion);
            BinSerialize.WriteUInt(ref buffer,OsSwVersion);
            BinSerialize.WriteUInt(ref buffer,BoardVersion);
            BinSerialize.WriteUShort(ref buffer,VendorId);
            BinSerialize.WriteUShort(ref buffer,ProductId);
            for(var i=0;i<FlightCustomVersion.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)FlightCustomVersion[i]);
            }
            for(var i=0;i<MiddlewareCustomVersion.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)MiddlewareCustomVersion[i]);
            }
            for(var i=0;i<OsCustomVersion.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)OsCustomVersion[i]);
            }
            for(var i=0;i<Uid2.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Uid2[i]);
            }
            /* PayloadByteSize = 78 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpCapabilities = (ulong)Capabilities;
            UInt64Type.Accept(visitor,CapabilitiesField, ref tmpCapabilities);
            Capabilities = (MavProtocolCapability)tmpCapabilities;
            UInt64Type.Accept(visitor,UidField, ref _uid);    
            UInt32Type.Accept(visitor,FlightSwVersionField, ref _flightSwVersion);    
            UInt32Type.Accept(visitor,MiddlewareSwVersionField, ref _middlewareSwVersion);    
            UInt32Type.Accept(visitor,OsSwVersionField, ref _osSwVersion);    
            UInt32Type.Accept(visitor,BoardVersionField, ref _boardVersion);    
            UInt16Type.Accept(visitor,VendorIdField, ref _vendorId);    
            UInt16Type.Accept(visitor,ProductIdField, ref _productId);    
            ArrayType.Accept(visitor,FlightCustomVersionField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref FlightCustomVersion[index]));    
            ArrayType.Accept(visitor,MiddlewareCustomVersionField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref MiddlewareCustomVersion[index]));    
            ArrayType.Accept(visitor,OsCustomVersionField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref OsCustomVersion[index]));    
            ArrayType.Accept(visitor,Uid2Field, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Uid2[index]));    

        }

        /// <summary>
        /// Bitmap of capabilities
        /// OriginName: capabilities, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CapabilitiesField = new Field.Builder()
            .Name(nameof(Capabilities))
            .Title("bitmask")
            .Description("Bitmap of capabilities")
            .DataType(new UInt64Type(MavProtocolCapabilityHelper.GetValues(x=>(ulong)x).Min(),MavProtocolCapabilityHelper.GetValues(x=>(ulong)x).Max()))
            .Enum(MavProtocolCapabilityHelper.GetEnumValues(x=>(ulong)x))
            .Build();
        private MavProtocolCapability _capabilities;
        public MavProtocolCapability Capabilities { get => _capabilities; set => _capabilities = value; } 
        /// <summary>
        /// UID if provided by hardware (see uid2)
        /// OriginName: uid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UidField = new Field.Builder()
            .Name(nameof(Uid))
            .Title("uid")
            .Description("UID if provided by hardware (see uid2)")

            .DataType(UInt64Type.Default)
        .Build();
        private ulong _uid;
        public ulong Uid { get => _uid; set => _uid = value; }
        /// <summary>
        /// Firmware version number
        /// OriginName: flight_sw_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlightSwVersionField = new Field.Builder()
            .Name(nameof(FlightSwVersion))
            .Title("flight_sw_version")
            .Description("Firmware version number")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _flightSwVersion;
        public uint FlightSwVersion { get => _flightSwVersion; set => _flightSwVersion = value; }
        /// <summary>
        /// Middleware version number
        /// OriginName: middleware_sw_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MiddlewareSwVersionField = new Field.Builder()
            .Name(nameof(MiddlewareSwVersion))
            .Title("middleware_sw_version")
            .Description("Middleware version number")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _middlewareSwVersion;
        public uint MiddlewareSwVersion { get => _middlewareSwVersion; set => _middlewareSwVersion = value; }
        /// <summary>
        /// Operating system version number
        /// OriginName: os_sw_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OsSwVersionField = new Field.Builder()
            .Name(nameof(OsSwVersion))
            .Title("os_sw_version")
            .Description("Operating system version number")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _osSwVersion;
        public uint OsSwVersion { get => _osSwVersion; set => _osSwVersion = value; }
        /// <summary>
        /// HW / board version (last 8 bits should be silicon ID, if any). The first 16 bits of this field specify https://github.com/PX4/PX4-Bootloader/blob/master/board_types.txt
        /// OriginName: board_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BoardVersionField = new Field.Builder()
            .Name(nameof(BoardVersion))
            .Title("board_version")
            .Description("HW / board version (last 8 bits should be silicon ID, if any). The first 16 bits of this field specify https://github.com/PX4/PX4-Bootloader/blob/master/board_types.txt")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _boardVersion;
        public uint BoardVersion { get => _boardVersion; set => _boardVersion = value; }
        /// <summary>
        /// ID of the board vendor
        /// OriginName: vendor_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VendorIdField = new Field.Builder()
            .Name(nameof(VendorId))
            .Title("vendor_id")
            .Description("ID of the board vendor")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vendorId;
        public ushort VendorId { get => _vendorId; set => _vendorId = value; }
        /// <summary>
        /// ID of the product
        /// OriginName: product_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ProductIdField = new Field.Builder()
            .Name(nameof(ProductId))
            .Title("product_id")
            .Description("ID of the product")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _productId;
        public ushort ProductId { get => _productId; set => _productId = value; }
        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// OriginName: flight_custom_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlightCustomVersionField = new Field.Builder()
            .Name(nameof(FlightCustomVersion))
            .Title("flight_custom_version")
            .Description("Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.")

            .DataType(new ArrayType(UInt8Type.Default,8))
        .Build();
        public const int FlightCustomVersionMaxItemsCount = 8;
        public byte[] FlightCustomVersion { get; } = new byte[8];
        [Obsolete("This method is deprecated. Use GetFlightCustomVersionMaxItemsCount instead.")]
        public byte GetFlightCustomVersionMaxItemsCount() => 8;
        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// OriginName: middleware_custom_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MiddlewareCustomVersionField = new Field.Builder()
            .Name(nameof(MiddlewareCustomVersion))
            .Title("middleware_custom_version")
            .Description("Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.")

            .DataType(new ArrayType(UInt8Type.Default,8))
        .Build();
        public const int MiddlewareCustomVersionMaxItemsCount = 8;
        public byte[] MiddlewareCustomVersion { get; } = new byte[8];
        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// OriginName: os_custom_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OsCustomVersionField = new Field.Builder()
            .Name(nameof(OsCustomVersion))
            .Title("os_custom_version")
            .Description("Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.")

            .DataType(new ArrayType(UInt8Type.Default,8))
        .Build();
        public const int OsCustomVersionMaxItemsCount = 8;
        public byte[] OsCustomVersion { get; } = new byte[8];
        /// <summary>
        /// UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid)
        /// OriginName: uid2, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Uid2Field = new Field.Builder()
            .Name(nameof(Uid2))
            .Title("uid2")
            .Description("UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid)")

            .DataType(new ArrayType(UInt8Type.Default,18))
        .Build();
        public const int Uid2MaxItemsCount = 18;
        public byte[] Uid2 { get; } = new byte[18];
    }
    /// <summary>
    /// The location of a landing target. See: https://mavlink.io/en/services/landing_target.html
    ///  LANDING_TARGET
    /// </summary>
    public class LandingTargetPacket : MavlinkV2Message<LandingTargetPayload>
    {
        public const int MessageId = 149;
        
        public const byte CrcExtra = 200;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LandingTargetPayload Payload { get; } = new();

        public override string Name => "LANDING_TARGET";
    }

    /// <summary>
    ///  LANDING_TARGET
    /// </summary>
    public class LandingTargetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 60; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 60; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float angle_x
            +4 // float angle_y
            +4 // float distance
            +4 // float size_x
            +4 // float size_y
            +1 // uint8_t target_num
            + 1 // uint8_t frame
            +4 // float x
            +4 // float y
            +4 // float z
            +Q.Length * 4 // float[4] q
            + 1 // uint8_t type
            +1 // uint8_t position_valid
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            AngleX = BinSerialize.ReadFloat(ref buffer);
            AngleY = BinSerialize.ReadFloat(ref buffer);
            Distance = BinSerialize.ReadFloat(ref buffer);
            SizeX = BinSerialize.ReadFloat(ref buffer);
            SizeY = BinSerialize.ReadFloat(ref buffer);
            TargetNum = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            // extended field 'X' can be empty
            if (buffer.IsEmpty) return;
            X = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Y' can be empty
            if (buffer.IsEmpty) return;
            Y = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Z' can be empty
            if (buffer.IsEmpty) return;
            Z = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Q' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'Type' can be empty
            if (buffer.IsEmpty) return;
            Type = (LandingTargetType)BinSerialize.ReadByte(ref buffer);
            // extended field 'PositionValid' can be empty
            if (buffer.IsEmpty) return;
            PositionValid = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,AngleX);
            BinSerialize.WriteFloat(ref buffer,AngleY);
            BinSerialize.WriteFloat(ref buffer,Distance);
            BinSerialize.WriteFloat(ref buffer,SizeX);
            BinSerialize.WriteFloat(ref buffer,SizeY);
            BinSerialize.WriteByte(ref buffer,(byte)TargetNum);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)PositionValid);
            /* PayloadByteSize = 60 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,AngleXField, ref _angleX);    
            FloatType.Accept(visitor,AngleYField, ref _angleY);    
            FloatType.Accept(visitor,DistanceField, ref _distance);    
            FloatType.Accept(visitor,SizeXField, ref _sizeX);    
            FloatType.Accept(visitor,SizeYField, ref _sizeY);    
            UInt8Type.Accept(visitor,TargetNumField, ref _targetNum);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (LandingTargetType)tmpType;
            UInt8Type.Accept(visitor,PositionValidField, ref _positionValid);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X-axis angular offset of the target from the center of the image
        /// OriginName: angle_x, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field AngleXField = new Field.Builder()
            .Name(nameof(AngleX))
            .Title("angle_x")
            .Description("X-axis angular offset of the target from the center of the image")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _angleX;
        public float AngleX { get => _angleX; set => _angleX = value; }
        /// <summary>
        /// Y-axis angular offset of the target from the center of the image
        /// OriginName: angle_y, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field AngleYField = new Field.Builder()
            .Name(nameof(AngleY))
            .Title("angle_y")
            .Description("Y-axis angular offset of the target from the center of the image")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _angleY;
        public float AngleY { get => _angleY; set => _angleY = value; }
        /// <summary>
        /// Distance to the target from the vehicle
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DistanceField = new Field.Builder()
            .Name(nameof(Distance))
            .Title("distance")
            .Description("Distance to the target from the vehicle")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _distance;
        public float Distance { get => _distance; set => _distance = value; }
        /// <summary>
        /// Size of target along x-axis
        /// OriginName: size_x, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field SizeXField = new Field.Builder()
            .Name(nameof(SizeX))
            .Title("size_x")
            .Description("Size of target along x-axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _sizeX;
        public float SizeX { get => _sizeX; set => _sizeX = value; }
        /// <summary>
        /// Size of target along y-axis
        /// OriginName: size_y, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field SizeYField = new Field.Builder()
            .Name(nameof(SizeY))
            .Title("size_y")
            .Description("Size of target along y-axis")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _sizeY;
        public float SizeY { get => _sizeY; set => _sizeY = value; }
        /// <summary>
        /// The ID of the target if multiple targets are present
        /// OriginName: target_num, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetNumField = new Field.Builder()
            .Name(nameof(TargetNum))
            .Title("target_num")
            .Description("The ID of the target if multiple targets are present")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetNum;
        public byte TargetNum { get => _targetNum; set => _targetNum = value; }
        /// <summary>
        /// Coordinate frame used for following fields.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("Coordinate frame used for following fields.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
        /// <summary>
        /// X Position of the landing target in MAV_FRAME
        /// OriginName: x, Units: m, IsExtended: true
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X Position of the landing target in MAV_FRAME")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y Position of the landing target in MAV_FRAME
        /// OriginName: y, Units: m, IsExtended: true
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y Position of the landing target in MAV_FRAME")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z Position of the landing target in MAV_FRAME
        /// OriginName: z, Units: m, IsExtended: true
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z Position of the landing target in MAV_FRAME")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: true
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// Type of landing target
        /// OriginName: type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of landing target")
            .DataType(new UInt8Type(LandingTargetTypeHelper.GetValues(x=>(byte)x).Min(),LandingTargetTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(LandingTargetTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private LandingTargetType _type;
        public LandingTargetType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid).
        /// OriginName: position_valid, Units: , IsExtended: true
        /// </summary>
        public static readonly Field PositionValidField = new Field.Builder()
            .Name(nameof(PositionValid))
            .Title("position_valid")
            .Description("Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _positionValid;
        public byte PositionValid { get => _positionValid; set => _positionValid = value; }
    }
    /// <summary>
    /// Status of geo-fencing. Sent in extended status stream when fencing enabled.
    ///  FENCE_STATUS
    /// </summary>
    public class FenceStatusPacket : MavlinkV2Message<FenceStatusPayload>
    {
        public const int MessageId = 162;
        
        public const byte CrcExtra = 189;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override FenceStatusPayload Payload { get; } = new();

        public override string Name => "FENCE_STATUS";
    }

    /// <summary>
    ///  FENCE_STATUS
    /// </summary>
    public class FenceStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t breach_time
            +2 // uint16_t breach_count
            +1 // uint8_t breach_status
            + 1 // uint8_t breach_type
            + 1 // uint8_t breach_mitigation
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            BreachTime = BinSerialize.ReadUInt(ref buffer);
            BreachCount = BinSerialize.ReadUShort(ref buffer);
            BreachStatus = (byte)BinSerialize.ReadByte(ref buffer);
            BreachType = (FenceBreach)BinSerialize.ReadByte(ref buffer);
            // extended field 'BreachMitigation' can be empty
            if (buffer.IsEmpty) return;
            BreachMitigation = (FenceMitigate)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,BreachTime);
            BinSerialize.WriteUShort(ref buffer,BreachCount);
            BinSerialize.WriteByte(ref buffer,(byte)BreachStatus);
            BinSerialize.WriteByte(ref buffer,(byte)BreachType);
            BinSerialize.WriteByte(ref buffer,(byte)BreachMitigation);
            /* PayloadByteSize = 9 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,BreachTimeField, ref _breachTime);    
            UInt16Type.Accept(visitor,BreachCountField, ref _breachCount);    
            UInt8Type.Accept(visitor,BreachStatusField, ref _breachStatus);    
            var tmpBreachType = (byte)BreachType;
            UInt8Type.Accept(visitor,BreachTypeField, ref tmpBreachType);
            BreachType = (FenceBreach)tmpBreachType;
            var tmpBreachMitigation = (byte)BreachMitigation;
            UInt8Type.Accept(visitor,BreachMitigationField, ref tmpBreachMitigation);
            BreachMitigation = (FenceMitigate)tmpBreachMitigation;

        }

        /// <summary>
        /// Time (since boot) of last breach.
        /// OriginName: breach_time, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field BreachTimeField = new Field.Builder()
            .Name(nameof(BreachTime))
            .Title("breach_time")
            .Description("Time (since boot) of last breach.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _breachTime;
        public uint BreachTime { get => _breachTime; set => _breachTime = value; }
        /// <summary>
        /// Number of fence breaches.
        /// OriginName: breach_count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BreachCountField = new Field.Builder()
            .Name(nameof(BreachCount))
            .Title("breach_count")
            .Description("Number of fence breaches.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _breachCount;
        public ushort BreachCount { get => _breachCount; set => _breachCount = value; }
        /// <summary>
        /// Breach status (0 if currently inside fence, 1 if outside).
        /// OriginName: breach_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BreachStatusField = new Field.Builder()
            .Name(nameof(BreachStatus))
            .Title("breach_status")
            .Description("Breach status (0 if currently inside fence, 1 if outside).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _breachStatus;
        public byte BreachStatus { get => _breachStatus; set => _breachStatus = value; }
        /// <summary>
        /// Last breach type.
        /// OriginName: breach_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BreachTypeField = new Field.Builder()
            .Name(nameof(BreachType))
            .Title("breach_type")
            .Description("Last breach type.")
            .DataType(new UInt8Type(FenceBreachHelper.GetValues(x=>(byte)x).Min(),FenceBreachHelper.GetValues(x=>(byte)x).Max()))
            .Enum(FenceBreachHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private FenceBreach _breachType;
        public FenceBreach BreachType { get => _breachType; set => _breachType = value; } 
        /// <summary>
        /// Active action to prevent fence breach
        /// OriginName: breach_mitigation, Units: , IsExtended: true
        /// </summary>
        public static readonly Field BreachMitigationField = new Field.Builder()
            .Name(nameof(BreachMitigation))
            .Title("breach_mitigation")
            .Description("Active action to prevent fence breach")
            .DataType(new UInt8Type(FenceMitigateHelper.GetValues(x=>(byte)x).Min(),FenceMitigateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(FenceMitigateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private FenceMitigate _breachMitigation;
        public FenceMitigate BreachMitigation { get => _breachMitigation; set => _breachMitigation = value; } 
    }
    /// <summary>
    /// Reports results of completed compass calibration. Sent until MAG_CAL_ACK received.
    ///  MAG_CAL_REPORT
    /// </summary>
    public class MagCalReportPacket : MavlinkV2Message<MagCalReportPayload>
    {
        public const int MessageId = 192;
        
        public const byte CrcExtra = 36;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MagCalReportPayload Payload { get; } = new();

        public override string Name => "MAG_CAL_REPORT";
    }

    /// <summary>
    ///  MAG_CAL_REPORT
    /// </summary>
    public class MagCalReportPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float fitness
            +4 // float ofs_x
            +4 // float ofs_y
            +4 // float ofs_z
            +4 // float diag_x
            +4 // float diag_y
            +4 // float diag_z
            +4 // float offdiag_x
            +4 // float offdiag_y
            +4 // float offdiag_z
            +1 // uint8_t compass_id
            +1 // uint8_t cal_mask
            + 1 // uint8_t cal_status
            +1 // uint8_t autosaved
            +4 // float orientation_confidence
            + 1 // uint8_t old_orientation
            + 1 // uint8_t new_orientation
            +4 // float scale_factor
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Fitness = BinSerialize.ReadFloat(ref buffer);
            OfsX = BinSerialize.ReadFloat(ref buffer);
            OfsY = BinSerialize.ReadFloat(ref buffer);
            OfsZ = BinSerialize.ReadFloat(ref buffer);
            DiagX = BinSerialize.ReadFloat(ref buffer);
            DiagY = BinSerialize.ReadFloat(ref buffer);
            DiagZ = BinSerialize.ReadFloat(ref buffer);
            OffdiagX = BinSerialize.ReadFloat(ref buffer);
            OffdiagY = BinSerialize.ReadFloat(ref buffer);
            OffdiagZ = BinSerialize.ReadFloat(ref buffer);
            CompassId = (byte)BinSerialize.ReadByte(ref buffer);
            CalMask = (byte)BinSerialize.ReadByte(ref buffer);
            CalStatus = (MagCalStatus)BinSerialize.ReadByte(ref buffer);
            Autosaved = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'OrientationConfidence' can be empty
            if (buffer.IsEmpty) return;
            OrientationConfidence = BinSerialize.ReadFloat(ref buffer);
            // extended field 'OldOrientation' can be empty
            if (buffer.IsEmpty) return;
            OldOrientation = (MavSensorOrientation)BinSerialize.ReadByte(ref buffer);
            // extended field 'NewOrientation' can be empty
            if (buffer.IsEmpty) return;
            NewOrientation = (MavSensorOrientation)BinSerialize.ReadByte(ref buffer);
            // extended field 'ScaleFactor' can be empty
            if (buffer.IsEmpty) return;
            ScaleFactor = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Fitness);
            BinSerialize.WriteFloat(ref buffer,OfsX);
            BinSerialize.WriteFloat(ref buffer,OfsY);
            BinSerialize.WriteFloat(ref buffer,OfsZ);
            BinSerialize.WriteFloat(ref buffer,DiagX);
            BinSerialize.WriteFloat(ref buffer,DiagY);
            BinSerialize.WriteFloat(ref buffer,DiagZ);
            BinSerialize.WriteFloat(ref buffer,OffdiagX);
            BinSerialize.WriteFloat(ref buffer,OffdiagY);
            BinSerialize.WriteFloat(ref buffer,OffdiagZ);
            BinSerialize.WriteByte(ref buffer,(byte)CompassId);
            BinSerialize.WriteByte(ref buffer,(byte)CalMask);
            BinSerialize.WriteByte(ref buffer,(byte)CalStatus);
            BinSerialize.WriteByte(ref buffer,(byte)Autosaved);
            BinSerialize.WriteFloat(ref buffer,OrientationConfidence);
            BinSerialize.WriteByte(ref buffer,(byte)OldOrientation);
            BinSerialize.WriteByte(ref buffer,(byte)NewOrientation);
            BinSerialize.WriteFloat(ref buffer,ScaleFactor);
            /* PayloadByteSize = 54 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,FitnessField, ref _fitness);    
            FloatType.Accept(visitor,OfsXField, ref _ofsX);    
            FloatType.Accept(visitor,OfsYField, ref _ofsY);    
            FloatType.Accept(visitor,OfsZField, ref _ofsZ);    
            FloatType.Accept(visitor,DiagXField, ref _diagX);    
            FloatType.Accept(visitor,DiagYField, ref _diagY);    
            FloatType.Accept(visitor,DiagZField, ref _diagZ);    
            FloatType.Accept(visitor,OffdiagXField, ref _offdiagX);    
            FloatType.Accept(visitor,OffdiagYField, ref _offdiagY);    
            FloatType.Accept(visitor,OffdiagZField, ref _offdiagZ);    
            UInt8Type.Accept(visitor,CompassIdField, ref _compassId);    
            UInt8Type.Accept(visitor,CalMaskField, ref _calMask);    
            var tmpCalStatus = (byte)CalStatus;
            UInt8Type.Accept(visitor,CalStatusField, ref tmpCalStatus);
            CalStatus = (MagCalStatus)tmpCalStatus;
            UInt8Type.Accept(visitor,AutosavedField, ref _autosaved);    
            FloatType.Accept(visitor,OrientationConfidenceField, ref _orientationConfidence);    
            var tmpOldOrientation = (byte)OldOrientation;
            UInt8Type.Accept(visitor,OldOrientationField, ref tmpOldOrientation);
            OldOrientation = (MavSensorOrientation)tmpOldOrientation;
            var tmpNewOrientation = (byte)NewOrientation;
            UInt8Type.Accept(visitor,NewOrientationField, ref tmpNewOrientation);
            NewOrientation = (MavSensorOrientation)tmpNewOrientation;
            FloatType.Accept(visitor,ScaleFactorField, ref _scaleFactor);    

        }

        /// <summary>
        /// RMS milligauss residuals.
        /// OriginName: fitness, Units: mgauss, IsExtended: false
        /// </summary>
        public static readonly Field FitnessField = new Field.Builder()
            .Name(nameof(Fitness))
            .Title("fitness")
            .Description("RMS milligauss residuals.")
.Units(@"mgauss")
            .DataType(FloatType.Default)
        .Build();
        private float _fitness;
        public float Fitness { get => _fitness; set => _fitness = value; }
        /// <summary>
        /// X offset.
        /// OriginName: ofs_x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OfsXField = new Field.Builder()
            .Name(nameof(OfsX))
            .Title("ofs_x")
            .Description("X offset.")

            .DataType(FloatType.Default)
        .Build();
        private float _ofsX;
        public float OfsX { get => _ofsX; set => _ofsX = value; }
        /// <summary>
        /// Y offset.
        /// OriginName: ofs_y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OfsYField = new Field.Builder()
            .Name(nameof(OfsY))
            .Title("ofs_y")
            .Description("Y offset.")

            .DataType(FloatType.Default)
        .Build();
        private float _ofsY;
        public float OfsY { get => _ofsY; set => _ofsY = value; }
        /// <summary>
        /// Z offset.
        /// OriginName: ofs_z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OfsZField = new Field.Builder()
            .Name(nameof(OfsZ))
            .Title("ofs_z")
            .Description("Z offset.")

            .DataType(FloatType.Default)
        .Build();
        private float _ofsZ;
        public float OfsZ { get => _ofsZ; set => _ofsZ = value; }
        /// <summary>
        /// X diagonal (matrix 11).
        /// OriginName: diag_x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DiagXField = new Field.Builder()
            .Name(nameof(DiagX))
            .Title("diag_x")
            .Description("X diagonal (matrix 11).")

            .DataType(FloatType.Default)
        .Build();
        private float _diagX;
        public float DiagX { get => _diagX; set => _diagX = value; }
        /// <summary>
        /// Y diagonal (matrix 22).
        /// OriginName: diag_y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DiagYField = new Field.Builder()
            .Name(nameof(DiagY))
            .Title("diag_y")
            .Description("Y diagonal (matrix 22).")

            .DataType(FloatType.Default)
        .Build();
        private float _diagY;
        public float DiagY { get => _diagY; set => _diagY = value; }
        /// <summary>
        /// Z diagonal (matrix 33).
        /// OriginName: diag_z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DiagZField = new Field.Builder()
            .Name(nameof(DiagZ))
            .Title("diag_z")
            .Description("Z diagonal (matrix 33).")

            .DataType(FloatType.Default)
        .Build();
        private float _diagZ;
        public float DiagZ { get => _diagZ; set => _diagZ = value; }
        /// <summary>
        /// X off-diagonal (matrix 12 and 21).
        /// OriginName: offdiag_x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OffdiagXField = new Field.Builder()
            .Name(nameof(OffdiagX))
            .Title("offdiag_x")
            .Description("X off-diagonal (matrix 12 and 21).")

            .DataType(FloatType.Default)
        .Build();
        private float _offdiagX;
        public float OffdiagX { get => _offdiagX; set => _offdiagX = value; }
        /// <summary>
        /// Y off-diagonal (matrix 13 and 31).
        /// OriginName: offdiag_y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OffdiagYField = new Field.Builder()
            .Name(nameof(OffdiagY))
            .Title("offdiag_y")
            .Description("Y off-diagonal (matrix 13 and 31).")

            .DataType(FloatType.Default)
        .Build();
        private float _offdiagY;
        public float OffdiagY { get => _offdiagY; set => _offdiagY = value; }
        /// <summary>
        /// Z off-diagonal (matrix 32 and 23).
        /// OriginName: offdiag_z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OffdiagZField = new Field.Builder()
            .Name(nameof(OffdiagZ))
            .Title("offdiag_z")
            .Description("Z off-diagonal (matrix 32 and 23).")

            .DataType(FloatType.Default)
        .Build();
        private float _offdiagZ;
        public float OffdiagZ { get => _offdiagZ; set => _offdiagZ = value; }
        /// <summary>
        /// Compass being calibrated.
        /// OriginName: compass_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CompassIdField = new Field.Builder()
            .Name(nameof(CompassId))
            .Title("compass_id")
            .Description("Compass being calibrated.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _compassId;
        public byte CompassId { get => _compassId; set => _compassId = value; }
        /// <summary>
        /// Bitmask of compasses being calibrated.
        /// OriginName: cal_mask, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CalMaskField = new Field.Builder()
            .Name(nameof(CalMask))
            .Title("bitmask")
            .Description("Bitmask of compasses being calibrated.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _calMask;
        public byte CalMask { get => _calMask; set => _calMask = value; }
        /// <summary>
        /// Calibration Status.
        /// OriginName: cal_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CalStatusField = new Field.Builder()
            .Name(nameof(CalStatus))
            .Title("cal_status")
            .Description("Calibration Status.")
            .DataType(new UInt8Type(MagCalStatusHelper.GetValues(x=>(byte)x).Min(),MagCalStatusHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MagCalStatusHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MagCalStatus _calStatus;
        public MagCalStatus CalStatus { get => _calStatus; set => _calStatus = value; } 
        /// <summary>
        /// 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters.
        /// OriginName: autosaved, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AutosavedField = new Field.Builder()
            .Name(nameof(Autosaved))
            .Title("autosaved")
            .Description("0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _autosaved;
        public byte Autosaved { get => _autosaved; set => _autosaved = value; }
        /// <summary>
        /// Confidence in orientation (higher is better).
        /// OriginName: orientation_confidence, Units: , IsExtended: true
        /// </summary>
        public static readonly Field OrientationConfidenceField = new Field.Builder()
            .Name(nameof(OrientationConfidence))
            .Title("orientation_confidence")
            .Description("Confidence in orientation (higher is better).")

            .DataType(FloatType.Default)
        .Build();
        private float _orientationConfidence;
        public float OrientationConfidence { get => _orientationConfidence; set => _orientationConfidence = value; }
        /// <summary>
        /// orientation before calibration.
        /// OriginName: old_orientation, Units: , IsExtended: true
        /// </summary>
        public static readonly Field OldOrientationField = new Field.Builder()
            .Name(nameof(OldOrientation))
            .Title("old_orientation")
            .Description("orientation before calibration.")
            .DataType(new UInt8Type(MavSensorOrientationHelper.GetValues(x=>(byte)x).Min(),MavSensorOrientationHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavSensorOrientationHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavSensorOrientation _oldOrientation;
        public MavSensorOrientation OldOrientation { get => _oldOrientation; set => _oldOrientation = value; } 
        /// <summary>
        /// orientation after calibration.
        /// OriginName: new_orientation, Units: , IsExtended: true
        /// </summary>
        public static readonly Field NewOrientationField = new Field.Builder()
            .Name(nameof(NewOrientation))
            .Title("new_orientation")
            .Description("orientation after calibration.")
            .DataType(new UInt8Type(MavSensorOrientationHelper.GetValues(x=>(byte)x).Min(),MavSensorOrientationHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavSensorOrientationHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavSensorOrientation _newOrientation;
        public MavSensorOrientation NewOrientation { get => _newOrientation; set => _newOrientation = value; } 
        /// <summary>
        /// field radius correction factor
        /// OriginName: scale_factor, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ScaleFactorField = new Field.Builder()
            .Name(nameof(ScaleFactor))
            .Title("scale_factor")
            .Description("field radius correction factor")

            .DataType(FloatType.Default)
        .Build();
        private float _scaleFactor;
        public float ScaleFactor { get => _scaleFactor; set => _scaleFactor = value; }
    }
    /// <summary>
    /// EFI status output
    ///  EFI_STATUS
    /// </summary>
    public class EfiStatusPacket : MavlinkV2Message<EfiStatusPayload>
    {
        public const int MessageId = 225;
        
        public const byte CrcExtra = 208;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override EfiStatusPayload Payload { get; } = new();

        public override string Name => "EFI_STATUS";
    }

    /// <summary>
    ///  EFI_STATUS
    /// </summary>
    public class EfiStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 73; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 73; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float ecu_index
            +4 // float rpm
            +4 // float fuel_consumed
            +4 // float fuel_flow
            +4 // float engine_load
            +4 // float throttle_position
            +4 // float spark_dwell_time
            +4 // float barometric_pressure
            +4 // float intake_manifold_pressure
            +4 // float intake_manifold_temperature
            +4 // float cylinder_head_temperature
            +4 // float ignition_timing
            +4 // float injection_time
            +4 // float exhaust_gas_temperature
            +4 // float throttle_out
            +4 // float pt_compensation
            +1 // uint8_t health
            +4 // float ignition_voltage
            +4 // float fuel_pressure
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            EcuIndex = BinSerialize.ReadFloat(ref buffer);
            Rpm = BinSerialize.ReadFloat(ref buffer);
            FuelConsumed = BinSerialize.ReadFloat(ref buffer);
            FuelFlow = BinSerialize.ReadFloat(ref buffer);
            EngineLoad = BinSerialize.ReadFloat(ref buffer);
            ThrottlePosition = BinSerialize.ReadFloat(ref buffer);
            SparkDwellTime = BinSerialize.ReadFloat(ref buffer);
            BarometricPressure = BinSerialize.ReadFloat(ref buffer);
            IntakeManifoldPressure = BinSerialize.ReadFloat(ref buffer);
            IntakeManifoldTemperature = BinSerialize.ReadFloat(ref buffer);
            CylinderHeadTemperature = BinSerialize.ReadFloat(ref buffer);
            IgnitionTiming = BinSerialize.ReadFloat(ref buffer);
            InjectionTime = BinSerialize.ReadFloat(ref buffer);
            ExhaustGasTemperature = BinSerialize.ReadFloat(ref buffer);
            ThrottleOut = BinSerialize.ReadFloat(ref buffer);
            PtCompensation = BinSerialize.ReadFloat(ref buffer);
            Health = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'IgnitionVoltage' can be empty
            if (buffer.IsEmpty) return;
            IgnitionVoltage = BinSerialize.ReadFloat(ref buffer);
            // extended field 'FuelPressure' can be empty
            if (buffer.IsEmpty) return;
            FuelPressure = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,EcuIndex);
            BinSerialize.WriteFloat(ref buffer,Rpm);
            BinSerialize.WriteFloat(ref buffer,FuelConsumed);
            BinSerialize.WriteFloat(ref buffer,FuelFlow);
            BinSerialize.WriteFloat(ref buffer,EngineLoad);
            BinSerialize.WriteFloat(ref buffer,ThrottlePosition);
            BinSerialize.WriteFloat(ref buffer,SparkDwellTime);
            BinSerialize.WriteFloat(ref buffer,BarometricPressure);
            BinSerialize.WriteFloat(ref buffer,IntakeManifoldPressure);
            BinSerialize.WriteFloat(ref buffer,IntakeManifoldTemperature);
            BinSerialize.WriteFloat(ref buffer,CylinderHeadTemperature);
            BinSerialize.WriteFloat(ref buffer,IgnitionTiming);
            BinSerialize.WriteFloat(ref buffer,InjectionTime);
            BinSerialize.WriteFloat(ref buffer,ExhaustGasTemperature);
            BinSerialize.WriteFloat(ref buffer,ThrottleOut);
            BinSerialize.WriteFloat(ref buffer,PtCompensation);
            BinSerialize.WriteByte(ref buffer,(byte)Health);
            BinSerialize.WriteFloat(ref buffer,IgnitionVoltage);
            BinSerialize.WriteFloat(ref buffer,FuelPressure);
            /* PayloadByteSize = 73 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,EcuIndexField, ref _ecuIndex);    
            FloatType.Accept(visitor,RpmField, ref _rpm);    
            FloatType.Accept(visitor,FuelConsumedField, ref _fuelConsumed);    
            FloatType.Accept(visitor,FuelFlowField, ref _fuelFlow);    
            FloatType.Accept(visitor,EngineLoadField, ref _engineLoad);    
            FloatType.Accept(visitor,ThrottlePositionField, ref _throttlePosition);    
            FloatType.Accept(visitor,SparkDwellTimeField, ref _sparkDwellTime);    
            FloatType.Accept(visitor,BarometricPressureField, ref _barometricPressure);    
            FloatType.Accept(visitor,IntakeManifoldPressureField, ref _intakeManifoldPressure);    
            FloatType.Accept(visitor,IntakeManifoldTemperatureField, ref _intakeManifoldTemperature);    
            FloatType.Accept(visitor,CylinderHeadTemperatureField, ref _cylinderHeadTemperature);    
            FloatType.Accept(visitor,IgnitionTimingField, ref _ignitionTiming);    
            FloatType.Accept(visitor,InjectionTimeField, ref _injectionTime);    
            FloatType.Accept(visitor,ExhaustGasTemperatureField, ref _exhaustGasTemperature);    
            FloatType.Accept(visitor,ThrottleOutField, ref _throttleOut);    
            FloatType.Accept(visitor,PtCompensationField, ref _ptCompensation);    
            UInt8Type.Accept(visitor,HealthField, ref _health);    
            FloatType.Accept(visitor,IgnitionVoltageField, ref _ignitionVoltage);    
            FloatType.Accept(visitor,FuelPressureField, ref _fuelPressure);    

        }

        /// <summary>
        /// ECU index
        /// OriginName: ecu_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EcuIndexField = new Field.Builder()
            .Name(nameof(EcuIndex))
            .Title("ecu_index")
            .Description("ECU index")

            .DataType(FloatType.Default)
        .Build();
        private float _ecuIndex;
        public float EcuIndex { get => _ecuIndex; set => _ecuIndex = value; }
        /// <summary>
        /// RPM
        /// OriginName: rpm, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RpmField = new Field.Builder()
            .Name(nameof(Rpm))
            .Title("rpm")
            .Description("RPM")

            .DataType(FloatType.Default)
        .Build();
        private float _rpm;
        public float Rpm { get => _rpm; set => _rpm = value; }
        /// <summary>
        /// Fuel consumed
        /// OriginName: fuel_consumed, Units: cm^3, IsExtended: false
        /// </summary>
        public static readonly Field FuelConsumedField = new Field.Builder()
            .Name(nameof(FuelConsumed))
            .Title("fuel_consumed")
            .Description("Fuel consumed")
.Units(@"cm^3")
            .DataType(FloatType.Default)
        .Build();
        private float _fuelConsumed;
        public float FuelConsumed { get => _fuelConsumed; set => _fuelConsumed = value; }
        /// <summary>
        /// Fuel flow rate
        /// OriginName: fuel_flow, Units: cm^3/min, IsExtended: false
        /// </summary>
        public static readonly Field FuelFlowField = new Field.Builder()
            .Name(nameof(FuelFlow))
            .Title("fuel_flow")
            .Description("Fuel flow rate")
.Units(@"cm^3/min")
            .DataType(FloatType.Default)
        .Build();
        private float _fuelFlow;
        public float FuelFlow { get => _fuelFlow; set => _fuelFlow = value; }
        /// <summary>
        /// Engine load
        /// OriginName: engine_load, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field EngineLoadField = new Field.Builder()
            .Name(nameof(EngineLoad))
            .Title("engine_load")
            .Description("Engine load")
.Units(@"%")
            .DataType(FloatType.Default)
        .Build();
        private float _engineLoad;
        public float EngineLoad { get => _engineLoad; set => _engineLoad = value; }
        /// <summary>
        /// Throttle position
        /// OriginName: throttle_position, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field ThrottlePositionField = new Field.Builder()
            .Name(nameof(ThrottlePosition))
            .Title("throttle_position")
            .Description("Throttle position")
.Units(@"%")
            .DataType(FloatType.Default)
        .Build();
        private float _throttlePosition;
        public float ThrottlePosition { get => _throttlePosition; set => _throttlePosition = value; }
        /// <summary>
        /// Spark dwell time
        /// OriginName: spark_dwell_time, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field SparkDwellTimeField = new Field.Builder()
            .Name(nameof(SparkDwellTime))
            .Title("spark_dwell_time")
            .Description("Spark dwell time")
.Units(@"ms")
            .DataType(FloatType.Default)
        .Build();
        private float _sparkDwellTime;
        public float SparkDwellTime { get => _sparkDwellTime; set => _sparkDwellTime = value; }
        /// <summary>
        /// Barometric pressure
        /// OriginName: barometric_pressure, Units: kPa, IsExtended: false
        /// </summary>
        public static readonly Field BarometricPressureField = new Field.Builder()
            .Name(nameof(BarometricPressure))
            .Title("barometric_pressure")
            .Description("Barometric pressure")
.Units(@"kPa")
            .DataType(FloatType.Default)
        .Build();
        private float _barometricPressure;
        public float BarometricPressure { get => _barometricPressure; set => _barometricPressure = value; }
        /// <summary>
        /// Intake manifold pressure(
        /// OriginName: intake_manifold_pressure, Units: kPa, IsExtended: false
        /// </summary>
        public static readonly Field IntakeManifoldPressureField = new Field.Builder()
            .Name(nameof(IntakeManifoldPressure))
            .Title("intake_manifold_pressure")
            .Description("Intake manifold pressure(")
.Units(@"kPa")
            .DataType(FloatType.Default)
        .Build();
        private float _intakeManifoldPressure;
        public float IntakeManifoldPressure { get => _intakeManifoldPressure; set => _intakeManifoldPressure = value; }
        /// <summary>
        /// Intake manifold temperature
        /// OriginName: intake_manifold_temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field IntakeManifoldTemperatureField = new Field.Builder()
            .Name(nameof(IntakeManifoldTemperature))
            .Title("intake_manifold_temperature")
            .Description("Intake manifold temperature")
.Units(@"degC")
            .DataType(FloatType.Default)
        .Build();
        private float _intakeManifoldTemperature;
        public float IntakeManifoldTemperature { get => _intakeManifoldTemperature; set => _intakeManifoldTemperature = value; }
        /// <summary>
        /// Cylinder head temperature
        /// OriginName: cylinder_head_temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field CylinderHeadTemperatureField = new Field.Builder()
            .Name(nameof(CylinderHeadTemperature))
            .Title("cylinder_head_temperature")
            .Description("Cylinder head temperature")
.Units(@"degC")
            .DataType(FloatType.Default)
        .Build();
        private float _cylinderHeadTemperature;
        public float CylinderHeadTemperature { get => _cylinderHeadTemperature; set => _cylinderHeadTemperature = value; }
        /// <summary>
        /// Ignition timing (Crank angle degrees)
        /// OriginName: ignition_timing, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field IgnitionTimingField = new Field.Builder()
            .Name(nameof(IgnitionTiming))
            .Title("ignition_timing")
            .Description("Ignition timing (Crank angle degrees)")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _ignitionTiming;
        public float IgnitionTiming { get => _ignitionTiming; set => _ignitionTiming = value; }
        /// <summary>
        /// Injection time
        /// OriginName: injection_time, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field InjectionTimeField = new Field.Builder()
            .Name(nameof(InjectionTime))
            .Title("injection_time")
            .Description("Injection time")
.Units(@"ms")
            .DataType(FloatType.Default)
        .Build();
        private float _injectionTime;
        public float InjectionTime { get => _injectionTime; set => _injectionTime = value; }
        /// <summary>
        /// Exhaust gas temperature
        /// OriginName: exhaust_gas_temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field ExhaustGasTemperatureField = new Field.Builder()
            .Name(nameof(ExhaustGasTemperature))
            .Title("exhaust_gas_temperature")
            .Description("Exhaust gas temperature")
.Units(@"degC")
            .DataType(FloatType.Default)
        .Build();
        private float _exhaustGasTemperature;
        public float ExhaustGasTemperature { get => _exhaustGasTemperature; set => _exhaustGasTemperature = value; }
        /// <summary>
        /// Output throttle
        /// OriginName: throttle_out, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field ThrottleOutField = new Field.Builder()
            .Name(nameof(ThrottleOut))
            .Title("throttle_out")
            .Description("Output throttle")
.Units(@"%")
            .DataType(FloatType.Default)
        .Build();
        private float _throttleOut;
        public float ThrottleOut { get => _throttleOut; set => _throttleOut = value; }
        /// <summary>
        /// Pressure/temperature compensation
        /// OriginName: pt_compensation, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PtCompensationField = new Field.Builder()
            .Name(nameof(PtCompensation))
            .Title("pt_compensation")
            .Description("Pressure/temperature compensation")

            .DataType(FloatType.Default)
        .Build();
        private float _ptCompensation;
        public float PtCompensation { get => _ptCompensation; set => _ptCompensation = value; }
        /// <summary>
        /// EFI health status
        /// OriginName: health, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HealthField = new Field.Builder()
            .Name(nameof(Health))
            .Title("health")
            .Description("EFI health status")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _health;
        public byte Health { get => _health; set => _health = value; }
        /// <summary>
        /// Supply voltage to EFI sparking system.  Zero in this value means "unknown", so if the supply voltage really is zero volts use 0.0001 instead.
        /// OriginName: ignition_voltage, Units: V, IsExtended: true
        /// </summary>
        public static readonly Field IgnitionVoltageField = new Field.Builder()
            .Name(nameof(IgnitionVoltage))
            .Title("ignition_voltage")
            .Description("Supply voltage to EFI sparking system.  Zero in this value means \"unknown\", so if the supply voltage really is zero volts use 0.0001 instead.")
.Units(@"V")
            .DataType(FloatType.Default)
        .Build();
        private float _ignitionVoltage;
        public float IgnitionVoltage { get => _ignitionVoltage; set => _ignitionVoltage = value; }
        /// <summary>
        /// Fuel pressure. Zero in this value means "unknown", so if the fuel pressure really is zero kPa use 0.0001 instead.
        /// OriginName: fuel_pressure, Units: kPa, IsExtended: true
        /// </summary>
        public static readonly Field FuelPressureField = new Field.Builder()
            .Name(nameof(FuelPressure))
            .Title("fuel_pressure")
            .Description("Fuel pressure. Zero in this value means \"unknown\", so if the fuel pressure really is zero kPa use 0.0001 instead.")
.Units(@"kPa")
            .DataType(FloatType.Default)
        .Build();
        private float _fuelPressure;
        public float FuelPressure { get => _fuelPressure; set => _fuelPressure = value; }
    }
    /// <summary>
    /// Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovation test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovation test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.
    ///  ESTIMATOR_STATUS
    /// </summary>
    public class EstimatorStatusPacket : MavlinkV2Message<EstimatorStatusPayload>
    {
        public const int MessageId = 230;
        
        public const byte CrcExtra = 163;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override EstimatorStatusPayload Payload { get; } = new();

        public override string Name => "ESTIMATOR_STATUS";
    }

    /// <summary>
    ///  ESTIMATOR_STATUS
    /// </summary>
    public class EstimatorStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float vel_ratio
            +4 // float pos_horiz_ratio
            +4 // float pos_vert_ratio
            +4 // float mag_ratio
            +4 // float hagl_ratio
            +4 // float tas_ratio
            +4 // float pos_horiz_accuracy
            +4 // float pos_vert_accuracy
            + 2 // uint16_t flags
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            VelRatio = BinSerialize.ReadFloat(ref buffer);
            PosHorizRatio = BinSerialize.ReadFloat(ref buffer);
            PosVertRatio = BinSerialize.ReadFloat(ref buffer);
            MagRatio = BinSerialize.ReadFloat(ref buffer);
            HaglRatio = BinSerialize.ReadFloat(ref buffer);
            TasRatio = BinSerialize.ReadFloat(ref buffer);
            PosHorizAccuracy = BinSerialize.ReadFloat(ref buffer);
            PosVertAccuracy = BinSerialize.ReadFloat(ref buffer);
            Flags = (EstimatorStatusFlags)BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,VelRatio);
            BinSerialize.WriteFloat(ref buffer,PosHorizRatio);
            BinSerialize.WriteFloat(ref buffer,PosVertRatio);
            BinSerialize.WriteFloat(ref buffer,MagRatio);
            BinSerialize.WriteFloat(ref buffer,HaglRatio);
            BinSerialize.WriteFloat(ref buffer,TasRatio);
            BinSerialize.WriteFloat(ref buffer,PosHorizAccuracy);
            BinSerialize.WriteFloat(ref buffer,PosVertAccuracy);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            /* PayloadByteSize = 42 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,VelRatioField, ref _velRatio);    
            FloatType.Accept(visitor,PosHorizRatioField, ref _posHorizRatio);    
            FloatType.Accept(visitor,PosVertRatioField, ref _posVertRatio);    
            FloatType.Accept(visitor,MagRatioField, ref _magRatio);    
            FloatType.Accept(visitor,HaglRatioField, ref _haglRatio);    
            FloatType.Accept(visitor,TasRatioField, ref _tasRatio);    
            FloatType.Accept(visitor,PosHorizAccuracyField, ref _posHorizAccuracy);    
            FloatType.Accept(visitor,PosVertAccuracyField, ref _posVertAccuracy);    
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (EstimatorStatusFlags)tmpFlags;

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Velocity innovation test ratio
        /// OriginName: vel_ratio, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VelRatioField = new Field.Builder()
            .Name(nameof(VelRatio))
            .Title("vel_ratio")
            .Description("Velocity innovation test ratio")

            .DataType(FloatType.Default)
        .Build();
        private float _velRatio;
        public float VelRatio { get => _velRatio; set => _velRatio = value; }
        /// <summary>
        /// Horizontal position innovation test ratio
        /// OriginName: pos_horiz_ratio, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PosHorizRatioField = new Field.Builder()
            .Name(nameof(PosHorizRatio))
            .Title("pos_horiz_ratio")
            .Description("Horizontal position innovation test ratio")

            .DataType(FloatType.Default)
        .Build();
        private float _posHorizRatio;
        public float PosHorizRatio { get => _posHorizRatio; set => _posHorizRatio = value; }
        /// <summary>
        /// Vertical position innovation test ratio
        /// OriginName: pos_vert_ratio, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PosVertRatioField = new Field.Builder()
            .Name(nameof(PosVertRatio))
            .Title("pos_vert_ratio")
            .Description("Vertical position innovation test ratio")

            .DataType(FloatType.Default)
        .Build();
        private float _posVertRatio;
        public float PosVertRatio { get => _posVertRatio; set => _posVertRatio = value; }
        /// <summary>
        /// Magnetometer innovation test ratio
        /// OriginName: mag_ratio, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MagRatioField = new Field.Builder()
            .Name(nameof(MagRatio))
            .Title("mag_ratio")
            .Description("Magnetometer innovation test ratio")

            .DataType(FloatType.Default)
        .Build();
        private float _magRatio;
        public float MagRatio { get => _magRatio; set => _magRatio = value; }
        /// <summary>
        /// Height above terrain innovation test ratio
        /// OriginName: hagl_ratio, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HaglRatioField = new Field.Builder()
            .Name(nameof(HaglRatio))
            .Title("hagl_ratio")
            .Description("Height above terrain innovation test ratio")

            .DataType(FloatType.Default)
        .Build();
        private float _haglRatio;
        public float HaglRatio { get => _haglRatio; set => _haglRatio = value; }
        /// <summary>
        /// True airspeed innovation test ratio
        /// OriginName: tas_ratio, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TasRatioField = new Field.Builder()
            .Name(nameof(TasRatio))
            .Title("tas_ratio")
            .Description("True airspeed innovation test ratio")

            .DataType(FloatType.Default)
        .Build();
        private float _tasRatio;
        public float TasRatio { get => _tasRatio; set => _tasRatio = value; }
        /// <summary>
        /// Horizontal position 1-STD accuracy relative to the EKF local origin
        /// OriginName: pos_horiz_accuracy, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosHorizAccuracyField = new Field.Builder()
            .Name(nameof(PosHorizAccuracy))
            .Title("pos_horiz_accuracy")
            .Description("Horizontal position 1-STD accuracy relative to the EKF local origin")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _posHorizAccuracy;
        public float PosHorizAccuracy { get => _posHorizAccuracy; set => _posHorizAccuracy = value; }
        /// <summary>
        /// Vertical position 1-STD accuracy relative to the EKF local origin
        /// OriginName: pos_vert_accuracy, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosVertAccuracyField = new Field.Builder()
            .Name(nameof(PosVertAccuracy))
            .Title("pos_vert_accuracy")
            .Description("Vertical position 1-STD accuracy relative to the EKF local origin")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _posVertAccuracy;
        public float PosVertAccuracy { get => _posVertAccuracy; set => _posVertAccuracy = value; }
        /// <summary>
        /// Bitmap indicating which EKF outputs are valid.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Bitmap indicating which EKF outputs are valid.")
            .DataType(new UInt16Type(EstimatorStatusFlagsHelper.GetValues(x=>(ushort)x).Min(),EstimatorStatusFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(EstimatorStatusFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private EstimatorStatusFlags _flags;
        public EstimatorStatusFlags Flags { get => _flags; set => _flags = value; } 
    }
    /// <summary>
    /// Wind estimate from vehicle. Note that despite the name, this message does not actually contain any covariances but instead variability and accuracy fields in terms of standard deviation (1-STD).
    ///  WIND_COV
    /// </summary>
    public class WindCovPacket : MavlinkV2Message<WindCovPayload>
    {
        public const int MessageId = 231;
        
        public const byte CrcExtra = 105;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override WindCovPayload Payload { get; } = new();

        public override string Name => "WIND_COV";
    }

    /// <summary>
    ///  WIND_COV
    /// </summary>
    public class WindCovPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 40; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 40; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float wind_x
            +4 // float wind_y
            +4 // float wind_z
            +4 // float var_horiz
            +4 // float var_vert
            +4 // float wind_alt
            +4 // float horiz_accuracy
            +4 // float vert_accuracy
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            WindX = BinSerialize.ReadFloat(ref buffer);
            WindY = BinSerialize.ReadFloat(ref buffer);
            WindZ = BinSerialize.ReadFloat(ref buffer);
            VarHoriz = BinSerialize.ReadFloat(ref buffer);
            VarVert = BinSerialize.ReadFloat(ref buffer);
            WindAlt = BinSerialize.ReadFloat(ref buffer);
            HorizAccuracy = BinSerialize.ReadFloat(ref buffer);
            VertAccuracy = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,WindX);
            BinSerialize.WriteFloat(ref buffer,WindY);
            BinSerialize.WriteFloat(ref buffer,WindZ);
            BinSerialize.WriteFloat(ref buffer,VarHoriz);
            BinSerialize.WriteFloat(ref buffer,VarVert);
            BinSerialize.WriteFloat(ref buffer,WindAlt);
            BinSerialize.WriteFloat(ref buffer,HorizAccuracy);
            BinSerialize.WriteFloat(ref buffer,VertAccuracy);
            /* PayloadByteSize = 40 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,WindXField, ref _windX);    
            FloatType.Accept(visitor,WindYField, ref _windY);    
            FloatType.Accept(visitor,WindZField, ref _windZ);    
            FloatType.Accept(visitor,VarHorizField, ref _varHoriz);    
            FloatType.Accept(visitor,VarVertField, ref _varVert);    
            FloatType.Accept(visitor,WindAltField, ref _windAlt);    
            FloatType.Accept(visitor,HorizAccuracyField, ref _horizAccuracy);    
            FloatType.Accept(visitor,VertAccuracyField, ref _vertAccuracy);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Wind in North (NED) direction (NAN if unknown)
        /// OriginName: wind_x, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field WindXField = new Field.Builder()
            .Name(nameof(WindX))
            .Title("wind_x")
            .Description("Wind in North (NED) direction (NAN if unknown)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _windX;
        public float WindX { get => _windX; set => _windX = value; }
        /// <summary>
        /// Wind in East (NED) direction (NAN if unknown)
        /// OriginName: wind_y, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field WindYField = new Field.Builder()
            .Name(nameof(WindY))
            .Title("wind_y")
            .Description("Wind in East (NED) direction (NAN if unknown)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _windY;
        public float WindY { get => _windY; set => _windY = value; }
        /// <summary>
        /// Wind in down (NED) direction (NAN if unknown)
        /// OriginName: wind_z, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field WindZField = new Field.Builder()
            .Name(nameof(WindZ))
            .Title("wind_z")
            .Description("Wind in down (NED) direction (NAN if unknown)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _windZ;
        public float WindZ { get => _windZ; set => _windZ = value; }
        /// <summary>
        /// Variability of wind in XY, 1-STD estimated from a 1 Hz lowpassed wind estimate (NAN if unknown)
        /// OriginName: var_horiz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VarHorizField = new Field.Builder()
            .Name(nameof(VarHoriz))
            .Title("var_horiz")
            .Description("Variability of wind in XY, 1-STD estimated from a 1 Hz lowpassed wind estimate (NAN if unknown)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _varHoriz;
        public float VarHoriz { get => _varHoriz; set => _varHoriz = value; }
        /// <summary>
        /// Variability of wind in Z, 1-STD estimated from a 1 Hz lowpassed wind estimate (NAN if unknown)
        /// OriginName: var_vert, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VarVertField = new Field.Builder()
            .Name(nameof(VarVert))
            .Title("var_vert")
            .Description("Variability of wind in Z, 1-STD estimated from a 1 Hz lowpassed wind estimate (NAN if unknown)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _varVert;
        public float VarVert { get => _varVert; set => _varVert = value; }
        /// <summary>
        /// Altitude (MSL) that this measurement was taken at (NAN if unknown)
        /// OriginName: wind_alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field WindAltField = new Field.Builder()
            .Name(nameof(WindAlt))
            .Title("wind_alt")
            .Description("Altitude (MSL) that this measurement was taken at (NAN if unknown)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _windAlt;
        public float WindAlt { get => _windAlt; set => _windAlt = value; }
        /// <summary>
        /// Horizontal speed 1-STD accuracy (0 if unknown)
        /// OriginName: horiz_accuracy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field HorizAccuracyField = new Field.Builder()
            .Name(nameof(HorizAccuracy))
            .Title("horiz_accuracy")
            .Description("Horizontal speed 1-STD accuracy (0 if unknown)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _horizAccuracy;
        public float HorizAccuracy { get => _horizAccuracy; set => _horizAccuracy = value; }
        /// <summary>
        /// Vertical speed 1-STD accuracy (0 if unknown)
        /// OriginName: vert_accuracy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VertAccuracyField = new Field.Builder()
            .Name(nameof(VertAccuracy))
            .Title("vert_accuracy")
            .Description("Vertical speed 1-STD accuracy (0 if unknown)")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vertAccuracy;
        public float VertAccuracy { get => _vertAccuracy; set => _vertAccuracy = value; }
    }
    /// <summary>
    /// GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the system.
    ///  GPS_INPUT
    /// </summary>
    public class GpsInputPacket : MavlinkV2Message<GpsInputPayload>
    {
        public const int MessageId = 232;
        
        public const byte CrcExtra = 151;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GpsInputPayload Payload { get; } = new();

        public override string Name => "GPS_INPUT";
    }

    /// <summary>
    ///  GPS_INPUT
    /// </summary>
    public class GpsInputPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 65; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 65; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t time_week_ms
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // float alt
            +4 // float hdop
            +4 // float vdop
            +4 // float vn
            +4 // float ve
            +4 // float vd
            +4 // float speed_accuracy
            +4 // float horiz_accuracy
            +4 // float vert_accuracy
            + 2 // uint16_t ignore_flags
            +2 // uint16_t time_week
            +1 // uint8_t gps_id
            +1 // uint8_t fix_type
            +1 // uint8_t satellites_visible
            +2 // uint16_t yaw
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            TimeWeekMs = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Hdop = BinSerialize.ReadFloat(ref buffer);
            Vdop = BinSerialize.ReadFloat(ref buffer);
            Vn = BinSerialize.ReadFloat(ref buffer);
            Ve = BinSerialize.ReadFloat(ref buffer);
            Vd = BinSerialize.ReadFloat(ref buffer);
            SpeedAccuracy = BinSerialize.ReadFloat(ref buffer);
            HorizAccuracy = BinSerialize.ReadFloat(ref buffer);
            VertAccuracy = BinSerialize.ReadFloat(ref buffer);
            IgnoreFlags = (GpsInputIgnoreFlags)BinSerialize.ReadUShort(ref buffer);
            TimeWeek = BinSerialize.ReadUShort(ref buffer);
            GpsId = (byte)BinSerialize.ReadByte(ref buffer);
            FixType = (byte)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,TimeWeekMs);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Hdop);
            BinSerialize.WriteFloat(ref buffer,Vdop);
            BinSerialize.WriteFloat(ref buffer,Vn);
            BinSerialize.WriteFloat(ref buffer,Ve);
            BinSerialize.WriteFloat(ref buffer,Vd);
            BinSerialize.WriteFloat(ref buffer,SpeedAccuracy);
            BinSerialize.WriteFloat(ref buffer,HorizAccuracy);
            BinSerialize.WriteFloat(ref buffer,VertAccuracy);
            BinSerialize.WriteUShort(ref buffer,(ushort)IgnoreFlags);
            BinSerialize.WriteUShort(ref buffer,TimeWeek);
            BinSerialize.WriteByte(ref buffer,(byte)GpsId);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            /* PayloadByteSize = 65 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,TimeWeekMsField, ref _timeWeekMs);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            FloatType.Accept(visitor,AltField, ref _alt);    
            FloatType.Accept(visitor,HdopField, ref _hdop);    
            FloatType.Accept(visitor,VdopField, ref _vdop);    
            FloatType.Accept(visitor,VnField, ref _vn);    
            FloatType.Accept(visitor,VeField, ref _ve);    
            FloatType.Accept(visitor,VdField, ref _vd);    
            FloatType.Accept(visitor,SpeedAccuracyField, ref _speedAccuracy);    
            FloatType.Accept(visitor,HorizAccuracyField, ref _horizAccuracy);    
            FloatType.Accept(visitor,VertAccuracyField, ref _vertAccuracy);    
            var tmpIgnoreFlags = (ushort)IgnoreFlags;
            UInt16Type.Accept(visitor,IgnoreFlagsField, ref tmpIgnoreFlags);
            IgnoreFlags = (GpsInputIgnoreFlags)tmpIgnoreFlags;
            UInt16Type.Accept(visitor,TimeWeekField, ref _timeWeek);    
            UInt8Type.Accept(visitor,GpsIdField, ref _gpsId);    
            UInt8Type.Accept(visitor,FixTypeField, ref _fixType);    
            UInt8Type.Accept(visitor,SatellitesVisibleField, ref _satellitesVisible);    
            UInt16Type.Accept(visitor,YawField, ref _yaw);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// GPS time (from start of GPS week)
        /// OriginName: time_week_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeWeekMsField = new Field.Builder()
            .Name(nameof(TimeWeekMs))
            .Title("time_week_ms")
            .Description("GPS time (from start of GPS week)")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeWeekMs;
        public uint TimeWeekMs { get => _timeWeekMs; set => _timeWeekMs = value; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL). Positive for up.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _alt;
        public float Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
        /// OriginName: hdop, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HdopField = new Field.Builder()
            .Name(nameof(Hdop))
            .Title("hdop")
            .Description("GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX")

            .DataType(FloatType.Default)
        .Build();
        private float _hdop;
        public float Hdop { get => _hdop; set => _hdop = value; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
        /// OriginName: vdop, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VdopField = new Field.Builder()
            .Name(nameof(Vdop))
            .Title("vdop")
            .Description("GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX")

            .DataType(FloatType.Default)
        .Build();
        private float _vdop;
        public float Vdop { get => _vdop; set => _vdop = value; }
        /// <summary>
        /// GPS velocity in north direction in earth-fixed NED frame
        /// OriginName: vn, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VnField = new Field.Builder()
            .Name(nameof(Vn))
            .Title("vn")
            .Description("GPS velocity in north direction in earth-fixed NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vn;
        public float Vn { get => _vn; set => _vn = value; }
        /// <summary>
        /// GPS velocity in east direction in earth-fixed NED frame
        /// OriginName: ve, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VeField = new Field.Builder()
            .Name(nameof(Ve))
            .Title("ve")
            .Description("GPS velocity in east direction in earth-fixed NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _ve;
        public float Ve { get => _ve; set => _ve = value; }
        /// <summary>
        /// GPS velocity in down direction in earth-fixed NED frame
        /// OriginName: vd, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VdField = new Field.Builder()
            .Name(nameof(Vd))
            .Title("vd")
            .Description("GPS velocity in down direction in earth-fixed NED frame")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vd;
        public float Vd { get => _vd; set => _vd = value; }
        /// <summary>
        /// GPS speed accuracy
        /// OriginName: speed_accuracy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field SpeedAccuracyField = new Field.Builder()
            .Name(nameof(SpeedAccuracy))
            .Title("speed_accuracy")
            .Description("GPS speed accuracy")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _speedAccuracy;
        public float SpeedAccuracy { get => _speedAccuracy; set => _speedAccuracy = value; }
        /// <summary>
        /// GPS horizontal accuracy
        /// OriginName: horiz_accuracy, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field HorizAccuracyField = new Field.Builder()
            .Name(nameof(HorizAccuracy))
            .Title("horiz_accuracy")
            .Description("GPS horizontal accuracy")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _horizAccuracy;
        public float HorizAccuracy { get => _horizAccuracy; set => _horizAccuracy = value; }
        /// <summary>
        /// GPS vertical accuracy
        /// OriginName: vert_accuracy, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field VertAccuracyField = new Field.Builder()
            .Name(nameof(VertAccuracy))
            .Title("vert_accuracy")
            .Description("GPS vertical accuracy")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _vertAccuracy;
        public float VertAccuracy { get => _vertAccuracy; set => _vertAccuracy = value; }
        /// <summary>
        /// Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided.
        /// OriginName: ignore_flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IgnoreFlagsField = new Field.Builder()
            .Name(nameof(IgnoreFlags))
            .Title("bitmask")
            .Description("Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided.")
            .DataType(new UInt16Type(GpsInputIgnoreFlagsHelper.GetValues(x=>(ushort)x).Min(),GpsInputIgnoreFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(GpsInputIgnoreFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private GpsInputIgnoreFlags _ignoreFlags;
        public GpsInputIgnoreFlags IgnoreFlags { get => _ignoreFlags; set => _ignoreFlags = value; } 
        /// <summary>
        /// GPS week number
        /// OriginName: time_week, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TimeWeekField = new Field.Builder()
            .Name(nameof(TimeWeek))
            .Title("time_week")
            .Description("GPS week number")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _timeWeek;
        public ushort TimeWeek { get => _timeWeek; set => _timeWeek = value; }
        /// <summary>
        /// ID of the GPS for multiple GPS inputs
        /// OriginName: gps_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GpsIdField = new Field.Builder()
            .Name(nameof(GpsId))
            .Title("gps_id")
            .Description("ID of the GPS for multiple GPS inputs")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gpsId;
        public byte GpsId { get => _gpsId; set => _gpsId = value; }
        /// <summary>
        /// 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FixTypeField = new Field.Builder()
            .Name(nameof(FixType))
            .Title("fix_type")
            .Description("0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _fixType;
        public byte FixType { get => _fixType; set => _fixType = value; }
        /// <summary>
        /// Number of satellites visible.
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SatellitesVisibleField = new Field.Builder()
            .Name(nameof(SatellitesVisible))
            .Title("satellites_visible")
            .Description("Number of satellites visible.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _satellitesVisible;
        public byte SatellitesVisible { get => _satellitesVisible; set => _satellitesVisible = value; }
        /// <summary>
        /// Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _yaw;
        public ushort Yaw { get => _yaw; set => _yaw = value; }
    }
    /// <summary>
    /// RTCM message for injecting into the onboard GPS (used for DGPS)
    ///  GPS_RTCM_DATA
    /// </summary>
    public class GpsRtcmDataPacket : MavlinkV2Message<GpsRtcmDataPayload>
    {
        public const int MessageId = 233;
        
        public const byte CrcExtra = 35;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GpsRtcmDataPayload Payload { get; } = new();

        public override string Name => "GPS_RTCM_DATA";
    }

    /// <summary>
    ///  GPS_RTCM_DATA
    /// </summary>
    public class GpsRtcmDataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 182; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 182; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t flags
            +1 // uint8_t len
            +Data.Length // uint8_t[180] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Flags = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/180 - Math.Max(0,((/*PayloadByteSize*/182 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 182 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,FlagsField, ref _flags);    
            UInt8Type.Accept(visitor,LenField, ref _len);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("flags")
            .Description("LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _flags;
        public byte Flags { get => _flags; set => _flags = value; }
        /// <summary>
        /// data length
        /// OriginName: len, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field LenField = new Field.Builder()
            .Name(nameof(Len))
            .Title("len")
            .Description("data length")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _len;
        public byte Len { get => _len; set => _len = value; }
        /// <summary>
        /// RTCM message (may be fragmented)
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("RTCM message (may be fragmented)")

            .DataType(new ArrayType(UInt8Type.Default,180))
        .Build();
        public const int DataMaxItemsCount = 180;
        public byte[] Data { get; } = new byte[180];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 180;
    }
    /// <summary>
    /// Message appropriate for high latency connections like Iridium
    ///  HIGH_LATENCY
    /// </summary>
    public class HighLatencyPacket : MavlinkV2Message<HighLatencyPayload>
    {
        public const int MessageId = 234;
        
        public const byte CrcExtra = 150;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HighLatencyPayload Payload { get; } = new();

        public override string Name => "HIGH_LATENCY";
    }

    /// <summary>
    ///  HIGH_LATENCY
    /// </summary>
    public class HighLatencyPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 40; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 40; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t custom_mode
            +4 // int32_t latitude
            +4 // int32_t longitude
            +2 // int16_t roll
            +2 // int16_t pitch
            +2 // uint16_t heading
            +2 // int16_t heading_sp
            +2 // int16_t altitude_amsl
            +2 // int16_t altitude_sp
            +2 // uint16_t wp_distance
            + 1 // uint8_t base_mode
            + 1 // uint8_t landed_state
            +1 // int8_t throttle
            +1 // uint8_t airspeed
            +1 // uint8_t airspeed_sp
            +1 // uint8_t groundspeed
            +1 // int8_t climb_rate
            +1 // uint8_t gps_nsat
            + 1 // uint8_t gps_fix_type
            +1 // uint8_t battery_remaining
            +1 // int8_t temperature
            +1 // int8_t temperature_air
            +1 // uint8_t failsafe
            +1 // uint8_t wp_num
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            CustomMode = BinSerialize.ReadUInt(ref buffer);
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Roll = BinSerialize.ReadShort(ref buffer);
            Pitch = BinSerialize.ReadShort(ref buffer);
            Heading = BinSerialize.ReadUShort(ref buffer);
            HeadingSp = BinSerialize.ReadShort(ref buffer);
            AltitudeAmsl = BinSerialize.ReadShort(ref buffer);
            AltitudeSp = BinSerialize.ReadShort(ref buffer);
            WpDistance = BinSerialize.ReadUShort(ref buffer);
            BaseMode = (MavModeFlag)BinSerialize.ReadByte(ref buffer);
            LandedState = (MavLandedState)BinSerialize.ReadByte(ref buffer);
            Throttle = (sbyte)BinSerialize.ReadByte(ref buffer);
            Airspeed = (byte)BinSerialize.ReadByte(ref buffer);
            AirspeedSp = (byte)BinSerialize.ReadByte(ref buffer);
            Groundspeed = (byte)BinSerialize.ReadByte(ref buffer);
            ClimbRate = (sbyte)BinSerialize.ReadByte(ref buffer);
            GpsNsat = (byte)BinSerialize.ReadByte(ref buffer);
            GpsFixType = (GpsFixType)BinSerialize.ReadByte(ref buffer);
            BatteryRemaining = (byte)BinSerialize.ReadByte(ref buffer);
            Temperature = (sbyte)BinSerialize.ReadByte(ref buffer);
            TemperatureAir = (sbyte)BinSerialize.ReadByte(ref buffer);
            Failsafe = (byte)BinSerialize.ReadByte(ref buffer);
            WpNum = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,CustomMode);
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteShort(ref buffer,Roll);
            BinSerialize.WriteShort(ref buffer,Pitch);
            BinSerialize.WriteUShort(ref buffer,Heading);
            BinSerialize.WriteShort(ref buffer,HeadingSp);
            BinSerialize.WriteShort(ref buffer,AltitudeAmsl);
            BinSerialize.WriteShort(ref buffer,AltitudeSp);
            BinSerialize.WriteUShort(ref buffer,WpDistance);
            BinSerialize.WriteByte(ref buffer,(byte)BaseMode);
            BinSerialize.WriteByte(ref buffer,(byte)LandedState);
            BinSerialize.WriteByte(ref buffer,(byte)Throttle);
            BinSerialize.WriteByte(ref buffer,(byte)Airspeed);
            BinSerialize.WriteByte(ref buffer,(byte)AirspeedSp);
            BinSerialize.WriteByte(ref buffer,(byte)Groundspeed);
            BinSerialize.WriteByte(ref buffer,(byte)ClimbRate);
            BinSerialize.WriteByte(ref buffer,(byte)GpsNsat);
            BinSerialize.WriteByte(ref buffer,(byte)GpsFixType);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryRemaining);
            BinSerialize.WriteByte(ref buffer,(byte)Temperature);
            BinSerialize.WriteByte(ref buffer,(byte)TemperatureAir);
            BinSerialize.WriteByte(ref buffer,(byte)Failsafe);
            BinSerialize.WriteByte(ref buffer,(byte)WpNum);
            /* PayloadByteSize = 40 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,CustomModeField, ref _customMode);    
            Int32Type.Accept(visitor,LatitudeField, ref _latitude);    
            Int32Type.Accept(visitor,LongitudeField, ref _longitude);    
            Int16Type.Accept(visitor,RollField, ref _roll);
            Int16Type.Accept(visitor,PitchField, ref _pitch);
            UInt16Type.Accept(visitor,HeadingField, ref _heading);    
            Int16Type.Accept(visitor,HeadingSpField, ref _headingSp);
            Int16Type.Accept(visitor,AltitudeAmslField, ref _altitudeAmsl);
            Int16Type.Accept(visitor,AltitudeSpField, ref _altitudeSp);
            UInt16Type.Accept(visitor,WpDistanceField, ref _wpDistance);    
            var tmpBaseMode = (byte)BaseMode;
            UInt8Type.Accept(visitor,BaseModeField, ref tmpBaseMode);
            BaseMode = (MavModeFlag)tmpBaseMode;
            var tmpLandedState = (byte)LandedState;
            UInt8Type.Accept(visitor,LandedStateField, ref tmpLandedState);
            LandedState = (MavLandedState)tmpLandedState;
            Int8Type.Accept(visitor,ThrottleField, ref _throttle);                
            UInt8Type.Accept(visitor,AirspeedField, ref _airspeed);    
            UInt8Type.Accept(visitor,AirspeedSpField, ref _airspeedSp);    
            UInt8Type.Accept(visitor,GroundspeedField, ref _groundspeed);    
            Int8Type.Accept(visitor,ClimbRateField, ref _climbRate);                
            UInt8Type.Accept(visitor,GpsNsatField, ref _gpsNsat);    
            var tmpGpsFixType = (byte)GpsFixType;
            UInt8Type.Accept(visitor,GpsFixTypeField, ref tmpGpsFixType);
            GpsFixType = (GpsFixType)tmpGpsFixType;
            UInt8Type.Accept(visitor,BatteryRemainingField, ref _batteryRemaining);    
            Int8Type.Accept(visitor,TemperatureField, ref _temperature);                
            Int8Type.Accept(visitor,TemperatureAirField, ref _temperatureAir);                
            UInt8Type.Accept(visitor,FailsafeField, ref _failsafe);    
            UInt8Type.Accept(visitor,WpNumField, ref _wpNum);    

        }

        /// <summary>
        /// A bitfield for use for autopilot-specific flags.
        /// OriginName: custom_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CustomModeField = new Field.Builder()
            .Name(nameof(CustomMode))
            .Title("bitmask")
            .Description("A bitfield for use for autopilot-specific flags.")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _customMode;
        public uint CustomMode { get => _customMode; set => _customMode = value; }
        /// <summary>
        /// Latitude
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatitudeField = new Field.Builder()
            .Name(nameof(Latitude))
            .Title("latitude")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latitude;
        public int Latitude { get => _latitude; set => _latitude = value; }
        /// <summary>
        /// Longitude
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LongitudeField = new Field.Builder()
            .Name(nameof(Longitude))
            .Title("longitude")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _longitude;
        public int Longitude { get => _longitude; set => _longitude = value; }
        /// <summary>
        /// roll
        /// OriginName: roll, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("roll")
.Units(@"cdeg")
            .DataType(Int16Type.Default)
        .Build();
        private short _roll;
        public short Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// pitch
        /// OriginName: pitch, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("pitch")
.Units(@"cdeg")
            .DataType(Int16Type.Default)
        .Build();
        private short _pitch;
        public short Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// heading
        /// OriginName: heading, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field HeadingField = new Field.Builder()
            .Name(nameof(Heading))
            .Title("heading")
            .Description("heading")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _heading;
        public ushort Heading { get => _heading; set => _heading = value; }
        /// <summary>
        /// heading setpoint
        /// OriginName: heading_sp, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field HeadingSpField = new Field.Builder()
            .Name(nameof(HeadingSp))
            .Title("heading_sp")
            .Description("heading setpoint")
.Units(@"cdeg")
            .DataType(Int16Type.Default)
        .Build();
        private short _headingSp;
        public short HeadingSp { get => _headingSp; set => _headingSp = value; }
        /// <summary>
        /// Altitude above mean sea level
        /// OriginName: altitude_amsl, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeAmslField = new Field.Builder()
            .Name(nameof(AltitudeAmsl))
            .Title("altitude_amsl")
            .Description("Altitude above mean sea level")
.Units(@"m")
            .DataType(Int16Type.Default)
        .Build();
        private short _altitudeAmsl;
        public short AltitudeAmsl { get => _altitudeAmsl; set => _altitudeAmsl = value; }
        /// <summary>
        /// Altitude setpoint relative to the home position
        /// OriginName: altitude_sp, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeSpField = new Field.Builder()
            .Name(nameof(AltitudeSp))
            .Title("altitude_sp")
            .Description("Altitude setpoint relative to the home position")
.Units(@"m")
            .DataType(Int16Type.Default)
        .Build();
        private short _altitudeSp;
        public short AltitudeSp { get => _altitudeSp; set => _altitudeSp = value; }
        /// <summary>
        /// distance to target
        /// OriginName: wp_distance, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field WpDistanceField = new Field.Builder()
            .Name(nameof(WpDistance))
            .Title("wp_distance")
            .Description("distance to target")
.Units(@"m")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _wpDistance;
        public ushort WpDistance { get => _wpDistance; set => _wpDistance = value; }
        /// <summary>
        /// Bitmap of enabled system modes.
        /// OriginName: base_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BaseModeField = new Field.Builder()
            .Name(nameof(BaseMode))
            .Title("bitmask")
            .Description("Bitmap of enabled system modes.")
            .DataType(new UInt8Type(MavModeFlagHelper.GetValues(x=>(byte)x).Min(),MavModeFlagHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavModeFlagHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavModeFlag _baseMode;
        public MavModeFlag BaseMode { get => _baseMode; set => _baseMode = value; } 
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// OriginName: landed_state, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LandedStateField = new Field.Builder()
            .Name(nameof(LandedState))
            .Title("landed_state")
            .Description("The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.")
            .DataType(new UInt8Type(MavLandedStateHelper.GetValues(x=>(byte)x).Min(),MavLandedStateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavLandedStateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavLandedState _landedState;
        public MavLandedState LandedState { get => _landedState; set => _landedState = value; } 
        /// <summary>
        /// throttle (percentage)
        /// OriginName: throttle, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field ThrottleField = new Field.Builder()
            .Name(nameof(Throttle))
            .Title("throttle")
            .Description("throttle (percentage)")
.Units(@"%")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _throttle;
        public sbyte Throttle { get => _throttle; set => _throttle = value; }
        /// <summary>
        /// airspeed
        /// OriginName: airspeed, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field AirspeedField = new Field.Builder()
            .Name(nameof(Airspeed))
            .Title("airspeed")
            .Description("airspeed")
.Units(@"m/s")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _airspeed;
        public byte Airspeed { get => _airspeed; set => _airspeed = value; }
        /// <summary>
        /// airspeed setpoint
        /// OriginName: airspeed_sp, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field AirspeedSpField = new Field.Builder()
            .Name(nameof(AirspeedSp))
            .Title("airspeed_sp")
            .Description("airspeed setpoint")
.Units(@"m/s")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _airspeedSp;
        public byte AirspeedSp { get => _airspeedSp; set => _airspeedSp = value; }
        /// <summary>
        /// groundspeed
        /// OriginName: groundspeed, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field GroundspeedField = new Field.Builder()
            .Name(nameof(Groundspeed))
            .Title("groundspeed")
            .Description("groundspeed")
.Units(@"m/s")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _groundspeed;
        public byte Groundspeed { get => _groundspeed; set => _groundspeed = value; }
        /// <summary>
        /// climb rate
        /// OriginName: climb_rate, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field ClimbRateField = new Field.Builder()
            .Name(nameof(ClimbRate))
            .Title("climb_rate")
            .Description("climb rate")
.Units(@"m/s")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _climbRate;
        public sbyte ClimbRate { get => _climbRate; set => _climbRate = value; }
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: gps_nsat, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GpsNsatField = new Field.Builder()
            .Name(nameof(GpsNsat))
            .Title("gps_nsat")
            .Description("Number of satellites visible. If unknown, set to UINT8_MAX")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gpsNsat;
        public byte GpsNsat { get => _gpsNsat; set => _gpsNsat = value; }
        /// <summary>
        /// GPS Fix type.
        /// OriginName: gps_fix_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GpsFixTypeField = new Field.Builder()
            .Name(nameof(GpsFixType))
            .Title("gps_fix_type")
            .Description("GPS Fix type.")
            .DataType(new UInt8Type(GpsFixTypeHelper.GetValues(x=>(byte)x).Min(),GpsFixTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(GpsFixTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private GpsFixType _gpsFixType;
        public GpsFixType GpsFixType { get => _gpsFixType; set => _gpsFixType = value; } 
        /// <summary>
        /// Remaining battery (percentage)
        /// OriginName: battery_remaining, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field BatteryRemainingField = new Field.Builder()
            .Name(nameof(BatteryRemaining))
            .Title("battery_remaining")
            .Description("Remaining battery (percentage)")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _batteryRemaining;
        public byte BatteryRemaining { get => _batteryRemaining; set => _batteryRemaining = value; }
        /// <summary>
        /// Autopilot temperature (degrees C)
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Autopilot temperature (degrees C)")
.Units(@"degC")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _temperature;
        public sbyte Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Air temperature (degrees C) from airspeed sensor
        /// OriginName: temperature_air, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureAirField = new Field.Builder()
            .Name(nameof(TemperatureAir))
            .Title("temperature_air")
            .Description("Air temperature (degrees C) from airspeed sensor")
.Units(@"degC")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _temperatureAir;
        public sbyte TemperatureAir { get => _temperatureAir; set => _temperatureAir = value; }
        /// <summary>
        /// failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
        /// OriginName: failsafe, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FailsafeField = new Field.Builder()
            .Name(nameof(Failsafe))
            .Title("failsafe")
            .Description("failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _failsafe;
        public byte Failsafe { get => _failsafe; set => _failsafe = value; }
        /// <summary>
        /// current waypoint number
        /// OriginName: wp_num, Units: , IsExtended: false
        /// </summary>
        public static readonly Field WpNumField = new Field.Builder()
            .Name(nameof(WpNum))
            .Title("wp_num")
            .Description("current waypoint number")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _wpNum;
        public byte WpNum { get => _wpNum; set => _wpNum = value; }
    }
    /// <summary>
    /// Message appropriate for high latency connections like Iridium (version 2)
    ///  HIGH_LATENCY2
    /// </summary>
    public class HighLatency2Packet : MavlinkV2Message<HighLatency2Payload>
    {
        public const int MessageId = 235;
        
        public const byte CrcExtra = 179;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HighLatency2Payload Payload { get; } = new();

        public override string Name => "HIGH_LATENCY2";
    }

    /// <summary>
    ///  HIGH_LATENCY2
    /// </summary>
    public class HighLatency2Payload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t timestamp
            +4 // int32_t latitude
            +4 // int32_t longitude
            +2 // uint16_t custom_mode
            +2 // int16_t altitude
            +2 // int16_t target_altitude
            +2 // uint16_t target_distance
            +2 // uint16_t wp_num
            + 2 // uint16_t failure_flags
            + 1 // uint8_t type
            + 1 // uint8_t autopilot
            +1 // uint8_t heading
            +1 // uint8_t target_heading
            +1 // uint8_t throttle
            +1 // uint8_t airspeed
            +1 // uint8_t airspeed_sp
            +1 // uint8_t groundspeed
            +1 // uint8_t windspeed
            +1 // uint8_t wind_heading
            +1 // uint8_t eph
            +1 // uint8_t epv
            +1 // int8_t temperature_air
            +1 // int8_t climb_rate
            +1 // int8_t battery
            +1 // int8_t custom0
            +1 // int8_t custom1
            +1 // int8_t custom2
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            CustomMode = BinSerialize.ReadUShort(ref buffer);
            Altitude = BinSerialize.ReadShort(ref buffer);
            TargetAltitude = BinSerialize.ReadShort(ref buffer);
            TargetDistance = BinSerialize.ReadUShort(ref buffer);
            WpNum = BinSerialize.ReadUShort(ref buffer);
            FailureFlags = (HlFailureFlag)BinSerialize.ReadUShort(ref buffer);
            Type = (MavType)BinSerialize.ReadByte(ref buffer);
            Autopilot = (MavAutopilot)BinSerialize.ReadByte(ref buffer);
            Heading = (byte)BinSerialize.ReadByte(ref buffer);
            TargetHeading = (byte)BinSerialize.ReadByte(ref buffer);
            Throttle = (byte)BinSerialize.ReadByte(ref buffer);
            Airspeed = (byte)BinSerialize.ReadByte(ref buffer);
            AirspeedSp = (byte)BinSerialize.ReadByte(ref buffer);
            Groundspeed = (byte)BinSerialize.ReadByte(ref buffer);
            Windspeed = (byte)BinSerialize.ReadByte(ref buffer);
            WindHeading = (byte)BinSerialize.ReadByte(ref buffer);
            Eph = (byte)BinSerialize.ReadByte(ref buffer);
            Epv = (byte)BinSerialize.ReadByte(ref buffer);
            TemperatureAir = (sbyte)BinSerialize.ReadByte(ref buffer);
            ClimbRate = (sbyte)BinSerialize.ReadByte(ref buffer);
            Battery = (sbyte)BinSerialize.ReadByte(ref buffer);
            Custom0 = (sbyte)BinSerialize.ReadByte(ref buffer);
            Custom1 = (sbyte)BinSerialize.ReadByte(ref buffer);
            Custom2 = (sbyte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteUShort(ref buffer,CustomMode);
            BinSerialize.WriteShort(ref buffer,Altitude);
            BinSerialize.WriteShort(ref buffer,TargetAltitude);
            BinSerialize.WriteUShort(ref buffer,TargetDistance);
            BinSerialize.WriteUShort(ref buffer,WpNum);
            BinSerialize.WriteUShort(ref buffer,(ushort)FailureFlags);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Autopilot);
            BinSerialize.WriteByte(ref buffer,(byte)Heading);
            BinSerialize.WriteByte(ref buffer,(byte)TargetHeading);
            BinSerialize.WriteByte(ref buffer,(byte)Throttle);
            BinSerialize.WriteByte(ref buffer,(byte)Airspeed);
            BinSerialize.WriteByte(ref buffer,(byte)AirspeedSp);
            BinSerialize.WriteByte(ref buffer,(byte)Groundspeed);
            BinSerialize.WriteByte(ref buffer,(byte)Windspeed);
            BinSerialize.WriteByte(ref buffer,(byte)WindHeading);
            BinSerialize.WriteByte(ref buffer,(byte)Eph);
            BinSerialize.WriteByte(ref buffer,(byte)Epv);
            BinSerialize.WriteByte(ref buffer,(byte)TemperatureAir);
            BinSerialize.WriteByte(ref buffer,(byte)ClimbRate);
            BinSerialize.WriteByte(ref buffer,(byte)Battery);
            BinSerialize.WriteByte(ref buffer,(byte)Custom0);
            BinSerialize.WriteByte(ref buffer,(byte)Custom1);
            BinSerialize.WriteByte(ref buffer,(byte)Custom2);
            /* PayloadByteSize = 42 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimestampField, ref _timestamp);    
            Int32Type.Accept(visitor,LatitudeField, ref _latitude);    
            Int32Type.Accept(visitor,LongitudeField, ref _longitude);    
            UInt16Type.Accept(visitor,CustomModeField, ref _customMode);    
            Int16Type.Accept(visitor,AltitudeField, ref _altitude);
            Int16Type.Accept(visitor,TargetAltitudeField, ref _targetAltitude);
            UInt16Type.Accept(visitor,TargetDistanceField, ref _targetDistance);    
            UInt16Type.Accept(visitor,WpNumField, ref _wpNum);    
            var tmpFailureFlags = (ushort)FailureFlags;
            UInt16Type.Accept(visitor,FailureFlagsField, ref tmpFailureFlags);
            FailureFlags = (HlFailureFlag)tmpFailureFlags;
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (MavType)tmpType;
            var tmpAutopilot = (byte)Autopilot;
            UInt8Type.Accept(visitor,AutopilotField, ref tmpAutopilot);
            Autopilot = (MavAutopilot)tmpAutopilot;
            UInt8Type.Accept(visitor,HeadingField, ref _heading);    
            UInt8Type.Accept(visitor,TargetHeadingField, ref _targetHeading);    
            UInt8Type.Accept(visitor,ThrottleField, ref _throttle);    
            UInt8Type.Accept(visitor,AirspeedField, ref _airspeed);    
            UInt8Type.Accept(visitor,AirspeedSpField, ref _airspeedSp);    
            UInt8Type.Accept(visitor,GroundspeedField, ref _groundspeed);    
            UInt8Type.Accept(visitor,WindspeedField, ref _windspeed);    
            UInt8Type.Accept(visitor,WindHeadingField, ref _windHeading);    
            UInt8Type.Accept(visitor,EphField, ref _eph);    
            UInt8Type.Accept(visitor,EpvField, ref _epv);    
            Int8Type.Accept(visitor,TemperatureAirField, ref _temperatureAir);                
            Int8Type.Accept(visitor,ClimbRateField, ref _climbRate);                
            Int8Type.Accept(visitor,BatteryField, ref _battery);                
            Int8Type.Accept(visitor,Custom0Field, ref _custom0);                
            Int8Type.Accept(visitor,Custom1Field, ref _custom1);                
            Int8Type.Accept(visitor,Custom2Field, ref _custom2);                

        }

        /// <summary>
        /// Timestamp (milliseconds since boot or Unix epoch)
        /// OriginName: timestamp, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("Timestamp (milliseconds since boot or Unix epoch)")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timestamp;
        public uint Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// Latitude
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatitudeField = new Field.Builder()
            .Name(nameof(Latitude))
            .Title("latitude")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latitude;
        public int Latitude { get => _latitude; set => _latitude = value; }
        /// <summary>
        /// Longitude
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LongitudeField = new Field.Builder()
            .Name(nameof(Longitude))
            .Title("longitude")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _longitude;
        public int Longitude { get => _longitude; set => _longitude = value; }
        /// <summary>
        /// A bitfield for use for autopilot-specific flags (2 byte version).
        /// OriginName: custom_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CustomModeField = new Field.Builder()
            .Name(nameof(CustomMode))
            .Title("bitmask")
            .Description("A bitfield for use for autopilot-specific flags (2 byte version).")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _customMode;
        public ushort CustomMode { get => _customMode; set => _customMode = value; }
        /// <summary>
        /// Altitude above mean sea level
        /// OriginName: altitude, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeField = new Field.Builder()
            .Name(nameof(Altitude))
            .Title("altitude")
            .Description("Altitude above mean sea level")
.Units(@"m")
            .DataType(Int16Type.Default)
        .Build();
        private short _altitude;
        public short Altitude { get => _altitude; set => _altitude = value; }
        /// <summary>
        /// Altitude setpoint
        /// OriginName: target_altitude, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field TargetAltitudeField = new Field.Builder()
            .Name(nameof(TargetAltitude))
            .Title("target_altitude")
            .Description("Altitude setpoint")
.Units(@"m")
            .DataType(Int16Type.Default)
        .Build();
        private short _targetAltitude;
        public short TargetAltitude { get => _targetAltitude; set => _targetAltitude = value; }
        /// <summary>
        /// Distance to target waypoint or position
        /// OriginName: target_distance, Units: dam, IsExtended: false
        /// </summary>
        public static readonly Field TargetDistanceField = new Field.Builder()
            .Name(nameof(TargetDistance))
            .Title("target_distance")
            .Description("Distance to target waypoint or position")
.Units(@"dam")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _targetDistance;
        public ushort TargetDistance { get => _targetDistance; set => _targetDistance = value; }
        /// <summary>
        /// Current waypoint number
        /// OriginName: wp_num, Units: , IsExtended: false
        /// </summary>
        public static readonly Field WpNumField = new Field.Builder()
            .Name(nameof(WpNum))
            .Title("wp_num")
            .Description("Current waypoint number")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _wpNum;
        public ushort WpNum { get => _wpNum; set => _wpNum = value; }
        /// <summary>
        /// Bitmap of failure flags.
        /// OriginName: failure_flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FailureFlagsField = new Field.Builder()
            .Name(nameof(FailureFlags))
            .Title("bitmask")
            .Description("Bitmap of failure flags.")
            .DataType(new UInt16Type(HlFailureFlagHelper.GetValues(x=>(ushort)x).Min(),HlFailureFlagHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(HlFailureFlagHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private HlFailureFlag _failureFlags;
        public HlFailureFlag FailureFlags { get => _failureFlags; set => _failureFlags = value; } 
        /// <summary>
        /// Type of the MAV (quadrotor, helicopter, etc.)
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of the MAV (quadrotor, helicopter, etc.)")
            .DataType(new UInt8Type(MavTypeHelper.GetValues(x=>(byte)x).Min(),MavTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavType _type;
        public MavType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
        /// OriginName: autopilot, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AutopilotField = new Field.Builder()
            .Name(nameof(Autopilot))
            .Title("autopilot")
            .Description("Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.")
            .DataType(new UInt8Type(MavAutopilotHelper.GetValues(x=>(byte)x).Min(),MavAutopilotHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavAutopilotHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavAutopilot _autopilot;
        public MavAutopilot Autopilot { get => _autopilot; set => _autopilot = value; } 
        /// <summary>
        /// Heading
        /// OriginName: heading, Units: deg/2, IsExtended: false
        /// </summary>
        public static readonly Field HeadingField = new Field.Builder()
            .Name(nameof(Heading))
            .Title("heading")
            .Description("Heading")
.Units(@"deg/2")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _heading;
        public byte Heading { get => _heading; set => _heading = value; }
        /// <summary>
        /// Heading setpoint
        /// OriginName: target_heading, Units: deg/2, IsExtended: false
        /// </summary>
        public static readonly Field TargetHeadingField = new Field.Builder()
            .Name(nameof(TargetHeading))
            .Title("target_heading")
            .Description("Heading setpoint")
.Units(@"deg/2")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetHeading;
        public byte TargetHeading { get => _targetHeading; set => _targetHeading = value; }
        /// <summary>
        /// Throttle
        /// OriginName: throttle, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field ThrottleField = new Field.Builder()
            .Name(nameof(Throttle))
            .Title("throttle")
            .Description("Throttle")
.Units(@"%")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _throttle;
        public byte Throttle { get => _throttle; set => _throttle = value; }
        /// <summary>
        /// Airspeed
        /// OriginName: airspeed, Units: m/s*5, IsExtended: false
        /// </summary>
        public static readonly Field AirspeedField = new Field.Builder()
            .Name(nameof(Airspeed))
            .Title("airspeed")
            .Description("Airspeed")
.Units(@"m/s*5")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _airspeed;
        public byte Airspeed { get => _airspeed; set => _airspeed = value; }
        /// <summary>
        /// Airspeed setpoint
        /// OriginName: airspeed_sp, Units: m/s*5, IsExtended: false
        /// </summary>
        public static readonly Field AirspeedSpField = new Field.Builder()
            .Name(nameof(AirspeedSp))
            .Title("airspeed_sp")
            .Description("Airspeed setpoint")
.Units(@"m/s*5")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _airspeedSp;
        public byte AirspeedSp { get => _airspeedSp; set => _airspeedSp = value; }
        /// <summary>
        /// Groundspeed
        /// OriginName: groundspeed, Units: m/s*5, IsExtended: false
        /// </summary>
        public static readonly Field GroundspeedField = new Field.Builder()
            .Name(nameof(Groundspeed))
            .Title("groundspeed")
            .Description("Groundspeed")
.Units(@"m/s*5")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _groundspeed;
        public byte Groundspeed { get => _groundspeed; set => _groundspeed = value; }
        /// <summary>
        /// Windspeed
        /// OriginName: windspeed, Units: m/s*5, IsExtended: false
        /// </summary>
        public static readonly Field WindspeedField = new Field.Builder()
            .Name(nameof(Windspeed))
            .Title("windspeed")
            .Description("Windspeed")
.Units(@"m/s*5")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _windspeed;
        public byte Windspeed { get => _windspeed; set => _windspeed = value; }
        /// <summary>
        /// Wind heading
        /// OriginName: wind_heading, Units: deg/2, IsExtended: false
        /// </summary>
        public static readonly Field WindHeadingField = new Field.Builder()
            .Name(nameof(WindHeading))
            .Title("wind_heading")
            .Description("Wind heading")
.Units(@"deg/2")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _windHeading;
        public byte WindHeading { get => _windHeading; set => _windHeading = value; }
        /// <summary>
        /// Maximum error horizontal position since last message
        /// OriginName: eph, Units: dm, IsExtended: false
        /// </summary>
        public static readonly Field EphField = new Field.Builder()
            .Name(nameof(Eph))
            .Title("eph")
            .Description("Maximum error horizontal position since last message")
.Units(@"dm")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _eph;
        public byte Eph { get => _eph; set => _eph = value; }
        /// <summary>
        /// Maximum error vertical position since last message
        /// OriginName: epv, Units: dm, IsExtended: false
        /// </summary>
        public static readonly Field EpvField = new Field.Builder()
            .Name(nameof(Epv))
            .Title("epv")
            .Description("Maximum error vertical position since last message")
.Units(@"dm")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _epv;
        public byte Epv { get => _epv; set => _epv = value; }
        /// <summary>
        /// Air temperature from airspeed sensor
        /// OriginName: temperature_air, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureAirField = new Field.Builder()
            .Name(nameof(TemperatureAir))
            .Title("temperature_air")
            .Description("Air temperature from airspeed sensor")
.Units(@"degC")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _temperatureAir;
        public sbyte TemperatureAir { get => _temperatureAir; set => _temperatureAir = value; }
        /// <summary>
        /// Maximum climb rate magnitude since last message
        /// OriginName: climb_rate, Units: dm/s, IsExtended: false
        /// </summary>
        public static readonly Field ClimbRateField = new Field.Builder()
            .Name(nameof(ClimbRate))
            .Title("climb_rate")
            .Description("Maximum climb rate magnitude since last message")
.Units(@"dm/s")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _climbRate;
        public sbyte ClimbRate { get => _climbRate; set => _climbRate = value; }
        /// <summary>
        /// Battery level (-1 if field not provided).
        /// OriginName: battery, Units: %, IsExtended: false
        /// </summary>
        public static readonly Field BatteryField = new Field.Builder()
            .Name(nameof(Battery))
            .Title("battery")
            .Description("Battery level (-1 if field not provided).")
.Units(@"%")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _battery;
        public sbyte Battery { get => _battery; set => _battery = value; }
        /// <summary>
        /// Field for custom payload.
        /// OriginName: custom0, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Custom0Field = new Field.Builder()
            .Name(nameof(Custom0))
            .Title("custom0")
            .Description("Field for custom payload.")

            .DataType(Int8Type.Default)
        .Build();
        private sbyte _custom0;
        public sbyte Custom0 { get => _custom0; set => _custom0 = value; }
        /// <summary>
        /// Field for custom payload.
        /// OriginName: custom1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Custom1Field = new Field.Builder()
            .Name(nameof(Custom1))
            .Title("custom1")
            .Description("Field for custom payload.")

            .DataType(Int8Type.Default)
        .Build();
        private sbyte _custom1;
        public sbyte Custom1 { get => _custom1; set => _custom1 = value; }
        /// <summary>
        /// Field for custom payload.
        /// OriginName: custom2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Custom2Field = new Field.Builder()
            .Name(nameof(Custom2))
            .Title("custom2")
            .Description("Field for custom payload.")

            .DataType(Int8Type.Default)
        .Build();
        private sbyte _custom2;
        public sbyte Custom2 { get => _custom2; set => _custom2 = value; }
    }
    /// <summary>
    /// Vibration levels and accelerometer clipping
    ///  VIBRATION
    /// </summary>
    public class VibrationPacket : MavlinkV2Message<VibrationPayload>
    {
        public const int MessageId = 241;
        
        public const byte CrcExtra = 90;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override VibrationPayload Payload { get; } = new();

        public override string Name => "VIBRATION";
    }

    /// <summary>
    ///  VIBRATION
    /// </summary>
    public class VibrationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float vibration_x
            +4 // float vibration_y
            +4 // float vibration_z
            +4 // uint32_t clipping_0
            +4 // uint32_t clipping_1
            +4 // uint32_t clipping_2
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            VibrationX = BinSerialize.ReadFloat(ref buffer);
            VibrationY = BinSerialize.ReadFloat(ref buffer);
            VibrationZ = BinSerialize.ReadFloat(ref buffer);
            Clipping0 = BinSerialize.ReadUInt(ref buffer);
            Clipping1 = BinSerialize.ReadUInt(ref buffer);
            Clipping2 = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,VibrationX);
            BinSerialize.WriteFloat(ref buffer,VibrationY);
            BinSerialize.WriteFloat(ref buffer,VibrationZ);
            BinSerialize.WriteUInt(ref buffer,Clipping0);
            BinSerialize.WriteUInt(ref buffer,Clipping1);
            BinSerialize.WriteUInt(ref buffer,Clipping2);
            /* PayloadByteSize = 32 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,VibrationXField, ref _vibrationX);    
            FloatType.Accept(visitor,VibrationYField, ref _vibrationY);    
            FloatType.Accept(visitor,VibrationZField, ref _vibrationZ);    
            UInt32Type.Accept(visitor,Clipping0Field, ref _clipping0);    
            UInt32Type.Accept(visitor,Clipping1Field, ref _clipping1);    
            UInt32Type.Accept(visitor,Clipping2Field, ref _clipping2);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Vibration levels on X-axis
        /// OriginName: vibration_x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VibrationXField = new Field.Builder()
            .Name(nameof(VibrationX))
            .Title("vibration_x")
            .Description("Vibration levels on X-axis")

            .DataType(FloatType.Default)
        .Build();
        private float _vibrationX;
        public float VibrationX { get => _vibrationX; set => _vibrationX = value; }
        /// <summary>
        /// Vibration levels on Y-axis
        /// OriginName: vibration_y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VibrationYField = new Field.Builder()
            .Name(nameof(VibrationY))
            .Title("vibration_y")
            .Description("Vibration levels on Y-axis")

            .DataType(FloatType.Default)
        .Build();
        private float _vibrationY;
        public float VibrationY { get => _vibrationY; set => _vibrationY = value; }
        /// <summary>
        /// Vibration levels on Z-axis
        /// OriginName: vibration_z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VibrationZField = new Field.Builder()
            .Name(nameof(VibrationZ))
            .Title("vibration_z")
            .Description("Vibration levels on Z-axis")

            .DataType(FloatType.Default)
        .Build();
        private float _vibrationZ;
        public float VibrationZ { get => _vibrationZ; set => _vibrationZ = value; }
        /// <summary>
        /// first accelerometer clipping count
        /// OriginName: clipping_0, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Clipping0Field = new Field.Builder()
            .Name(nameof(Clipping0))
            .Title("clipping_0")
            .Description("first accelerometer clipping count")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _clipping0;
        public uint Clipping0 { get => _clipping0; set => _clipping0 = value; }
        /// <summary>
        /// second accelerometer clipping count
        /// OriginName: clipping_1, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Clipping1Field = new Field.Builder()
            .Name(nameof(Clipping1))
            .Title("clipping_1")
            .Description("second accelerometer clipping count")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _clipping1;
        public uint Clipping1 { get => _clipping1; set => _clipping1 = value; }
        /// <summary>
        /// third accelerometer clipping count
        /// OriginName: clipping_2, Units: , IsExtended: false
        /// </summary>
        public static readonly Field Clipping2Field = new Field.Builder()
            .Name(nameof(Clipping2))
            .Title("clipping_2")
            .Description("third accelerometer clipping count")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _clipping2;
        public uint Clipping2 { get => _clipping2; set => _clipping2 = value; }
    }
    /// <summary>
    /// 
    /// 	Contains the home position.
    /// 	The home position is the default position that the system will return to and land on.
    /// 	The position must be set automatically by the system during the takeoff, and may also be explicitly set using MAV_CMD_DO_SET_HOME.
    /// 	The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface.
    /// 	Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach.
    /// 	The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    ///         Note: this message can be requested by sending the MAV_CMD_REQUEST_MESSAGE with param1=242 (or the deprecated MAV_CMD_GET_HOME_POSITION command).
    ///       
    ///  HOME_POSITION
    /// </summary>
    public class HomePositionPacket : MavlinkV2Message<HomePositionPayload>
    {
        public const int MessageId = 242;
        
        public const byte CrcExtra = 104;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HomePositionPayload Payload { get; } = new();

        public override string Name => "HOME_POSITION";
    }

    /// <summary>
    ///  HOME_POSITION
    /// </summary>
    public class HomePositionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 60; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 60; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t latitude
            +4 // int32_t longitude
            +4 // int32_t altitude
            +4 // float x
            +4 // float y
            +4 // float z
            +Q.Length * 4 // float[4] q
            +4 // float approach_x
            +4 // float approach_y
            +4 // float approach_z
            +8 // uint64_t time_usec
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/60 - payloadSize - /*ExtendedFieldsLength*/8)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ApproachX = BinSerialize.ReadFloat(ref buffer);
            ApproachY = BinSerialize.ReadFloat(ref buffer);
            ApproachZ = BinSerialize.ReadFloat(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,ApproachX);
            BinSerialize.WriteFloat(ref buffer,ApproachY);
            BinSerialize.WriteFloat(ref buffer,ApproachZ);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 60 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatitudeField, ref _latitude);    
            Int32Type.Accept(visitor,LongitudeField, ref _longitude);    
            Int32Type.Accept(visitor,AltitudeField, ref _altitude);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,ApproachXField, ref _approachX);    
            FloatType.Accept(visitor,ApproachYField, ref _approachY);    
            FloatType.Accept(visitor,ApproachZField, ref _approachZ);    
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    

        }

        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatitudeField = new Field.Builder()
            .Name(nameof(Latitude))
            .Title("latitude")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latitude;
        public int Latitude { get => _latitude; set => _latitude = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LongitudeField = new Field.Builder()
            .Name(nameof(Longitude))
            .Title("longitude")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _longitude;
        public int Longitude { get => _longitude; set => _longitude = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeField = new Field.Builder()
            .Name(nameof(Altitude))
            .Title("altitude")
            .Description("Altitude (MSL). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altitude;
        public int Altitude { get => _altitude; set => _altitude = value; }
        /// <summary>
        /// Local X position of this position in the local coordinate frame (NED)
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("Local X position of this position in the local coordinate frame (NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Local Y position of this position in the local coordinate frame (NED)
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Local Y position of this position in the local coordinate frame (NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Local Z position of this position in the local coordinate frame (NED: positive "down")
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Local Z position of this position in the local coordinate frame (NED: positive \"down\")")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// 
        ///         Quaternion indicating world-to-surface-normal and heading transformation of the takeoff position.
        ///         Used to indicate the heading and slope of the ground.
        ///         All fields should be set to NaN if an accurate quaternion for both heading and surface slope cannot be supplied.
        ///       
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("         Quaternion indicating world-to-surface-normal and heading transformation of the takeoff position.         Used to indicate the heading and slope of the ground.         All fields should be set to NaN if an accurate quaternion for both heading and surface slope cannot be supplied.       ")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ApproachXField = new Field.Builder()
            .Name(nameof(ApproachX))
            .Title("approach_x")
            .Description("Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _approachX;
        public float ApproachX { get => _approachX; set => _approachX = value; }
        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ApproachYField = new Field.Builder()
            .Name(nameof(ApproachY))
            .Title("approach_y")
            .Description("Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _approachY;
        public float ApproachY { get => _approachY; set => _approachY = value; }
        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ApproachZField = new Field.Builder()
            .Name(nameof(ApproachZ))
            .Title("approach_z")
            .Description("Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _approachZ;
        public float ApproachZ { get => _approachZ; set => _approachZ = value; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
    }
    /// <summary>
    /// 
    ///         Sets the home position.
    /// 	The home position is the default position that the system will return to and land on.
    ///         The position is set automatically by the system during the takeoff (and may also be set using this message).
    ///         The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface.
    ///         Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach.
    ///         The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    ///         Note: the current home position may be emitted in a HOME_POSITION message on request (using MAV_CMD_REQUEST_MESSAGE with param1=242).
    ///       
    ///  SET_HOME_POSITION
    /// </summary>
    public class SetHomePositionPacket : MavlinkV2Message<SetHomePositionPayload>
    {
        public const int MessageId = 243;
        
        public const byte CrcExtra = 85;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetHomePositionPayload Payload { get; } = new();

        public override string Name => "SET_HOME_POSITION";
    }

    /// <summary>
    ///  SET_HOME_POSITION
    /// </summary>
    public class SetHomePositionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 61; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 61; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t latitude
            +4 // int32_t longitude
            +4 // int32_t altitude
            +4 // float x
            +4 // float y
            +4 // float z
            +Q.Length * 4 // float[4] q
            +4 // float approach_x
            +4 // float approach_y
            +4 // float approach_z
            +1 // uint8_t target_system
            +8 // uint64_t time_usec
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/61 - payloadSize - /*ExtendedFieldsLength*/8)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ApproachX = BinSerialize.ReadFloat(ref buffer);
            ApproachY = BinSerialize.ReadFloat(ref buffer);
            ApproachZ = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,ApproachX);
            BinSerialize.WriteFloat(ref buffer,ApproachY);
            BinSerialize.WriteFloat(ref buffer,ApproachZ);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 61 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatitudeField, ref _latitude);    
            Int32Type.Accept(visitor,LongitudeField, ref _longitude);    
            Int32Type.Accept(visitor,AltitudeField, ref _altitude);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,ApproachXField, ref _approachX);    
            FloatType.Accept(visitor,ApproachYField, ref _approachY);    
            FloatType.Accept(visitor,ApproachZField, ref _approachZ);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    

        }

        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatitudeField = new Field.Builder()
            .Name(nameof(Latitude))
            .Title("latitude")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latitude;
        public int Latitude { get => _latitude; set => _latitude = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LongitudeField = new Field.Builder()
            .Name(nameof(Longitude))
            .Title("longitude")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _longitude;
        public int Longitude { get => _longitude; set => _longitude = value; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeField = new Field.Builder()
            .Name(nameof(Altitude))
            .Title("altitude")
            .Description("Altitude (MSL). Positive for up.")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altitude;
        public int Altitude { get => _altitude; set => _altitude = value; }
        /// <summary>
        /// Local X position of this position in the local coordinate frame (NED)
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("Local X position of this position in the local coordinate frame (NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Local Y position of this position in the local coordinate frame (NED)
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Local Y position of this position in the local coordinate frame (NED)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Local Z position of this position in the local coordinate frame (NED: positive "down")
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Local Z position of this position in the local coordinate frame (NED: positive \"down\")")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ApproachXField = new Field.Builder()
            .Name(nameof(ApproachX))
            .Title("approach_x")
            .Description("Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _approachX;
        public float ApproachX { get => _approachX; set => _approachX = value; }
        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ApproachYField = new Field.Builder()
            .Name(nameof(ApproachY))
            .Title("approach_y")
            .Description("Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _approachY;
        public float ApproachY { get => _approachY; set => _approachY = value; }
        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ApproachZField = new Field.Builder()
            .Name(nameof(ApproachZ))
            .Title("approach_z")
            .Description("Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _approachZ;
        public float ApproachZ { get => _approachZ; set => _approachZ = value; }
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
    }
    /// <summary>
    /// 
    ///         The interval between messages for a particular MAVLink message ID.
    ///         This message is sent in response to the MAV_CMD_REQUEST_MESSAGE command with param1=244 (this message) and param2=message_id (the id of the message for which the interval is required).
    /// 	It may also be sent in response to MAV_CMD_GET_MESSAGE_INTERVAL.
    /// 	This interface replaces DATA_STREAM.
    ///  MESSAGE_INTERVAL
    /// </summary>
    public class MessageIntervalPacket : MavlinkV2Message<MessageIntervalPayload>
    {
        public const int MessageId = 244;
        
        public const byte CrcExtra = 95;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MessageIntervalPayload Payload { get; } = new();

        public override string Name => "MESSAGE_INTERVAL";
    }

    /// <summary>
    ///  MESSAGE_INTERVAL
    /// </summary>
    public class MessageIntervalPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t interval_us
            +2 // uint16_t message_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            IntervalUs = BinSerialize.ReadInt(ref buffer);
            MessageId = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,IntervalUs);
            BinSerialize.WriteUShort(ref buffer,MessageId);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,IntervalUsField, ref _intervalUs);    
            UInt16Type.Accept(visitor,MessageIdField, ref _messageId);    

        }

        /// <summary>
        /// The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent.
        /// OriginName: interval_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field IntervalUsField = new Field.Builder()
            .Name(nameof(IntervalUs))
            .Title("interval_us")
            .Description("The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent.")
.Units(@"us")
            .DataType(Int32Type.Default)
        .Build();
        private int _intervalUs;
        public int IntervalUs { get => _intervalUs; set => _intervalUs = value; }
        /// <summary>
        /// The ID of the requested MAVLink message. v1.0 is limited to 254 messages.
        /// OriginName: message_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MessageIdField = new Field.Builder()
            .Name(nameof(MessageId))
            .Title("message_id")
            .Description("The ID of the requested MAVLink message. v1.0 is limited to 254 messages.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _messageId;
        public ushort MessageId { get => _messageId; set => _messageId = value; }
    }
    /// <summary>
    /// Provides state for additional features
    ///  EXTENDED_SYS_STATE
    /// </summary>
    public class ExtendedSysStatePacket : MavlinkV2Message<ExtendedSysStatePayload>
    {
        public const int MessageId = 245;
        
        public const byte CrcExtra = 130;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ExtendedSysStatePayload Payload { get; } = new();

        public override string Name => "EXTENDED_SYS_STATE";
    }

    /// <summary>
    ///  EXTENDED_SYS_STATE
    /// </summary>
    public class ExtendedSysStatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 1 // uint8_t vtol_state
            + 1 // uint8_t landed_state
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            VtolState = (MavVtolState)BinSerialize.ReadByte(ref buffer);
            LandedState = (MavLandedState)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)VtolState);
            BinSerialize.WriteByte(ref buffer,(byte)LandedState);
            /* PayloadByteSize = 2 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpVtolState = (byte)VtolState;
            UInt8Type.Accept(visitor,VtolStateField, ref tmpVtolState);
            VtolState = (MavVtolState)tmpVtolState;
            var tmpLandedState = (byte)LandedState;
            UInt8Type.Accept(visitor,LandedStateField, ref tmpLandedState);
            LandedState = (MavLandedState)tmpLandedState;

        }

        /// <summary>
        /// The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration.
        /// OriginName: vtol_state, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VtolStateField = new Field.Builder()
            .Name(nameof(VtolState))
            .Title("vtol_state")
            .Description("The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration.")
            .DataType(new UInt8Type(MavVtolStateHelper.GetValues(x=>(byte)x).Min(),MavVtolStateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavVtolStateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavVtolState _vtolState;
        public MavVtolState VtolState { get => _vtolState; set => _vtolState = value; } 
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// OriginName: landed_state, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LandedStateField = new Field.Builder()
            .Name(nameof(LandedState))
            .Title("landed_state")
            .Description("The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.")
            .DataType(new UInt8Type(MavLandedStateHelper.GetValues(x=>(byte)x).Min(),MavLandedStateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavLandedStateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavLandedState _landedState;
        public MavLandedState LandedState { get => _landedState; set => _landedState = value; } 
    }
    /// <summary>
    /// The location and information of an ADSB vehicle
    ///  ADSB_VEHICLE
    /// </summary>
    public class AdsbVehiclePacket : MavlinkV2Message<AdsbVehiclePayload>
    {
        public const int MessageId = 246;
        
        public const byte CrcExtra = 184;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AdsbVehiclePayload Payload { get; } = new();

        public override string Name => "ADSB_VEHICLE";
    }

    /// <summary>
    ///  ADSB_VEHICLE
    /// </summary>
    public class AdsbVehiclePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t ICAO_address
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t altitude
            +2 // uint16_t heading
            +2 // uint16_t hor_velocity
            +2 // int16_t ver_velocity
            + 2 // uint16_t flags
            +2 // uint16_t squawk
            + 1 // uint8_t altitude_type
            +Callsign.Length // char[9] callsign
            + 1 // uint8_t emitter_type
            +1 // uint8_t tslc
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            IcaoAddress = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            Heading = BinSerialize.ReadUShort(ref buffer);
            HorVelocity = BinSerialize.ReadUShort(ref buffer);
            VerVelocity = BinSerialize.ReadShort(ref buffer);
            Flags = (AdsbFlags)BinSerialize.ReadUShort(ref buffer);
            Squawk = BinSerialize.ReadUShort(ref buffer);
            AltitudeType = (AdsbAltitudeType)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/9 - Math.Max(0,((/*PayloadByteSize*/38 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Callsign.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            EmitterType = (AdsbEmitterType)BinSerialize.ReadByte(ref buffer);
            Tslc = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,IcaoAddress);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteUShort(ref buffer,Heading);
            BinSerialize.WriteUShort(ref buffer,HorVelocity);
            BinSerialize.WriteShort(ref buffer,VerVelocity);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteUShort(ref buffer,Squawk);
            BinSerialize.WriteByte(ref buffer,(byte)AltitudeType);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetBytes(charPointer, Callsign.Length, bytePointer, Callsign.Length);
                }
            }
            buffer = buffer.Slice(Callsign.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)EmitterType);
            BinSerialize.WriteByte(ref buffer,(byte)Tslc);
            /* PayloadByteSize = 38 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,IcaoAddressField, ref _icaoAddress);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltitudeField, ref _altitude);    
            UInt16Type.Accept(visitor,HeadingField, ref _heading);    
            UInt16Type.Accept(visitor,HorVelocityField, ref _horVelocity);    
            Int16Type.Accept(visitor,VerVelocityField, ref _verVelocity);
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (AdsbFlags)tmpFlags;
            UInt16Type.Accept(visitor,SquawkField, ref _squawk);    
            var tmpAltitudeType = (byte)AltitudeType;
            UInt8Type.Accept(visitor,AltitudeTypeField, ref tmpAltitudeType);
            AltitudeType = (AdsbAltitudeType)tmpAltitudeType;
            ArrayType.Accept(visitor,CallsignField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Callsign[index]));
            var tmpEmitterType = (byte)EmitterType;
            UInt8Type.Accept(visitor,EmitterTypeField, ref tmpEmitterType);
            EmitterType = (AdsbEmitterType)tmpEmitterType;
            UInt8Type.Accept(visitor,TslcField, ref _tslc);    

        }

        /// <summary>
        /// ICAO address
        /// OriginName: ICAO_address, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IcaoAddressField = new Field.Builder()
            .Name(nameof(IcaoAddress))
            .Title("ICAO_address")
            .Description("ICAO address")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _icaoAddress;
        public uint IcaoAddress { get => _icaoAddress; set => _icaoAddress = value; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude(ASL)
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeField = new Field.Builder()
            .Name(nameof(Altitude))
            .Title("altitude")
            .Description("Altitude(ASL)")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altitude;
        public int Altitude { get => _altitude; set => _altitude = value; }
        /// <summary>
        /// Course over ground
        /// OriginName: heading, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field HeadingField = new Field.Builder()
            .Name(nameof(Heading))
            .Title("heading")
            .Description("Course over ground")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _heading;
        public ushort Heading { get => _heading; set => _heading = value; }
        /// <summary>
        /// The horizontal velocity
        /// OriginName: hor_velocity, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field HorVelocityField = new Field.Builder()
            .Name(nameof(HorVelocity))
            .Title("hor_velocity")
            .Description("The horizontal velocity")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _horVelocity;
        public ushort HorVelocity { get => _horVelocity; set => _horVelocity = value; }
        /// <summary>
        /// The vertical velocity. Positive is up
        /// OriginName: ver_velocity, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VerVelocityField = new Field.Builder()
            .Name(nameof(VerVelocity))
            .Title("ver_velocity")
            .Description("The vertical velocity. Positive is up")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _verVelocity;
        public short VerVelocity { get => _verVelocity; set => _verVelocity = value; }
        /// <summary>
        /// Bitmap to indicate various statuses including valid data fields
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Bitmap to indicate various statuses including valid data fields")
            .DataType(new UInt16Type(AdsbFlagsHelper.GetValues(x=>(ushort)x).Min(),AdsbFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(AdsbFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private AdsbFlags _flags;
        public AdsbFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Squawk code
        /// OriginName: squawk, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SquawkField = new Field.Builder()
            .Name(nameof(Squawk))
            .Title("squawk")
            .Description("Squawk code")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _squawk;
        public ushort Squawk { get => _squawk; set => _squawk = value; }
        /// <summary>
        /// ADSB altitude type.
        /// OriginName: altitude_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AltitudeTypeField = new Field.Builder()
            .Name(nameof(AltitudeType))
            .Title("altitude_type")
            .Description("ADSB altitude type.")
            .DataType(new UInt8Type(AdsbAltitudeTypeHelper.GetValues(x=>(byte)x).Min(),AdsbAltitudeTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(AdsbAltitudeTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private AdsbAltitudeType _altitudeType;
        public AdsbAltitudeType AltitudeType { get => _altitudeType; set => _altitudeType = value; } 
        /// <summary>
        /// The callsign, 8+null
        /// OriginName: callsign, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CallsignField = new Field.Builder()
            .Name(nameof(Callsign))
            .Title("callsign")
            .Description("The callsign, 8+null")

            .DataType(new ArrayType(CharType.Ascii,9))
        .Build();
        public const int CallsignMaxItemsCount = 9;
        public char[] Callsign { get; } = new char[9];
        [Obsolete("This method is deprecated. Use GetCallsignMaxItemsCount instead.")]
        public byte GetCallsignMaxItemsCount() => 9;
        /// <summary>
        /// ADSB emitter type.
        /// OriginName: emitter_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EmitterTypeField = new Field.Builder()
            .Name(nameof(EmitterType))
            .Title("emitter_type")
            .Description("ADSB emitter type.")
            .DataType(new UInt8Type(AdsbEmitterTypeHelper.GetValues(x=>(byte)x).Min(),AdsbEmitterTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(AdsbEmitterTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private AdsbEmitterType _emitterType;
        public AdsbEmitterType EmitterType { get => _emitterType; set => _emitterType = value; } 
        /// <summary>
        /// Time since last communication in seconds
        /// OriginName: tslc, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TslcField = new Field.Builder()
            .Name(nameof(Tslc))
            .Title("tslc")
            .Description("Time since last communication in seconds")
.Units(@"s")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _tslc;
        public byte Tslc { get => _tslc; set => _tslc = value; }
    }
    /// <summary>
    /// Information about a potential collision
    ///  COLLISION
    /// </summary>
    public class CollisionPacket : MavlinkV2Message<CollisionPayload>
    {
        public const int MessageId = 247;
        
        public const byte CrcExtra = 81;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CollisionPayload Payload { get; } = new();

        public override string Name => "COLLISION";
    }

    /// <summary>
    ///  COLLISION
    /// </summary>
    public class CollisionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 19; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 19; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t id
            +4 // float time_to_minimum_delta
            +4 // float altitude_minimum_delta
            +4 // float horizontal_minimum_delta
            + 1 // uint8_t src
            + 1 // uint8_t action
            + 1 // uint8_t threat_level
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Id = BinSerialize.ReadUInt(ref buffer);
            TimeToMinimumDelta = BinSerialize.ReadFloat(ref buffer);
            AltitudeMinimumDelta = BinSerialize.ReadFloat(ref buffer);
            HorizontalMinimumDelta = BinSerialize.ReadFloat(ref buffer);
            Src = (MavCollisionSrc)BinSerialize.ReadByte(ref buffer);
            Action = (MavCollisionAction)BinSerialize.ReadByte(ref buffer);
            ThreatLevel = (MavCollisionThreatLevel)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteFloat(ref buffer,TimeToMinimumDelta);
            BinSerialize.WriteFloat(ref buffer,AltitudeMinimumDelta);
            BinSerialize.WriteFloat(ref buffer,HorizontalMinimumDelta);
            BinSerialize.WriteByte(ref buffer,(byte)Src);
            BinSerialize.WriteByte(ref buffer,(byte)Action);
            BinSerialize.WriteByte(ref buffer,(byte)ThreatLevel);
            /* PayloadByteSize = 19 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,IdField, ref _id);    
            FloatType.Accept(visitor,TimeToMinimumDeltaField, ref _timeToMinimumDelta);    
            FloatType.Accept(visitor,AltitudeMinimumDeltaField, ref _altitudeMinimumDelta);    
            FloatType.Accept(visitor,HorizontalMinimumDeltaField, ref _horizontalMinimumDelta);    
            var tmpSrc = (byte)Src;
            UInt8Type.Accept(visitor,SrcField, ref tmpSrc);
            Src = (MavCollisionSrc)tmpSrc;
            var tmpAction = (byte)Action;
            UInt8Type.Accept(visitor,ActionField, ref tmpAction);
            Action = (MavCollisionAction)tmpAction;
            var tmpThreatLevel = (byte)ThreatLevel;
            UInt8Type.Accept(visitor,ThreatLevelField, ref tmpThreatLevel);
            ThreatLevel = (MavCollisionThreatLevel)tmpThreatLevel;

        }

        /// <summary>
        /// Unique identifier, domain based on src field
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Unique identifier, domain based on src field")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _id;
        public uint Id { get => _id; set => _id = value; }
        /// <summary>
        /// Estimated time until collision occurs
        /// OriginName: time_to_minimum_delta, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TimeToMinimumDeltaField = new Field.Builder()
            .Name(nameof(TimeToMinimumDelta))
            .Title("time_to_minimum_delta")
            .Description("Estimated time until collision occurs")
.Units(@"s")
            .DataType(FloatType.Default)
        .Build();
        private float _timeToMinimumDelta;
        public float TimeToMinimumDelta { get => _timeToMinimumDelta; set => _timeToMinimumDelta = value; }
        /// <summary>
        /// Closest vertical distance between vehicle and object
        /// OriginName: altitude_minimum_delta, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeMinimumDeltaField = new Field.Builder()
            .Name(nameof(AltitudeMinimumDelta))
            .Title("altitude_minimum_delta")
            .Description("Closest vertical distance between vehicle and object")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeMinimumDelta;
        public float AltitudeMinimumDelta { get => _altitudeMinimumDelta; set => _altitudeMinimumDelta = value; }
        /// <summary>
        /// Closest horizontal distance between vehicle and object
        /// OriginName: horizontal_minimum_delta, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field HorizontalMinimumDeltaField = new Field.Builder()
            .Name(nameof(HorizontalMinimumDelta))
            .Title("horizontal_minimum_delta")
            .Description("Closest horizontal distance between vehicle and object")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _horizontalMinimumDelta;
        public float HorizontalMinimumDelta { get => _horizontalMinimumDelta; set => _horizontalMinimumDelta = value; }
        /// <summary>
        /// Collision data source
        /// OriginName: src, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SrcField = new Field.Builder()
            .Name(nameof(Src))
            .Title("src")
            .Description("Collision data source")
            .DataType(new UInt8Type(MavCollisionSrcHelper.GetValues(x=>(byte)x).Min(),MavCollisionSrcHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavCollisionSrcHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavCollisionSrc _src;
        public MavCollisionSrc Src { get => _src; set => _src = value; } 
        /// <summary>
        /// Action that is being taken to avoid this collision
        /// OriginName: action, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ActionField = new Field.Builder()
            .Name(nameof(Action))
            .Title("action")
            .Description("Action that is being taken to avoid this collision")
            .DataType(new UInt8Type(MavCollisionActionHelper.GetValues(x=>(byte)x).Min(),MavCollisionActionHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavCollisionActionHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavCollisionAction _action;
        public MavCollisionAction Action { get => _action; set => _action = value; } 
        /// <summary>
        /// How concerned the aircraft is about this collision
        /// OriginName: threat_level, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ThreatLevelField = new Field.Builder()
            .Name(nameof(ThreatLevel))
            .Title("threat_level")
            .Description("How concerned the aircraft is about this collision")
            .DataType(new UInt8Type(MavCollisionThreatLevelHelper.GetValues(x=>(byte)x).Min(),MavCollisionThreatLevelHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavCollisionThreatLevelHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavCollisionThreatLevel _threatLevel;
        public MavCollisionThreatLevel ThreatLevel { get => _threatLevel; set => _threatLevel = value; } 
    }
    /// <summary>
    /// Message implementing parts of the V2 payload specs in V1 frames for transitional support.
    ///  V2_EXTENSION
    /// </summary>
    public class V2ExtensionPacket : MavlinkV2Message<V2ExtensionPayload>
    {
        public const int MessageId = 248;
        
        public const byte CrcExtra = 8;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override V2ExtensionPayload Payload { get; } = new();

        public override string Name => "V2_EXTENSION";
    }

    /// <summary>
    ///  V2_EXTENSION
    /// </summary>
    public class V2ExtensionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 254; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 254; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t message_type
            +1 // uint8_t target_network
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +Payload.Length // uint8_t[249] payload
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            MessageType = BinSerialize.ReadUShort(ref buffer);
            TargetNetwork = (byte)BinSerialize.ReadByte(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/249 - Math.Max(0,((/*PayloadByteSize*/254 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Payload[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,MessageType);
            BinSerialize.WriteByte(ref buffer,(byte)TargetNetwork);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<Payload.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Payload[i]);
            }
            /* PayloadByteSize = 254 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,MessageTypeField, ref _messageType);    
            UInt8Type.Accept(visitor,TargetNetworkField, ref _targetNetwork);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,PayloadField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Payload[index]));    

        }

        /// <summary>
        /// A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// OriginName: message_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MessageTypeField = new Field.Builder()
            .Name(nameof(MessageType))
            .Title("message_type")
            .Description("A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _messageType;
        public ushort MessageType { get => _messageType; set => _messageType = value; }
        /// <summary>
        /// Network ID (0 for broadcast)
        /// OriginName: target_network, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetNetworkField = new Field.Builder()
            .Name(nameof(TargetNetwork))
            .Title("target_network")
            .Description("Network ID (0 for broadcast)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetNetwork;
        public byte TargetNetwork { get => _targetNetwork; set => _targetNetwork = value; }
        /// <summary>
        /// System ID (0 for broadcast)
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast)
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification.
        /// OriginName: payload, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PayloadField = new Field.Builder()
            .Name(nameof(Payload))
            .Title("payload")
            .Description("Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification.")

            .DataType(new ArrayType(UInt8Type.Default,249))
        .Build();
        public const int PayloadMaxItemsCount = 249;
        public byte[] Payload { get; } = new byte[249];
        [Obsolete("This method is deprecated. Use GetPayloadMaxItemsCount instead.")]
        public byte GetPayloadMaxItemsCount() => 249;
    }
    /// <summary>
    /// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    ///  MEMORY_VECT
    /// </summary>
    public class MemoryVectPacket : MavlinkV2Message<MemoryVectPayload>
    {
        public const int MessageId = 249;
        
        public const byte CrcExtra = 204;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MemoryVectPayload Payload { get; } = new();

        public override string Name => "MEMORY_VECT";
    }

    /// <summary>
    ///  MEMORY_VECT
    /// </summary>
    public class MemoryVectPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 36; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 36; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t address
            +1 // uint8_t ver
            +1 // uint8_t type
            +Value.Length // int8_t[32] value
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Address = BinSerialize.ReadUShort(ref buffer);
            Ver = (byte)BinSerialize.ReadByte(ref buffer);
            Type = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/36 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Value[i] = (sbyte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Address);
            BinSerialize.WriteByte(ref buffer,(byte)Ver);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            for(var i=0;i<Value.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Value[i]);
            }
            /* PayloadByteSize = 36 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,AddressField, ref _address);    
            UInt8Type.Accept(visitor,VerField, ref _ver);    
            UInt8Type.Accept(visitor,TypeField, ref _type);    
            ArrayType.Accept(visitor,ValueField,  
                (index, v, f, t) => Int8Type.Accept(v, f, t, ref Value[index]));

        }

        /// <summary>
        /// Starting address of the debug variables
        /// OriginName: address, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AddressField = new Field.Builder()
            .Name(nameof(Address))
            .Title("address")
            .Description("Starting address of the debug variables")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _address;
        public ushort Address { get => _address; set => _address = value; }
        /// <summary>
        /// Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
        /// OriginName: ver, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VerField = new Field.Builder()
            .Name(nameof(Ver))
            .Title("ver")
            .Description("Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _ver;
        public byte Ver { get => _ver; set => _ver = value; }
        /// <summary>
        /// Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _type;
        public byte Type { get => _type; set => _type = value; }
        /// <summary>
        /// Memory contents at specified address
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ValueField = new Field.Builder()
            .Name(nameof(Value))
            .Title("value")
            .Description("Memory contents at specified address")

            .DataType(new ArrayType(Int8Type.Default,32))
        .Build();
        public const int ValueMaxItemsCount = 32;
        public sbyte[] Value { get; } = new sbyte[32];
        [Obsolete("This method is deprecated. Use GetValueMaxItemsCount instead.")]
        public byte GetValueMaxItemsCount() => 32;
    }
    /// <summary>
    /// To debug something using a named 3D vector.
    ///  DEBUG_VECT
    /// </summary>
    public class DebugVectPacket : MavlinkV2Message<DebugVectPayload>
    {
        public const int MessageId = 250;
        
        public const byte CrcExtra = 49;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override DebugVectPayload Payload { get; } = new();

        public override string Name => "DEBUG_VECT";
    }

    /// <summary>
    ///  DEBUG_VECT
    /// </summary>
    public class DebugVectPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 30; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 30; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float x
            +4 // float y
            +4 // float z
            +Name.Length // char[10] name
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/30 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 30 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// x
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("x")

            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// y
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("y")

            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// z
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("z")

            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Name
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("Name")

            .DataType(new ArrayType(CharType.Ascii,10))
        .Build();
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
    }
    /// <summary>
    /// Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    ///  NAMED_VALUE_FLOAT
    /// </summary>
    public class NamedValueFloatPacket : MavlinkV2Message<NamedValueFloatPayload>
    {
        public const int MessageId = 251;
        
        public const byte CrcExtra = 170;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override NamedValueFloatPayload Payload { get; } = new();

        public override string Name => "NAMED_VALUE_FLOAT";
    }

    /// <summary>
    ///  NAMED_VALUE_FLOAT
    /// </summary>
    public class NamedValueFloatPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float value
            +Name.Length // char[10] name
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Value = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/18 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Value);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 18 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,ValueField, ref _value);    
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Floating point value
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ValueField = new Field.Builder()
            .Name(nameof(Value))
            .Title("value")
            .Description("Floating point value")

            .DataType(FloatType.Default)
        .Build();
        private float _value;
        public float Value { get => _value; set => _value = value; }
        /// <summary>
        /// Name of the debug variable
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("Name of the debug variable")

            .DataType(new ArrayType(CharType.Ascii,10))
        .Build();
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
    }
    /// <summary>
    /// Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    ///  NAMED_VALUE_INT
    /// </summary>
    public class NamedValueIntPacket : MavlinkV2Message<NamedValueIntPayload>
    {
        public const int MessageId = 252;
        
        public const byte CrcExtra = 44;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override NamedValueIntPayload Payload { get; } = new();

        public override string Name => "NAMED_VALUE_INT";
    }

    /// <summary>
    ///  NAMED_VALUE_INT
    /// </summary>
    public class NamedValueIntPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // int32_t value
            +Name.Length // char[10] name
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Value = BinSerialize.ReadInt(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/18 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,Value);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 18 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int32Type.Accept(visitor,ValueField, ref _value);    
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Signed integer value
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ValueField = new Field.Builder()
            .Name(nameof(Value))
            .Title("value")
            .Description("Signed integer value")

            .DataType(Int32Type.Default)
        .Build();
        private int _value;
        public int Value { get => _value; set => _value = value; }
        /// <summary>
        /// Name of the debug variable
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("Name of the debug variable")

            .DataType(new ArrayType(CharType.Ascii,10))
        .Build();
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
    }
    /// <summary>
    /// Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
    ///  STATUSTEXT
    /// </summary>
    public class StatustextPacket : MavlinkV2Message<StatustextPayload>
    {
        public const int MessageId = 253;
        
        public const byte CrcExtra = 83;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override StatustextPayload Payload { get; } = new();

        public override string Name => "STATUSTEXT";
    }

    /// <summary>
    ///  STATUSTEXT
    /// </summary>
    public class StatustextPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 1 // uint8_t severity
            +Text.Length // char[50] text
            +2 // uint16_t id
            +1 // uint8_t chunk_seq
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Severity = (MavSeverity)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/50 - Math.Max(0,((/*PayloadByteSize*/54 - payloadSize - /*ExtendedFieldsLength*/3)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Text)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Text.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = BinSerialize.ReadUShort(ref buffer);
            // extended field 'ChunkSeq' can be empty
            if (buffer.IsEmpty) return;
            ChunkSeq = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)Severity);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Text)
                {
                    Encoding.ASCII.GetBytes(charPointer, Text.Length, bytePointer, Text.Length);
                }
            }
            buffer = buffer.Slice(Text.Length);
            
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)ChunkSeq);
            /* PayloadByteSize = 54 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpSeverity = (byte)Severity;
            UInt8Type.Accept(visitor,SeverityField, ref tmpSeverity);
            Severity = (MavSeverity)tmpSeverity;
            ArrayType.Accept(visitor,TextField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Text[index]));
            UInt16Type.Accept(visitor,IdField, ref _id);    
            UInt8Type.Accept(visitor,ChunkSeqField, ref _chunkSeq);    

        }

        /// <summary>
        /// Severity of status. Relies on the definitions within RFC-5424.
        /// OriginName: severity, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SeverityField = new Field.Builder()
            .Name(nameof(Severity))
            .Title("severity")
            .Description("Severity of status. Relies on the definitions within RFC-5424.")
            .DataType(new UInt8Type(MavSeverityHelper.GetValues(x=>(byte)x).Min(),MavSeverityHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavSeverityHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavSeverity _severity;
        public MavSeverity Severity { get => _severity; set => _severity = value; } 
        /// <summary>
        /// Status text message, without null termination character
        /// OriginName: text, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TextField = new Field.Builder()
            .Name(nameof(Text))
            .Title("text")
            .Description("Status text message, without null termination character")

            .DataType(new ArrayType(CharType.Ascii,50))
        .Build();
        public const int TextMaxItemsCount = 50;
        public char[] Text { get; } = new char[50];
        [Obsolete("This method is deprecated. Use GetTextMaxItemsCount instead.")]
        public byte GetTextMaxItemsCount() => 50;
        /// <summary>
        /// Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately.
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _id;
        public ushort Id { get => _id; set => _id = value; }
        /// <summary>
        /// This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk.
        /// OriginName: chunk_seq, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ChunkSeqField = new Field.Builder()
            .Name(nameof(ChunkSeq))
            .Title("chunk_seq")
            .Description("This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _chunkSeq;
        public byte ChunkSeq { get => _chunkSeq; set => _chunkSeq = value; }
    }
    /// <summary>
    /// Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
    ///  DEBUG
    /// </summary>
    public class DebugPacket : MavlinkV2Message<DebugPayload>
    {
        public const int MessageId = 254;
        
        public const byte CrcExtra = 46;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override DebugPayload Payload { get; } = new();

        public override string Name => "DEBUG";
    }

    /// <summary>
    ///  DEBUG
    /// </summary>
    public class DebugPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float value
            +1 // uint8_t ind
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Value = BinSerialize.ReadFloat(ref buffer);
            Ind = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Value);
            BinSerialize.WriteByte(ref buffer,(byte)Ind);
            /* PayloadByteSize = 9 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,ValueField, ref _value);    
            UInt8Type.Accept(visitor,IndField, ref _ind);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// DEBUG value
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ValueField = new Field.Builder()
            .Name(nameof(Value))
            .Title("value")
            .Description("DEBUG value")

            .DataType(FloatType.Default)
        .Build();
        private float _value;
        public float Value { get => _value; set => _value = value; }
        /// <summary>
        /// index of debug variable
        /// OriginName: ind, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IndField = new Field.Builder()
            .Name(nameof(Ind))
            .Title("ind")
            .Description("index of debug variable")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _ind;
        public byte Ind { get => _ind; set => _ind = value; }
    }
    /// <summary>
    /// Setup a MAVLink2 signing key. If called with secret_key of all zero and zero initial_timestamp will disable signing
    ///  SETUP_SIGNING
    /// </summary>
    public class SetupSigningPacket : MavlinkV2Message<SetupSigningPayload>
    {
        public const int MessageId = 256;
        
        public const byte CrcExtra = 71;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SetupSigningPayload Payload { get; } = new();

        public override string Name => "SETUP_SIGNING";
    }

    /// <summary>
    ///  SETUP_SIGNING
    /// </summary>
    public class SetupSigningPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t initial_timestamp
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +SecretKey.Length // uint8_t[32] secret_key
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            InitialTimestamp = BinSerialize.ReadULong(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/42 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                SecretKey[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,InitialTimestamp);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<SecretKey.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SecretKey[i]);
            }
            /* PayloadByteSize = 42 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,InitialTimestampField, ref _initialTimestamp);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,SecretKeyField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref SecretKey[index]));    

        }

        /// <summary>
        /// initial timestamp
        /// OriginName: initial_timestamp, Units: , IsExtended: false
        /// </summary>
        public static readonly Field InitialTimestampField = new Field.Builder()
            .Name(nameof(InitialTimestamp))
            .Title("initial_timestamp")
            .Description("initial timestamp")

            .DataType(UInt64Type.Default)
        .Build();
        private ulong _initialTimestamp;
        public ulong InitialTimestamp { get => _initialTimestamp; set => _initialTimestamp = value; }
        /// <summary>
        /// system id of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("system id of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("component ID of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// signing key
        /// OriginName: secret_key, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SecretKeyField = new Field.Builder()
            .Name(nameof(SecretKey))
            .Title("secret_key")
            .Description("signing key")

            .DataType(new ArrayType(UInt8Type.Default,32))
        .Build();
        public const int SecretKeyMaxItemsCount = 32;
        public byte[] SecretKey { get; } = new byte[32];
        [Obsolete("This method is deprecated. Use GetSecretKeyMaxItemsCount instead.")]
        public byte GetSecretKeyMaxItemsCount() => 32;
    }
    /// <summary>
    /// Report button state change.
    ///  BUTTON_CHANGE
    /// </summary>
    public class ButtonChangePacket : MavlinkV2Message<ButtonChangePayload>
    {
        public const int MessageId = 257;
        
        public const byte CrcExtra = 131;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ButtonChangePayload Payload { get; } = new();

        public override string Name => "BUTTON_CHANGE";
    }

    /// <summary>
    ///  BUTTON_CHANGE
    /// </summary>
    public class ButtonChangePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // uint32_t last_change_ms
            +1 // uint8_t state
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LastChangeMs = BinSerialize.ReadUInt(ref buffer);
            State = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,LastChangeMs);
            BinSerialize.WriteByte(ref buffer,(byte)State);
            /* PayloadByteSize = 9 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt32Type.Accept(visitor,LastChangeMsField, ref _lastChangeMs);    
            UInt8Type.Accept(visitor,StateField, ref _state);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Time of last change of button state.
        /// OriginName: last_change_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field LastChangeMsField = new Field.Builder()
            .Name(nameof(LastChangeMs))
            .Title("last_change_ms")
            .Description("Time of last change of button state.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _lastChangeMs;
        public uint LastChangeMs { get => _lastChangeMs; set => _lastChangeMs = value; }
        /// <summary>
        /// Bitmap for state of buttons.
        /// OriginName: state, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StateField = new Field.Builder()
            .Name(nameof(State))
            .Title("bitmask")
            .Description("Bitmap for state of buttons.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _state;
        public byte State { get => _state; set => _state = value; }
    }
    /// <summary>
    /// Control vehicle tone generation (buzzer).
    ///  PLAY_TUNE
    /// </summary>
    public class PlayTunePacket : MavlinkV2Message<PlayTunePayload>
    {
        public const int MessageId = 258;
        
        public const byte CrcExtra = 187;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override PlayTunePayload Payload { get; } = new();

        public override string Name => "PLAY_TUNE";
    }

    /// <summary>
    ///  PLAY_TUNE
    /// </summary>
    public class PlayTunePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 232; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 232; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +Tune.Length // char[30] tune
            +Tune2.Length // char[200] tune2
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/30 - Math.Max(0,((/*PayloadByteSize*/232 - payloadSize - /*ExtendedFieldsLength*/200)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Tune.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'Tune2' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 200;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune2)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Tune2.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetBytes(charPointer, Tune.Length, bytePointer, Tune.Length);
                }
            }
            buffer = buffer.Slice(Tune.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune2)
                {
                    Encoding.ASCII.GetBytes(charPointer, Tune2.Length, bytePointer, Tune2.Length);
                }
            }
            buffer = buffer.Slice(Tune2.Length);
            
            /* PayloadByteSize = 232 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,TuneField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Tune[index]));
            ArrayType.Accept(visitor,Tune2Field,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Tune2[index]));

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// tune in board specific format
        /// OriginName: tune, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TuneField = new Field.Builder()
            .Name(nameof(Tune))
            .Title("tune")
            .Description("tune in board specific format")

            .DataType(new ArrayType(CharType.Ascii,30))
        .Build();
        public const int TuneMaxItemsCount = 30;
        public char[] Tune { get; } = new char[30];
        [Obsolete("This method is deprecated. Use GetTuneMaxItemsCount instead.")]
        public byte GetTuneMaxItemsCount() => 30;
        /// <summary>
        /// tune extension (appended to tune)
        /// OriginName: tune2, Units: , IsExtended: true
        /// </summary>
        public static readonly Field Tune2Field = new Field.Builder()
            .Name(nameof(Tune2))
            .Title("tune2")
            .Description("tune extension (appended to tune)")

            .DataType(new ArrayType(CharType.Ascii,200))
        .Build();
        public const int Tune2MaxItemsCount = 200;
        public char[] Tune2 { get; } = new char[200];
    }
    /// <summary>
    /// Information about a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_INFORMATION
    /// </summary>
    public class CameraInformationPacket : MavlinkV2Message<CameraInformationPayload>
    {
        public const int MessageId = 259;
        
        public const byte CrcExtra = 92;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraInformationPayload Payload { get; } = new();

        public override string Name => "CAMERA_INFORMATION";
    }

    /// <summary>
    ///  CAMERA_INFORMATION
    /// </summary>
    public class CameraInformationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 236; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 236; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // uint32_t firmware_version
            +4 // float focal_length
            +4 // float sensor_size_h
            +4 // float sensor_size_v
            + 4 // uint32_t flags
            +2 // uint16_t resolution_h
            +2 // uint16_t resolution_v
            +2 // uint16_t cam_definition_version
            +VendorName.Length // uint8_t[32] vendor_name
            +ModelName.Length // uint8_t[32] model_name
            +1 // uint8_t lens_id
            +CamDefinitionUri.Length // char[140] cam_definition_uri
            +1 // uint8_t gimbal_device_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            FirmwareVersion = BinSerialize.ReadUInt(ref buffer);
            FocalLength = BinSerialize.ReadFloat(ref buffer);
            SensorSizeH = BinSerialize.ReadFloat(ref buffer);
            SensorSizeV = BinSerialize.ReadFloat(ref buffer);
            Flags = (CameraCapFlags)BinSerialize.ReadUInt(ref buffer);
            ResolutionH = BinSerialize.ReadUShort(ref buffer);
            ResolutionV = BinSerialize.ReadUShort(ref buffer);
            CamDefinitionVersion = BinSerialize.ReadUShort(ref buffer);
            arraySize = 32;
            for(var i=0;i<arraySize;i++)
            {
                VendorName[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 32;
            for(var i=0;i<arraySize;i++)
            {
                ModelName[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            LensId = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/140 - Math.Max(0,((/*PayloadByteSize*/236 - payloadSize - /*ExtendedFieldsLength*/1)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CamDefinitionUri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, CamDefinitionUri.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'GimbalDeviceId' can be empty
            if (buffer.IsEmpty) return;
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,FirmwareVersion);
            BinSerialize.WriteFloat(ref buffer,FocalLength);
            BinSerialize.WriteFloat(ref buffer,SensorSizeH);
            BinSerialize.WriteFloat(ref buffer,SensorSizeV);
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteUShort(ref buffer,ResolutionH);
            BinSerialize.WriteUShort(ref buffer,ResolutionV);
            BinSerialize.WriteUShort(ref buffer,CamDefinitionVersion);
            for(var i=0;i<VendorName.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)VendorName[i]);
            }
            for(var i=0;i<ModelName.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)ModelName[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)LensId);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CamDefinitionUri)
                {
                    Encoding.ASCII.GetBytes(charPointer, CamDefinitionUri.Length, bytePointer, CamDefinitionUri.Length);
                }
            }
            buffer = buffer.Slice(CamDefinitionUri.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 236 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt32Type.Accept(visitor,FirmwareVersionField, ref _firmwareVersion);    
            FloatType.Accept(visitor,FocalLengthField, ref _focalLength);    
            FloatType.Accept(visitor,SensorSizeHField, ref _sensorSizeH);    
            FloatType.Accept(visitor,SensorSizeVField, ref _sensorSizeV);    
            var tmpFlags = (uint)Flags;
            UInt32Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (CameraCapFlags)tmpFlags;
            UInt16Type.Accept(visitor,ResolutionHField, ref _resolutionH);    
            UInt16Type.Accept(visitor,ResolutionVField, ref _resolutionV);    
            UInt16Type.Accept(visitor,CamDefinitionVersionField, ref _camDefinitionVersion);    
            ArrayType.Accept(visitor,VendorNameField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref VendorName[index]));    
            ArrayType.Accept(visitor,ModelNameField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref ModelName[index]));    
            UInt8Type.Accept(visitor,LensIdField, ref _lensId);    
            ArrayType.Accept(visitor,CamDefinitionUriField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref CamDefinitionUri[index]));
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Version of the camera firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff). Use 0 if not known.
        /// OriginName: firmware_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FirmwareVersionField = new Field.Builder()
            .Name(nameof(FirmwareVersion))
            .Title("firmware_version")
            .Description("Version of the camera firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff). Use 0 if not known.")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _firmwareVersion;
        public uint FirmwareVersion { get => _firmwareVersion; set => _firmwareVersion = value; }
        /// <summary>
        /// Focal length. Use NaN if not known.
        /// OriginName: focal_length, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field FocalLengthField = new Field.Builder()
            .Name(nameof(FocalLength))
            .Title("focal_length")
            .Description("Focal length. Use NaN if not known.")
.Units(@"mm")
            .DataType(FloatType.Default)
        .Build();
        private float _focalLength;
        public float FocalLength { get => _focalLength; set => _focalLength = value; }
        /// <summary>
        /// Image sensor size horizontal. Use NaN if not known.
        /// OriginName: sensor_size_h, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field SensorSizeHField = new Field.Builder()
            .Name(nameof(SensorSizeH))
            .Title("sensor_size_h")
            .Description("Image sensor size horizontal. Use NaN if not known.")
.Units(@"mm")
            .DataType(FloatType.Default)
        .Build();
        private float _sensorSizeH;
        public float SensorSizeH { get => _sensorSizeH; set => _sensorSizeH = value; }
        /// <summary>
        /// Image sensor size vertical. Use NaN if not known.
        /// OriginName: sensor_size_v, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field SensorSizeVField = new Field.Builder()
            .Name(nameof(SensorSizeV))
            .Title("sensor_size_v")
            .Description("Image sensor size vertical. Use NaN if not known.")
.Units(@"mm")
            .DataType(FloatType.Default)
        .Build();
        private float _sensorSizeV;
        public float SensorSizeV { get => _sensorSizeV; set => _sensorSizeV = value; }
        /// <summary>
        /// Bitmap of camera capability flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Bitmap of camera capability flags.")
            .DataType(new UInt32Type(CameraCapFlagsHelper.GetValues(x=>(uint)x).Min(),CameraCapFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(CameraCapFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private CameraCapFlags _flags;
        public CameraCapFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Horizontal image resolution. Use 0 if not known.
        /// OriginName: resolution_h, Units: pix, IsExtended: false
        /// </summary>
        public static readonly Field ResolutionHField = new Field.Builder()
            .Name(nameof(ResolutionH))
            .Title("resolution_h")
            .Description("Horizontal image resolution. Use 0 if not known.")
.Units(@"pix")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _resolutionH;
        public ushort ResolutionH { get => _resolutionH; set => _resolutionH = value; }
        /// <summary>
        /// Vertical image resolution. Use 0 if not known.
        /// OriginName: resolution_v, Units: pix, IsExtended: false
        /// </summary>
        public static readonly Field ResolutionVField = new Field.Builder()
            .Name(nameof(ResolutionV))
            .Title("resolution_v")
            .Description("Vertical image resolution. Use 0 if not known.")
.Units(@"pix")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _resolutionV;
        public ushort ResolutionV { get => _resolutionV; set => _resolutionV = value; }
        /// <summary>
        /// Camera definition version (iteration).  Use 0 if not known.
        /// OriginName: cam_definition_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CamDefinitionVersionField = new Field.Builder()
            .Name(nameof(CamDefinitionVersion))
            .Title("cam_definition_version")
            .Description("Camera definition version (iteration).  Use 0 if not known.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _camDefinitionVersion;
        public ushort CamDefinitionVersion { get => _camDefinitionVersion; set => _camDefinitionVersion = value; }
        /// <summary>
        /// Name of the camera vendor
        /// OriginName: vendor_name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VendorNameField = new Field.Builder()
            .Name(nameof(VendorName))
            .Title("vendor_name")
            .Description("Name of the camera vendor")

            .DataType(new ArrayType(UInt8Type.Default,32))
        .Build();
        public const int VendorNameMaxItemsCount = 32;
        public byte[] VendorName { get; } = new byte[32];
        /// <summary>
        /// Name of the camera model
        /// OriginName: model_name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ModelNameField = new Field.Builder()
            .Name(nameof(ModelName))
            .Title("model_name")
            .Description("Name of the camera model")

            .DataType(new ArrayType(UInt8Type.Default,32))
        .Build();
        public const int ModelNameMaxItemsCount = 32;
        public byte[] ModelName { get; } = new byte[32];
        /// <summary>
        /// Reserved for a lens ID.  Use 0 if not known.
        /// OriginName: lens_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LensIdField = new Field.Builder()
            .Name(nameof(LensId))
            .Title("lens_id")
            .Description("Reserved for a lens ID.  Use 0 if not known.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _lensId;
        public byte LensId { get => _lensId; set => _lensId = value; }
        /// <summary>
        /// Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol). The definition file may be xz compressed, which will be indicated by the file extension .xml.xz (a GCS that implements the protocol must support decompressing the file). The string needs to be zero terminated.  Use a zero-length string if not known.
        /// OriginName: cam_definition_uri, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CamDefinitionUriField = new Field.Builder()
            .Name(nameof(CamDefinitionUri))
            .Title("cam_definition_uri")
            .Description("Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol). The definition file may be xz compressed, which will be indicated by the file extension .xml.xz (a GCS that implements the protocol must support decompressing the file). The string needs to be zero terminated.  Use a zero-length string if not known.")

            .DataType(new ArrayType(CharType.Ascii,140))
        .Build();
        public const int CamDefinitionUriMaxItemsCount = 140;
        public char[] CamDefinitionUri { get; } = new char[140];
        [Obsolete("This method is deprecated. Use GetCamDefinitionUriMaxItemsCount instead.")]
        public byte GetCamDefinitionUriMaxItemsCount() => 140;
        /// <summary>
        /// Gimbal id of a gimbal associated with this camera. This is the component id of the gimbal device, or 1-6 for non mavlink gimbals. Use 0 if no gimbal is associated with the camera.
        /// OriginName: gimbal_device_id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("Gimbal id of a gimbal associated with this camera. This is the component id of the gimbal device, or 1-6 for non mavlink gimbals. Use 0 if no gimbal is associated with the camera.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
    }
    /// <summary>
    /// Settings of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_SETTINGS
    /// </summary>
    public class CameraSettingsPacket : MavlinkV2Message<CameraSettingsPayload>
    {
        public const int MessageId = 260;
        
        public const byte CrcExtra = 146;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraSettingsPayload Payload { get; } = new();

        public override string Name => "CAMERA_SETTINGS";
    }

    /// <summary>
    ///  CAMERA_SETTINGS
    /// </summary>
    public class CameraSettingsPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 13; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 13; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            + 1 // uint8_t mode_id
            +4 // float zoomLevel
            +4 // float focusLevel
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            ModeId = (CameraMode)BinSerialize.ReadByte(ref buffer);
            // extended field 'Zoomlevel' can be empty
            if (buffer.IsEmpty) return;
            Zoomlevel = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Focuslevel' can be empty
            if (buffer.IsEmpty) return;
            Focuslevel = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteByte(ref buffer,(byte)ModeId);
            BinSerialize.WriteFloat(ref buffer,Zoomlevel);
            BinSerialize.WriteFloat(ref buffer,Focuslevel);
            /* PayloadByteSize = 13 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            var tmpModeId = (byte)ModeId;
            UInt8Type.Accept(visitor,ModeIdField, ref tmpModeId);
            ModeId = (CameraMode)tmpModeId;
            FloatType.Accept(visitor,ZoomlevelField, ref _zoomlevel);    
            FloatType.Accept(visitor,FocuslevelField, ref _focuslevel);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Camera mode
        /// OriginName: mode_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ModeIdField = new Field.Builder()
            .Name(nameof(ModeId))
            .Title("mode_id")
            .Description("Camera mode")
            .DataType(new UInt8Type(CameraModeHelper.GetValues(x=>(byte)x).Min(),CameraModeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CameraModeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CameraMode _modeId;
        public CameraMode ModeId { get => _modeId; set => _modeId = value; } 
        /// <summary>
        /// Current zoom level as a percentage of the full range (0.0 to 100.0, NaN if not known)
        /// OriginName: zoomLevel, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ZoomlevelField = new Field.Builder()
            .Name(nameof(Zoomlevel))
            .Title("zoomLevel")
            .Description("Current zoom level as a percentage of the full range (0.0 to 100.0, NaN if not known)")

            .DataType(FloatType.Default)
        .Build();
        private float _zoomlevel;
        public float Zoomlevel { get => _zoomlevel; set => _zoomlevel = value; }
        /// <summary>
        /// Current focus level as a percentage of the full range (0.0 to 100.0, NaN if not known)
        /// OriginName: focusLevel, Units: , IsExtended: true
        /// </summary>
        public static readonly Field FocuslevelField = new Field.Builder()
            .Name(nameof(Focuslevel))
            .Title("focusLevel")
            .Description("Current focus level as a percentage of the full range (0.0 to 100.0, NaN if not known)")

            .DataType(FloatType.Default)
        .Build();
        private float _focuslevel;
        public float Focuslevel { get => _focuslevel; set => _focuslevel = value; }
    }
    /// <summary>
    /// Information about a storage medium. This message is sent in response to a request with MAV_CMD_REQUEST_MESSAGE and whenever the status of the storage changes (STORAGE_STATUS). Use MAV_CMD_REQUEST_MESSAGE.param2 to indicate the index/id of requested storage: 0 for all, 1 for first, 2 for second, etc.
    ///  STORAGE_INFORMATION
    /// </summary>
    public class StorageInformationPacket : MavlinkV2Message<StorageInformationPayload>
    {
        public const int MessageId = 261;
        
        public const byte CrcExtra = 179;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override StorageInformationPayload Payload { get; } = new();

        public override string Name => "STORAGE_INFORMATION";
    }

    /// <summary>
    ///  STORAGE_INFORMATION
    /// </summary>
    public class StorageInformationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 61; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 61; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float total_capacity
            +4 // float used_capacity
            +4 // float available_capacity
            +4 // float read_speed
            +4 // float write_speed
            +1 // uint8_t storage_id
            +1 // uint8_t storage_count
            + 1 // uint8_t status
            + 1 // uint8_t type
            +Name.Length // char[32] name
            + 1 // uint8_t storage_usage
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            TotalCapacity = BinSerialize.ReadFloat(ref buffer);
            UsedCapacity = BinSerialize.ReadFloat(ref buffer);
            AvailableCapacity = BinSerialize.ReadFloat(ref buffer);
            ReadSpeed = BinSerialize.ReadFloat(ref buffer);
            WriteSpeed = BinSerialize.ReadFloat(ref buffer);
            StorageId = (byte)BinSerialize.ReadByte(ref buffer);
            StorageCount = (byte)BinSerialize.ReadByte(ref buffer);
            Status = (StorageStatus)BinSerialize.ReadByte(ref buffer);
            // extended field 'Type' can be empty
            if (buffer.IsEmpty) return;
            Type = (StorageType)BinSerialize.ReadByte(ref buffer);
            // extended field 'Name' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'StorageUsage' can be empty
            if (buffer.IsEmpty) return;
            StorageUsage = (StorageUsageFlag)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,TotalCapacity);
            BinSerialize.WriteFloat(ref buffer,UsedCapacity);
            BinSerialize.WriteFloat(ref buffer,AvailableCapacity);
            BinSerialize.WriteFloat(ref buffer,ReadSpeed);
            BinSerialize.WriteFloat(ref buffer,WriteSpeed);
            BinSerialize.WriteByte(ref buffer,(byte)StorageId);
            BinSerialize.WriteByte(ref buffer,(byte)StorageCount);
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)StorageUsage);
            /* PayloadByteSize = 61 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,TotalCapacityField, ref _totalCapacity);    
            FloatType.Accept(visitor,UsedCapacityField, ref _usedCapacity);    
            FloatType.Accept(visitor,AvailableCapacityField, ref _availableCapacity);    
            FloatType.Accept(visitor,ReadSpeedField, ref _readSpeed);    
            FloatType.Accept(visitor,WriteSpeedField, ref _writeSpeed);    
            UInt8Type.Accept(visitor,StorageIdField, ref _storageId);    
            UInt8Type.Accept(visitor,StorageCountField, ref _storageCount);    
            var tmpStatus = (byte)Status;
            UInt8Type.Accept(visitor,StatusField, ref tmpStatus);
            Status = (StorageStatus)tmpStatus;
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (StorageType)tmpType;
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));
            var tmpStorageUsage = (byte)StorageUsage;
            UInt8Type.Accept(visitor,StorageUsageField, ref tmpStorageUsage);
            StorageUsage = (StorageUsageFlag)tmpStorageUsage;

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// OriginName: total_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field TotalCapacityField = new Field.Builder()
            .Name(nameof(TotalCapacity))
            .Title("total_capacity")
            .Description("Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.")
.Units(@"MiB")
            .DataType(FloatType.Default)
        .Build();
        private float _totalCapacity;
        public float TotalCapacity { get => _totalCapacity; set => _totalCapacity = value; }
        /// <summary>
        /// Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// OriginName: used_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field UsedCapacityField = new Field.Builder()
            .Name(nameof(UsedCapacity))
            .Title("used_capacity")
            .Description("Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.")
.Units(@"MiB")
            .DataType(FloatType.Default)
        .Build();
        private float _usedCapacity;
        public float UsedCapacity { get => _usedCapacity; set => _usedCapacity = value; }
        /// <summary>
        /// Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// OriginName: available_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field AvailableCapacityField = new Field.Builder()
            .Name(nameof(AvailableCapacity))
            .Title("available_capacity")
            .Description("Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.")
.Units(@"MiB")
            .DataType(FloatType.Default)
        .Build();
        private float _availableCapacity;
        public float AvailableCapacity { get => _availableCapacity; set => _availableCapacity = value; }
        /// <summary>
        /// Read speed.
        /// OriginName: read_speed, Units: MiB/s, IsExtended: false
        /// </summary>
        public static readonly Field ReadSpeedField = new Field.Builder()
            .Name(nameof(ReadSpeed))
            .Title("read_speed")
            .Description("Read speed.")
.Units(@"MiB/s")
            .DataType(FloatType.Default)
        .Build();
        private float _readSpeed;
        public float ReadSpeed { get => _readSpeed; set => _readSpeed = value; }
        /// <summary>
        /// Write speed.
        /// OriginName: write_speed, Units: MiB/s, IsExtended: false
        /// </summary>
        public static readonly Field WriteSpeedField = new Field.Builder()
            .Name(nameof(WriteSpeed))
            .Title("write_speed")
            .Description("Write speed.")
.Units(@"MiB/s")
            .DataType(FloatType.Default)
        .Build();
        private float _writeSpeed;
        public float WriteSpeed { get => _writeSpeed; set => _writeSpeed = value; }
        /// <summary>
        /// Storage ID (1 for first, 2 for second, etc.)
        /// OriginName: storage_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StorageIdField = new Field.Builder()
            .Name(nameof(StorageId))
            .Title("storage_id")
            .Description("Storage ID (1 for first, 2 for second, etc.)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _storageId;
        public byte StorageId { get => _storageId; set => _storageId = value; }
        /// <summary>
        /// Number of storage devices
        /// OriginName: storage_count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StorageCountField = new Field.Builder()
            .Name(nameof(StorageCount))
            .Title("storage_count")
            .Description("Number of storage devices")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _storageCount;
        public byte StorageCount { get => _storageCount; set => _storageCount = value; }
        /// <summary>
        /// Status of storage
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StatusField = new Field.Builder()
            .Name(nameof(Status))
            .Title("status")
            .Description("Status of storage")
            .DataType(new UInt8Type(StorageStatusHelper.GetValues(x=>(byte)x).Min(),StorageStatusHelper.GetValues(x=>(byte)x).Max()))
            .Enum(StorageStatusHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private StorageStatus _status;
        public StorageStatus Status { get => _status; set => _status = value; } 
        /// <summary>
        /// Type of storage
        /// OriginName: type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of storage")
            .DataType(new UInt8Type(StorageTypeHelper.GetValues(x=>(byte)x).Min(),StorageTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(StorageTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private StorageType _type;
        public StorageType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Textual storage name to be used in UI (microSD 1, Internal Memory, etc.) This is a NULL terminated string. If it is exactly 32 characters long, add a terminating NULL. If this string is empty, the generic type is shown to the user.
        /// OriginName: name, Units: , IsExtended: true
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("Textual storage name to be used in UI (microSD 1, Internal Memory, etc.) This is a NULL terminated string. If it is exactly 32 characters long, add a terminating NULL. If this string is empty, the generic type is shown to the user.")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int NameMaxItemsCount = 32;
        public char[] Name { get; } = new char[32];
        /// <summary>
        /// Flags indicating whether this instance is preferred storage for photos, videos, etc.
        ///         Note: Implementations should initially set the flags on the system-default storage id used for saving media (if possible/supported).
        ///         This setting can then be overridden using MAV_CMD_SET_STORAGE_USAGE.
        ///         If the media usage flags are not set, a GCS may assume storage ID 1 is the default storage for all media types.
        /// OriginName: storage_usage, Units: , IsExtended: true
        /// </summary>
        public static readonly Field StorageUsageField = new Field.Builder()
            .Name(nameof(StorageUsage))
            .Title("storage_usage")
            .Description("Flags indicating whether this instance is preferred storage for photos, videos, etc.         Note: Implementations should initially set the flags on the system-default storage id used for saving media (if possible/supported).         This setting can then be overridden using MAV_CMD_SET_STORAGE_USAGE.         If the media usage flags are not set, a GCS may assume storage ID 1 is the default storage for all media types.")
            .DataType(new UInt8Type(StorageUsageFlagHelper.GetValues(x=>(byte)x).Min(),StorageUsageFlagHelper.GetValues(x=>(byte)x).Max()))
            .Enum(StorageUsageFlagHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private StorageUsageFlag _storageUsage;
        public StorageUsageFlag StorageUsage { get => _storageUsage; set => _storageUsage = value; } 
    }
    /// <summary>
    /// Information about the status of a capture. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_CAPTURE_STATUS
    /// </summary>
    public class CameraCaptureStatusPacket : MavlinkV2Message<CameraCaptureStatusPayload>
    {
        public const int MessageId = 262;
        
        public const byte CrcExtra = 12;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraCaptureStatusPayload Payload { get; } = new();

        public override string Name => "CAMERA_CAPTURE_STATUS";
    }

    /// <summary>
    ///  CAMERA_CAPTURE_STATUS
    /// </summary>
    public class CameraCaptureStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float image_interval
            +4 // uint32_t recording_time_ms
            +4 // float available_capacity
            +1 // uint8_t image_status
            +1 // uint8_t video_status
            +4 // int32_t image_count
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            ImageInterval = BinSerialize.ReadFloat(ref buffer);
            RecordingTimeMs = BinSerialize.ReadUInt(ref buffer);
            AvailableCapacity = BinSerialize.ReadFloat(ref buffer);
            ImageStatus = (byte)BinSerialize.ReadByte(ref buffer);
            VideoStatus = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'ImageCount' can be empty
            if (buffer.IsEmpty) return;
            ImageCount = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,ImageInterval);
            BinSerialize.WriteUInt(ref buffer,RecordingTimeMs);
            BinSerialize.WriteFloat(ref buffer,AvailableCapacity);
            BinSerialize.WriteByte(ref buffer,(byte)ImageStatus);
            BinSerialize.WriteByte(ref buffer,(byte)VideoStatus);
            BinSerialize.WriteInt(ref buffer,ImageCount);
            /* PayloadByteSize = 22 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,ImageIntervalField, ref _imageInterval);    
            UInt32Type.Accept(visitor,RecordingTimeMsField, ref _recordingTimeMs);    
            FloatType.Accept(visitor,AvailableCapacityField, ref _availableCapacity);    
            UInt8Type.Accept(visitor,ImageStatusField, ref _imageStatus);    
            UInt8Type.Accept(visitor,VideoStatusField, ref _videoStatus);    
            Int32Type.Accept(visitor,ImageCountField, ref _imageCount);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Image capture interval
        /// OriginName: image_interval, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field ImageIntervalField = new Field.Builder()
            .Name(nameof(ImageInterval))
            .Title("image_interval")
            .Description("Image capture interval")
.Units(@"s")
            .DataType(FloatType.Default)
        .Build();
        private float _imageInterval;
        public float ImageInterval { get => _imageInterval; set => _imageInterval = value; }
        /// <summary>
        /// Elapsed time since recording started (0: Not supported/available). A GCS should compute recording time and use non-zero values of this field to correct any discrepancy.
        /// OriginName: recording_time_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field RecordingTimeMsField = new Field.Builder()
            .Name(nameof(RecordingTimeMs))
            .Title("recording_time_ms")
            .Description("Elapsed time since recording started (0: Not supported/available). A GCS should compute recording time and use non-zero values of this field to correct any discrepancy.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _recordingTimeMs;
        public uint RecordingTimeMs { get => _recordingTimeMs; set => _recordingTimeMs = value; }
        /// <summary>
        /// Available storage capacity.
        /// OriginName: available_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field AvailableCapacityField = new Field.Builder()
            .Name(nameof(AvailableCapacity))
            .Title("available_capacity")
            .Description("Available storage capacity.")
.Units(@"MiB")
            .DataType(FloatType.Default)
        .Build();
        private float _availableCapacity;
        public float AvailableCapacity { get => _availableCapacity; set => _availableCapacity = value; }
        /// <summary>
        /// Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress)
        /// OriginName: image_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ImageStatusField = new Field.Builder()
            .Name(nameof(ImageStatus))
            .Title("image_status")
            .Description("Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _imageStatus;
        public byte ImageStatus { get => _imageStatus; set => _imageStatus = value; }
        /// <summary>
        /// Current status of video capturing (0: idle, 1: capture in progress)
        /// OriginName: video_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VideoStatusField = new Field.Builder()
            .Name(nameof(VideoStatus))
            .Title("video_status")
            .Description("Current status of video capturing (0: idle, 1: capture in progress)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _videoStatus;
        public byte VideoStatus { get => _videoStatus; set => _videoStatus = value; }
        /// <summary>
        /// Total number of images captured ('forever', or until reset using MAV_CMD_STORAGE_FORMAT).
        /// OriginName: image_count, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ImageCountField = new Field.Builder()
            .Name(nameof(ImageCount))
            .Title("image_count")
            .Description("Total number of images captured ('forever', or until reset using MAV_CMD_STORAGE_FORMAT).")

            .DataType(Int32Type.Default)
        .Build();
        private int _imageCount;
        public int ImageCount { get => _imageCount; set => _imageCount = value; }
    }
    /// <summary>
    /// Information about a captured image. This is emitted every time a message is captured.
    ///         MAV_CMD_REQUEST_MESSAGE can be used to (re)request this message for a specific sequence number or range of sequence numbers:
    ///         MAV_CMD_REQUEST_MESSAGE.param2 indicates the sequence number the first image to send, or set to -1 to send the message for all sequence numbers.
    ///         MAV_CMD_REQUEST_MESSAGE.param3 is used to specify a range of messages to send:
    ///         set to 0 (default) to send just the the message for the sequence number in param 2,
    ///         set to -1 to send the message for the sequence number in param 2 and all the following sequence numbers,
    ///         set to the sequence number of the final message in the range.
    ///  CAMERA_IMAGE_CAPTURED
    /// </summary>
    public class CameraImageCapturedPacket : MavlinkV2Message<CameraImageCapturedPayload>
    {
        public const int MessageId = 263;
        
        public const byte CrcExtra = 133;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraImageCapturedPayload Payload { get; } = new();

        public override string Name => "CAMERA_IMAGE_CAPTURED";
    }

    /// <summary>
    ///  CAMERA_IMAGE_CAPTURED
    /// </summary>
    public class CameraImageCapturedPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_utc
            +4 // uint32_t time_boot_ms
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +4 // int32_t relative_alt
            +Q.Length * 4 // float[4] q
            +4 // int32_t image_index
            +1 // uint8_t camera_id
            +1 // int8_t capture_result
            +FileUrl.Length // char[205] file_url
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUtc = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ImageIndex = BinSerialize.ReadInt(ref buffer);
            CameraId = (byte)BinSerialize.ReadByte(ref buffer);
            CaptureResult = (sbyte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/205 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = FileUrl)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, FileUrl.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUtc);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteInt(ref buffer,ImageIndex);
            BinSerialize.WriteByte(ref buffer,(byte)CameraId);
            BinSerialize.WriteByte(ref buffer,(byte)CaptureResult);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = FileUrl)
                {
                    Encoding.ASCII.GetBytes(charPointer, FileUrl.Length, bytePointer, FileUrl.Length);
                }
            }
            buffer = buffer.Slice(FileUrl.Length);
            
            /* PayloadByteSize = 255 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUtcField, ref _timeUtc);    
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            Int32Type.Accept(visitor,RelativeAltField, ref _relativeAlt);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            Int32Type.Accept(visitor,ImageIndexField, ref _imageIndex);    
            UInt8Type.Accept(visitor,CameraIdField, ref _cameraId);    
            Int8Type.Accept(visitor,CaptureResultField, ref _captureResult);                
            ArrayType.Accept(visitor,FileUrlField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref FileUrl[index]));

        }

        /// <summary>
        /// Timestamp (time since UNIX epoch) in UTC. 0 for unknown.
        /// OriginName: time_utc, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUtcField = new Field.Builder()
            .Name(nameof(TimeUtc))
            .Title("time_utc")
            .Description("Timestamp (time since UNIX epoch) in UTC. 0 for unknown.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUtc;
        public ulong TimeUtc { get => _timeUtc; set => _timeUtc = value; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Latitude where image was taken
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude where image was taken")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude where capture was taken
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude where capture was taken")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (MSL) where image was taken
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (MSL) where image was taken")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field RelativeAltField = new Field.Builder()
            .Name(nameof(RelativeAlt))
            .Title("relative_alt")
            .Description("Altitude above ground")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _relativeAlt;
        public int RelativeAlt { get => _relativeAlt; set => _relativeAlt = value; }
        /// <summary>
        /// Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1)
        /// OriginName: image_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ImageIndexField = new Field.Builder()
            .Name(nameof(ImageIndex))
            .Title("image_index")
            .Description("Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1)")

            .DataType(Int32Type.Default)
        .Build();
        private int _imageIndex;
        public int ImageIndex { get => _imageIndex; set => _imageIndex = value; }
        /// <summary>
        /// Deprecated/unused. Component IDs are used to differentiate multiple cameras.
        /// OriginName: camera_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CameraIdField = new Field.Builder()
            .Name(nameof(CameraId))
            .Title("camera_id")
            .Description("Deprecated/unused. Component IDs are used to differentiate multiple cameras.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _cameraId;
        public byte CameraId { get => _cameraId; set => _cameraId = value; }
        /// <summary>
        /// Boolean indicating success (1) or failure (0) while capturing this image.
        /// OriginName: capture_result, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CaptureResultField = new Field.Builder()
            .Name(nameof(CaptureResult))
            .Title("capture_result")
            .Description("Boolean indicating success (1) or failure (0) while capturing this image.")

            .DataType(Int8Type.Default)
        .Build();
        private sbyte _captureResult;
        public sbyte CaptureResult { get => _captureResult; set => _captureResult = value; }
        /// <summary>
        /// URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.
        /// OriginName: file_url, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FileUrlField = new Field.Builder()
            .Name(nameof(FileUrl))
            .Title("file_url")
            .Description("URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.")

            .DataType(new ArrayType(CharType.Ascii,205))
        .Build();
        public const int FileUrlMaxItemsCount = 205;
        public char[] FileUrl { get; } = new char[205];
        [Obsolete("This method is deprecated. Use GetFileUrlMaxItemsCount instead.")]
        public byte GetFileUrlMaxItemsCount() => 205;
    }
    /// <summary>
    /// Information about flight since last arming.
    ///         This can be requested using MAV_CMD_REQUEST_MESSAGE.
    ///       
    ///  FLIGHT_INFORMATION
    /// </summary>
    public class FlightInformationPacket : MavlinkV2Message<FlightInformationPayload>
    {
        public const int MessageId = 264;
        
        public const byte CrcExtra = 49;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override FlightInformationPayload Payload { get; } = new();

        public override string Name => "FLIGHT_INFORMATION";
    }

    /// <summary>
    ///  FLIGHT_INFORMATION
    /// </summary>
    public class FlightInformationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t arming_time_utc
            +8 // uint64_t takeoff_time_utc
            +8 // uint64_t flight_uuid
            +4 // uint32_t time_boot_ms
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            ArmingTimeUtc = BinSerialize.ReadULong(ref buffer);
            TakeoffTimeUtc = BinSerialize.ReadULong(ref buffer);
            FlightUuid = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,ArmingTimeUtc);
            BinSerialize.WriteULong(ref buffer,TakeoffTimeUtc);
            BinSerialize.WriteULong(ref buffer,FlightUuid);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            /* PayloadByteSize = 28 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,ArmingTimeUtcField, ref _armingTimeUtc);    
            UInt64Type.Accept(visitor,TakeoffTimeUtcField, ref _takeoffTimeUtc);    
            UInt64Type.Accept(visitor,FlightUuidField, ref _flightUuid);    
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    

        }

        /// <summary>
        /// Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown
        /// OriginName: arming_time_utc, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field ArmingTimeUtcField = new Field.Builder()
            .Name(nameof(ArmingTimeUtc))
            .Title("arming_time_utc")
            .Description("Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _armingTimeUtc;
        public ulong ArmingTimeUtc { get => _armingTimeUtc; set => _armingTimeUtc = value; }
        /// <summary>
        /// Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown
        /// OriginName: takeoff_time_utc, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TakeoffTimeUtcField = new Field.Builder()
            .Name(nameof(TakeoffTimeUtc))
            .Title("takeoff_time_utc")
            .Description("Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _takeoffTimeUtc;
        public ulong TakeoffTimeUtc { get => _takeoffTimeUtc; set => _takeoffTimeUtc = value; }
        /// <summary>
        /// Universally unique identifier (UUID) of flight, should correspond to name of log files
        /// OriginName: flight_uuid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlightUuidField = new Field.Builder()
            .Name(nameof(FlightUuid))
            .Title("flight_uuid")
            .Description("Universally unique identifier (UUID) of flight, should correspond to name of log files")

            .DataType(UInt64Type.Default)
        .Build();
        private ulong _flightUuid;
        public ulong FlightUuid { get => _flightUuid; set => _flightUuid = value; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
    }
    /// <summary>
    /// Orientation of a mount
    ///  MOUNT_ORIENTATION
    /// </summary>
    public class MountOrientationPacket : MavlinkV2Message<MountOrientationPayload>
    {
        public const int MessageId = 265;
        
        public const byte CrcExtra = 26;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override MountOrientationPayload Payload { get; } = new();

        public override string Name => "MOUNT_ORIENTATION";
    }

    /// <summary>
    ///  MOUNT_ORIENTATION
    /// </summary>
    public class MountOrientationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // float roll
            +4 // float pitch
            +4 // float yaw
            +4 // float yaw_absolute
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'YawAbsolute' can be empty
            if (buffer.IsEmpty) return;
            YawAbsolute = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawAbsolute);
            /* PayloadByteSize = 20 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            FloatType.Accept(visitor,RollField, ref _roll);    
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,YawAbsoluteField, ref _yawAbsolute);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Roll in global frame (set to NaN for invalid).
        /// OriginName: roll, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field RollField = new Field.Builder()
            .Name(nameof(Roll))
            .Title("roll")
            .Description("Roll in global frame (set to NaN for invalid).")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _roll;
        public float Roll { get => _roll; set => _roll = value; }
        /// <summary>
        /// Pitch in global frame (set to NaN for invalid).
        /// OriginName: pitch, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch in global frame (set to NaN for invalid).")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw relative to vehicle (set to NaN for invalid).
        /// OriginName: yaw, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw relative to vehicle (set to NaN for invalid).")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid).
        /// OriginName: yaw_absolute, Units: deg, IsExtended: true
        /// </summary>
        public static readonly Field YawAbsoluteField = new Field.Builder()
            .Name(nameof(YawAbsolute))
            .Title("yaw_absolute")
            .Description("Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid).")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _yawAbsolute;
        public float YawAbsolute { get => _yawAbsolute; set => _yawAbsolute = value; }
    }
    /// <summary>
    /// A message containing logged data (see also MAV_CMD_LOGGING_START)
    ///  LOGGING_DATA
    /// </summary>
    public class LoggingDataPacket : MavlinkV2Message<LoggingDataPayload>
    {
        public const int MessageId = 266;
        
        public const byte CrcExtra = 193;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LoggingDataPayload Payload { get; } = new();

        public override string Name => "LOGGING_DATA";
    }

    /// <summary>
    ///  LOGGING_DATA
    /// </summary>
    public class LoggingDataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t sequence
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t length
            +1 // uint8_t first_message_offset
            +Data.Length // uint8_t[249] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Sequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Length = (byte)BinSerialize.ReadByte(ref buffer);
            FirstMessageOffset = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/249 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Length);
            BinSerialize.WriteByte(ref buffer,(byte)FirstMessageOffset);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 255 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SequenceField, ref _sequence);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,LengthField, ref _length);    
            UInt8Type.Accept(visitor,FirstMessageOffsetField, ref _firstMessageOffset);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// sequence number (can wrap)
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SequenceField = new Field.Builder()
            .Name(nameof(Sequence))
            .Title("sequence")
            .Description("sequence number (can wrap)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _sequence;
        public ushort Sequence { get => _sequence; set => _sequence = value; }
        /// <summary>
        /// system ID of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("system ID of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("component ID of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// data length
        /// OriginName: length, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field LengthField = new Field.Builder()
            .Name(nameof(Length))
            .Title("length")
            .Description("data length")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _length;
        public byte Length { get => _length; set => _length = value; }
        /// <summary>
        /// offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to UINT8_MAX if no start exists).
        /// OriginName: first_message_offset, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field FirstMessageOffsetField = new Field.Builder()
            .Name(nameof(FirstMessageOffset))
            .Title("first_message_offset")
            .Description("offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to UINT8_MAX if no start exists).")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _firstMessageOffset;
        public byte FirstMessageOffset { get => _firstMessageOffset; set => _firstMessageOffset = value; }
        /// <summary>
        /// logged data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("logged data")

            .DataType(new ArrayType(UInt8Type.Default,249))
        .Build();
        public const int DataMaxItemsCount = 249;
        public byte[] Data { get; } = new byte[249];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 249;
    }
    /// <summary>
    /// A message containing logged data which requires a LOGGING_ACK to be sent back
    ///  LOGGING_DATA_ACKED
    /// </summary>
    public class LoggingDataAckedPacket : MavlinkV2Message<LoggingDataAckedPayload>
    {
        public const int MessageId = 267;
        
        public const byte CrcExtra = 35;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LoggingDataAckedPayload Payload { get; } = new();

        public override string Name => "LOGGING_DATA_ACKED";
    }

    /// <summary>
    ///  LOGGING_DATA_ACKED
    /// </summary>
    public class LoggingDataAckedPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t sequence
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t length
            +1 // uint8_t first_message_offset
            +Data.Length // uint8_t[249] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Sequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Length = (byte)BinSerialize.ReadByte(ref buffer);
            FirstMessageOffset = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/249 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Length);
            BinSerialize.WriteByte(ref buffer,(byte)FirstMessageOffset);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 255 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SequenceField, ref _sequence);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,LengthField, ref _length);    
            UInt8Type.Accept(visitor,FirstMessageOffsetField, ref _firstMessageOffset);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// sequence number (can wrap)
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SequenceField = new Field.Builder()
            .Name(nameof(Sequence))
            .Title("sequence")
            .Description("sequence number (can wrap)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _sequence;
        public ushort Sequence { get => _sequence; set => _sequence = value; }
        /// <summary>
        /// system ID of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("system ID of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("component ID of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// data length
        /// OriginName: length, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field LengthField = new Field.Builder()
            .Name(nameof(Length))
            .Title("length")
            .Description("data length")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _length;
        public byte Length { get => _length; set => _length = value; }
        /// <summary>
        /// offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to UINT8_MAX if no start exists).
        /// OriginName: first_message_offset, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field FirstMessageOffsetField = new Field.Builder()
            .Name(nameof(FirstMessageOffset))
            .Title("first_message_offset")
            .Description("offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to UINT8_MAX if no start exists).")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _firstMessageOffset;
        public byte FirstMessageOffset { get => _firstMessageOffset; set => _firstMessageOffset = value; }
        /// <summary>
        /// logged data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("logged data")

            .DataType(new ArrayType(UInt8Type.Default,249))
        .Build();
        public const int DataMaxItemsCount = 249;
        public byte[] Data { get; } = new byte[249];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 249;
    }
    /// <summary>
    /// An ack for a LOGGING_DATA_ACKED message
    ///  LOGGING_ACK
    /// </summary>
    public class LoggingAckPacket : MavlinkV2Message<LoggingAckPayload>
    {
        public const int MessageId = 268;
        
        public const byte CrcExtra = 14;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override LoggingAckPayload Payload { get; } = new();

        public override string Name => "LOGGING_ACK";
    }

    /// <summary>
    ///  LOGGING_ACK
    /// </summary>
    public class LoggingAckPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t sequence
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Sequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 4 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SequenceField, ref _sequence);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// sequence number (must match the one in LOGGING_DATA_ACKED)
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SequenceField = new Field.Builder()
            .Name(nameof(Sequence))
            .Title("sequence")
            .Description("sequence number (must match the one in LOGGING_DATA_ACKED)")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _sequence;
        public ushort Sequence { get => _sequence; set => _sequence = value; }
        /// <summary>
        /// system ID of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("system ID of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("component ID of the target")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Information about video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE, where param2 indicates the video stream id: 0 for all streams, 1 for first, 2 for second, etc.
    ///  VIDEO_STREAM_INFORMATION
    /// </summary>
    public class VideoStreamInformationPacket : MavlinkV2Message<VideoStreamInformationPayload>
    {
        public const int MessageId = 269;
        
        public const byte CrcExtra = 109;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override VideoStreamInformationPayload Payload { get; } = new();

        public override string Name => "VIDEO_STREAM_INFORMATION";
    }

    /// <summary>
    ///  VIDEO_STREAM_INFORMATION
    /// </summary>
    public class VideoStreamInformationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 213; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 213; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float framerate
            +4 // uint32_t bitrate
            + 2 // uint16_t flags
            +2 // uint16_t resolution_h
            +2 // uint16_t resolution_v
            +2 // uint16_t rotation
            +2 // uint16_t hfov
            +1 // uint8_t stream_id
            +1 // uint8_t count
            + 1 // uint8_t type
            +Name.Length // char[32] name
            +Uri.Length // char[160] uri
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Framerate = BinSerialize.ReadFloat(ref buffer);
            Bitrate = BinSerialize.ReadUInt(ref buffer);
            Flags = (VideoStreamStatusFlags)BinSerialize.ReadUShort(ref buffer);
            ResolutionH = BinSerialize.ReadUShort(ref buffer);
            ResolutionV = BinSerialize.ReadUShort(ref buffer);
            Rotation = BinSerialize.ReadUShort(ref buffer);
            Hfov = BinSerialize.ReadUShort(ref buffer);
            StreamId = (byte)BinSerialize.ReadByte(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            Type = (VideoStreamType)BinSerialize.ReadByte(ref buffer);
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/160 - Math.Max(0,((/*PayloadByteSize*/213 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Uri.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Framerate);
            BinSerialize.WriteUInt(ref buffer,Bitrate);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteUShort(ref buffer,ResolutionH);
            BinSerialize.WriteUShort(ref buffer,ResolutionV);
            BinSerialize.WriteUShort(ref buffer,Rotation);
            BinSerialize.WriteUShort(ref buffer,Hfov);
            BinSerialize.WriteByte(ref buffer,(byte)StreamId);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetBytes(charPointer, Uri.Length, bytePointer, Uri.Length);
                }
            }
            buffer = buffer.Slice(Uri.Length);
            
            /* PayloadByteSize = 213 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,FramerateField, ref _framerate);    
            UInt32Type.Accept(visitor,BitrateField, ref _bitrate);    
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (VideoStreamStatusFlags)tmpFlags;
            UInt16Type.Accept(visitor,ResolutionHField, ref _resolutionH);    
            UInt16Type.Accept(visitor,ResolutionVField, ref _resolutionV);    
            UInt16Type.Accept(visitor,RotationField, ref _rotation);    
            UInt16Type.Accept(visitor,HfovField, ref _hfov);    
            UInt8Type.Accept(visitor,StreamIdField, ref _streamId);    
            UInt8Type.Accept(visitor,CountField, ref _count);    
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (VideoStreamType)tmpType;
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));
            ArrayType.Accept(visitor,UriField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Uri[index]));

        }

        /// <summary>
        /// Frame rate.
        /// OriginName: framerate, Units: Hz, IsExtended: false
        /// </summary>
        public static readonly Field FramerateField = new Field.Builder()
            .Name(nameof(Framerate))
            .Title("framerate")
            .Description("Frame rate.")
.Units(@"Hz")
            .DataType(FloatType.Default)
        .Build();
        private float _framerate;
        public float Framerate { get => _framerate; set => _framerate = value; }
        /// <summary>
        /// Bit rate.
        /// OriginName: bitrate, Units: bits/s, IsExtended: false
        /// </summary>
        public static readonly Field BitrateField = new Field.Builder()
            .Name(nameof(Bitrate))
            .Title("bitrate")
            .Description("Bit rate.")
.Units(@"bits/s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _bitrate;
        public uint Bitrate { get => _bitrate; set => _bitrate = value; }
        /// <summary>
        /// Bitmap of stream status flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("flags")
            .Description("Bitmap of stream status flags.")
            .DataType(new UInt16Type(VideoStreamStatusFlagsHelper.GetValues(x=>(ushort)x).Min(),VideoStreamStatusFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(VideoStreamStatusFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private VideoStreamStatusFlags _flags;
        public VideoStreamStatusFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Horizontal resolution.
        /// OriginName: resolution_h, Units: pix, IsExtended: false
        /// </summary>
        public static readonly Field ResolutionHField = new Field.Builder()
            .Name(nameof(ResolutionH))
            .Title("resolution_h")
            .Description("Horizontal resolution.")
.Units(@"pix")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _resolutionH;
        public ushort ResolutionH { get => _resolutionH; set => _resolutionH = value; }
        /// <summary>
        /// Vertical resolution.
        /// OriginName: resolution_v, Units: pix, IsExtended: false
        /// </summary>
        public static readonly Field ResolutionVField = new Field.Builder()
            .Name(nameof(ResolutionV))
            .Title("resolution_v")
            .Description("Vertical resolution.")
.Units(@"pix")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _resolutionV;
        public ushort ResolutionV { get => _resolutionV; set => _resolutionV = value; }
        /// <summary>
        /// Video image rotation clockwise.
        /// OriginName: rotation, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field RotationField = new Field.Builder()
            .Name(nameof(Rotation))
            .Title("rotation")
            .Description("Video image rotation clockwise.")
.Units(@"deg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _rotation;
        public ushort Rotation { get => _rotation; set => _rotation = value; }
        /// <summary>
        /// Horizontal Field of view.
        /// OriginName: hfov, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field HfovField = new Field.Builder()
            .Name(nameof(Hfov))
            .Title("hfov")
            .Description("Horizontal Field of view.")
.Units(@"deg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _hfov;
        public ushort Hfov { get => _hfov; set => _hfov = value; }
        /// <summary>
        /// Video Stream ID (1 for first, 2 for second, etc.)
        /// OriginName: stream_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StreamIdField = new Field.Builder()
            .Name(nameof(StreamId))
            .Title("stream_id")
            .Description("Video Stream ID (1 for first, 2 for second, etc.)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _streamId;
        public byte StreamId { get => _streamId; set => _streamId = value; }
        /// <summary>
        /// Number of streams available.
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CountField = new Field.Builder()
            .Name(nameof(Count))
            .Title("count")
            .Description("Number of streams available.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _count;
        public byte Count { get => _count; set => _count = value; }
        /// <summary>
        /// Type of stream.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of stream.")
            .DataType(new UInt8Type(VideoStreamTypeHelper.GetValues(x=>(byte)x).Min(),VideoStreamTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(VideoStreamTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private VideoStreamType _type;
        public VideoStreamType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Stream name.
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("Stream name.")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int NameMaxItemsCount = 32;
        public char[] Name { get; } = new char[32];
        /// <summary>
        /// Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to).
        /// OriginName: uri, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UriField = new Field.Builder()
            .Name(nameof(Uri))
            .Title("uri")
            .Description("Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to).")

            .DataType(new ArrayType(CharType.Ascii,160))
        .Build();
        public const int UriMaxItemsCount = 160;
        public char[] Uri { get; } = new char[160];
        [Obsolete("This method is deprecated. Use GetUriMaxItemsCount instead.")]
        public byte GetUriMaxItemsCount() => 160;
    }
    /// <summary>
    /// Information about the status of a video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE.
    ///  VIDEO_STREAM_STATUS
    /// </summary>
    public class VideoStreamStatusPacket : MavlinkV2Message<VideoStreamStatusPayload>
    {
        public const int MessageId = 270;
        
        public const byte CrcExtra = 59;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override VideoStreamStatusPayload Payload { get; } = new();

        public override string Name => "VIDEO_STREAM_STATUS";
    }

    /// <summary>
    ///  VIDEO_STREAM_STATUS
    /// </summary>
    public class VideoStreamStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 19; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 19; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float framerate
            +4 // uint32_t bitrate
            + 2 // uint16_t flags
            +2 // uint16_t resolution_h
            +2 // uint16_t resolution_v
            +2 // uint16_t rotation
            +2 // uint16_t hfov
            +1 // uint8_t stream_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Framerate = BinSerialize.ReadFloat(ref buffer);
            Bitrate = BinSerialize.ReadUInt(ref buffer);
            Flags = (VideoStreamStatusFlags)BinSerialize.ReadUShort(ref buffer);
            ResolutionH = BinSerialize.ReadUShort(ref buffer);
            ResolutionV = BinSerialize.ReadUShort(ref buffer);
            Rotation = BinSerialize.ReadUShort(ref buffer);
            Hfov = BinSerialize.ReadUShort(ref buffer);
            StreamId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Framerate);
            BinSerialize.WriteUInt(ref buffer,Bitrate);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteUShort(ref buffer,ResolutionH);
            BinSerialize.WriteUShort(ref buffer,ResolutionV);
            BinSerialize.WriteUShort(ref buffer,Rotation);
            BinSerialize.WriteUShort(ref buffer,Hfov);
            BinSerialize.WriteByte(ref buffer,(byte)StreamId);
            /* PayloadByteSize = 19 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,FramerateField, ref _framerate);    
            UInt32Type.Accept(visitor,BitrateField, ref _bitrate);    
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (VideoStreamStatusFlags)tmpFlags;
            UInt16Type.Accept(visitor,ResolutionHField, ref _resolutionH);    
            UInt16Type.Accept(visitor,ResolutionVField, ref _resolutionV);    
            UInt16Type.Accept(visitor,RotationField, ref _rotation);    
            UInt16Type.Accept(visitor,HfovField, ref _hfov);    
            UInt8Type.Accept(visitor,StreamIdField, ref _streamId);    

        }

        /// <summary>
        /// Frame rate
        /// OriginName: framerate, Units: Hz, IsExtended: false
        /// </summary>
        public static readonly Field FramerateField = new Field.Builder()
            .Name(nameof(Framerate))
            .Title("framerate")
            .Description("Frame rate")
.Units(@"Hz")
            .DataType(FloatType.Default)
        .Build();
        private float _framerate;
        public float Framerate { get => _framerate; set => _framerate = value; }
        /// <summary>
        /// Bit rate
        /// OriginName: bitrate, Units: bits/s, IsExtended: false
        /// </summary>
        public static readonly Field BitrateField = new Field.Builder()
            .Name(nameof(Bitrate))
            .Title("bitrate")
            .Description("Bit rate")
.Units(@"bits/s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _bitrate;
        public uint Bitrate { get => _bitrate; set => _bitrate = value; }
        /// <summary>
        /// Bitmap of stream status flags
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("flags")
            .Description("Bitmap of stream status flags")
            .DataType(new UInt16Type(VideoStreamStatusFlagsHelper.GetValues(x=>(ushort)x).Min(),VideoStreamStatusFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(VideoStreamStatusFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private VideoStreamStatusFlags _flags;
        public VideoStreamStatusFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Horizontal resolution
        /// OriginName: resolution_h, Units: pix, IsExtended: false
        /// </summary>
        public static readonly Field ResolutionHField = new Field.Builder()
            .Name(nameof(ResolutionH))
            .Title("resolution_h")
            .Description("Horizontal resolution")
.Units(@"pix")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _resolutionH;
        public ushort ResolutionH { get => _resolutionH; set => _resolutionH = value; }
        /// <summary>
        /// Vertical resolution
        /// OriginName: resolution_v, Units: pix, IsExtended: false
        /// </summary>
        public static readonly Field ResolutionVField = new Field.Builder()
            .Name(nameof(ResolutionV))
            .Title("resolution_v")
            .Description("Vertical resolution")
.Units(@"pix")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _resolutionV;
        public ushort ResolutionV { get => _resolutionV; set => _resolutionV = value; }
        /// <summary>
        /// Video image rotation clockwise
        /// OriginName: rotation, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field RotationField = new Field.Builder()
            .Name(nameof(Rotation))
            .Title("rotation")
            .Description("Video image rotation clockwise")
.Units(@"deg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _rotation;
        public ushort Rotation { get => _rotation; set => _rotation = value; }
        /// <summary>
        /// Horizontal Field of view
        /// OriginName: hfov, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field HfovField = new Field.Builder()
            .Name(nameof(Hfov))
            .Title("hfov")
            .Description("Horizontal Field of view")
.Units(@"deg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _hfov;
        public ushort Hfov { get => _hfov; set => _hfov = value; }
        /// <summary>
        /// Video Stream ID (1 for first, 2 for second, etc.)
        /// OriginName: stream_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StreamIdField = new Field.Builder()
            .Name(nameof(StreamId))
            .Title("stream_id")
            .Description("Video Stream ID (1 for first, 2 for second, etc.)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _streamId;
        public byte StreamId { get => _streamId; set => _streamId = value; }
    }
    /// <summary>
    /// Information about the field of view of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_FOV_STATUS
    /// </summary>
    public class CameraFovStatusPacket : MavlinkV2Message<CameraFovStatusPayload>
    {
        public const int MessageId = 271;
        
        public const byte CrcExtra = 22;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraFovStatusPayload Payload { get; } = new();

        public override string Name => "CAMERA_FOV_STATUS";
    }

    /// <summary>
    ///  CAMERA_FOV_STATUS
    /// </summary>
    public class CameraFovStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 52; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 52; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // int32_t lat_camera
            +4 // int32_t lon_camera
            +4 // int32_t alt_camera
            +4 // int32_t lat_image
            +4 // int32_t lon_image
            +4 // int32_t alt_image
            +Q.Length * 4 // float[4] q
            +4 // float hfov
            +4 // float vfov
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LatCamera = BinSerialize.ReadInt(ref buffer);
            LonCamera = BinSerialize.ReadInt(ref buffer);
            AltCamera = BinSerialize.ReadInt(ref buffer);
            LatImage = BinSerialize.ReadInt(ref buffer);
            LonImage = BinSerialize.ReadInt(ref buffer);
            AltImage = BinSerialize.ReadInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/52 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Hfov = BinSerialize.ReadFloat(ref buffer);
            Vfov = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,LatCamera);
            BinSerialize.WriteInt(ref buffer,LonCamera);
            BinSerialize.WriteInt(ref buffer,AltCamera);
            BinSerialize.WriteInt(ref buffer,LatImage);
            BinSerialize.WriteInt(ref buffer,LonImage);
            BinSerialize.WriteInt(ref buffer,AltImage);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Hfov);
            BinSerialize.WriteFloat(ref buffer,Vfov);
            /* PayloadByteSize = 52 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            Int32Type.Accept(visitor,LatCameraField, ref _latCamera);    
            Int32Type.Accept(visitor,LonCameraField, ref _lonCamera);    
            Int32Type.Accept(visitor,AltCameraField, ref _altCamera);    
            Int32Type.Accept(visitor,LatImageField, ref _latImage);    
            Int32Type.Accept(visitor,LonImageField, ref _lonImage);    
            Int32Type.Accept(visitor,AltImageField, ref _altImage);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,HfovField, ref _hfov);    
            FloatType.Accept(visitor,VfovField, ref _vfov);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Latitude of camera (INT32_MAX if unknown).
        /// OriginName: lat_camera, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatCameraField = new Field.Builder()
            .Name(nameof(LatCamera))
            .Title("lat_camera")
            .Description("Latitude of camera (INT32_MAX if unknown).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latCamera;
        public int LatCamera { get => _latCamera; set => _latCamera = value; }
        /// <summary>
        /// Longitude of camera (INT32_MAX if unknown).
        /// OriginName: lon_camera, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonCameraField = new Field.Builder()
            .Name(nameof(LonCamera))
            .Title("lon_camera")
            .Description("Longitude of camera (INT32_MAX if unknown).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lonCamera;
        public int LonCamera { get => _lonCamera; set => _lonCamera = value; }
        /// <summary>
        /// Altitude (MSL) of camera (INT32_MAX if unknown).
        /// OriginName: alt_camera, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltCameraField = new Field.Builder()
            .Name(nameof(AltCamera))
            .Title("alt_camera")
            .Description("Altitude (MSL) of camera (INT32_MAX if unknown).")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altCamera;
        public int AltCamera { get => _altCamera; set => _altCamera = value; }
        /// <summary>
        /// Latitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).
        /// OriginName: lat_image, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatImageField = new Field.Builder()
            .Name(nameof(LatImage))
            .Title("lat_image")
            .Description("Latitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latImage;
        public int LatImage { get => _latImage; set => _latImage = value; }
        /// <summary>
        /// Longitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).
        /// OriginName: lon_image, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonImageField = new Field.Builder()
            .Name(nameof(LonImage))
            .Title("lon_image")
            .Description("Longitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lonImage;
        public int LonImage { get => _lonImage; set => _lonImage = value; }
        /// <summary>
        /// Altitude (MSL) of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).
        /// OriginName: alt_image, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltImageField = new Field.Builder()
            .Name(nameof(AltImage))
            .Title("alt_image")
            .Description("Altitude (MSL) of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _altImage;
        public int AltImage { get => _altImage; set => _altImage = value; }
        /// <summary>
        /// Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Horizontal field of view (NaN if unknown).
        /// OriginName: hfov, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field HfovField = new Field.Builder()
            .Name(nameof(Hfov))
            .Title("hfov")
            .Description("Horizontal field of view (NaN if unknown).")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _hfov;
        public float Hfov { get => _hfov; set => _hfov = value; }
        /// <summary>
        /// Vertical field of view (NaN if unknown).
        /// OriginName: vfov, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field VfovField = new Field.Builder()
            .Name(nameof(Vfov))
            .Title("vfov")
            .Description("Vertical field of view (NaN if unknown).")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _vfov;
        public float Vfov { get => _vfov; set => _vfov = value; }
    }
    /// <summary>
    /// Camera tracking status, sent while in active tracking. Use MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.
    ///  CAMERA_TRACKING_IMAGE_STATUS
    /// </summary>
    public class CameraTrackingImageStatusPacket : MavlinkV2Message<CameraTrackingImageStatusPayload>
    {
        public const int MessageId = 275;
        
        public const byte CrcExtra = 126;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraTrackingImageStatusPayload Payload { get; } = new();

        public override string Name => "CAMERA_TRACKING_IMAGE_STATUS";
    }

    /// <summary>
    ///  CAMERA_TRACKING_IMAGE_STATUS
    /// </summary>
    public class CameraTrackingImageStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 31; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 31; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float point_x
            +4 // float point_y
            +4 // float radius
            +4 // float rec_top_x
            +4 // float rec_top_y
            +4 // float rec_bottom_x
            +4 // float rec_bottom_y
            + 1 // uint8_t tracking_status
            + 1 // uint8_t tracking_mode
            + 1 // uint8_t target_data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            PointX = BinSerialize.ReadFloat(ref buffer);
            PointY = BinSerialize.ReadFloat(ref buffer);
            Radius = BinSerialize.ReadFloat(ref buffer);
            RecTopX = BinSerialize.ReadFloat(ref buffer);
            RecTopY = BinSerialize.ReadFloat(ref buffer);
            RecBottomX = BinSerialize.ReadFloat(ref buffer);
            RecBottomY = BinSerialize.ReadFloat(ref buffer);
            TrackingStatus = (CameraTrackingStatusFlags)BinSerialize.ReadByte(ref buffer);
            TrackingMode = (CameraTrackingMode)BinSerialize.ReadByte(ref buffer);
            TargetData = (CameraTrackingTargetData)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,PointX);
            BinSerialize.WriteFloat(ref buffer,PointY);
            BinSerialize.WriteFloat(ref buffer,Radius);
            BinSerialize.WriteFloat(ref buffer,RecTopX);
            BinSerialize.WriteFloat(ref buffer,RecTopY);
            BinSerialize.WriteFloat(ref buffer,RecBottomX);
            BinSerialize.WriteFloat(ref buffer,RecBottomY);
            BinSerialize.WriteByte(ref buffer,(byte)TrackingStatus);
            BinSerialize.WriteByte(ref buffer,(byte)TrackingMode);
            BinSerialize.WriteByte(ref buffer,(byte)TargetData);
            /* PayloadByteSize = 31 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,PointXField, ref _pointX);    
            FloatType.Accept(visitor,PointYField, ref _pointY);    
            FloatType.Accept(visitor,RadiusField, ref _radius);    
            FloatType.Accept(visitor,RecTopXField, ref _recTopX);    
            FloatType.Accept(visitor,RecTopYField, ref _recTopY);    
            FloatType.Accept(visitor,RecBottomXField, ref _recBottomX);    
            FloatType.Accept(visitor,RecBottomYField, ref _recBottomY);    
            var tmpTrackingStatus = (byte)TrackingStatus;
            UInt8Type.Accept(visitor,TrackingStatusField, ref tmpTrackingStatus);
            TrackingStatus = (CameraTrackingStatusFlags)tmpTrackingStatus;
            var tmpTrackingMode = (byte)TrackingMode;
            UInt8Type.Accept(visitor,TrackingModeField, ref tmpTrackingMode);
            TrackingMode = (CameraTrackingMode)tmpTrackingMode;
            var tmpTargetData = (byte)TargetData;
            UInt8Type.Accept(visitor,TargetDataField, ref tmpTargetData);
            TargetData = (CameraTrackingTargetData)tmpTargetData;

        }

        /// <summary>
        /// Current tracked point x value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is left, 1 is right), NAN if unknown
        /// OriginName: point_x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PointXField = new Field.Builder()
            .Name(nameof(PointX))
            .Title("point_x")
            .Description("Current tracked point x value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is left, 1 is right), NAN if unknown")

            .DataType(FloatType.Default)
        .Build();
        private float _pointX;
        public float PointX { get => _pointX; set => _pointX = value; }
        /// <summary>
        /// Current tracked point y value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown
        /// OriginName: point_y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PointYField = new Field.Builder()
            .Name(nameof(PointY))
            .Title("point_y")
            .Description("Current tracked point y value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown")

            .DataType(FloatType.Default)
        .Build();
        private float _pointY;
        public float PointY { get => _pointY; set => _pointY = value; }
        /// <summary>
        /// Current tracked radius if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is image left, 1 is image right), NAN if unknown
        /// OriginName: radius, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RadiusField = new Field.Builder()
            .Name(nameof(Radius))
            .Title("radius")
            .Description("Current tracked radius if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is image left, 1 is image right), NAN if unknown")

            .DataType(FloatType.Default)
        .Build();
        private float _radius;
        public float Radius { get => _radius; set => _radius = value; }
        /// <summary>
        /// Current tracked rectangle top x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown
        /// OriginName: rec_top_x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RecTopXField = new Field.Builder()
            .Name(nameof(RecTopX))
            .Title("rec_top_x")
            .Description("Current tracked rectangle top x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown")

            .DataType(FloatType.Default)
        .Build();
        private float _recTopX;
        public float RecTopX { get => _recTopX; set => _recTopX = value; }
        /// <summary>
        /// Current tracked rectangle top y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown
        /// OriginName: rec_top_y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RecTopYField = new Field.Builder()
            .Name(nameof(RecTopY))
            .Title("rec_top_y")
            .Description("Current tracked rectangle top y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown")

            .DataType(FloatType.Default)
        .Build();
        private float _recTopY;
        public float RecTopY { get => _recTopY; set => _recTopY = value; }
        /// <summary>
        /// Current tracked rectangle bottom x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown
        /// OriginName: rec_bottom_x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RecBottomXField = new Field.Builder()
            .Name(nameof(RecBottomX))
            .Title("rec_bottom_x")
            .Description("Current tracked rectangle bottom x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown")

            .DataType(FloatType.Default)
        .Build();
        private float _recBottomX;
        public float RecBottomX { get => _recBottomX; set => _recBottomX = value; }
        /// <summary>
        /// Current tracked rectangle bottom y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown
        /// OriginName: rec_bottom_y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RecBottomYField = new Field.Builder()
            .Name(nameof(RecBottomY))
            .Title("rec_bottom_y")
            .Description("Current tracked rectangle bottom y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown")

            .DataType(FloatType.Default)
        .Build();
        private float _recBottomY;
        public float RecBottomY { get => _recBottomY; set => _recBottomY = value; }
        /// <summary>
        /// Current tracking status
        /// OriginName: tracking_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TrackingStatusField = new Field.Builder()
            .Name(nameof(TrackingStatus))
            .Title("tracking_status")
            .Description("Current tracking status")
            .DataType(new UInt8Type(CameraTrackingStatusFlagsHelper.GetValues(x=>(byte)x).Min(),CameraTrackingStatusFlagsHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CameraTrackingStatusFlagsHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CameraTrackingStatusFlags _trackingStatus;
        public CameraTrackingStatusFlags TrackingStatus { get => _trackingStatus; set => _trackingStatus = value; } 
        /// <summary>
        /// Current tracking mode
        /// OriginName: tracking_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TrackingModeField = new Field.Builder()
            .Name(nameof(TrackingMode))
            .Title("tracking_mode")
            .Description("Current tracking mode")
            .DataType(new UInt8Type(CameraTrackingModeHelper.GetValues(x=>(byte)x).Min(),CameraTrackingModeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CameraTrackingModeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CameraTrackingMode _trackingMode;
        public CameraTrackingMode TrackingMode { get => _trackingMode; set => _trackingMode = value; } 
        /// <summary>
        /// Defines location of target data
        /// OriginName: target_data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetDataField = new Field.Builder()
            .Name(nameof(TargetData))
            .Title("target_data")
            .Description("Defines location of target data")
            .DataType(new UInt8Type(CameraTrackingTargetDataHelper.GetValues(x=>(byte)x).Min(),CameraTrackingTargetDataHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CameraTrackingTargetDataHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CameraTrackingTargetData _targetData;
        public CameraTrackingTargetData TargetData { get => _targetData; set => _targetData = value; } 
    }
    /// <summary>
    /// Camera tracking status, sent while in active tracking. Use MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.
    ///  CAMERA_TRACKING_GEO_STATUS
    /// </summary>
    public class CameraTrackingGeoStatusPacket : MavlinkV2Message<CameraTrackingGeoStatusPayload>
    {
        public const int MessageId = 276;
        
        public const byte CrcExtra = 18;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CameraTrackingGeoStatusPayload Payload { get; } = new();

        public override string Name => "CAMERA_TRACKING_GEO_STATUS";
    }

    /// <summary>
    ///  CAMERA_TRACKING_GEO_STATUS
    /// </summary>
    public class CameraTrackingGeoStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 49; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 49; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // float alt
            +4 // float h_acc
            +4 // float v_acc
            +4 // float vel_n
            +4 // float vel_e
            +4 // float vel_d
            +4 // float vel_acc
            +4 // float dist
            +4 // float hdg
            +4 // float hdg_acc
            + 1 // uint8_t tracking_status
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            HAcc = BinSerialize.ReadFloat(ref buffer);
            VAcc = BinSerialize.ReadFloat(ref buffer);
            VelN = BinSerialize.ReadFloat(ref buffer);
            VelE = BinSerialize.ReadFloat(ref buffer);
            VelD = BinSerialize.ReadFloat(ref buffer);
            VelAcc = BinSerialize.ReadFloat(ref buffer);
            Dist = BinSerialize.ReadFloat(ref buffer);
            Hdg = BinSerialize.ReadFloat(ref buffer);
            HdgAcc = BinSerialize.ReadFloat(ref buffer);
            TrackingStatus = (CameraTrackingStatusFlags)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,HAcc);
            BinSerialize.WriteFloat(ref buffer,VAcc);
            BinSerialize.WriteFloat(ref buffer,VelN);
            BinSerialize.WriteFloat(ref buffer,VelE);
            BinSerialize.WriteFloat(ref buffer,VelD);
            BinSerialize.WriteFloat(ref buffer,VelAcc);
            BinSerialize.WriteFloat(ref buffer,Dist);
            BinSerialize.WriteFloat(ref buffer,Hdg);
            BinSerialize.WriteFloat(ref buffer,HdgAcc);
            BinSerialize.WriteByte(ref buffer,(byte)TrackingStatus);
            /* PayloadByteSize = 49 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            FloatType.Accept(visitor,AltField, ref _alt);    
            FloatType.Accept(visitor,HAccField, ref _hAcc);    
            FloatType.Accept(visitor,VAccField, ref _vAcc);    
            FloatType.Accept(visitor,VelNField, ref _velN);    
            FloatType.Accept(visitor,VelEField, ref _velE);    
            FloatType.Accept(visitor,VelDField, ref _velD);    
            FloatType.Accept(visitor,VelAccField, ref _velAcc);    
            FloatType.Accept(visitor,DistField, ref _dist);    
            FloatType.Accept(visitor,HdgField, ref _hdg);    
            FloatType.Accept(visitor,HdgAccField, ref _hdgAcc);    
            var tmpTrackingStatus = (byte)TrackingStatus;
            UInt8Type.Accept(visitor,TrackingStatusField, ref tmpTrackingStatus);
            TrackingStatus = (CameraTrackingStatusFlags)tmpTrackingStatus;

        }

        /// <summary>
        /// Latitude of tracked object
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude of tracked object")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude of tracked object
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude of tracked object")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude of tracked object(AMSL, WGS84)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude of tracked object(AMSL, WGS84)")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _alt;
        public float Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Horizontal accuracy. NAN if unknown
        /// OriginName: h_acc, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field HAccField = new Field.Builder()
            .Name(nameof(HAcc))
            .Title("h_acc")
            .Description("Horizontal accuracy. NAN if unknown")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _hAcc;
        public float HAcc { get => _hAcc; set => _hAcc = value; }
        /// <summary>
        /// Vertical accuracy. NAN if unknown
        /// OriginName: v_acc, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field VAccField = new Field.Builder()
            .Name(nameof(VAcc))
            .Title("v_acc")
            .Description("Vertical accuracy. NAN if unknown")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _vAcc;
        public float VAcc { get => _vAcc; set => _vAcc = value; }
        /// <summary>
        /// North velocity of tracked object. NAN if unknown
        /// OriginName: vel_n, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelNField = new Field.Builder()
            .Name(nameof(VelN))
            .Title("vel_n")
            .Description("North velocity of tracked object. NAN if unknown")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _velN;
        public float VelN { get => _velN; set => _velN = value; }
        /// <summary>
        /// East velocity of tracked object. NAN if unknown
        /// OriginName: vel_e, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelEField = new Field.Builder()
            .Name(nameof(VelE))
            .Title("vel_e")
            .Description("East velocity of tracked object. NAN if unknown")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _velE;
        public float VelE { get => _velE; set => _velE = value; }
        /// <summary>
        /// Down velocity of tracked object. NAN if unknown
        /// OriginName: vel_d, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelDField = new Field.Builder()
            .Name(nameof(VelD))
            .Title("vel_d")
            .Description("Down velocity of tracked object. NAN if unknown")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _velD;
        public float VelD { get => _velD; set => _velD = value; }
        /// <summary>
        /// Velocity accuracy. NAN if unknown
        /// OriginName: vel_acc, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelAccField = new Field.Builder()
            .Name(nameof(VelAcc))
            .Title("vel_acc")
            .Description("Velocity accuracy. NAN if unknown")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _velAcc;
        public float VelAcc { get => _velAcc; set => _velAcc = value; }
        /// <summary>
        /// Distance between camera and tracked object. NAN if unknown
        /// OriginName: dist, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DistField = new Field.Builder()
            .Name(nameof(Dist))
            .Title("dist")
            .Description("Distance between camera and tracked object. NAN if unknown")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _dist;
        public float Dist { get => _dist; set => _dist = value; }
        /// <summary>
        /// Heading in radians, in NED. NAN if unknown
        /// OriginName: hdg, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field HdgField = new Field.Builder()
            .Name(nameof(Hdg))
            .Title("hdg")
            .Description("Heading in radians, in NED. NAN if unknown")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _hdg;
        public float Hdg { get => _hdg; set => _hdg = value; }
        /// <summary>
        /// Accuracy of heading, in NED. NAN if unknown
        /// OriginName: hdg_acc, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field HdgAccField = new Field.Builder()
            .Name(nameof(HdgAcc))
            .Title("hdg_acc")
            .Description("Accuracy of heading, in NED. NAN if unknown")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _hdgAcc;
        public float HdgAcc { get => _hdgAcc; set => _hdgAcc = value; }
        /// <summary>
        /// Current tracking status
        /// OriginName: tracking_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TrackingStatusField = new Field.Builder()
            .Name(nameof(TrackingStatus))
            .Title("tracking_status")
            .Description("Current tracking status")
            .DataType(new UInt8Type(CameraTrackingStatusFlagsHelper.GetValues(x=>(byte)x).Min(),CameraTrackingStatusFlagsHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CameraTrackingStatusFlagsHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CameraTrackingStatusFlags _trackingStatus;
        public CameraTrackingStatusFlags TrackingStatus { get => _trackingStatus; set => _trackingStatus = value; } 
    }
    /// <summary>
    /// Information about a high level gimbal manager. This message should be requested by a ground station using MAV_CMD_REQUEST_MESSAGE.
    ///  GIMBAL_MANAGER_INFORMATION
    /// </summary>
    public class GimbalManagerInformationPacket : MavlinkV2Message<GimbalManagerInformationPayload>
    {
        public const int MessageId = 280;
        
        public const byte CrcExtra = 70;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalManagerInformationPayload Payload { get; } = new();

        public override string Name => "GIMBAL_MANAGER_INFORMATION";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_INFORMATION
    /// </summary>
    public class GimbalManagerInformationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 33; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 33; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            + 4 // uint32_t cap_flags
            +4 // float roll_min
            +4 // float roll_max
            +4 // float pitch_min
            +4 // float pitch_max
            +4 // float yaw_min
            +4 // float yaw_max
            +1 // uint8_t gimbal_device_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            CapFlags = (GimbalManagerCapFlags)BinSerialize.ReadUInt(ref buffer);
            RollMin = BinSerialize.ReadFloat(ref buffer);
            RollMax = BinSerialize.ReadFloat(ref buffer);
            PitchMin = BinSerialize.ReadFloat(ref buffer);
            PitchMax = BinSerialize.ReadFloat(ref buffer);
            YawMin = BinSerialize.ReadFloat(ref buffer);
            YawMax = BinSerialize.ReadFloat(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,(uint)CapFlags);
            BinSerialize.WriteFloat(ref buffer,RollMin);
            BinSerialize.WriteFloat(ref buffer,RollMax);
            BinSerialize.WriteFloat(ref buffer,PitchMin);
            BinSerialize.WriteFloat(ref buffer,PitchMax);
            BinSerialize.WriteFloat(ref buffer,YawMin);
            BinSerialize.WriteFloat(ref buffer,YawMax);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 33 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            var tmpCapFlags = (uint)CapFlags;
            UInt32Type.Accept(visitor,CapFlagsField, ref tmpCapFlags);
            CapFlags = (GimbalManagerCapFlags)tmpCapFlags;
            FloatType.Accept(visitor,RollMinField, ref _rollMin);    
            FloatType.Accept(visitor,RollMaxField, ref _rollMax);    
            FloatType.Accept(visitor,PitchMinField, ref _pitchMin);    
            FloatType.Accept(visitor,PitchMaxField, ref _pitchMax);    
            FloatType.Accept(visitor,YawMinField, ref _yawMin);    
            FloatType.Accept(visitor,YawMaxField, ref _yawMax);    
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Bitmap of gimbal capability flags.
        /// OriginName: cap_flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CapFlagsField = new Field.Builder()
            .Name(nameof(CapFlags))
            .Title("bitmask")
            .Description("Bitmap of gimbal capability flags.")
            .DataType(new UInt32Type(GimbalManagerCapFlagsHelper.GetValues(x=>(uint)x).Min(),GimbalManagerCapFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(GimbalManagerCapFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private GimbalManagerCapFlags _capFlags;
        public GimbalManagerCapFlags CapFlags { get => _capFlags; set => _capFlags = value; } 
        /// <summary>
        /// Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        /// OriginName: roll_min, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollMinField = new Field.Builder()
            .Name(nameof(RollMin))
            .Title("roll_min")
            .Description("Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _rollMin;
        public float RollMin { get => _rollMin; set => _rollMin = value; }
        /// <summary>
        /// Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        /// OriginName: roll_max, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollMaxField = new Field.Builder()
            .Name(nameof(RollMax))
            .Title("roll_max")
            .Description("Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _rollMax;
        public float RollMax { get => _rollMax; set => _rollMax = value; }
        /// <summary>
        /// Minimum pitch angle (positive: up, negative: down)
        /// OriginName: pitch_min, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchMinField = new Field.Builder()
            .Name(nameof(PitchMin))
            .Title("pitch_min")
            .Description("Minimum pitch angle (positive: up, negative: down)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchMin;
        public float PitchMin { get => _pitchMin; set => _pitchMin = value; }
        /// <summary>
        /// Maximum pitch angle (positive: up, negative: down)
        /// OriginName: pitch_max, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchMaxField = new Field.Builder()
            .Name(nameof(PitchMax))
            .Title("pitch_max")
            .Description("Maximum pitch angle (positive: up, negative: down)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchMax;
        public float PitchMax { get => _pitchMax; set => _pitchMax = value; }
        /// <summary>
        /// Minimum yaw angle (positive: to the right, negative: to the left)
        /// OriginName: yaw_min, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawMinField = new Field.Builder()
            .Name(nameof(YawMin))
            .Title("yaw_min")
            .Description("Minimum yaw angle (positive: to the right, negative: to the left)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yawMin;
        public float YawMin { get => _yawMin; set => _yawMin = value; }
        /// <summary>
        /// Maximum yaw angle (positive: to the right, negative: to the left)
        /// OriginName: yaw_max, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawMaxField = new Field.Builder()
            .Name(nameof(YawMax))
            .Title("yaw_max")
            .Description("Maximum yaw angle (positive: to the right, negative: to the left)")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yawMax;
        public float YawMax { get => _yawMax; set => _yawMax = value; }
        /// <summary>
        /// Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
    }
    /// <summary>
    /// Current status about a high level gimbal manager. This message should be broadcast at a low regular rate (e.g. 5Hz).
    ///  GIMBAL_MANAGER_STATUS
    /// </summary>
    public class GimbalManagerStatusPacket : MavlinkV2Message<GimbalManagerStatusPayload>
    {
        public const int MessageId = 281;
        
        public const byte CrcExtra = 48;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalManagerStatusPayload Payload { get; } = new();

        public override string Name => "GIMBAL_MANAGER_STATUS";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_STATUS
    /// </summary>
    public class GimbalManagerStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 13; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 13; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            + 4 // uint32_t flags
            +1 // uint8_t gimbal_device_id
            +1 // uint8_t primary_control_sysid
            +1 // uint8_t primary_control_compid
            +1 // uint8_t secondary_control_sysid
            +1 // uint8_t secondary_control_compid
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);
            PrimaryControlSysid = (byte)BinSerialize.ReadByte(ref buffer);
            PrimaryControlCompid = (byte)BinSerialize.ReadByte(ref buffer);
            SecondaryControlSysid = (byte)BinSerialize.ReadByte(ref buffer);
            SecondaryControlCompid = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            BinSerialize.WriteByte(ref buffer,(byte)PrimaryControlSysid);
            BinSerialize.WriteByte(ref buffer,(byte)PrimaryControlCompid);
            BinSerialize.WriteByte(ref buffer,(byte)SecondaryControlSysid);
            BinSerialize.WriteByte(ref buffer,(byte)SecondaryControlCompid);
            /* PayloadByteSize = 13 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            var tmpFlags = (uint)Flags;
            UInt32Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (GimbalManagerFlags)tmpFlags;
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    
            UInt8Type.Accept(visitor,PrimaryControlSysidField, ref _primaryControlSysid);    
            UInt8Type.Accept(visitor,PrimaryControlCompidField, ref _primaryControlCompid);    
            UInt8Type.Accept(visitor,SecondaryControlSysidField, ref _secondaryControlSysid);    
            UInt8Type.Accept(visitor,SecondaryControlCompidField, ref _secondaryControlCompid);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// High level gimbal manager flags currently applied.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("High level gimbal manager flags currently applied.")
            .DataType(new UInt32Type(GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Min(),GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(GimbalManagerFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private GimbalManagerFlags _flags;
        public GimbalManagerFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
        /// <summary>
        /// System ID of MAVLink component with primary control, 0 for none.
        /// OriginName: primary_control_sysid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PrimaryControlSysidField = new Field.Builder()
            .Name(nameof(PrimaryControlSysid))
            .Title("primary_control_sysid")
            .Description("System ID of MAVLink component with primary control, 0 for none.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _primaryControlSysid;
        public byte PrimaryControlSysid { get => _primaryControlSysid; set => _primaryControlSysid = value; }
        /// <summary>
        /// Component ID of MAVLink component with primary control, 0 for none.
        /// OriginName: primary_control_compid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PrimaryControlCompidField = new Field.Builder()
            .Name(nameof(PrimaryControlCompid))
            .Title("primary_control_compid")
            .Description("Component ID of MAVLink component with primary control, 0 for none.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _primaryControlCompid;
        public byte PrimaryControlCompid { get => _primaryControlCompid; set => _primaryControlCompid = value; }
        /// <summary>
        /// System ID of MAVLink component with secondary control, 0 for none.
        /// OriginName: secondary_control_sysid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SecondaryControlSysidField = new Field.Builder()
            .Name(nameof(SecondaryControlSysid))
            .Title("secondary_control_sysid")
            .Description("System ID of MAVLink component with secondary control, 0 for none.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _secondaryControlSysid;
        public byte SecondaryControlSysid { get => _secondaryControlSysid; set => _secondaryControlSysid = value; }
        /// <summary>
        /// Component ID of MAVLink component with secondary control, 0 for none.
        /// OriginName: secondary_control_compid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SecondaryControlCompidField = new Field.Builder()
            .Name(nameof(SecondaryControlCompid))
            .Title("secondary_control_compid")
            .Description("Component ID of MAVLink component with secondary control, 0 for none.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _secondaryControlCompid;
        public byte SecondaryControlCompid { get => _secondaryControlCompid; set => _secondaryControlCompid = value; }
    }
    /// <summary>
    /// High level message to control a gimbal's attitude. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    ///  GIMBAL_MANAGER_SET_ATTITUDE
    /// </summary>
    public class GimbalManagerSetAttitudePacket : MavlinkV2Message<GimbalManagerSetAttitudePayload>
    {
        public const int MessageId = 282;
        
        public const byte CrcExtra = 123;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalManagerSetAttitudePayload Payload { get; } = new();

        public override string Name => "GIMBAL_MANAGER_SET_ATTITUDE";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_SET_ATTITUDE
    /// </summary>
    public class GimbalManagerSetAttitudePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 4 // uint32_t flags
            +Q.Length * 4 // float[4] q
            +4 // float angular_velocity_x
            +4 // float angular_velocity_y
            +4 // float angular_velocity_z
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t gimbal_device_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/35 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            AngularVelocityX = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityY = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,AngularVelocityX);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityY);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 35 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpFlags = (uint)Flags;
            UInt32Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (GimbalManagerFlags)tmpFlags;
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,AngularVelocityXField, ref _angularVelocityX);    
            FloatType.Accept(visitor,AngularVelocityYField, ref _angularVelocityY);    
            FloatType.Accept(visitor,AngularVelocityZField, ref _angularVelocityZ);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    

        }

        /// <summary>
        /// High level gimbal manager flags to use.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("flags")
            .Description("High level gimbal manager flags to use.")
            .DataType(new UInt32Type(GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Min(),GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(GimbalManagerFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private GimbalManagerFlags _flags;
        public GimbalManagerFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_MANAGER_FLAGS_YAW_LOCK is set)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_MANAGER_FLAGS_YAW_LOCK is set)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X component of angular velocity, positive is rolling to the right, NaN to be ignored.
        /// OriginName: angular_velocity_x, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityXField = new Field.Builder()
            .Name(nameof(AngularVelocityX))
            .Title("angular_velocity_x")
            .Description("X component of angular velocity, positive is rolling to the right, NaN to be ignored.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityX;
        public float AngularVelocityX { get => _angularVelocityX; set => _angularVelocityX = value; }
        /// <summary>
        /// Y component of angular velocity, positive is pitching up, NaN to be ignored.
        /// OriginName: angular_velocity_y, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityYField = new Field.Builder()
            .Name(nameof(AngularVelocityY))
            .Title("angular_velocity_y")
            .Description("Y component of angular velocity, positive is pitching up, NaN to be ignored.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityY;
        public float AngularVelocityY { get => _angularVelocityY; set => _angularVelocityY = value; }
        /// <summary>
        /// Z component of angular velocity, positive is yawing to the right, NaN to be ignored.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityZField = new Field.Builder()
            .Name(nameof(AngularVelocityZ))
            .Title("angular_velocity_z")
            .Description("Z component of angular velocity, positive is yawing to the right, NaN to be ignored.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityZ;
        public float AngularVelocityZ { get => _angularVelocityZ; set => _angularVelocityZ = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
    }
    /// <summary>
    /// Information about a low level gimbal. This message should be requested by the gimbal manager or a ground station using MAV_CMD_REQUEST_MESSAGE. The maximum angles and rates are the limits by hardware. However, the limits by software used are likely different/smaller and dependent on mode/settings/etc..
    ///  GIMBAL_DEVICE_INFORMATION
    /// </summary>
    public class GimbalDeviceInformationPacket : MavlinkV2Message<GimbalDeviceInformationPayload>
    {
        public const int MessageId = 283;
        
        public const byte CrcExtra = 74;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalDeviceInformationPayload Payload { get; } = new();

        public override string Name => "GIMBAL_DEVICE_INFORMATION";
    }

    /// <summary>
    ///  GIMBAL_DEVICE_INFORMATION
    /// </summary>
    public class GimbalDeviceInformationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 145; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 145; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t uid
            +4 // uint32_t time_boot_ms
            +4 // uint32_t firmware_version
            +4 // uint32_t hardware_version
            +4 // float roll_min
            +4 // float roll_max
            +4 // float pitch_min
            +4 // float pitch_max
            +4 // float yaw_min
            +4 // float yaw_max
            + 2 // uint16_t cap_flags
            +2 // uint16_t custom_cap_flags
            +VendorName.Length // char[32] vendor_name
            +ModelName.Length // char[32] model_name
            +CustomName.Length // char[32] custom_name
            +1 // uint8_t gimbal_device_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Uid = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            FirmwareVersion = BinSerialize.ReadUInt(ref buffer);
            HardwareVersion = BinSerialize.ReadUInt(ref buffer);
            RollMin = BinSerialize.ReadFloat(ref buffer);
            RollMax = BinSerialize.ReadFloat(ref buffer);
            PitchMin = BinSerialize.ReadFloat(ref buffer);
            PitchMax = BinSerialize.ReadFloat(ref buffer);
            YawMin = BinSerialize.ReadFloat(ref buffer);
            YawMax = BinSerialize.ReadFloat(ref buffer);
            CapFlags = (GimbalDeviceCapFlags)BinSerialize.ReadUShort(ref buffer);
            CustomCapFlags = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/145 - payloadSize - /*ExtendedFieldsLength*/1)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = VendorName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, VendorName.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ModelName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ModelName.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CustomName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, CustomName.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'GimbalDeviceId' can be empty
            if (buffer.IsEmpty) return;
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Uid);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,FirmwareVersion);
            BinSerialize.WriteUInt(ref buffer,HardwareVersion);
            BinSerialize.WriteFloat(ref buffer,RollMin);
            BinSerialize.WriteFloat(ref buffer,RollMax);
            BinSerialize.WriteFloat(ref buffer,PitchMin);
            BinSerialize.WriteFloat(ref buffer,PitchMax);
            BinSerialize.WriteFloat(ref buffer,YawMin);
            BinSerialize.WriteFloat(ref buffer,YawMax);
            BinSerialize.WriteUShort(ref buffer,(ushort)CapFlags);
            BinSerialize.WriteUShort(ref buffer,CustomCapFlags);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = VendorName)
                {
                    Encoding.ASCII.GetBytes(charPointer, VendorName.Length, bytePointer, VendorName.Length);
                }
            }
            buffer = buffer.Slice(VendorName.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ModelName)
                {
                    Encoding.ASCII.GetBytes(charPointer, ModelName.Length, bytePointer, ModelName.Length);
                }
            }
            buffer = buffer.Slice(ModelName.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CustomName)
                {
                    Encoding.ASCII.GetBytes(charPointer, CustomName.Length, bytePointer, CustomName.Length);
                }
            }
            buffer = buffer.Slice(CustomName.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 145 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,UidField, ref _uid);    
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt32Type.Accept(visitor,FirmwareVersionField, ref _firmwareVersion);    
            UInt32Type.Accept(visitor,HardwareVersionField, ref _hardwareVersion);    
            FloatType.Accept(visitor,RollMinField, ref _rollMin);    
            FloatType.Accept(visitor,RollMaxField, ref _rollMax);    
            FloatType.Accept(visitor,PitchMinField, ref _pitchMin);    
            FloatType.Accept(visitor,PitchMaxField, ref _pitchMax);    
            FloatType.Accept(visitor,YawMinField, ref _yawMin);    
            FloatType.Accept(visitor,YawMaxField, ref _yawMax);    
            var tmpCapFlags = (ushort)CapFlags;
            UInt16Type.Accept(visitor,CapFlagsField, ref tmpCapFlags);
            CapFlags = (GimbalDeviceCapFlags)tmpCapFlags;
            UInt16Type.Accept(visitor,CustomCapFlagsField, ref _customCapFlags);    
            ArrayType.Accept(visitor,VendorNameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref VendorName[index]));
            ArrayType.Accept(visitor,ModelNameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ModelName[index]));
            ArrayType.Accept(visitor,CustomNameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref CustomName[index]));
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    

        }

        /// <summary>
        /// UID of gimbal hardware (0 if unknown).
        /// OriginName: uid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UidField = new Field.Builder()
            .Name(nameof(Uid))
            .Title("uid")
            .Description("UID of gimbal hardware (0 if unknown).")

            .DataType(UInt64Type.Default)
        .Build();
        private ulong _uid;
        public ulong Uid { get => _uid; set => _uid = value; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
        /// OriginName: firmware_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FirmwareVersionField = new Field.Builder()
            .Name(nameof(FirmwareVersion))
            .Title("firmware_version")
            .Description("Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _firmwareVersion;
        public uint FirmwareVersion { get => _firmwareVersion; set => _firmwareVersion = value; }
        /// <summary>
        /// Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
        /// OriginName: hardware_version, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HardwareVersionField = new Field.Builder()
            .Name(nameof(HardwareVersion))
            .Title("hardware_version")
            .Description("Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _hardwareVersion;
        public uint HardwareVersion { get => _hardwareVersion; set => _hardwareVersion = value; }
        /// <summary>
        /// Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown.
        /// OriginName: roll_min, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollMinField = new Field.Builder()
            .Name(nameof(RollMin))
            .Title("roll_min")
            .Description("Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _rollMin;
        public float RollMin { get => _rollMin; set => _rollMin = value; }
        /// <summary>
        /// Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown.
        /// OriginName: roll_max, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field RollMaxField = new Field.Builder()
            .Name(nameof(RollMax))
            .Title("roll_max")
            .Description("Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _rollMax;
        public float RollMax { get => _rollMax; set => _rollMax = value; }
        /// <summary>
        /// Minimum hardware pitch angle (positive: up, negative: down). NAN if unknown.
        /// OriginName: pitch_min, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchMinField = new Field.Builder()
            .Name(nameof(PitchMin))
            .Title("pitch_min")
            .Description("Minimum hardware pitch angle (positive: up, negative: down). NAN if unknown.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchMin;
        public float PitchMin { get => _pitchMin; set => _pitchMin = value; }
        /// <summary>
        /// Maximum hardware pitch angle (positive: up, negative: down). NAN if unknown.
        /// OriginName: pitch_max, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchMaxField = new Field.Builder()
            .Name(nameof(PitchMax))
            .Title("pitch_max")
            .Description("Maximum hardware pitch angle (positive: up, negative: down). NAN if unknown.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchMax;
        public float PitchMax { get => _pitchMax; set => _pitchMax = value; }
        /// <summary>
        /// Minimum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown.
        /// OriginName: yaw_min, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawMinField = new Field.Builder()
            .Name(nameof(YawMin))
            .Title("yaw_min")
            .Description("Minimum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yawMin;
        public float YawMin { get => _yawMin; set => _yawMin = value; }
        /// <summary>
        /// Maximum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown.
        /// OriginName: yaw_max, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawMaxField = new Field.Builder()
            .Name(nameof(YawMax))
            .Title("yaw_max")
            .Description("Maximum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yawMax;
        public float YawMax { get => _yawMax; set => _yawMax = value; }
        /// <summary>
        /// Bitmap of gimbal capability flags.
        /// OriginName: cap_flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CapFlagsField = new Field.Builder()
            .Name(nameof(CapFlags))
            .Title("bitmask")
            .Description("Bitmap of gimbal capability flags.")
            .DataType(new UInt16Type(GimbalDeviceCapFlagsHelper.GetValues(x=>(ushort)x).Min(),GimbalDeviceCapFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(GimbalDeviceCapFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private GimbalDeviceCapFlags _capFlags;
        public GimbalDeviceCapFlags CapFlags { get => _capFlags; set => _capFlags = value; } 
        /// <summary>
        /// Bitmap for use for gimbal-specific capability flags.
        /// OriginName: custom_cap_flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CustomCapFlagsField = new Field.Builder()
            .Name(nameof(CustomCapFlags))
            .Title("bitmask")
            .Description("Bitmap for use for gimbal-specific capability flags.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _customCapFlags;
        public ushort CustomCapFlags { get => _customCapFlags; set => _customCapFlags = value; }
        /// <summary>
        /// Name of the gimbal vendor.
        /// OriginName: vendor_name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VendorNameField = new Field.Builder()
            .Name(nameof(VendorName))
            .Title("vendor_name")
            .Description("Name of the gimbal vendor.")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int VendorNameMaxItemsCount = 32;
        public char[] VendorName { get; } = new char[32];
        [Obsolete("This method is deprecated. Use GetVendorNameMaxItemsCount instead.")]
        public byte GetVendorNameMaxItemsCount() => 32;
        /// <summary>
        /// Name of the gimbal model.
        /// OriginName: model_name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ModelNameField = new Field.Builder()
            .Name(nameof(ModelName))
            .Title("model_name")
            .Description("Name of the gimbal model.")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int ModelNameMaxItemsCount = 32;
        public char[] ModelName { get; } = new char[32];
        /// <summary>
        /// Custom name of the gimbal given to it by the user.
        /// OriginName: custom_name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CustomNameField = new Field.Builder()
            .Name(nameof(CustomName))
            .Title("custom_name")
            .Description("Custom name of the gimbal given to it by the user.")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int CustomNameMaxItemsCount = 32;
        public char[] CustomName { get; } = new char[32];
        /// <summary>
        /// This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set to a number between 1-6. If the component ID is separate, this field is not required and must be set to 0.
        /// OriginName: gimbal_device_id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set to a number between 1-6. If the component ID is separate, this field is not required and must be set to 0.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
    }
    /// <summary>
    /// Low level message to control a gimbal device's attitude.
    /// 	  This message is to be sent from the gimbal manager to the gimbal device component.
    /// 	  The quaternion and angular velocities can be set to NaN according to use case.
    /// 	  For the angles encoded in the quaternion and the angular velocities holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME is set, then they are relative to the vehicle heading (vehicle frame).
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is set, then they are relative to absolute North (earth frame).
    /// 	  If neither of these flags are set, then (for backwards compatibility) it holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, then they are relative to absolute North (earth frame),
    /// 	  else they are relative to the vehicle heading (vehicle frame).
    /// 	  Setting both GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME and GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is not allowed.
    /// 	  These rules are to ensure backwards compatibility.
    /// 	  New implementations should always set either GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME or GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME.
    ///  GIMBAL_DEVICE_SET_ATTITUDE
    /// </summary>
    public class GimbalDeviceSetAttitudePacket : MavlinkV2Message<GimbalDeviceSetAttitudePayload>
    {
        public const int MessageId = 284;
        
        public const byte CrcExtra = 99;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalDeviceSetAttitudePayload Payload { get; } = new();

        public override string Name => "GIMBAL_DEVICE_SET_ATTITUDE";
    }

    /// <summary>
    ///  GIMBAL_DEVICE_SET_ATTITUDE
    /// </summary>
    public class GimbalDeviceSetAttitudePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +Q.Length * 4 // float[4] q
            +4 // float angular_velocity_x
            +4 // float angular_velocity_y
            +4 // float angular_velocity_z
            + 2 // uint16_t flags
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/32 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            AngularVelocityX = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityY = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            Flags = (GimbalDeviceFlags)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,AngularVelocityX);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityY);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 32 */;
        }

        public void Accept(IVisitor visitor)
        {
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,AngularVelocityXField, ref _angularVelocityX);    
            FloatType.Accept(visitor,AngularVelocityYField, ref _angularVelocityY);    
            FloatType.Accept(visitor,AngularVelocityZField, ref _angularVelocityZ);    
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (GimbalDeviceFlags)tmpFlags;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description. Set fields to NaN to be ignored.
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description. Set fields to NaN to be ignored.")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN to be ignored.
        /// OriginName: angular_velocity_x, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityXField = new Field.Builder()
            .Name(nameof(AngularVelocityX))
            .Title("angular_velocity_x")
            .Description("X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN to be ignored.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityX;
        public float AngularVelocityX { get => _angularVelocityX; set => _angularVelocityX = value; }
        /// <summary>
        /// Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN to be ignored.
        /// OriginName: angular_velocity_y, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityYField = new Field.Builder()
            .Name(nameof(AngularVelocityY))
            .Title("angular_velocity_y")
            .Description("Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN to be ignored.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityY;
        public float AngularVelocityY { get => _angularVelocityY; set => _angularVelocityY = value; }
        /// <summary>
        /// Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN to be ignored.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityZField = new Field.Builder()
            .Name(nameof(AngularVelocityZ))
            .Title("angular_velocity_z")
            .Description("Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN to be ignored.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityZ;
        public float AngularVelocityZ { get => _angularVelocityZ; set => _angularVelocityZ = value; }
        /// <summary>
        /// Low level gimbal flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Low level gimbal flags.")
            .DataType(new UInt16Type(GimbalDeviceFlagsHelper.GetValues(x=>(ushort)x).Min(),GimbalDeviceFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(GimbalDeviceFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private GimbalDeviceFlags _flags;
        public GimbalDeviceFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Message reporting the status of a gimbal device.
    /// 	  This message should be broadcast by a gimbal device component at a low regular rate (e.g. 5 Hz).
    /// 	  For the angles encoded in the quaternion and the angular velocities holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME is set, then they are relative to the vehicle heading (vehicle frame).
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is set, then they are relative to absolute North (earth frame).
    /// 	  If neither of these flags are set, then (for backwards compatibility) it holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, then they are relative to absolute North (earth frame),
    /// 	  else they are relative to the vehicle heading (vehicle frame).
    /// 	  Other conditions of the flags are not allowed.
    /// 	  The quaternion and angular velocities in the other frame can be calculated from delta_yaw and delta_yaw_velocity as
    /// 	  q_earth = q_delta_yaw * q_vehicle and w_earth = w_delta_yaw_velocity + w_vehicle (if not NaN).
    /// 	  If neither the GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME nor the GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME flag is set,
    /// 	  then (for backwards compatibility) the data in the delta_yaw and delta_yaw_velocity fields are to be ignored.
    /// 	  New implementations should always set either GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME or GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME,
    /// 	  and always should set delta_yaw and delta_yaw_velocity either to the proper value or NaN.
    ///  GIMBAL_DEVICE_ATTITUDE_STATUS
    /// </summary>
    public class GimbalDeviceAttitudeStatusPacket : MavlinkV2Message<GimbalDeviceAttitudeStatusPayload>
    {
        public const int MessageId = 285;
        
        public const byte CrcExtra = 137;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalDeviceAttitudeStatusPayload Payload { get; } = new();

        public override string Name => "GIMBAL_DEVICE_ATTITUDE_STATUS";
    }

    /// <summary>
    ///  GIMBAL_DEVICE_ATTITUDE_STATUS
    /// </summary>
    public class GimbalDeviceAttitudeStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 49; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 49; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +Q.Length * 4 // float[4] q
            +4 // float angular_velocity_x
            +4 // float angular_velocity_y
            +4 // float angular_velocity_z
            + 4 // uint32_t failure_flags
            + 2 // uint16_t flags
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +4 // float delta_yaw
            +4 // float delta_yaw_velocity
            +1 // uint8_t gimbal_device_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/49 - payloadSize - /*ExtendedFieldsLength*/9)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            AngularVelocityX = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityY = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            FailureFlags = (GimbalDeviceErrorFlags)BinSerialize.ReadUInt(ref buffer);
            Flags = (GimbalDeviceFlags)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'DeltaYaw' can be empty
            if (buffer.IsEmpty) return;
            DeltaYaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'DeltaYawVelocity' can be empty
            if (buffer.IsEmpty) return;
            DeltaYawVelocity = BinSerialize.ReadFloat(ref buffer);
            // extended field 'GimbalDeviceId' can be empty
            if (buffer.IsEmpty) return;
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,AngularVelocityX);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityY);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            BinSerialize.WriteUInt(ref buffer,(uint)FailureFlags);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteFloat(ref buffer,DeltaYaw);
            BinSerialize.WriteFloat(ref buffer,DeltaYawVelocity);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 49 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,AngularVelocityXField, ref _angularVelocityX);    
            FloatType.Accept(visitor,AngularVelocityYField, ref _angularVelocityY);    
            FloatType.Accept(visitor,AngularVelocityZField, ref _angularVelocityZ);    
            var tmpFailureFlags = (uint)FailureFlags;
            UInt32Type.Accept(visitor,FailureFlagsField, ref tmpFailureFlags);
            FailureFlags = (GimbalDeviceErrorFlags)tmpFailureFlags;
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (GimbalDeviceFlags)tmpFlags;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            FloatType.Accept(visitor,DeltaYawField, ref _deltaYaw);    
            FloatType.Accept(visitor,DeltaYawVelocityField, ref _deltaYawVelocity);    
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description.
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description.")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN if unknown.
        /// OriginName: angular_velocity_x, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityXField = new Field.Builder()
            .Name(nameof(AngularVelocityX))
            .Title("angular_velocity_x")
            .Description("X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN if unknown.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityX;
        public float AngularVelocityX { get => _angularVelocityX; set => _angularVelocityX = value; }
        /// <summary>
        /// Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN if unknown.
        /// OriginName: angular_velocity_y, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityYField = new Field.Builder()
            .Name(nameof(AngularVelocityY))
            .Title("angular_velocity_y")
            .Description("Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN if unknown.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityY;
        public float AngularVelocityY { get => _angularVelocityY; set => _angularVelocityY = value; }
        /// <summary>
        /// Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN if unknown.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field AngularVelocityZField = new Field.Builder()
            .Name(nameof(AngularVelocityZ))
            .Title("angular_velocity_z")
            .Description("Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN if unknown.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityZ;
        public float AngularVelocityZ { get => _angularVelocityZ; set => _angularVelocityZ = value; }
        /// <summary>
        /// Failure flags (0 for no failure)
        /// OriginName: failure_flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FailureFlagsField = new Field.Builder()
            .Name(nameof(FailureFlags))
            .Title("bitmask")
            .Description("Failure flags (0 for no failure)")
            .DataType(new UInt32Type(GimbalDeviceErrorFlagsHelper.GetValues(x=>(uint)x).Min(),GimbalDeviceErrorFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(GimbalDeviceErrorFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private GimbalDeviceErrorFlags _failureFlags;
        public GimbalDeviceErrorFlags FailureFlags { get => _failureFlags; set => _failureFlags = value; } 
        /// <summary>
        /// Current gimbal flags set.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Current gimbal flags set.")
            .DataType(new UInt16Type(GimbalDeviceFlagsHelper.GetValues(x=>(ushort)x).Min(),GimbalDeviceFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(GimbalDeviceFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private GimbalDeviceFlags _flags;
        public GimbalDeviceFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Yaw angle relating the quaternions in earth and body frames (see message description). NaN if unknown.
        /// OriginName: delta_yaw, Units: rad, IsExtended: true
        /// </summary>
        public static readonly Field DeltaYawField = new Field.Builder()
            .Name(nameof(DeltaYaw))
            .Title("delta_yaw")
            .Description("Yaw angle relating the quaternions in earth and body frames (see message description). NaN if unknown.")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _deltaYaw;
        public float DeltaYaw { get => _deltaYaw; set => _deltaYaw = value; }
        /// <summary>
        /// Yaw angular velocity relating the angular velocities in earth and body frames (see message description). NaN if unknown.
        /// OriginName: delta_yaw_velocity, Units: rad/s, IsExtended: true
        /// </summary>
        public static readonly Field DeltaYawVelocityField = new Field.Builder()
            .Name(nameof(DeltaYawVelocity))
            .Title("delta_yaw_velocity")
            .Description("Yaw angular velocity relating the angular velocities in earth and body frames (see message description). NaN if unknown.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _deltaYawVelocity;
        public float DeltaYawVelocity { get => _deltaYawVelocity; set => _deltaYawVelocity = value; }
        /// <summary>
        /// This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set a number between 1-6. If the component ID is separate, this field is not required and must be set to 0.
        /// OriginName: gimbal_device_id, Units: , IsExtended: true
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set a number between 1-6. If the component ID is separate, this field is not required and must be set to 0.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
    }
    /// <summary>
    /// Low level message containing autopilot state relevant for a gimbal device. This message is to be sent from the autopilot to the gimbal device component. The data of this message are for the gimbal device's estimator corrections, in particular horizon compensation, as well as indicates autopilot control intentions, e.g. feed forward angular control in the z-axis.
    ///  AUTOPILOT_STATE_FOR_GIMBAL_DEVICE
    /// </summary>
    public class AutopilotStateForGimbalDevicePacket : MavlinkV2Message<AutopilotStateForGimbalDevicePayload>
    {
        public const int MessageId = 286;
        
        public const byte CrcExtra = 210;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AutopilotStateForGimbalDevicePayload Payload { get; } = new();

        public override string Name => "AUTOPILOT_STATE_FOR_GIMBAL_DEVICE";
    }

    /// <summary>
    ///  AUTOPILOT_STATE_FOR_GIMBAL_DEVICE
    /// </summary>
    public class AutopilotStateForGimbalDevicePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_boot_us
            +Q.Length * 4 // float[4] q
            +4 // uint32_t q_estimated_delay_us
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +4 // uint32_t v_estimated_delay_us
            +4 // float feed_forward_angular_velocity_z
            + 2 // uint16_t estimator_status
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t landed_state
            +4 // float angular_velocity_z
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootUs = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/57 - payloadSize - /*ExtendedFieldsLength*/4)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            QEstimatedDelayUs = BinSerialize.ReadUInt(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            VEstimatedDelayUs = BinSerialize.ReadUInt(ref buffer);
            FeedForwardAngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            EstimatorStatus = (EstimatorStatusFlags)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            LandedState = (MavLandedState)BinSerialize.ReadByte(ref buffer);
            // extended field 'AngularVelocityZ' can be empty
            if (buffer.IsEmpty) return;
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeBootUs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteUInt(ref buffer,QEstimatedDelayUs);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteUInt(ref buffer,VEstimatedDelayUs);
            BinSerialize.WriteFloat(ref buffer,FeedForwardAngularVelocityZ);
            BinSerialize.WriteUShort(ref buffer,(ushort)EstimatorStatus);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)LandedState);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            /* PayloadByteSize = 57 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeBootUsField, ref _timeBootUs);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            UInt32Type.Accept(visitor,QEstimatedDelayUsField, ref _qEstimatedDelayUs);    
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            UInt32Type.Accept(visitor,VEstimatedDelayUsField, ref _vEstimatedDelayUs);    
            FloatType.Accept(visitor,FeedForwardAngularVelocityZField, ref _feedForwardAngularVelocityZ);    
            var tmpEstimatorStatus = (ushort)EstimatorStatus;
            UInt16Type.Accept(visitor,EstimatorStatusField, ref tmpEstimatorStatus);
            EstimatorStatus = (EstimatorStatusFlags)tmpEstimatorStatus;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpLandedState = (byte)LandedState;
            UInt8Type.Accept(visitor,LandedStateField, ref tmpLandedState);
            LandedState = (MavLandedState)tmpLandedState;
            FloatType.Accept(visitor,AngularVelocityZField, ref _angularVelocityZ);    

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootUsField = new Field.Builder()
            .Name(nameof(TimeBootUs))
            .Title("time_boot_us")
            .Description("Timestamp (time since system boot).")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeBootUs;
        public ulong TimeBootUs { get => _timeBootUs; set => _timeBootUs = value; }
        /// <summary>
        /// Quaternion components of autopilot attitude: w, x, y, z (1 0 0 0 is the null-rotation, Hamilton convention).
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion components of autopilot attitude: w, x, y, z (1 0 0 0 is the null-rotation, Hamilton convention).")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Estimated delay of the attitude data. 0 if unknown.
        /// OriginName: q_estimated_delay_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field QEstimatedDelayUsField = new Field.Builder()
            .Name(nameof(QEstimatedDelayUs))
            .Title("q_estimated_delay_us")
            .Description("Estimated delay of the attitude data. 0 if unknown.")
.Units(@"us")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _qEstimatedDelayUs;
        public uint QEstimatedDelayUs { get => _qEstimatedDelayUs; set => _qEstimatedDelayUs = value; }
        /// <summary>
        /// X Speed in NED (North, East, Down). NAN if unknown.
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X Speed in NED (North, East, Down). NAN if unknown.")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y Speed in NED (North, East, Down). NAN if unknown.
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y Speed in NED (North, East, Down). NAN if unknown.")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z Speed in NED (North, East, Down). NAN if unknown.
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z Speed in NED (North, East, Down). NAN if unknown.")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// Estimated delay of the speed data. 0 if unknown.
        /// OriginName: v_estimated_delay_us, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field VEstimatedDelayUsField = new Field.Builder()
            .Name(nameof(VEstimatedDelayUs))
            .Title("v_estimated_delay_us")
            .Description("Estimated delay of the speed data. 0 if unknown.")
.Units(@"us")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _vEstimatedDelayUs;
        public uint VEstimatedDelayUs { get => _vEstimatedDelayUs; set => _vEstimatedDelayUs = value; }
        /// <summary>
        /// Feed forward Z component of angular velocity (positive: yawing to the right). NaN to be ignored. This is to indicate if the autopilot is actively yawing.
        /// OriginName: feed_forward_angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field FeedForwardAngularVelocityZField = new Field.Builder()
            .Name(nameof(FeedForwardAngularVelocityZ))
            .Title("feed_forward_angular_velocity_z")
            .Description("Feed forward Z component of angular velocity (positive: yawing to the right). NaN to be ignored. This is to indicate if the autopilot is actively yawing.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _feedForwardAngularVelocityZ;
        public float FeedForwardAngularVelocityZ { get => _feedForwardAngularVelocityZ; set => _feedForwardAngularVelocityZ = value; }
        /// <summary>
        /// Bitmap indicating which estimator outputs are valid.
        /// OriginName: estimator_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EstimatorStatusField = new Field.Builder()
            .Name(nameof(EstimatorStatus))
            .Title("bitmask")
            .Description("Bitmap indicating which estimator outputs are valid.")
            .DataType(new UInt16Type(EstimatorStatusFlagsHelper.GetValues(x=>(ushort)x).Min(),EstimatorStatusFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(EstimatorStatusFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private EstimatorStatusFlags _estimatorStatus;
        public EstimatorStatusFlags EstimatorStatus { get => _estimatorStatus; set => _estimatorStatus = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// OriginName: landed_state, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LandedStateField = new Field.Builder()
            .Name(nameof(LandedState))
            .Title("landed_state")
            .Description("The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.")
            .DataType(new UInt8Type(MavLandedStateHelper.GetValues(x=>(byte)x).Min(),MavLandedStateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavLandedStateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavLandedState _landedState;
        public MavLandedState LandedState { get => _landedState; set => _landedState = value; } 
        /// <summary>
        /// Z component of angular velocity in NED (North, East, Down). NaN if unknown.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: true
        /// </summary>
        public static readonly Field AngularVelocityZField = new Field.Builder()
            .Name(nameof(AngularVelocityZ))
            .Title("angular_velocity_z")
            .Description("Z component of angular velocity in NED (North, East, Down). NaN if unknown.")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _angularVelocityZ;
        public float AngularVelocityZ { get => _angularVelocityZ; set => _angularVelocityZ = value; }
    }
    /// <summary>
    /// Set gimbal manager pitch and yaw angles (high rate message). This message is to be sent to the gimbal manager (e.g. from a ground station) and will be ignored by gimbal devices. Angles and rates can be set to NaN according to use case. Use MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW for low-rate adjustments that require confirmation.
    ///  GIMBAL_MANAGER_SET_PITCHYAW
    /// </summary>
    public class GimbalManagerSetPitchyawPacket : MavlinkV2Message<GimbalManagerSetPitchyawPayload>
    {
        public const int MessageId = 287;
        
        public const byte CrcExtra = 1;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalManagerSetPitchyawPayload Payload { get; } = new();

        public override string Name => "GIMBAL_MANAGER_SET_PITCHYAW";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_SET_PITCHYAW
    /// </summary>
    public class GimbalManagerSetPitchyawPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 23; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 23; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 4 // uint32_t flags
            +4 // float pitch
            +4 // float yaw
            +4 // float pitch_rate
            +4 // float yaw_rate
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t gimbal_device_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            PitchRate = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,PitchRate);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 23 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpFlags = (uint)Flags;
            UInt32Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (GimbalManagerFlags)tmpFlags;
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,PitchRateField, ref _pitchRate);    
            FloatType.Accept(visitor,YawRateField, ref _yawRate);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    

        }

        /// <summary>
        /// High level gimbal manager flags to use.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("flags")
            .Description("High level gimbal manager flags to use.")
            .DataType(new UInt32Type(GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Min(),GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(GimbalManagerFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private GimbalManagerFlags _flags;
        public GimbalManagerFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Pitch angle (positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch angle (positive: up, negative: down, NaN to be ignored).")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw angle (positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw angle (positive: to the right, negative: to the left, NaN to be ignored).")
.Units(@"rad")
            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Pitch angular rate (positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchRateField = new Field.Builder()
            .Name(nameof(PitchRate))
            .Title("pitch_rate")
            .Description("Pitch angular rate (positive: up, negative: down, NaN to be ignored).")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchRate;
        public float PitchRate { get => _pitchRate; set => _pitchRate = value; }
        /// <summary>
        /// Yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawRateField = new Field.Builder()
            .Name(nameof(YawRate))
            .Title("yaw_rate")
            .Description("Yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored).")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawRate;
        public float YawRate { get => _yawRate; set => _yawRate = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
    }
    /// <summary>
    /// High level message to control a gimbal manually. The angles or angular rates are unitless; the actual rates will depend on internal gimbal manager settings/configuration (e.g. set by parameters). This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    ///  GIMBAL_MANAGER_SET_MANUAL_CONTROL
    /// </summary>
    public class GimbalManagerSetManualControlPacket : MavlinkV2Message<GimbalManagerSetManualControlPayload>
    {
        public const int MessageId = 288;
        
        public const byte CrcExtra = 20;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GimbalManagerSetManualControlPayload Payload { get; } = new();

        public override string Name => "GIMBAL_MANAGER_SET_MANUAL_CONTROL";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_SET_MANUAL_CONTROL
    /// </summary>
    public class GimbalManagerSetManualControlPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 23; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 23; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 4 // uint32_t flags
            +4 // float pitch
            +4 // float yaw
            +4 // float pitch_rate
            +4 // float yaw_rate
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t gimbal_device_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            PitchRate = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,PitchRate);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 23 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpFlags = (uint)Flags;
            UInt32Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (GimbalManagerFlags)tmpFlags;
            FloatType.Accept(visitor,PitchField, ref _pitch);    
            FloatType.Accept(visitor,YawField, ref _yaw);    
            FloatType.Accept(visitor,PitchRateField, ref _pitchRate);    
            FloatType.Accept(visitor,YawRateField, ref _yawRate);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,GimbalDeviceIdField, ref _gimbalDeviceId);    

        }

        /// <summary>
        /// High level gimbal manager flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("flags")
            .Description("High level gimbal manager flags.")
            .DataType(new UInt32Type(GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Min(),GimbalManagerFlagsHelper.GetValues(x=>(uint)x).Max()))
            .Enum(GimbalManagerFlagsHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private GimbalManagerFlags _flags;
        public GimbalManagerFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Pitch angle unitless (-1..1, positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PitchField = new Field.Builder()
            .Name(nameof(Pitch))
            .Title("pitch")
            .Description("Pitch angle unitless (-1..1, positive: up, negative: down, NaN to be ignored).")

            .DataType(FloatType.Default)
        .Build();
        private float _pitch;
        public float Pitch { get => _pitch; set => _pitch = value; }
        /// <summary>
        /// Yaw angle unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YawField = new Field.Builder()
            .Name(nameof(Yaw))
            .Title("yaw")
            .Description("Yaw angle unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored).")

            .DataType(FloatType.Default)
        .Build();
        private float _yaw;
        public float Yaw { get => _yaw; set => _yaw = value; }
        /// <summary>
        /// Pitch angular rate unitless (-1..1, positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch_rate, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PitchRateField = new Field.Builder()
            .Name(nameof(PitchRate))
            .Title("pitch_rate")
            .Description("Pitch angular rate unitless (-1..1, positive: up, negative: down, NaN to be ignored).")

            .DataType(FloatType.Default)
        .Build();
        private float _pitchRate;
        public float PitchRate { get => _pitchRate; set => _pitchRate = value; }
        /// <summary>
        /// Yaw angular rate unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw_rate, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YawRateField = new Field.Builder()
            .Name(nameof(YawRate))
            .Title("yaw_rate")
            .Description("Yaw angular rate unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored).")

            .DataType(FloatType.Default)
        .Build();
        private float _yawRate;
        public float YawRate { get => _yawRate; set => _yawRate = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GimbalDeviceIdField = new Field.Builder()
            .Name(nameof(GimbalDeviceId))
            .Title("gimbal_device_id")
            .Description("Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _gimbalDeviceId;
        public byte GimbalDeviceId { get => _gimbalDeviceId; set => _gimbalDeviceId = value; }
    }
    /// <summary>
    /// ESC information for lower rate streaming. Recommended streaming rate 1Hz. See ESC_STATUS for higher-rate ESC data.
    ///  ESC_INFO
    /// </summary>
    public class EscInfoPacket : MavlinkV2Message<EscInfoPayload>
    {
        public const int MessageId = 290;
        
        public const byte CrcExtra = 251;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override EscInfoPayload Payload { get; } = new();

        public override string Name => "ESC_INFO";
    }

    /// <summary>
    ///  ESC_INFO
    /// </summary>
    public class EscInfoPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 46; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 46; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +ErrorCount.Length * 4 // uint32_t[4] error_count
            +2 // uint16_t counter
            + FailureFlags.Length * 2 // uint16_t[4] failure_flags
            
            +Temperature.Length * 2 // int16_t[4] temperature
            +1 // uint8_t index
            +1 // uint8_t count
            + 1 // uint8_t connection_type
            +1 // uint8_t info
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/46 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                ErrorCount[i] = BinSerialize.ReadUInt(ref buffer);
            }
            Counter = BinSerialize.ReadUShort(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                FailureFlags[i] = (EscFailureFlags)BinSerialize.ReadUShort(ref buffer);
            }

            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Temperature[i] = BinSerialize.ReadShort(ref buffer);
            }
            Index = (byte)BinSerialize.ReadByte(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            ConnectionType = (EscConnectionType)BinSerialize.ReadByte(ref buffer);
            Info = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<ErrorCount.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,ErrorCount[i]);
            }
            BinSerialize.WriteUShort(ref buffer,Counter);
            for(var i=0;i<FailureFlags.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,(ushort)FailureFlags[i]);
            }
            for(var i=0;i<Temperature.Length;i++)
            {
                BinSerialize.WriteShort(ref buffer,Temperature[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Index);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            BinSerialize.WriteByte(ref buffer,(byte)ConnectionType);
            BinSerialize.WriteByte(ref buffer,(byte)Info);
            /* PayloadByteSize = 46 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,ErrorCountField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref ErrorCount[index]));    
            UInt16Type.Accept(visitor,CounterField, ref _counter);    
            ArrayType.Accept(visitor,FailureFlagsField, (index, v, f, t) =>
            {
                var tmp = (ushort)FailureFlags[index];
                UInt16Type.Accept(v, f, t, ref tmp);
                FailureFlags[index] = (EscFailureFlags)tmp;
            });
            ArrayType.Accept(visitor,TemperatureField, 
                (index, v, f, t) => Int16Type.Accept(v, f, t, ref Temperature[index]));    
            UInt8Type.Accept(visitor,IndexField, ref _index);    
            UInt8Type.Accept(visitor,CountField, ref _count);    
            var tmpConnectionType = (byte)ConnectionType;
            UInt8Type.Accept(visitor,ConnectionTypeField, ref tmpConnectionType);
            ConnectionType = (EscConnectionType)tmpConnectionType;
            UInt8Type.Accept(visitor,InfoField, ref _info);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Number of reported errors by each ESC since boot.
        /// OriginName: error_count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ErrorCountField = new Field.Builder()
            .Name(nameof(ErrorCount))
            .Title("error_count")
            .Description("Number of reported errors by each ESC since boot.")

            .DataType(new ArrayType(UInt32Type.Default,4))        
        .Build();
        public const int ErrorCountMaxItemsCount = 4;
        public uint[] ErrorCount { get; } = new uint[4];
        [Obsolete("This method is deprecated. Use GetErrorCountMaxItemsCount instead.")]
        public byte GetErrorCountMaxItemsCount() => 4;
        /// <summary>
        /// Counter of data packets received.
        /// OriginName: counter, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CounterField = new Field.Builder()
            .Name(nameof(Counter))
            .Title("counter")
            .Description("Counter of data packets received.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _counter;
        public ushort Counter { get => _counter; set => _counter = value; }
        /// <summary>
        /// Bitmap of ESC failure flags.
        /// OriginName: failure_flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FailureFlagsField = new Field.Builder()
            .Name(nameof(FailureFlags))
            .Title("bitmask")
            .Description("Bitmap of ESC failure flags.")
            .DataType(new ArrayType(new UInt16Type(EscFailureFlagsHelper.GetValues(x=>(ushort)x).Min(),EscFailureFlagsHelper.GetValues(x=>(ushort)x).Max()),4))
            .Enum(EscFailureFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        public const int FailureFlagsMaxItemsCount = 4;
        public EscFailureFlags[] FailureFlags { get; } = new EscFailureFlags[4];
        /// <summary>
        /// Temperature of each ESC. INT16_MAX: if data not supplied by ESC.
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature of each ESC. INT16_MAX: if data not supplied by ESC.")
.Units(@"cdegC")
            .DataType(new ArrayType(Int16Type.Default,4))
        .Build();
        public const int TemperatureMaxItemsCount = 4;
        public short[] Temperature { get; } = new short[4];
        /// <summary>
        /// Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.
        /// OriginName: index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IndexField = new Field.Builder()
            .Name(nameof(Index))
            .Title("index")
            .Description("Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _index;
        public byte Index { get => _index; set => _index = value; }
        /// <summary>
        /// Total number of ESCs in all messages of this type. Message fields with an index higher than this should be ignored because they contain invalid data.
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CountField = new Field.Builder()
            .Name(nameof(Count))
            .Title("count")
            .Description("Total number of ESCs in all messages of this type. Message fields with an index higher than this should be ignored because they contain invalid data.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _count;
        public byte Count { get => _count; set => _count = value; }
        /// <summary>
        /// Connection type protocol for all ESC.
        /// OriginName: connection_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ConnectionTypeField = new Field.Builder()
            .Name(nameof(ConnectionType))
            .Title("connection_type")
            .Description("Connection type protocol for all ESC.")
            .DataType(new UInt8Type(EscConnectionTypeHelper.GetValues(x=>(byte)x).Min(),EscConnectionTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(EscConnectionTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private EscConnectionType _connectionType;
        public EscConnectionType ConnectionType { get => _connectionType; set => _connectionType = value; } 
        /// <summary>
        /// Information regarding online/offline status of each ESC.
        /// OriginName: info, Units: , IsExtended: false
        /// </summary>
        public static readonly Field InfoField = new Field.Builder()
            .Name(nameof(Info))
            .Title("bitmask")
            .Description("Information regarding online/offline status of each ESC.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _info;
        public byte Info { get => _info; set => _info = value; }
    }
    /// <summary>
    /// ESC information for higher rate streaming. Recommended streaming rate is ~10 Hz. Information that changes more slowly is sent in ESC_INFO. It should typically only be streamed on high-bandwidth links (i.e. to a companion computer).
    ///  ESC_STATUS
    /// </summary>
    public class EscStatusPacket : MavlinkV2Message<EscStatusPayload>
    {
        public const int MessageId = 291;
        
        public const byte CrcExtra = 10;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override EscStatusPayload Payload { get; } = new();

        public override string Name => "ESC_STATUS";
    }

    /// <summary>
    ///  ESC_STATUS
    /// </summary>
    public class EscStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +Rpm.Length * 4 // int32_t[4] rpm
            +Voltage.Length * 4 // float[4] voltage
            +Current.Length * 4 // float[4] current
            +1 // uint8_t index
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/57 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Rpm[i] = BinSerialize.ReadInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Voltage[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Current[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Index = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Rpm.Length;i++)
            {
                BinSerialize.WriteInt(ref buffer,Rpm[i]);
            }
            for(var i=0;i<Voltage.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Voltage[i]);
            }
            for(var i=0;i<Current.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Current[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Index);
            /* PayloadByteSize = 57 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,RpmField, 
                (index, v, f, t) => Int32Type.Accept(v, f, t, ref Rpm[index]));
            ArrayType.Accept(visitor,VoltageField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Voltage[index]));
            ArrayType.Accept(visitor,CurrentField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Current[index]));
            UInt8Type.Accept(visitor,IndexField, ref _index);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Reported motor RPM from each ESC (negative for reverse rotation).
        /// OriginName: rpm, Units: rpm, IsExtended: false
        /// </summary>
        public static readonly Field RpmField = new Field.Builder()
            .Name(nameof(Rpm))
            .Title("rpm")
            .Description("Reported motor RPM from each ESC (negative for reverse rotation).")
.Units(@"rpm")
            .DataType(new ArrayType(Int32Type.Default,4))        
        .Build();
        public const int RpmMaxItemsCount = 4;
        public int[] Rpm { get; } = new int[4];
        [Obsolete("This method is deprecated. Use GetRpmMaxItemsCount instead.")]
        public byte GetRpmMaxItemsCount() => 4;
        /// <summary>
        /// Voltage measured from each ESC.
        /// OriginName: voltage, Units: V, IsExtended: false
        /// </summary>
        public static readonly Field VoltageField = new Field.Builder()
            .Name(nameof(Voltage))
            .Title("voltage")
            .Description("Voltage measured from each ESC.")
.Units(@"V")
            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int VoltageMaxItemsCount = 4;
        public float[] Voltage { get; } = new float[4];
        /// <summary>
        /// Current measured from each ESC.
        /// OriginName: current, Units: A, IsExtended: false
        /// </summary>
        public static readonly Field CurrentField = new Field.Builder()
            .Name(nameof(Current))
            .Title("current")
            .Description("Current measured from each ESC.")
.Units(@"A")
            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int CurrentMaxItemsCount = 4;
        public float[] Current { get; } = new float[4];
        /// <summary>
        /// Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.
        /// OriginName: index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IndexField = new Field.Builder()
            .Name(nameof(Index))
            .Title("index")
            .Description("Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _index;
        public byte Index { get => _index; set => _index = value; }
    }
    /// <summary>
    /// Configure WiFi AP SSID, password, and mode. This message is re-emitted as an acknowledgement by the AP. The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE
    ///  WIFI_CONFIG_AP
    /// </summary>
    public class WifiConfigApPacket : MavlinkV2Message<WifiConfigApPayload>
    {
        public const int MessageId = 299;
        
        public const byte CrcExtra = 19;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override WifiConfigApPayload Payload { get; } = new();

        public override string Name => "WIFI_CONFIG_AP";
    }

    /// <summary>
    ///  WIFI_CONFIG_AP
    /// </summary>
    public class WifiConfigApPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 98; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 98; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +Ssid.Length // char[32] ssid
            +Password.Length // char[64] password
            + 1 // int8_t mode
            + 1 // int8_t response
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Ssid)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Ssid.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/64 - Math.Max(0,((/*PayloadByteSize*/98 - payloadSize - /*ExtendedFieldsLength*/2)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Password)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Password.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'Mode' can be empty
            if (buffer.IsEmpty) return;
            Mode = (WifiConfigApMode)BinSerialize.ReadByte(ref buffer);
            // extended field 'Response' can be empty
            if (buffer.IsEmpty) return;
            Response = (WifiConfigApResponse)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Ssid)
                {
                    Encoding.ASCII.GetBytes(charPointer, Ssid.Length, bytePointer, Ssid.Length);
                }
            }
            buffer = buffer.Slice(Ssid.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Password)
                {
                    Encoding.ASCII.GetBytes(charPointer, Password.Length, bytePointer, Password.Length);
                }
            }
            buffer = buffer.Slice(Password.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteByte(ref buffer,(byte)Response);
            /* PayloadByteSize = 98 */;
        }

        public void Accept(IVisitor visitor)
        {
            ArrayType.Accept(visitor,SsidField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Ssid[index]));
            ArrayType.Accept(visitor,PasswordField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Password[index]));
            var tmpMode = (sbyte)Mode;
            Int8Type.Accept(visitor,ModeField, ref tmpMode);
            Mode = (WifiConfigApMode)tmpMode;
            var tmpResponse = (sbyte)Response;
            Int8Type.Accept(visitor,ResponseField, ref tmpResponse);
            Response = (WifiConfigApResponse)tmpResponse;

        }

        /// <summary>
        /// Name of Wi-Fi network (SSID). Blank to leave it unchanged when setting. Current SSID when sent back as a response.
        /// OriginName: ssid, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SsidField = new Field.Builder()
            .Name(nameof(Ssid))
            .Title("ssid")
            .Description("Name of Wi-Fi network (SSID). Blank to leave it unchanged when setting. Current SSID when sent back as a response.")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int SsidMaxItemsCount = 32;
        public char[] Ssid { get; } = new char[32];
        /// <summary>
        /// Password. Blank for an open AP. MD5 hash when message is sent back as a response.
        /// OriginName: password, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PasswordField = new Field.Builder()
            .Name(nameof(Password))
            .Title("password")
            .Description("Password. Blank for an open AP. MD5 hash when message is sent back as a response.")

            .DataType(new ArrayType(CharType.Ascii,64))
        .Build();
        public const int PasswordMaxItemsCount = 64;
        public char[] Password { get; } = new char[64];
        [Obsolete("This method is deprecated. Use GetPasswordMaxItemsCount instead.")]
        public byte GetPasswordMaxItemsCount() => 64;
        /// <summary>
        /// WiFi Mode.
        /// OriginName: mode, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ModeField = new Field.Builder()
            .Name(nameof(Mode))
            .Title("mode")
            .Description("WiFi Mode.")
            .DataType(new Int8Type(WifiConfigApModeHelper.GetValues(x=>(sbyte)x).Min(),WifiConfigApModeHelper.GetValues(x=>(sbyte)x).Max()))
            .Enum(WifiConfigApModeHelper.GetEnumValues(x=>(sbyte)x))
            .Build();
        private WifiConfigApMode _mode;
        public WifiConfigApMode Mode { get => _mode; set => _mode = value; } 
        /// <summary>
        /// Message acceptance response (sent back to GS).
        /// OriginName: response, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ResponseField = new Field.Builder()
            .Name(nameof(Response))
            .Title("response")
            .Description("Message acceptance response (sent back to GS).")
            .DataType(new Int8Type(WifiConfigApResponseHelper.GetValues(x=>(sbyte)x).Min(),WifiConfigApResponseHelper.GetValues(x=>(sbyte)x).Max()))
            .Enum(WifiConfigApResponseHelper.GetEnumValues(x=>(sbyte)x))
            .Build();
        private WifiConfigApResponse _response;
        public WifiConfigApResponse Response { get => _response; set => _response = value; } 
    }
    /// <summary>
    /// The location and information of an AIS vessel
    ///  AIS_VESSEL
    /// </summary>
    public class AisVesselPacket : MavlinkV2Message<AisVesselPayload>
    {
        public const int MessageId = 301;
        
        public const byte CrcExtra = 243;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override AisVesselPayload Payload { get; } = new();

        public override string Name => "AIS_VESSEL";
    }

    /// <summary>
    ///  AIS_VESSEL
    /// </summary>
    public class AisVesselPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 58; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 58; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t MMSI
            +4 // int32_t lat
            +4 // int32_t lon
            +2 // uint16_t COG
            +2 // uint16_t heading
            +2 // uint16_t velocity
            +2 // uint16_t dimension_bow
            +2 // uint16_t dimension_stern
            +2 // uint16_t tslc
            + 2 // uint16_t flags
            +1 // int8_t turn_rate
            + 1 // uint8_t navigational_status
            + 1 // uint8_t type
            +1 // uint8_t dimension_port
            +1 // uint8_t dimension_starboard
            +Callsign.Length // char[7] callsign
            +Name.Length // char[20] name
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Mmsi = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            Heading = BinSerialize.ReadUShort(ref buffer);
            Velocity = BinSerialize.ReadUShort(ref buffer);
            DimensionBow = BinSerialize.ReadUShort(ref buffer);
            DimensionStern = BinSerialize.ReadUShort(ref buffer);
            Tslc = BinSerialize.ReadUShort(ref buffer);
            Flags = (AisFlags)BinSerialize.ReadUShort(ref buffer);
            TurnRate = (sbyte)BinSerialize.ReadByte(ref buffer);
            NavigationalStatus = (AisNavStatus)BinSerialize.ReadByte(ref buffer);
            Type = (AisType)BinSerialize.ReadByte(ref buffer);
            DimensionPort = (byte)BinSerialize.ReadByte(ref buffer);
            DimensionStarboard = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 7;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Callsign.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/58 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Mmsi);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteUShort(ref buffer,Heading);
            BinSerialize.WriteUShort(ref buffer,Velocity);
            BinSerialize.WriteUShort(ref buffer,DimensionBow);
            BinSerialize.WriteUShort(ref buffer,DimensionStern);
            BinSerialize.WriteUShort(ref buffer,Tslc);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)TurnRate);
            BinSerialize.WriteByte(ref buffer,(byte)NavigationalStatus);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)DimensionPort);
            BinSerialize.WriteByte(ref buffer,(byte)DimensionStarboard);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetBytes(charPointer, Callsign.Length, bytePointer, Callsign.Length);
                }
            }
            buffer = buffer.Slice(Callsign.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 58 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,MmsiField, ref _mmsi);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            UInt16Type.Accept(visitor,CogField, ref _cog);    
            UInt16Type.Accept(visitor,HeadingField, ref _heading);    
            UInt16Type.Accept(visitor,VelocityField, ref _velocity);    
            UInt16Type.Accept(visitor,DimensionBowField, ref _dimensionBow);    
            UInt16Type.Accept(visitor,DimensionSternField, ref _dimensionStern);    
            UInt16Type.Accept(visitor,TslcField, ref _tslc);    
            var tmpFlags = (ushort)Flags;
            UInt16Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (AisFlags)tmpFlags;
            Int8Type.Accept(visitor,TurnRateField, ref _turnRate);                
            var tmpNavigationalStatus = (byte)NavigationalStatus;
            UInt8Type.Accept(visitor,NavigationalStatusField, ref tmpNavigationalStatus);
            NavigationalStatus = (AisNavStatus)tmpNavigationalStatus;
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (AisType)tmpType;
            UInt8Type.Accept(visitor,DimensionPortField, ref _dimensionPort);    
            UInt8Type.Accept(visitor,DimensionStarboardField, ref _dimensionStarboard);    
            ArrayType.Accept(visitor,CallsignField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Callsign[index]));
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));

        }

        /// <summary>
        /// Mobile Marine Service Identifier, 9 decimal digits
        /// OriginName: MMSI, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MmsiField = new Field.Builder()
            .Name(nameof(Mmsi))
            .Title("MMSI")
            .Description("Mobile Marine Service Identifier, 9 decimal digits")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _mmsi;
        public uint Mmsi { get => _mmsi; set => _mmsi = value; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Course over ground
        /// OriginName: COG, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field CogField = new Field.Builder()
            .Name(nameof(Cog))
            .Title("COG")
            .Description("Course over ground")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _cog;
        public ushort Cog { get => _cog; set => _cog = value; }
        /// <summary>
        /// True heading
        /// OriginName: heading, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field HeadingField = new Field.Builder()
            .Name(nameof(Heading))
            .Title("heading")
            .Description("True heading")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _heading;
        public ushort Heading { get => _heading; set => _heading = value; }
        /// <summary>
        /// Speed over ground
        /// OriginName: velocity, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VelocityField = new Field.Builder()
            .Name(nameof(Velocity))
            .Title("velocity")
            .Description("Speed over ground")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _velocity;
        public ushort Velocity { get => _velocity; set => _velocity = value; }
        /// <summary>
        /// Distance from lat/lon location to bow
        /// OriginName: dimension_bow, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DimensionBowField = new Field.Builder()
            .Name(nameof(DimensionBow))
            .Title("dimension_bow")
            .Description("Distance from lat/lon location to bow")
.Units(@"m")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _dimensionBow;
        public ushort DimensionBow { get => _dimensionBow; set => _dimensionBow = value; }
        /// <summary>
        /// Distance from lat/lon location to stern
        /// OriginName: dimension_stern, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DimensionSternField = new Field.Builder()
            .Name(nameof(DimensionStern))
            .Title("dimension_stern")
            .Description("Distance from lat/lon location to stern")
.Units(@"m")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _dimensionStern;
        public ushort DimensionStern { get => _dimensionStern; set => _dimensionStern = value; }
        /// <summary>
        /// Time since last communication in seconds
        /// OriginName: tslc, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TslcField = new Field.Builder()
            .Name(nameof(Tslc))
            .Title("tslc")
            .Description("Time since last communication in seconds")
.Units(@"s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _tslc;
        public ushort Tslc { get => _tslc; set => _tslc = value; }
        /// <summary>
        /// Bitmask to indicate various statuses including valid data fields
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Bitmask to indicate various statuses including valid data fields")
            .DataType(new UInt16Type(AisFlagsHelper.GetValues(x=>(ushort)x).Min(),AisFlagsHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(AisFlagsHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private AisFlags _flags;
        public AisFlags Flags { get => _flags; set => _flags = value; } 
        /// <summary>
        /// Turn rate
        /// OriginName: turn_rate, Units: cdeg/s, IsExtended: false
        /// </summary>
        public static readonly Field TurnRateField = new Field.Builder()
            .Name(nameof(TurnRate))
            .Title("turn_rate")
            .Description("Turn rate")
.Units(@"cdeg/s")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _turnRate;
        public sbyte TurnRate { get => _turnRate; set => _turnRate = value; }
        /// <summary>
        /// Navigational status
        /// OriginName: navigational_status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NavigationalStatusField = new Field.Builder()
            .Name(nameof(NavigationalStatus))
            .Title("navigational_status")
            .Description("Navigational status")
            .DataType(new UInt8Type(AisNavStatusHelper.GetValues(x=>(byte)x).Min(),AisNavStatusHelper.GetValues(x=>(byte)x).Max()))
            .Enum(AisNavStatusHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private AisNavStatus _navigationalStatus;
        public AisNavStatus NavigationalStatus { get => _navigationalStatus; set => _navigationalStatus = value; } 
        /// <summary>
        /// Type of vessels
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of vessels")
            .DataType(new UInt8Type(AisTypeHelper.GetValues(x=>(byte)x).Min(),AisTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(AisTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private AisType _type;
        public AisType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Distance from lat/lon location to port side
        /// OriginName: dimension_port, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DimensionPortField = new Field.Builder()
            .Name(nameof(DimensionPort))
            .Title("dimension_port")
            .Description("Distance from lat/lon location to port side")
.Units(@"m")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _dimensionPort;
        public byte DimensionPort { get => _dimensionPort; set => _dimensionPort = value; }
        /// <summary>
        /// Distance from lat/lon location to starboard side
        /// OriginName: dimension_starboard, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DimensionStarboardField = new Field.Builder()
            .Name(nameof(DimensionStarboard))
            .Title("dimension_starboard")
            .Description("Distance from lat/lon location to starboard side")
.Units(@"m")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _dimensionStarboard;
        public byte DimensionStarboard { get => _dimensionStarboard; set => _dimensionStarboard = value; }
        /// <summary>
        /// The vessel callsign
        /// OriginName: callsign, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CallsignField = new Field.Builder()
            .Name(nameof(Callsign))
            .Title("callsign")
            .Description("The vessel callsign")

            .DataType(new ArrayType(CharType.Ascii,7))
        .Build();
        public const int CallsignMaxItemsCount = 7;
        public char[] Callsign { get; } = new char[7];
        /// <summary>
        /// The vessel name
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("The vessel name")

            .DataType(new ArrayType(CharType.Ascii,20))
        .Build();
        public const int NameMaxItemsCount = 20;
        public char[] Name { get; } = new char[20];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 20;
    }
    /// <summary>
    /// General status information of an UAVCAN node. Please refer to the definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the background information. The UAVCAN specification is available at http://uavcan.org.
    ///  UAVCAN_NODE_STATUS
    /// </summary>
    public class UavcanNodeStatusPacket : MavlinkV2Message<UavcanNodeStatusPayload>
    {
        public const int MessageId = 310;
        
        public const byte CrcExtra = 28;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override UavcanNodeStatusPayload Payload { get; } = new();

        public override string Name => "UAVCAN_NODE_STATUS";
    }

    /// <summary>
    ///  UAVCAN_NODE_STATUS
    /// </summary>
    public class UavcanNodeStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 17; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 17; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t uptime_sec
            +2 // uint16_t vendor_specific_status_code
            + 1 // uint8_t health
            + 1 // uint8_t mode
            +1 // uint8_t sub_mode
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            UptimeSec = BinSerialize.ReadUInt(ref buffer);
            VendorSpecificStatusCode = BinSerialize.ReadUShort(ref buffer);
            Health = (UavcanNodeHealth)BinSerialize.ReadByte(ref buffer);
            Mode = (UavcanNodeMode)BinSerialize.ReadByte(ref buffer);
            SubMode = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,UptimeSec);
            BinSerialize.WriteUShort(ref buffer,VendorSpecificStatusCode);
            BinSerialize.WriteByte(ref buffer,(byte)Health);
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteByte(ref buffer,(byte)SubMode);
            /* PayloadByteSize = 17 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,UptimeSecField, ref _uptimeSec);    
            UInt16Type.Accept(visitor,VendorSpecificStatusCodeField, ref _vendorSpecificStatusCode);    
            var tmpHealth = (byte)Health;
            UInt8Type.Accept(visitor,HealthField, ref tmpHealth);
            Health = (UavcanNodeHealth)tmpHealth;
            var tmpMode = (byte)Mode;
            UInt8Type.Accept(visitor,ModeField, ref tmpMode);
            Mode = (UavcanNodeMode)tmpMode;
            UInt8Type.Accept(visitor,SubModeField, ref _subMode);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Time since the start-up of the node.
        /// OriginName: uptime_sec, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field UptimeSecField = new Field.Builder()
            .Name(nameof(UptimeSec))
            .Title("uptime_sec")
            .Description("Time since the start-up of the node.")
.Units(@"s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _uptimeSec;
        public uint UptimeSec { get => _uptimeSec; set => _uptimeSec = value; }
        /// <summary>
        /// Vendor-specific status information.
        /// OriginName: vendor_specific_status_code, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VendorSpecificStatusCodeField = new Field.Builder()
            .Name(nameof(VendorSpecificStatusCode))
            .Title("vendor_specific_status_code")
            .Description("Vendor-specific status information.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vendorSpecificStatusCode;
        public ushort VendorSpecificStatusCode { get => _vendorSpecificStatusCode; set => _vendorSpecificStatusCode = value; }
        /// <summary>
        /// Generalized node health status.
        /// OriginName: health, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HealthField = new Field.Builder()
            .Name(nameof(Health))
            .Title("health")
            .Description("Generalized node health status.")
            .DataType(new UInt8Type(UavcanNodeHealthHelper.GetValues(x=>(byte)x).Min(),UavcanNodeHealthHelper.GetValues(x=>(byte)x).Max()))
            .Enum(UavcanNodeHealthHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private UavcanNodeHealth _health;
        public UavcanNodeHealth Health { get => _health; set => _health = value; } 
        /// <summary>
        /// Generalized operating mode.
        /// OriginName: mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ModeField = new Field.Builder()
            .Name(nameof(Mode))
            .Title("mode")
            .Description("Generalized operating mode.")
            .DataType(new UInt8Type(UavcanNodeModeHelper.GetValues(x=>(byte)x).Min(),UavcanNodeModeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(UavcanNodeModeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private UavcanNodeMode _mode;
        public UavcanNodeMode Mode { get => _mode; set => _mode = value; } 
        /// <summary>
        /// Not used currently.
        /// OriginName: sub_mode, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SubModeField = new Field.Builder()
            .Name(nameof(SubMode))
            .Title("sub_mode")
            .Description("Not used currently.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _subMode;
        public byte SubMode { get => _subMode; set => _subMode = value; }
    }
    /// <summary>
    /// General information describing a particular UAVCAN node. Please refer to the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo" for the background information. This message should be emitted by the system whenever a new node appears online, or an existing node reboots. Additionally, it can be emitted upon request from the other end of the MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not prohibited to emit this message unconditionally at a low frequency. The UAVCAN specification is available at http://uavcan.org.
    ///  UAVCAN_NODE_INFO
    /// </summary>
    public class UavcanNodeInfoPacket : MavlinkV2Message<UavcanNodeInfoPayload>
    {
        public const int MessageId = 311;
        
        public const byte CrcExtra = 95;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override UavcanNodeInfoPayload Payload { get; } = new();

        public override string Name => "UAVCAN_NODE_INFO";
    }

    /// <summary>
    ///  UAVCAN_NODE_INFO
    /// </summary>
    public class UavcanNodeInfoPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 116; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 116; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t uptime_sec
            +4 // uint32_t sw_vcs_commit
            +Name.Length // char[80] name
            +1 // uint8_t hw_version_major
            +1 // uint8_t hw_version_minor
            +HwUniqueId.Length // uint8_t[16] hw_unique_id
            +1 // uint8_t sw_version_major
            +1 // uint8_t sw_version_minor
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            UptimeSec = BinSerialize.ReadUInt(ref buffer);
            SwVcsCommit = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/80 - Math.Max(0,((/*PayloadByteSize*/116 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            HwVersionMajor = (byte)BinSerialize.ReadByte(ref buffer);
            HwVersionMinor = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            for(var i=0;i<arraySize;i++)
            {
                HwUniqueId[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            SwVersionMajor = (byte)BinSerialize.ReadByte(ref buffer);
            SwVersionMinor = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,UptimeSec);
            BinSerialize.WriteUInt(ref buffer,SwVcsCommit);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)HwVersionMajor);
            BinSerialize.WriteByte(ref buffer,(byte)HwVersionMinor);
            for(var i=0;i<HwUniqueId.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)HwUniqueId[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)SwVersionMajor);
            BinSerialize.WriteByte(ref buffer,(byte)SwVersionMinor);
            /* PayloadByteSize = 116 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,UptimeSecField, ref _uptimeSec);    
            UInt32Type.Accept(visitor,SwVcsCommitField, ref _swVcsCommit);    
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));
            UInt8Type.Accept(visitor,HwVersionMajorField, ref _hwVersionMajor);    
            UInt8Type.Accept(visitor,HwVersionMinorField, ref _hwVersionMinor);    
            ArrayType.Accept(visitor,HwUniqueIdField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref HwUniqueId[index]));    
            UInt8Type.Accept(visitor,SwVersionMajorField, ref _swVersionMajor);    
            UInt8Type.Accept(visitor,SwVersionMinorField, ref _swVersionMinor);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Time since the start-up of the node.
        /// OriginName: uptime_sec, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field UptimeSecField = new Field.Builder()
            .Name(nameof(UptimeSec))
            .Title("uptime_sec")
            .Description("Time since the start-up of the node.")
.Units(@"s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _uptimeSec;
        public uint UptimeSec { get => _uptimeSec; set => _uptimeSec = value; }
        /// <summary>
        /// Version control system (VCS) revision identifier (e.g. git short commit hash). 0 if unknown.
        /// OriginName: sw_vcs_commit, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SwVcsCommitField = new Field.Builder()
            .Name(nameof(SwVcsCommit))
            .Title("sw_vcs_commit")
            .Description("Version control system (VCS) revision identifier (e.g. git short commit hash). 0 if unknown.")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _swVcsCommit;
        public uint SwVcsCommit { get => _swVcsCommit; set => _swVcsCommit = value; }
        /// <summary>
        /// Node name string. For example, "sapog.px4.io".
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("Node name string. For example, \"sapog.px4.io\".")

            .DataType(new ArrayType(CharType.Ascii,80))
        .Build();
        public const int NameMaxItemsCount = 80;
        public char[] Name { get; } = new char[80];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 80;
        /// <summary>
        /// Hardware major version number.
        /// OriginName: hw_version_major, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HwVersionMajorField = new Field.Builder()
            .Name(nameof(HwVersionMajor))
            .Title("hw_version_major")
            .Description("Hardware major version number.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _hwVersionMajor;
        public byte HwVersionMajor { get => _hwVersionMajor; set => _hwVersionMajor = value; }
        /// <summary>
        /// Hardware minor version number.
        /// OriginName: hw_version_minor, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HwVersionMinorField = new Field.Builder()
            .Name(nameof(HwVersionMinor))
            .Title("hw_version_minor")
            .Description("Hardware minor version number.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _hwVersionMinor;
        public byte HwVersionMinor { get => _hwVersionMinor; set => _hwVersionMinor = value; }
        /// <summary>
        /// Hardware unique 128-bit ID.
        /// OriginName: hw_unique_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HwUniqueIdField = new Field.Builder()
            .Name(nameof(HwUniqueId))
            .Title("hw_unique_id")
            .Description("Hardware unique 128-bit ID.")

            .DataType(new ArrayType(UInt8Type.Default,16))
        .Build();
        public const int HwUniqueIdMaxItemsCount = 16;
        public byte[] HwUniqueId { get; } = new byte[16];
        /// <summary>
        /// Software major version number.
        /// OriginName: sw_version_major, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SwVersionMajorField = new Field.Builder()
            .Name(nameof(SwVersionMajor))
            .Title("sw_version_major")
            .Description("Software major version number.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _swVersionMajor;
        public byte SwVersionMajor { get => _swVersionMajor; set => _swVersionMajor = value; }
        /// <summary>
        /// Software minor version number.
        /// OriginName: sw_version_minor, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SwVersionMinorField = new Field.Builder()
            .Name(nameof(SwVersionMinor))
            .Title("sw_version_minor")
            .Description("Software minor version number.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _swVersionMinor;
        public byte SwVersionMinor { get => _swVersionMinor; set => _swVersionMinor = value; }
    }
    /// <summary>
    /// Request to read the value of a parameter with either the param_id string id or param_index. PARAM_EXT_VALUE should be emitted in response.
    ///  PARAM_EXT_REQUEST_READ
    /// </summary>
    public class ParamExtRequestReadPacket : MavlinkV2Message<ParamExtRequestReadPayload>
    {
        public const int MessageId = 320;
        
        public const byte CrcExtra = 243;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamExtRequestReadPayload Payload { get; } = new();

        public override string Name => "PARAM_EXT_REQUEST_READ";
    }

    /// <summary>
    ///  PARAM_EXT_REQUEST_READ
    /// </summary>
    public class ParamExtRequestReadPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // int16_t param_index
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +ParamId.Length // char[16] param_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/20 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,ParamIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            /* PayloadByteSize = 20 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int16Type.Accept(visitor,ParamIndexField, ref _paramIndex);
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));

        }

        /// <summary>
        /// Parameter index. Set to -1 to use the Parameter ID field as identifier (else param_id will be ignored)
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIndexField = new Field.Builder()
            .Name(nameof(ParamIndex))
            .Title("param_index")
            .Description("Parameter index. Set to -1 to use the Parameter ID field as identifier (else param_id will be ignored)")

            .DataType(Int16Type.Default)
        .Build();
        private short _paramIndex;
        public short ParamIndex { get => _paramIndex; set => _paramIndex = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
    }
    /// <summary>
    /// Request all parameters of this component. All parameters should be emitted in response as PARAM_EXT_VALUE.
    ///  PARAM_EXT_REQUEST_LIST
    /// </summary>
    public class ParamExtRequestListPacket : MavlinkV2Message<ParamExtRequestListPayload>
    {
        public const int MessageId = 321;
        
        public const byte CrcExtra = 88;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamExtRequestListPayload Payload { get; } = new();

        public override string Name => "PARAM_EXT_REQUEST_LIST";
    }

    /// <summary>
    ///  PARAM_EXT_REQUEST_LIST
    /// </summary>
    public class ParamExtRequestListPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Emit the value of a parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows them to re-request missing parameters after a loss or timeout.
    ///  PARAM_EXT_VALUE
    /// </summary>
    public class ParamExtValuePacket : MavlinkV2Message<ParamExtValuePayload>
    {
        public const int MessageId = 322;
        
        public const byte CrcExtra = 243;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamExtValuePayload Payload { get; } = new();

        public override string Name => "PARAM_EXT_VALUE";
    }

    /// <summary>
    ///  PARAM_EXT_VALUE
    /// </summary>
    public class ParamExtValuePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 149; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 149; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t param_count
            +2 // uint16_t param_index
            +ParamId.Length // char[16] param_id
            +ParamValue.Length // char[128] param_value
            + 1 // uint8_t param_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamCount = BinSerialize.ReadUShort(ref buffer);
            ParamIndex = BinSerialize.ReadUShort(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/149 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamValue.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            ParamType = (MavParamExtType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,ParamCount);
            BinSerialize.WriteUShort(ref buffer,ParamIndex);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamValue.Length, bytePointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(ParamValue.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 149 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,ParamCountField, ref _paramCount);    
            UInt16Type.Accept(visitor,ParamIndexField, ref _paramIndex);    
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));
            ArrayType.Accept(visitor,ParamValueField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamValue[index]));
            var tmpParamType = (byte)ParamType;
            UInt8Type.Accept(visitor,ParamTypeField, ref tmpParamType);
            ParamType = (MavParamExtType)tmpParamType;

        }

        /// <summary>
        /// Total number of parameters
        /// OriginName: param_count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamCountField = new Field.Builder()
            .Name(nameof(ParamCount))
            .Title("param_count")
            .Description("Total number of parameters")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _paramCount;
        public ushort ParamCount { get => _paramCount; set => _paramCount = value; }
        /// <summary>
        /// Index of this parameter
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIndexField = new Field.Builder()
            .Name(nameof(ParamIndex))
            .Title("param_index")
            .Description("Index of this parameter")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _paramIndex;
        public ushort ParamIndex { get => _paramIndex; set => _paramIndex = value; }
        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        /// <summary>
        /// Parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValueField = new Field.Builder()
            .Name(nameof(ParamValue))
            .Title("param_value")
            .Description("Parameter value")

            .DataType(new ArrayType(CharType.Ascii,128))
        .Build();
        public const int ParamValueMaxItemsCount = 128;
        public char[] ParamValue { get; } = new char[128];
        [Obsolete("This method is deprecated. Use GetParamValueMaxItemsCount instead.")]
        public byte GetParamValueMaxItemsCount() => 128;
        /// <summary>
        /// Parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamTypeField = new Field.Builder()
            .Name(nameof(ParamType))
            .Title("param_type")
            .Description("Parameter type.")
            .DataType(new UInt8Type(MavParamExtTypeHelper.GetValues(x=>(byte)x).Min(),MavParamExtTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavParamExtTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavParamExtType _paramType;
        public MavParamExtType ParamType { get => _paramType; set => _paramType = value; } 
    }
    /// <summary>
    /// Set a parameter value. In order to deal with message loss (and retransmission of PARAM_EXT_SET), when setting a parameter value and the new value is the same as the current value, you will immediately get a PARAM_ACK_ACCEPTED response. If the current state is PARAM_ACK_IN_PROGRESS, you will accordingly receive a PARAM_ACK_IN_PROGRESS in response.
    ///  PARAM_EXT_SET
    /// </summary>
    public class ParamExtSetPacket : MavlinkV2Message<ParamExtSetPayload>
    {
        public const int MessageId = 323;
        
        public const byte CrcExtra = 78;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamExtSetPayload Payload { get; } = new();

        public override string Name => "PARAM_EXT_SET";
    }

    /// <summary>
    ///  PARAM_EXT_SET
    /// </summary>
    public class ParamExtSetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 147; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 147; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +ParamId.Length // char[16] param_id
            +ParamValue.Length // char[128] param_value
            + 1 // uint8_t param_type
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/147 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamValue.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            ParamType = (MavParamExtType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamValue.Length, bytePointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(ParamValue.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 147 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));
            ArrayType.Accept(visitor,ParamValueField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamValue[index]));
            var tmpParamType = (byte)ParamType;
            UInt8Type.Accept(visitor,ParamTypeField, ref tmpParamType);
            ParamType = (MavParamExtType)tmpParamType;

        }

        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        /// <summary>
        /// Parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValueField = new Field.Builder()
            .Name(nameof(ParamValue))
            .Title("param_value")
            .Description("Parameter value")

            .DataType(new ArrayType(CharType.Ascii,128))
        .Build();
        public const int ParamValueMaxItemsCount = 128;
        public char[] ParamValue { get; } = new char[128];
        [Obsolete("This method is deprecated. Use GetParamValueMaxItemsCount instead.")]
        public byte GetParamValueMaxItemsCount() => 128;
        /// <summary>
        /// Parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamTypeField = new Field.Builder()
            .Name(nameof(ParamType))
            .Title("param_type")
            .Description("Parameter type.")
            .DataType(new UInt8Type(MavParamExtTypeHelper.GetValues(x=>(byte)x).Min(),MavParamExtTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavParamExtTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavParamExtType _paramType;
        public MavParamExtType ParamType { get => _paramType; set => _paramType = value; } 
    }
    /// <summary>
    /// Response from a PARAM_EXT_SET message.
    ///  PARAM_EXT_ACK
    /// </summary>
    public class ParamExtAckPacket : MavlinkV2Message<ParamExtAckPayload>
    {
        public const int MessageId = 324;
        
        public const byte CrcExtra = 132;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ParamExtAckPayload Payload { get; } = new();

        public override string Name => "PARAM_EXT_ACK";
    }

    /// <summary>
    ///  PARAM_EXT_ACK
    /// </summary>
    public class ParamExtAckPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 146; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 146; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +ParamId.Length // char[16] param_id
            +ParamValue.Length // char[128] param_value
            + 1 // uint8_t param_type
            + 1 // uint8_t param_result
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/146 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamValue.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            ParamType = (MavParamExtType)BinSerialize.ReadByte(ref buffer);
            ParamResult = (ParamAck)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamValue.Length, bytePointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(ParamValue.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            BinSerialize.WriteByte(ref buffer,(byte)ParamResult);
            /* PayloadByteSize = 146 */;
        }

        public void Accept(IVisitor visitor)
        {
            ArrayType.Accept(visitor,ParamIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamId[index]));
            ArrayType.Accept(visitor,ParamValueField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ParamValue[index]));
            var tmpParamType = (byte)ParamType;
            UInt8Type.Accept(visitor,ParamTypeField, ref tmpParamType);
            ParamType = (MavParamExtType)tmpParamType;
            var tmpParamResult = (byte)ParamResult;
            UInt8Type.Accept(visitor,ParamResultField, ref tmpParamResult);
            ParamResult = (ParamAck)tmpParamResult;

        }

        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamIdField = new Field.Builder()
            .Name(nameof(ParamId))
            .Title("param_id")
            .Description("Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        /// <summary>
        /// Parameter value (new value if PARAM_ACK_ACCEPTED, current value otherwise)
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamValueField = new Field.Builder()
            .Name(nameof(ParamValue))
            .Title("param_value")
            .Description("Parameter value (new value if PARAM_ACK_ACCEPTED, current value otherwise)")

            .DataType(new ArrayType(CharType.Ascii,128))
        .Build();
        public const int ParamValueMaxItemsCount = 128;
        public char[] ParamValue { get; } = new char[128];
        [Obsolete("This method is deprecated. Use GetParamValueMaxItemsCount instead.")]
        public byte GetParamValueMaxItemsCount() => 128;
        /// <summary>
        /// Parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamTypeField = new Field.Builder()
            .Name(nameof(ParamType))
            .Title("param_type")
            .Description("Parameter type.")
            .DataType(new UInt8Type(MavParamExtTypeHelper.GetValues(x=>(byte)x).Min(),MavParamExtTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavParamExtTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavParamExtType _paramType;
        public MavParamExtType ParamType { get => _paramType; set => _paramType = value; } 
        /// <summary>
        /// Result code.
        /// OriginName: param_result, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ParamResultField = new Field.Builder()
            .Name(nameof(ParamResult))
            .Title("param_result")
            .Description("Result code.")
            .DataType(new UInt8Type(ParamAckHelper.GetValues(x=>(byte)x).Min(),ParamAckHelper.GetValues(x=>(byte)x).Max()))
            .Enum(ParamAckHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private ParamAck _paramResult;
        public ParamAck ParamResult { get => _paramResult; set => _paramResult = value; } 
    }
    /// <summary>
    /// Obstacle distances in front of the sensor, starting from the left in increment degrees to the right
    ///  OBSTACLE_DISTANCE
    /// </summary>
    public class ObstacleDistancePacket : MavlinkV2Message<ObstacleDistancePayload>
    {
        public const int MessageId = 330;
        
        public const byte CrcExtra = 23;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ObstacleDistancePayload Payload { get; } = new();

        public override string Name => "OBSTACLE_DISTANCE";
    }

    /// <summary>
    ///  OBSTACLE_DISTANCE
    /// </summary>
    public class ObstacleDistancePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 167; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 167; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +Distances.Length * 2 // uint16_t[72] distances
            +2 // uint16_t min_distance
            +2 // uint16_t max_distance
            + 1 // uint8_t sensor_type
            +1 // uint8_t increment
            +4 // float increment_f
            +4 // float angle_offset
            + 1 // uint8_t frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/72 - Math.Max(0,((/*PayloadByteSize*/167 - payloadSize - /*ExtendedFieldsLength*/9)/2 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Distances[i] = BinSerialize.ReadUShort(ref buffer);
            }
            MinDistance = BinSerialize.ReadUShort(ref buffer);
            MaxDistance = BinSerialize.ReadUShort(ref buffer);
            SensorType = (MavDistanceSensor)BinSerialize.ReadByte(ref buffer);
            Increment = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'IncrementF' can be empty
            if (buffer.IsEmpty) return;
            IncrementF = BinSerialize.ReadFloat(ref buffer);
            // extended field 'AngleOffset' can be empty
            if (buffer.IsEmpty) return;
            AngleOffset = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Frame' can be empty
            if (buffer.IsEmpty) return;
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Distances.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,Distances[i]);
            }
            BinSerialize.WriteUShort(ref buffer,MinDistance);
            BinSerialize.WriteUShort(ref buffer,MaxDistance);
            BinSerialize.WriteByte(ref buffer,(byte)SensorType);
            BinSerialize.WriteByte(ref buffer,(byte)Increment);
            BinSerialize.WriteFloat(ref buffer,IncrementF);
            BinSerialize.WriteFloat(ref buffer,AngleOffset);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 167 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,DistancesField, 
                (index, v, f, t) => UInt16Type.Accept(v, f, t, ref Distances[index]));    
            UInt16Type.Accept(visitor,MinDistanceField, ref _minDistance);    
            UInt16Type.Accept(visitor,MaxDistanceField, ref _maxDistance);    
            var tmpSensorType = (byte)SensorType;
            UInt8Type.Accept(visitor,SensorTypeField, ref tmpSensorType);
            SensorType = (MavDistanceSensor)tmpSensorType;
            UInt8Type.Accept(visitor,IncrementField, ref _increment);    
            FloatType.Accept(visitor,IncrementFField, ref _incrementF);    
            FloatType.Accept(visitor,AngleOffsetField, ref _angleOffset);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.
        /// OriginName: distances, Units: cm, IsExtended: false
        /// </summary>
        public static readonly Field DistancesField = new Field.Builder()
            .Name(nameof(Distances))
            .Title("distances")
            .Description("Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.")
.Units(@"cm")
            .DataType(new ArrayType(UInt16Type.Default,72))
        .Build();
        public const int DistancesMaxItemsCount = 72;
        public ushort[] Distances { get; } = new ushort[72];
        [Obsolete("This method is deprecated. Use GetDistancesMaxItemsCount instead.")]
        public byte GetDistancesMaxItemsCount() => 72;
        /// <summary>
        /// Minimum distance the sensor can measure.
        /// OriginName: min_distance, Units: cm, IsExtended: false
        /// </summary>
        public static readonly Field MinDistanceField = new Field.Builder()
            .Name(nameof(MinDistance))
            .Title("min_distance")
            .Description("Minimum distance the sensor can measure.")
.Units(@"cm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _minDistance;
        public ushort MinDistance { get => _minDistance; set => _minDistance = value; }
        /// <summary>
        /// Maximum distance the sensor can measure.
        /// OriginName: max_distance, Units: cm, IsExtended: false
        /// </summary>
        public static readonly Field MaxDistanceField = new Field.Builder()
            .Name(nameof(MaxDistance))
            .Title("max_distance")
            .Description("Maximum distance the sensor can measure.")
.Units(@"cm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _maxDistance;
        public ushort MaxDistance { get => _maxDistance; set => _maxDistance = value; }
        /// <summary>
        /// Class id of the distance sensor type.
        /// OriginName: sensor_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SensorTypeField = new Field.Builder()
            .Name(nameof(SensorType))
            .Title("sensor_type")
            .Description("Class id of the distance sensor type.")
            .DataType(new UInt8Type(MavDistanceSensorHelper.GetValues(x=>(byte)x).Min(),MavDistanceSensorHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavDistanceSensorHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavDistanceSensor _sensorType;
        public MavDistanceSensor SensorType { get => _sensorType; set => _sensorType = value; } 
        /// <summary>
        /// Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero.
        /// OriginName: increment, Units: deg, IsExtended: false
        /// </summary>
        public static readonly Field IncrementField = new Field.Builder()
            .Name(nameof(Increment))
            .Title("increment")
            .Description("Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero.")
.Units(@"deg")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _increment;
        public byte Increment { get => _increment; set => _increment = value; }
        /// <summary>
        /// Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise.
        /// OriginName: increment_f, Units: deg, IsExtended: true
        /// </summary>
        public static readonly Field IncrementFField = new Field.Builder()
            .Name(nameof(IncrementF))
            .Title("increment_f")
            .Description("Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise.")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _incrementF;
        public float IncrementF { get => _incrementF; set => _incrementF = value; }
        /// <summary>
        /// Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.
        /// OriginName: angle_offset, Units: deg, IsExtended: true
        /// </summary>
        public static readonly Field AngleOffsetField = new Field.Builder()
            .Name(nameof(AngleOffset))
            .Title("angle_offset")
            .Description("Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.")
.Units(@"deg")
            .DataType(FloatType.Default)
        .Build();
        private float _angleOffset;
        public float AngleOffset { get => _angleOffset; set => _angleOffset = value; }
        /// <summary>
        /// Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.
        /// OriginName: frame, Units: , IsExtended: true
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
    }
    /// <summary>
    /// Odometry message to communicate odometry information with an external interface. Fits ROS REP 147 standard for aerial vehicles (http://www.ros.org/reps/rep-0147.html).
    ///  ODOMETRY
    /// </summary>
    public class OdometryPacket : MavlinkV2Message<OdometryPayload>
    {
        public const int MessageId = 331;
        
        public const byte CrcExtra = 91;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OdometryPayload Payload { get; } = new();

        public override string Name => "ODOMETRY";
    }

    /// <summary>
    ///  ODOMETRY
    /// </summary>
    public class OdometryPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 233; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 233; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float x
            +4 // float y
            +4 // float z
            +Q.Length * 4 // float[4] q
            +4 // float vx
            +4 // float vy
            +4 // float vz
            +4 // float rollspeed
            +4 // float pitchspeed
            +4 // float yawspeed
            +PoseCovariance.Length * 4 // float[21] pose_covariance
            +VelocityCovariance.Length * 4 // float[21] velocity_covariance
            + 1 // uint8_t frame_id
            + 1 // uint8_t child_frame_id
            +1 // uint8_t reset_counter
            + 1 // uint8_t estimator_type
            +1 // int8_t quality
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/21 - Math.Max(0,((/*PayloadByteSize*/233 - payloadSize - /*ExtendedFieldsLength*/3)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                PoseCovariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                VelocityCovariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            FrameId = (MavFrame)BinSerialize.ReadByte(ref buffer);
            ChildFrameId = (MavFrame)BinSerialize.ReadByte(ref buffer);
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'EstimatorType' can be empty
            if (buffer.IsEmpty) return;
            EstimatorType = (MavEstimatorType)BinSerialize.ReadByte(ref buffer);
            // extended field 'Quality' can be empty
            if (buffer.IsEmpty) return;
            Quality = (sbyte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            for(var i=0;i<PoseCovariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PoseCovariance[i]);
            }
            for(var i=0;i<VelocityCovariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelocityCovariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)FrameId);
            BinSerialize.WriteByte(ref buffer,(byte)ChildFrameId);
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            BinSerialize.WriteByte(ref buffer,(byte)EstimatorType);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 233 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,XField, ref _x);    
            FloatType.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            ArrayType.Accept(visitor,QField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Q[index]));
            FloatType.Accept(visitor,VxField, ref _vx);    
            FloatType.Accept(visitor,VyField, ref _vy);    
            FloatType.Accept(visitor,VzField, ref _vz);    
            FloatType.Accept(visitor,RollspeedField, ref _rollspeed);    
            FloatType.Accept(visitor,PitchspeedField, ref _pitchspeed);    
            FloatType.Accept(visitor,YawspeedField, ref _yawspeed);    
            ArrayType.Accept(visitor,PoseCovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PoseCovariance[index]));
            ArrayType.Accept(visitor,VelocityCovarianceField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref VelocityCovariance[index]));
            var tmpFrameId = (byte)FrameId;
            UInt8Type.Accept(visitor,FrameIdField, ref tmpFrameId);
            FrameId = (MavFrame)tmpFrameId;
            var tmpChildFrameId = (byte)ChildFrameId;
            UInt8Type.Accept(visitor,ChildFrameIdField, ref tmpChildFrameId);
            ChildFrameId = (MavFrame)tmpChildFrameId;
            UInt8Type.Accept(visitor,ResetCounterField, ref _resetCounter);    
            var tmpEstimatorType = (byte)EstimatorType;
            UInt8Type.Accept(visitor,EstimatorTypeField, ref tmpEstimatorType);
            EstimatorType = (MavEstimatorType)tmpEstimatorType;
            Int8Type.Accept(visitor,QualityField, ref _quality);                

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _x;
        public float X { get => _x; set => _x = value; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _y;
        public float Y { get => _y; set => _y = value; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Z Position")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QField = new Field.Builder()
            .Name(nameof(Q))
            .Title("q")
            .Description("Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)")

            .DataType(new ArrayType(FloatType.Default,4))        
        .Build();
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// X linear speed
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("X linear speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vx;
        public float Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Y linear speed
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Y linear speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vy;
        public float Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Z linear speed
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Z linear speed")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _vz;
        public float Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field RollspeedField = new Field.Builder()
            .Name(nameof(Rollspeed))
            .Title("rollspeed")
            .Description("Roll angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _rollspeed;
        public float Rollspeed { get => _rollspeed; set => _rollspeed = value; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field PitchspeedField = new Field.Builder()
            .Name(nameof(Pitchspeed))
            .Title("pitchspeed")
            .Description("Pitch angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _pitchspeed;
        public float Pitchspeed { get => _pitchspeed; set => _pitchspeed = value; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field YawspeedField = new Field.Builder()
            .Name(nameof(Yawspeed))
            .Title("yawspeed")
            .Description("Yaw angular speed")
.Units(@"rad/s")
            .DataType(FloatType.Default)
        .Build();
        private float _yawspeed;
        public float Yawspeed { get => _yawspeed; set => _yawspeed = value; }
        /// <summary>
        /// Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: pose_covariance, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PoseCovarianceField = new Field.Builder()
            .Name(nameof(PoseCovariance))
            .Title("pose_covariance")
            .Description("Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,21))        
        .Build();
        public const int PoseCovarianceMaxItemsCount = 21;
        public float[] PoseCovariance { get; } = new float[21];
        [Obsolete("This method is deprecated. Use GetPoseCovarianceMaxItemsCount instead.")]
        public byte GetPoseCovarianceMaxItemsCount() => 21;
        /// <summary>
        /// Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: velocity_covariance, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VelocityCovarianceField = new Field.Builder()
            .Name(nameof(VelocityCovariance))
            .Title("velocity_covariance")
            .Description("Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.")

            .DataType(new ArrayType(FloatType.Default,21))        
        .Build();
        public const int VelocityCovarianceMaxItemsCount = 21;
        public float[] VelocityCovariance { get; } = new float[21];
        /// <summary>
        /// Coordinate frame of reference for the pose data.
        /// OriginName: frame_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameIdField = new Field.Builder()
            .Name(nameof(FrameId))
            .Title("frame_id")
            .Description("Coordinate frame of reference for the pose data.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frameId;
        public MavFrame FrameId { get => _frameId; set => _frameId = value; } 
        /// <summary>
        /// Coordinate frame of reference for the velocity in free space (twist) data.
        /// OriginName: child_frame_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ChildFrameIdField = new Field.Builder()
            .Name(nameof(ChildFrameId))
            .Title("child_frame_id")
            .Description("Coordinate frame of reference for the velocity in free space (twist) data.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _childFrameId;
        public MavFrame ChildFrameId { get => _childFrameId; set => _childFrameId = value; } 
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ResetCounterField = new Field.Builder()
            .Name(nameof(ResetCounter))
            .Title("reset_counter")
            .Description("Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _resetCounter;
        public byte ResetCounter { get => _resetCounter; set => _resetCounter = value; }
        /// <summary>
        /// Type of estimator that is providing the odometry.
        /// OriginName: estimator_type, Units: , IsExtended: true
        /// </summary>
        public static readonly Field EstimatorTypeField = new Field.Builder()
            .Name(nameof(EstimatorType))
            .Title("estimator_type")
            .Description("Type of estimator that is providing the odometry.")
            .DataType(new UInt8Type(MavEstimatorTypeHelper.GetValues(x=>(byte)x).Min(),MavEstimatorTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavEstimatorTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavEstimatorType _estimatorType;
        public MavEstimatorType EstimatorType { get => _estimatorType; set => _estimatorType = value; } 
        /// <summary>
        /// Optional odometry quality metric as a percentage. -1 = odometry has failed, 0 = unknown/unset quality, 1 = worst quality, 100 = best quality
        /// OriginName: quality, Units: %, IsExtended: true
        /// </summary>
        public static readonly Field QualityField = new Field.Builder()
            .Name(nameof(Quality))
            .Title("quality")
            .Description("Optional odometry quality metric as a percentage. -1 = odometry has failed, 0 = unknown/unset quality, 1 = worst quality, 100 = best quality")
.Units(@"%")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _quality;
        public sbyte Quality { get => _quality; set => _quality = value; }
    }
    /// <summary>
    /// Describe a trajectory using an array of up-to 5 waypoints in the local frame (MAV_FRAME_LOCAL_NED).
    ///  TRAJECTORY_REPRESENTATION_WAYPOINTS
    /// </summary>
    public class TrajectoryRepresentationWaypointsPacket : MavlinkV2Message<TrajectoryRepresentationWaypointsPayload>
    {
        public const int MessageId = 332;
        
        public const byte CrcExtra = 236;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TrajectoryRepresentationWaypointsPayload Payload { get; } = new();

        public override string Name => "TRAJECTORY_REPRESENTATION_WAYPOINTS";
    }

    /// <summary>
    ///  TRAJECTORY_REPRESENTATION_WAYPOINTS
    /// </summary>
    public class TrajectoryRepresentationWaypointsPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 239; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 239; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +PosX.Length * 4 // float[5] pos_x
            +PosY.Length * 4 // float[5] pos_y
            +PosZ.Length * 4 // float[5] pos_z
            +VelX.Length * 4 // float[5] vel_x
            +VelY.Length * 4 // float[5] vel_y
            +VelZ.Length * 4 // float[5] vel_z
            +AccX.Length * 4 // float[5] acc_x
            +AccY.Length * 4 // float[5] acc_y
            +AccZ.Length * 4 // float[5] acc_z
            +PosYaw.Length * 4 // float[5] pos_yaw
            +VelYaw.Length * 4 // float[5] vel_yaw
            + Command.Length * 2 // uint16_t[5] command
            
            +1 // uint8_t valid_points
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/5 - Math.Max(0,((/*PayloadByteSize*/239 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                PosX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                AccX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                AccY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                AccZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosYaw[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelYaw[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                Command[i] = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            }

            ValidPoints = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<PosX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosX[i]);
            }
            for(var i=0;i<PosY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosY[i]);
            }
            for(var i=0;i<PosZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosZ[i]);
            }
            for(var i=0;i<VelX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelX[i]);
            }
            for(var i=0;i<VelY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelY[i]);
            }
            for(var i=0;i<VelZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelZ[i]);
            }
            for(var i=0;i<AccX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AccX[i]);
            }
            for(var i=0;i<AccY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AccY[i]);
            }
            for(var i=0;i<AccZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AccZ[i]);
            }
            for(var i=0;i<PosYaw.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosYaw[i]);
            }
            for(var i=0;i<VelYaw.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelYaw[i]);
            }
            for(var i=0;i<Command.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,(ushort)Command[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ValidPoints);
            /* PayloadByteSize = 239 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,PosXField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosX[index]));
            ArrayType.Accept(visitor,PosYField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosY[index]));
            ArrayType.Accept(visitor,PosZField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosZ[index]));
            ArrayType.Accept(visitor,VelXField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref VelX[index]));
            ArrayType.Accept(visitor,VelYField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref VelY[index]));
            ArrayType.Accept(visitor,VelZField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref VelZ[index]));
            ArrayType.Accept(visitor,AccXField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref AccX[index]));
            ArrayType.Accept(visitor,AccYField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref AccY[index]));
            ArrayType.Accept(visitor,AccZField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref AccZ[index]));
            ArrayType.Accept(visitor,PosYawField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosYaw[index]));
            ArrayType.Accept(visitor,VelYawField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref VelYaw[index]));
            ArrayType.Accept(visitor,CommandField, (index, v, f, t) =>
            {
                var tmp = (ushort)Command[index];
                UInt16Type.Accept(v, f, t, ref tmp);
                Command[index] = (MavCmd)tmp;
            });
            UInt8Type.Accept(visitor,ValidPointsField, ref _validPoints);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X-coordinate of waypoint, set to NaN if not being used
        /// OriginName: pos_x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosXField = new Field.Builder()
            .Name(nameof(PosX))
            .Title("pos_x")
            .Description("X-coordinate of waypoint, set to NaN if not being used")
.Units(@"m")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosXMaxItemsCount = 5;
        public float[] PosX { get; } = new float[5];
        [Obsolete("This method is deprecated. Use GetPosXMaxItemsCount instead.")]
        public byte GetPosXMaxItemsCount() => 5;
        /// <summary>
        /// Y-coordinate of waypoint, set to NaN if not being used
        /// OriginName: pos_y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosYField = new Field.Builder()
            .Name(nameof(PosY))
            .Title("pos_y")
            .Description("Y-coordinate of waypoint, set to NaN if not being used")
.Units(@"m")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosYMaxItemsCount = 5;
        public float[] PosY { get; } = new float[5];
        /// <summary>
        /// Z-coordinate of waypoint, set to NaN if not being used
        /// OriginName: pos_z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosZField = new Field.Builder()
            .Name(nameof(PosZ))
            .Title("pos_z")
            .Description("Z-coordinate of waypoint, set to NaN if not being used")
.Units(@"m")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosZMaxItemsCount = 5;
        public float[] PosZ { get; } = new float[5];
        /// <summary>
        /// X-velocity of waypoint, set to NaN if not being used
        /// OriginName: vel_x, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelXField = new Field.Builder()
            .Name(nameof(VelX))
            .Title("vel_x")
            .Description("X-velocity of waypoint, set to NaN if not being used")
.Units(@"m/s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int VelXMaxItemsCount = 5;
        public float[] VelX { get; } = new float[5];
        /// <summary>
        /// Y-velocity of waypoint, set to NaN if not being used
        /// OriginName: vel_y, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelYField = new Field.Builder()
            .Name(nameof(VelY))
            .Title("vel_y")
            .Description("Y-velocity of waypoint, set to NaN if not being used")
.Units(@"m/s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int VelYMaxItemsCount = 5;
        public float[] VelY { get; } = new float[5];
        /// <summary>
        /// Z-velocity of waypoint, set to NaN if not being used
        /// OriginName: vel_z, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field VelZField = new Field.Builder()
            .Name(nameof(VelZ))
            .Title("vel_z")
            .Description("Z-velocity of waypoint, set to NaN if not being used")
.Units(@"m/s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int VelZMaxItemsCount = 5;
        public float[] VelZ { get; } = new float[5];
        /// <summary>
        /// X-acceleration of waypoint, set to NaN if not being used
        /// OriginName: acc_x, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AccXField = new Field.Builder()
            .Name(nameof(AccX))
            .Title("acc_x")
            .Description("X-acceleration of waypoint, set to NaN if not being used")
.Units(@"m/s/s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int AccXMaxItemsCount = 5;
        public float[] AccX { get; } = new float[5];
        /// <summary>
        /// Y-acceleration of waypoint, set to NaN if not being used
        /// OriginName: acc_y, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AccYField = new Field.Builder()
            .Name(nameof(AccY))
            .Title("acc_y")
            .Description("Y-acceleration of waypoint, set to NaN if not being used")
.Units(@"m/s/s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int AccYMaxItemsCount = 5;
        public float[] AccY { get; } = new float[5];
        /// <summary>
        /// Z-acceleration of waypoint, set to NaN if not being used
        /// OriginName: acc_z, Units: m/s/s, IsExtended: false
        /// </summary>
        public static readonly Field AccZField = new Field.Builder()
            .Name(nameof(AccZ))
            .Title("acc_z")
            .Description("Z-acceleration of waypoint, set to NaN if not being used")
.Units(@"m/s/s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int AccZMaxItemsCount = 5;
        public float[] AccZ { get; } = new float[5];
        /// <summary>
        /// Yaw angle, set to NaN if not being used
        /// OriginName: pos_yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PosYawField = new Field.Builder()
            .Name(nameof(PosYaw))
            .Title("pos_yaw")
            .Description("Yaw angle, set to NaN if not being used")
.Units(@"rad")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosYawMaxItemsCount = 5;
        public float[] PosYaw { get; } = new float[5];
        /// <summary>
        /// Yaw rate, set to NaN if not being used
        /// OriginName: vel_yaw, Units: rad/s, IsExtended: false
        /// </summary>
        public static readonly Field VelYawField = new Field.Builder()
            .Name(nameof(VelYaw))
            .Title("vel_yaw")
            .Description("Yaw rate, set to NaN if not being used")
.Units(@"rad/s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int VelYawMaxItemsCount = 5;
        public float[] VelYaw { get; } = new float[5];
        /// <summary>
        /// MAV_CMD command id of waypoint, set to UINT16_MAX if not being used.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CommandField = new Field.Builder()
            .Name(nameof(Command))
            .Title("command")
            .Description("MAV_CMD command id of waypoint, set to UINT16_MAX if not being used.")
            .DataType(new ArrayType(new UInt16Type(MavCmdHelper.GetValues(x=>(ushort)x).Min(),MavCmdHelper.GetValues(x=>(ushort)x).Max()),5))
            .Enum(MavCmdHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        public const int CommandMaxItemsCount = 5;
        public MavCmd[] Command { get; } = new MavCmd[5];
        /// <summary>
        /// Number of valid points (up-to 5 waypoints are possible)
        /// OriginName: valid_points, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ValidPointsField = new Field.Builder()
            .Name(nameof(ValidPoints))
            .Title("valid_points")
            .Description("Number of valid points (up-to 5 waypoints are possible)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _validPoints;
        public byte ValidPoints { get => _validPoints; set => _validPoints = value; }
    }
    /// <summary>
    /// Describe a trajectory using an array of up-to 5 bezier control points in the local frame (MAV_FRAME_LOCAL_NED).
    ///  TRAJECTORY_REPRESENTATION_BEZIER
    /// </summary>
    public class TrajectoryRepresentationBezierPacket : MavlinkV2Message<TrajectoryRepresentationBezierPayload>
    {
        public const int MessageId = 333;
        
        public const byte CrcExtra = 231;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TrajectoryRepresentationBezierPayload Payload { get; } = new();

        public override string Name => "TRAJECTORY_REPRESENTATION_BEZIER";
    }

    /// <summary>
    ///  TRAJECTORY_REPRESENTATION_BEZIER
    /// </summary>
    public class TrajectoryRepresentationBezierPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 109; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 109; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +PosX.Length * 4 // float[5] pos_x
            +PosY.Length * 4 // float[5] pos_y
            +PosZ.Length * 4 // float[5] pos_z
            +Delta.Length * 4 // float[5] delta
            +PosYaw.Length * 4 // float[5] pos_yaw
            +1 // uint8_t valid_points
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/5 - Math.Max(0,((/*PayloadByteSize*/109 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                PosX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                Delta[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosYaw[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ValidPoints = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<PosX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosX[i]);
            }
            for(var i=0;i<PosY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosY[i]);
            }
            for(var i=0;i<PosZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosZ[i]);
            }
            for(var i=0;i<Delta.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Delta[i]);
            }
            for(var i=0;i<PosYaw.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosYaw[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ValidPoints);
            /* PayloadByteSize = 109 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,PosXField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosX[index]));
            ArrayType.Accept(visitor,PosYField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosY[index]));
            ArrayType.Accept(visitor,PosZField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosZ[index]));
            ArrayType.Accept(visitor,DeltaField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Delta[index]));
            ArrayType.Accept(visitor,PosYawField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref PosYaw[index]));
            UInt8Type.Accept(visitor,ValidPointsField, ref _validPoints);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// X-coordinate of bezier control points. Set to NaN if not being used
        /// OriginName: pos_x, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosXField = new Field.Builder()
            .Name(nameof(PosX))
            .Title("pos_x")
            .Description("X-coordinate of bezier control points. Set to NaN if not being used")
.Units(@"m")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosXMaxItemsCount = 5;
        public float[] PosX { get; } = new float[5];
        [Obsolete("This method is deprecated. Use GetPosXMaxItemsCount instead.")]
        public byte GetPosXMaxItemsCount() => 5;
        /// <summary>
        /// Y-coordinate of bezier control points. Set to NaN if not being used
        /// OriginName: pos_y, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosYField = new Field.Builder()
            .Name(nameof(PosY))
            .Title("pos_y")
            .Description("Y-coordinate of bezier control points. Set to NaN if not being used")
.Units(@"m")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosYMaxItemsCount = 5;
        public float[] PosY { get; } = new float[5];
        /// <summary>
        /// Z-coordinate of bezier control points. Set to NaN if not being used
        /// OriginName: pos_z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field PosZField = new Field.Builder()
            .Name(nameof(PosZ))
            .Title("pos_z")
            .Description("Z-coordinate of bezier control points. Set to NaN if not being used")
.Units(@"m")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosZMaxItemsCount = 5;
        public float[] PosZ { get; } = new float[5];
        /// <summary>
        /// Bezier time horizon. Set to NaN if velocity/acceleration should not be incorporated
        /// OriginName: delta, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field DeltaField = new Field.Builder()
            .Name(nameof(Delta))
            .Title("delta")
            .Description("Bezier time horizon. Set to NaN if velocity/acceleration should not be incorporated")
.Units(@"s")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int DeltaMaxItemsCount = 5;
        public float[] Delta { get; } = new float[5];
        /// <summary>
        /// Yaw. Set to NaN for unchanged
        /// OriginName: pos_yaw, Units: rad, IsExtended: false
        /// </summary>
        public static readonly Field PosYawField = new Field.Builder()
            .Name(nameof(PosYaw))
            .Title("pos_yaw")
            .Description("Yaw. Set to NaN for unchanged")
.Units(@"rad")
            .DataType(new ArrayType(FloatType.Default,5))        
        .Build();
        public const int PosYawMaxItemsCount = 5;
        public float[] PosYaw { get; } = new float[5];
        /// <summary>
        /// Number of valid control points (up-to 5 points are possible)
        /// OriginName: valid_points, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ValidPointsField = new Field.Builder()
            .Name(nameof(ValidPoints))
            .Title("valid_points")
            .Description("Number of valid control points (up-to 5 points are possible)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _validPoints;
        public byte ValidPoints { get => _validPoints; set => _validPoints = value; }
    }
    /// <summary>
    /// Report current used cellular network status
    ///  CELLULAR_STATUS
    /// </summary>
    public class CellularStatusPacket : MavlinkV2Message<CellularStatusPayload>
    {
        public const int MessageId = 334;
        
        public const byte CrcExtra = 72;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CellularStatusPayload Payload { get; } = new();

        public override string Name => "CELLULAR_STATUS";
    }

    /// <summary>
    ///  CELLULAR_STATUS
    /// </summary>
    public class CellularStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 10; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 10; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t mcc
            +2 // uint16_t mnc
            +2 // uint16_t lac
            + 1 // uint8_t status
            + 1 // uint8_t failure_reason
            + 1 // uint8_t type
            +1 // uint8_t quality
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Mcc = BinSerialize.ReadUShort(ref buffer);
            Mnc = BinSerialize.ReadUShort(ref buffer);
            Lac = BinSerialize.ReadUShort(ref buffer);
            Status = (CellularStatusFlag)BinSerialize.ReadByte(ref buffer);
            FailureReason = (CellularNetworkFailedReason)BinSerialize.ReadByte(ref buffer);
            Type = (CellularNetworkRadioType)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Mcc);
            BinSerialize.WriteUShort(ref buffer,Mnc);
            BinSerialize.WriteUShort(ref buffer,Lac);
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            BinSerialize.WriteByte(ref buffer,(byte)FailureReason);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 10 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,MccField, ref _mcc);    
            UInt16Type.Accept(visitor,MncField, ref _mnc);    
            UInt16Type.Accept(visitor,LacField, ref _lac);    
            var tmpStatus = (byte)Status;
            UInt8Type.Accept(visitor,StatusField, ref tmpStatus);
            Status = (CellularStatusFlag)tmpStatus;
            var tmpFailureReason = (byte)FailureReason;
            UInt8Type.Accept(visitor,FailureReasonField, ref tmpFailureReason);
            FailureReason = (CellularNetworkFailedReason)tmpFailureReason;
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (CellularNetworkRadioType)tmpType;
            UInt8Type.Accept(visitor,QualityField, ref _quality);    

        }

        /// <summary>
        /// Mobile country code. If unknown, set to UINT16_MAX
        /// OriginName: mcc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MccField = new Field.Builder()
            .Name(nameof(Mcc))
            .Title("mcc")
            .Description("Mobile country code. If unknown, set to UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _mcc;
        public ushort Mcc { get => _mcc; set => _mcc = value; }
        /// <summary>
        /// Mobile network code. If unknown, set to UINT16_MAX
        /// OriginName: mnc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MncField = new Field.Builder()
            .Name(nameof(Mnc))
            .Title("mnc")
            .Description("Mobile network code. If unknown, set to UINT16_MAX")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _mnc;
        public ushort Mnc { get => _mnc; set => _mnc = value; }
        /// <summary>
        /// Location area code. If unknown, set to 0
        /// OriginName: lac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LacField = new Field.Builder()
            .Name(nameof(Lac))
            .Title("lac")
            .Description("Location area code. If unknown, set to 0")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _lac;
        public ushort Lac { get => _lac; set => _lac = value; }
        /// <summary>
        /// Cellular modem status
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StatusField = new Field.Builder()
            .Name(nameof(Status))
            .Title("status")
            .Description("Cellular modem status")
            .DataType(new UInt8Type(CellularStatusFlagHelper.GetValues(x=>(byte)x).Min(),CellularStatusFlagHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CellularStatusFlagHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CellularStatusFlag _status;
        public CellularStatusFlag Status { get => _status; set => _status = value; } 
        /// <summary>
        /// Failure reason when status in in CELLULAR_STATUS_FLAG_FAILED
        /// OriginName: failure_reason, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FailureReasonField = new Field.Builder()
            .Name(nameof(FailureReason))
            .Title("failure_reason")
            .Description("Failure reason when status in in CELLULAR_STATUS_FLAG_FAILED")
            .DataType(new UInt8Type(CellularNetworkFailedReasonHelper.GetValues(x=>(byte)x).Min(),CellularNetworkFailedReasonHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CellularNetworkFailedReasonHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CellularNetworkFailedReason _failureReason;
        public CellularNetworkFailedReason FailureReason { get => _failureReason; set => _failureReason = value; } 
        /// <summary>
        /// Cellular network radio type: gsm, cdma, lte...
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Cellular network radio type: gsm, cdma, lte...")
            .DataType(new UInt8Type(CellularNetworkRadioTypeHelper.GetValues(x=>(byte)x).Min(),CellularNetworkRadioTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CellularNetworkRadioTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CellularNetworkRadioType _type;
        public CellularNetworkRadioType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Signal quality in percent. If unknown, set to UINT8_MAX
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public static readonly Field QualityField = new Field.Builder()
            .Name(nameof(Quality))
            .Title("quality")
            .Description("Signal quality in percent. If unknown, set to UINT8_MAX")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _quality;
        public byte Quality { get => _quality; set => _quality = value; }
    }
    /// <summary>
    /// Status of the Iridium SBD link.
    ///  ISBD_LINK_STATUS
    /// </summary>
    public class IsbdLinkStatusPacket : MavlinkV2Message<IsbdLinkStatusPayload>
    {
        public const int MessageId = 335;
        
        public const byte CrcExtra = 225;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override IsbdLinkStatusPayload Payload { get; } = new();

        public override string Name => "ISBD_LINK_STATUS";
    }

    /// <summary>
    ///  ISBD_LINK_STATUS
    /// </summary>
    public class IsbdLinkStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t timestamp
            +8 // uint64_t last_heartbeat
            +2 // uint16_t failed_sessions
            +2 // uint16_t successful_sessions
            +1 // uint8_t signal_quality
            +1 // uint8_t ring_pending
            +1 // uint8_t tx_session_pending
            +1 // uint8_t rx_session_pending
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Timestamp = BinSerialize.ReadULong(ref buffer);
            LastHeartbeat = BinSerialize.ReadULong(ref buffer);
            FailedSessions = BinSerialize.ReadUShort(ref buffer);
            SuccessfulSessions = BinSerialize.ReadUShort(ref buffer);
            SignalQuality = (byte)BinSerialize.ReadByte(ref buffer);
            RingPending = (byte)BinSerialize.ReadByte(ref buffer);
            TxSessionPending = (byte)BinSerialize.ReadByte(ref buffer);
            RxSessionPending = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Timestamp);
            BinSerialize.WriteULong(ref buffer,LastHeartbeat);
            BinSerialize.WriteUShort(ref buffer,FailedSessions);
            BinSerialize.WriteUShort(ref buffer,SuccessfulSessions);
            BinSerialize.WriteByte(ref buffer,(byte)SignalQuality);
            BinSerialize.WriteByte(ref buffer,(byte)RingPending);
            BinSerialize.WriteByte(ref buffer,(byte)TxSessionPending);
            BinSerialize.WriteByte(ref buffer,(byte)RxSessionPending);
            /* PayloadByteSize = 24 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimestampField, ref _timestamp);    
            UInt64Type.Accept(visitor,LastHeartbeatField, ref _lastHeartbeat);    
            UInt16Type.Accept(visitor,FailedSessionsField, ref _failedSessions);    
            UInt16Type.Accept(visitor,SuccessfulSessionsField, ref _successfulSessions);    
            UInt8Type.Accept(visitor,SignalQualityField, ref _signalQuality);    
            UInt8Type.Accept(visitor,RingPendingField, ref _ringPending);    
            UInt8Type.Accept(visitor,TxSessionPendingField, ref _txSessionPending);    
            UInt8Type.Accept(visitor,RxSessionPendingField, ref _rxSessionPending);    

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: timestamp, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timestamp;
        public ulong Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: last_heartbeat, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field LastHeartbeatField = new Field.Builder()
            .Name(nameof(LastHeartbeat))
            .Title("last_heartbeat")
            .Description("Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _lastHeartbeat;
        public ulong LastHeartbeat { get => _lastHeartbeat; set => _lastHeartbeat = value; }
        /// <summary>
        /// Number of failed SBD sessions.
        /// OriginName: failed_sessions, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FailedSessionsField = new Field.Builder()
            .Name(nameof(FailedSessions))
            .Title("failed_sessions")
            .Description("Number of failed SBD sessions.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _failedSessions;
        public ushort FailedSessions { get => _failedSessions; set => _failedSessions = value; }
        /// <summary>
        /// Number of successful SBD sessions.
        /// OriginName: successful_sessions, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SuccessfulSessionsField = new Field.Builder()
            .Name(nameof(SuccessfulSessions))
            .Title("successful_sessions")
            .Description("Number of successful SBD sessions.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _successfulSessions;
        public ushort SuccessfulSessions { get => _successfulSessions; set => _successfulSessions = value; }
        /// <summary>
        /// Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength.
        /// OriginName: signal_quality, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SignalQualityField = new Field.Builder()
            .Name(nameof(SignalQuality))
            .Title("signal_quality")
            .Description("Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _signalQuality;
        public byte SignalQuality { get => _signalQuality; set => _signalQuality = value; }
        /// <summary>
        /// 1: Ring call pending, 0: No call pending.
        /// OriginName: ring_pending, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RingPendingField = new Field.Builder()
            .Name(nameof(RingPending))
            .Title("ring_pending")
            .Description("1: Ring call pending, 0: No call pending.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _ringPending;
        public byte RingPending { get => _ringPending; set => _ringPending = value; }
        /// <summary>
        /// 1: Transmission session pending, 0: No transmission session pending.
        /// OriginName: tx_session_pending, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TxSessionPendingField = new Field.Builder()
            .Name(nameof(TxSessionPending))
            .Title("tx_session_pending")
            .Description("1: Transmission session pending, 0: No transmission session pending.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _txSessionPending;
        public byte TxSessionPending { get => _txSessionPending; set => _txSessionPending = value; }
        /// <summary>
        /// 1: Receiving session pending, 0: No receiving session pending.
        /// OriginName: rx_session_pending, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RxSessionPendingField = new Field.Builder()
            .Name(nameof(RxSessionPending))
            .Title("rx_session_pending")
            .Description("1: Receiving session pending, 0: No receiving session pending.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _rxSessionPending;
        public byte RxSessionPending { get => _rxSessionPending; set => _rxSessionPending = value; }
    }
    /// <summary>
    /// Configure cellular modems.
    ///         This message is re-emitted as an acknowledgement by the modem.
    ///         The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE.
    ///  CELLULAR_CONFIG
    /// </summary>
    public class CellularConfigPacket : MavlinkV2Message<CellularConfigPayload>
    {
        public const int MessageId = 336;
        
        public const byte CrcExtra = 245;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CellularConfigPayload Payload { get; } = new();

        public override string Name => "CELLULAR_CONFIG";
    }

    /// <summary>
    ///  CELLULAR_CONFIG
    /// </summary>
    public class CellularConfigPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 84; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 84; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t enable_lte
            +1 // uint8_t enable_pin
            +Pin.Length // char[16] pin
            +NewPin.Length // char[16] new_pin
            +Apn.Length // char[32] apn
            +Puk.Length // char[16] puk
            +1 // uint8_t roaming
            + 1 // uint8_t response
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            EnableLte = (byte)BinSerialize.ReadByte(ref buffer);
            EnablePin = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Pin)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Pin.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = NewPin)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, NewPin.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/84 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Apn)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Apn.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Puk)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Puk.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            Roaming = (byte)BinSerialize.ReadByte(ref buffer);
            Response = (CellularConfigResponse)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)EnableLte);
            BinSerialize.WriteByte(ref buffer,(byte)EnablePin);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Pin)
                {
                    Encoding.ASCII.GetBytes(charPointer, Pin.Length, bytePointer, Pin.Length);
                }
            }
            buffer = buffer.Slice(Pin.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = NewPin)
                {
                    Encoding.ASCII.GetBytes(charPointer, NewPin.Length, bytePointer, NewPin.Length);
                }
            }
            buffer = buffer.Slice(NewPin.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Apn)
                {
                    Encoding.ASCII.GetBytes(charPointer, Apn.Length, bytePointer, Apn.Length);
                }
            }
            buffer = buffer.Slice(Apn.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Puk)
                {
                    Encoding.ASCII.GetBytes(charPointer, Puk.Length, bytePointer, Puk.Length);
                }
            }
            buffer = buffer.Slice(Puk.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)Roaming);
            BinSerialize.WriteByte(ref buffer,(byte)Response);
            /* PayloadByteSize = 84 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,EnableLteField, ref _enableLte);    
            UInt8Type.Accept(visitor,EnablePinField, ref _enablePin);    
            ArrayType.Accept(visitor,PinField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Pin[index]));
            ArrayType.Accept(visitor,NewPinField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref NewPin[index]));
            ArrayType.Accept(visitor,ApnField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Apn[index]));
            ArrayType.Accept(visitor,PukField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Puk[index]));
            UInt8Type.Accept(visitor,RoamingField, ref _roaming);    
            var tmpResponse = (byte)Response;
            UInt8Type.Accept(visitor,ResponseField, ref tmpResponse);
            Response = (CellularConfigResponse)tmpResponse;

        }

        /// <summary>
        /// Enable/disable LTE. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.
        /// OriginName: enable_lte, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EnableLteField = new Field.Builder()
            .Name(nameof(EnableLte))
            .Title("enable_lte")
            .Description("Enable/disable LTE. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _enableLte;
        public byte EnableLte { get => _enableLte; set => _enableLte = value; }
        /// <summary>
        /// Enable/disable PIN on the SIM card. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.
        /// OriginName: enable_pin, Units: , IsExtended: false
        /// </summary>
        public static readonly Field EnablePinField = new Field.Builder()
            .Name(nameof(EnablePin))
            .Title("enable_pin")
            .Description("Enable/disable PIN on the SIM card. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _enablePin;
        public byte EnablePin { get => _enablePin; set => _enablePin = value; }
        /// <summary>
        /// PIN sent to the SIM card. Blank when PIN is disabled. Empty when message is sent back as a response.
        /// OriginName: pin, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PinField = new Field.Builder()
            .Name(nameof(Pin))
            .Title("pin")
            .Description("PIN sent to the SIM card. Blank when PIN is disabled. Empty when message is sent back as a response.")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int PinMaxItemsCount = 16;
        public char[] Pin { get; } = new char[16];
        /// <summary>
        /// New PIN when changing the PIN. Blank to leave it unchanged. Empty when message is sent back as a response.
        /// OriginName: new_pin, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NewPinField = new Field.Builder()
            .Name(nameof(NewPin))
            .Title("new_pin")
            .Description("New PIN when changing the PIN. Blank to leave it unchanged. Empty when message is sent back as a response.")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int NewPinMaxItemsCount = 16;
        public char[] NewPin { get; } = new char[16];
        /// <summary>
        /// Name of the cellular APN. Blank to leave it unchanged. Current APN when sent back as a response.
        /// OriginName: apn, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ApnField = new Field.Builder()
            .Name(nameof(Apn))
            .Title("apn")
            .Description("Name of the cellular APN. Blank to leave it unchanged. Current APN when sent back as a response.")

            .DataType(new ArrayType(CharType.Ascii,32))
        .Build();
        public const int ApnMaxItemsCount = 32;
        public char[] Apn { get; } = new char[32];
        [Obsolete("This method is deprecated. Use GetApnMaxItemsCount instead.")]
        public byte GetApnMaxItemsCount() => 32;
        /// <summary>
        /// Required PUK code in case the user failed to authenticate 3 times with the PIN. Empty when message is sent back as a response.
        /// OriginName: puk, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PukField = new Field.Builder()
            .Name(nameof(Puk))
            .Title("puk")
            .Description("Required PUK code in case the user failed to authenticate 3 times with the PIN. Empty when message is sent back as a response.")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int PukMaxItemsCount = 16;
        public char[] Puk { get; } = new char[16];
        /// <summary>
        /// Enable/disable roaming. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.
        /// OriginName: roaming, Units: , IsExtended: false
        /// </summary>
        public static readonly Field RoamingField = new Field.Builder()
            .Name(nameof(Roaming))
            .Title("roaming")
            .Description("Enable/disable roaming. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _roaming;
        public byte Roaming { get => _roaming; set => _roaming = value; }
        /// <summary>
        /// Message acceptance response (sent back to GS).
        /// OriginName: response, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ResponseField = new Field.Builder()
            .Name(nameof(Response))
            .Title("response")
            .Description("Message acceptance response (sent back to GS).")
            .DataType(new UInt8Type(CellularConfigResponseHelper.GetValues(x=>(byte)x).Min(),CellularConfigResponseHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CellularConfigResponseHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CellularConfigResponse _response;
        public CellularConfigResponse Response { get => _response; set => _response = value; } 
    }
    /// <summary>
    /// RPM sensor data message.
    ///  RAW_RPM
    /// </summary>
    public class RawRpmPacket : MavlinkV2Message<RawRpmPayload>
    {
        public const int MessageId = 339;
        
        public const byte CrcExtra = 199;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RawRpmPayload Payload { get; } = new();

        public override string Name => "RAW_RPM";
    }

    /// <summary>
    ///  RAW_RPM
    /// </summary>
    public class RawRpmPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // float frequency
            +1 // uint8_t index
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Frequency = BinSerialize.ReadFloat(ref buffer);
            Index = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Frequency);
            BinSerialize.WriteByte(ref buffer,(byte)Index);
            /* PayloadByteSize = 5 */;
        }

        public void Accept(IVisitor visitor)
        {
            FloatType.Accept(visitor,FrequencyField, ref _frequency);    
            UInt8Type.Accept(visitor,IndexField, ref _index);    

        }

        /// <summary>
        /// Indicated rate
        /// OriginName: frequency, Units: rpm, IsExtended: false
        /// </summary>
        public static readonly Field FrequencyField = new Field.Builder()
            .Name(nameof(Frequency))
            .Title("frequency")
            .Description("Indicated rate")
.Units(@"rpm")
            .DataType(FloatType.Default)
        .Build();
        private float _frequency;
        public float Frequency { get => _frequency; set => _frequency = value; }
        /// <summary>
        /// Index of this RPM sensor (0-indexed)
        /// OriginName: index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IndexField = new Field.Builder()
            .Name(nameof(Index))
            .Title("index")
            .Description("Index of this RPM sensor (0-indexed)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _index;
        public byte Index { get => _index; set => _index = value; }
    }
    /// <summary>
    /// The global position resulting from GPS and sensor fusion.
    ///  UTM_GLOBAL_POSITION
    /// </summary>
    public class UtmGlobalPositionPacket : MavlinkV2Message<UtmGlobalPositionPayload>
    {
        public const int MessageId = 340;
        
        public const byte CrcExtra = 99;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override UtmGlobalPositionPayload Payload { get; } = new();

        public override string Name => "UTM_GLOBAL_POSITION";
    }

    /// <summary>
    ///  UTM_GLOBAL_POSITION
    /// </summary>
    public class UtmGlobalPositionPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 70; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 70; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time
            +4 // int32_t lat
            +4 // int32_t lon
            +4 // int32_t alt
            +4 // int32_t relative_alt
            +4 // int32_t next_lat
            +4 // int32_t next_lon
            +4 // int32_t next_alt
            +2 // int16_t vx
            +2 // int16_t vy
            +2 // int16_t vz
            +2 // uint16_t h_acc
            +2 // uint16_t v_acc
            +2 // uint16_t vel_acc
            +2 // uint16_t update_rate
            +UasId.Length // uint8_t[18] uas_id
            + 1 // uint8_t flight_state
            + 1 // uint8_t flags
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Time = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            NextLat = BinSerialize.ReadInt(ref buffer);
            NextLon = BinSerialize.ReadInt(ref buffer);
            NextAlt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            HAcc = BinSerialize.ReadUShort(ref buffer);
            VAcc = BinSerialize.ReadUShort(ref buffer);
            VelAcc = BinSerialize.ReadUShort(ref buffer);
            UpdateRate = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/18 - Math.Max(0,((/*PayloadByteSize*/70 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                UasId[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            FlightState = (UtmFlightState)BinSerialize.ReadByte(ref buffer);
            Flags = (UtmDataAvailFlags)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Time);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            BinSerialize.WriteInt(ref buffer,NextLat);
            BinSerialize.WriteInt(ref buffer,NextLon);
            BinSerialize.WriteInt(ref buffer,NextAlt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteUShort(ref buffer,HAcc);
            BinSerialize.WriteUShort(ref buffer,VAcc);
            BinSerialize.WriteUShort(ref buffer,VelAcc);
            BinSerialize.WriteUShort(ref buffer,UpdateRate);
            for(var i=0;i<UasId.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)UasId[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)FlightState);
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            /* PayloadByteSize = 70 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeField, ref _time);    
            Int32Type.Accept(visitor,LatField, ref _lat);    
            Int32Type.Accept(visitor,LonField, ref _lon);    
            Int32Type.Accept(visitor,AltField, ref _alt);    
            Int32Type.Accept(visitor,RelativeAltField, ref _relativeAlt);    
            Int32Type.Accept(visitor,NextLatField, ref _nextLat);    
            Int32Type.Accept(visitor,NextLonField, ref _nextLon);    
            Int32Type.Accept(visitor,NextAltField, ref _nextAlt);    
            Int16Type.Accept(visitor,VxField, ref _vx);
            Int16Type.Accept(visitor,VyField, ref _vy);
            Int16Type.Accept(visitor,VzField, ref _vz);
            UInt16Type.Accept(visitor,HAccField, ref _hAcc);    
            UInt16Type.Accept(visitor,VAccField, ref _vAcc);    
            UInt16Type.Accept(visitor,VelAccField, ref _velAcc);    
            UInt16Type.Accept(visitor,UpdateRateField, ref _updateRate);    
            ArrayType.Accept(visitor,UasIdField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref UasId[index]));    
            var tmpFlightState = (byte)FlightState;
            UInt8Type.Accept(visitor,FlightStateField, ref tmpFlightState);
            FlightState = (UtmFlightState)tmpFlightState;
            var tmpFlags = (byte)Flags;
            UInt8Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (UtmDataAvailFlags)tmpFlags;

        }

        /// <summary>
        /// Time of applicability of position (microseconds since UNIX epoch).
        /// OriginName: time, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeField = new Field.Builder()
            .Name(nameof(Time))
            .Title("time")
            .Description("Time of applicability of position (microseconds since UNIX epoch).")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _time;
        public ulong Time { get => _time; set => _time = value; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatField = new Field.Builder()
            .Name(nameof(Lat))
            .Title("lat")
            .Description("Latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lat;
        public int Lat { get => _lat; set => _lat = value; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LonField = new Field.Builder()
            .Name(nameof(Lon))
            .Title("lon")
            .Description("Longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _lon;
        public int Lon { get => _lon; set => _lon = value; }
        /// <summary>
        /// Altitude (WGS84)
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field AltField = new Field.Builder()
            .Name(nameof(Alt))
            .Title("alt")
            .Description("Altitude (WGS84)")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _alt;
        public int Alt { get => _alt; set => _alt = value; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field RelativeAltField = new Field.Builder()
            .Name(nameof(RelativeAlt))
            .Title("relative_alt")
            .Description("Altitude above ground")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _relativeAlt;
        public int RelativeAlt { get => _relativeAlt; set => _relativeAlt = value; }
        /// <summary>
        /// Next waypoint, latitude (WGS84)
        /// OriginName: next_lat, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field NextLatField = new Field.Builder()
            .Name(nameof(NextLat))
            .Title("next_lat")
            .Description("Next waypoint, latitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _nextLat;
        public int NextLat { get => _nextLat; set => _nextLat = value; }
        /// <summary>
        /// Next waypoint, longitude (WGS84)
        /// OriginName: next_lon, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field NextLonField = new Field.Builder()
            .Name(nameof(NextLon))
            .Title("next_lon")
            .Description("Next waypoint, longitude (WGS84)")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _nextLon;
        public int NextLon { get => _nextLon; set => _nextLon = value; }
        /// <summary>
        /// Next waypoint, altitude (WGS84)
        /// OriginName: next_alt, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field NextAltField = new Field.Builder()
            .Name(nameof(NextAlt))
            .Title("next_alt")
            .Description("Next waypoint, altitude (WGS84)")
.Units(@"mm")
            .DataType(Int32Type.Default)
        .Build();
        private int _nextAlt;
        public int NextAlt { get => _nextAlt; set => _nextAlt = value; }
        /// <summary>
        /// Ground X speed (latitude, positive north)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VxField = new Field.Builder()
            .Name(nameof(Vx))
            .Title("vx")
            .Description("Ground X speed (latitude, positive north)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vx;
        public short Vx { get => _vx; set => _vx = value; }
        /// <summary>
        /// Ground Y speed (longitude, positive east)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VyField = new Field.Builder()
            .Name(nameof(Vy))
            .Title("vy")
            .Description("Ground Y speed (longitude, positive east)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vy;
        public short Vy { get => _vy; set => _vy = value; }
        /// <summary>
        /// Ground Z speed (altitude, positive down)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VzField = new Field.Builder()
            .Name(nameof(Vz))
            .Title("vz")
            .Description("Ground Z speed (altitude, positive down)")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _vz;
        public short Vz { get => _vz; set => _vz = value; }
        /// <summary>
        /// Horizontal position uncertainty (standard deviation)
        /// OriginName: h_acc, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field HAccField = new Field.Builder()
            .Name(nameof(HAcc))
            .Title("h_acc")
            .Description("Horizontal position uncertainty (standard deviation)")
.Units(@"mm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _hAcc;
        public ushort HAcc { get => _hAcc; set => _hAcc = value; }
        /// <summary>
        /// Altitude uncertainty (standard deviation)
        /// OriginName: v_acc, Units: mm, IsExtended: false
        /// </summary>
        public static readonly Field VAccField = new Field.Builder()
            .Name(nameof(VAcc))
            .Title("v_acc")
            .Description("Altitude uncertainty (standard deviation)")
.Units(@"mm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _vAcc;
        public ushort VAcc { get => _vAcc; set => _vAcc = value; }
        /// <summary>
        /// Speed uncertainty (standard deviation)
        /// OriginName: vel_acc, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field VelAccField = new Field.Builder()
            .Name(nameof(VelAcc))
            .Title("vel_acc")
            .Description("Speed uncertainty (standard deviation)")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _velAcc;
        public ushort VelAcc { get => _velAcc; set => _velAcc = value; }
        /// <summary>
        /// Time until next update. Set to 0 if unknown or in data driven mode.
        /// OriginName: update_rate, Units: cs, IsExtended: false
        /// </summary>
        public static readonly Field UpdateRateField = new Field.Builder()
            .Name(nameof(UpdateRate))
            .Title("update_rate")
            .Description("Time until next update. Set to 0 if unknown or in data driven mode.")
.Units(@"cs")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _updateRate;
        public ushort UpdateRate { get => _updateRate; set => _updateRate = value; }
        /// <summary>
        /// Unique UAS ID.
        /// OriginName: uas_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UasIdField = new Field.Builder()
            .Name(nameof(UasId))
            .Title("uas_id")
            .Description("Unique UAS ID.")

            .DataType(new ArrayType(UInt8Type.Default,18))
        .Build();
        public const int UasIdMaxItemsCount = 18;
        public byte[] UasId { get; } = new byte[18];
        [Obsolete("This method is deprecated. Use GetUasIdMaxItemsCount instead.")]
        public byte GetUasIdMaxItemsCount() => 18;
        /// <summary>
        /// Flight state
        /// OriginName: flight_state, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlightStateField = new Field.Builder()
            .Name(nameof(FlightState))
            .Title("flight_state")
            .Description("Flight state")
            .DataType(new UInt8Type(UtmFlightStateHelper.GetValues(x=>(byte)x).Min(),UtmFlightStateHelper.GetValues(x=>(byte)x).Max()))
            .Enum(UtmFlightStateHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private UtmFlightState _flightState;
        public UtmFlightState FlightState { get => _flightState; set => _flightState = value; } 
        /// <summary>
        /// Bitwise OR combination of the data available flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Bitwise OR combination of the data available flags.")
            .DataType(new UInt8Type(UtmDataAvailFlagsHelper.GetValues(x=>(byte)x).Min(),UtmDataAvailFlagsHelper.GetValues(x=>(byte)x).Max()))
            .Enum(UtmDataAvailFlagsHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private UtmDataAvailFlags _flags;
        public UtmDataAvailFlags Flags { get => _flags; set => _flags = value; } 
    }
    /// <summary>
    /// Large debug/prototyping array. The message uses the maximum available payload for data. The array_id and name fields are used to discriminate between messages in code and in user interfaces (respectively). Do not use in production code.
    ///  DEBUG_FLOAT_ARRAY
    /// </summary>
    public class DebugFloatArrayPacket : MavlinkV2Message<DebugFloatArrayPayload>
    {
        public const int MessageId = 350;
        
        public const byte CrcExtra = 232;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override DebugFloatArrayPayload Payload { get; } = new();

        public override string Name => "DEBUG_FLOAT_ARRAY";
    }

    /// <summary>
    ///  DEBUG_FLOAT_ARRAY
    /// </summary>
    public class DebugFloatArrayPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 252; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 252; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +2 // uint16_t array_id
            +Name.Length // char[10] name
            +Data.Length * 4 // float[58] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            ArrayId = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/252 - payloadSize - /*ExtendedFieldsLength*/232)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'Data' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 58;
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUShort(ref buffer,ArrayId);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Data[i]);
            }
            /* PayloadByteSize = 252 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt16Type.Accept(visitor,ArrayIdField, ref _arrayId);    
            ArrayType.Accept(visitor,NameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Name[index]));
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Data[index]));

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Unique ID used to discriminate between arrays
        /// OriginName: array_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ArrayIdField = new Field.Builder()
            .Name(nameof(ArrayId))
            .Title("array_id")
            .Description("Unique ID used to discriminate between arrays")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _arrayId;
        public ushort ArrayId { get => _arrayId; set => _arrayId = value; }
        /// <summary>
        /// Name, for human-friendly display in a Ground Control Station
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NameField = new Field.Builder()
            .Name(nameof(Name))
            .Title("name")
            .Description("Name, for human-friendly display in a Ground Control Station")

            .DataType(new ArrayType(CharType.Ascii,10))
        .Build();
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
        /// <summary>
        /// data
        /// OriginName: data, Units: , IsExtended: true
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("data")

            .DataType(new ArrayType(FloatType.Default,58))        
        .Build();
        public const int DataMaxItemsCount = 58;
        public float[] Data { get; } = new float[58];
    }
    /// <summary>
    /// Vehicle status report that is sent out while orbit execution is in progress (see MAV_CMD_DO_ORBIT).
    ///  ORBIT_EXECUTION_STATUS
    /// </summary>
    public class OrbitExecutionStatusPacket : MavlinkV2Message<OrbitExecutionStatusPayload>
    {
        public const int MessageId = 360;
        
        public const byte CrcExtra = 11;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OrbitExecutionStatusPayload Payload { get; } = new();

        public override string Name => "ORBIT_EXECUTION_STATUS";
    }

    /// <summary>
    ///  ORBIT_EXECUTION_STATUS
    /// </summary>
    public class OrbitExecutionStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 25; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 25; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float radius
            +4 // int32_t x
            +4 // int32_t y
            +4 // float z
            + 1 // uint8_t frame
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Radius = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadInt(ref buffer);
            Y = BinSerialize.ReadInt(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Radius);
            BinSerialize.WriteInt(ref buffer,X);
            BinSerialize.WriteInt(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 25 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,RadiusField, ref _radius);    
            Int32Type.Accept(visitor,XField, ref _x);    
            Int32Type.Accept(visitor,YField, ref _y);    
            FloatType.Accept(visitor,ZField, ref _z);    
            var tmpFrame = (byte)Frame;
            UInt8Type.Accept(visitor,FrameField, ref tmpFrame);
            Frame = (MavFrame)tmpFrame;

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Radius of the orbit circle. Positive values orbit clockwise, negative values orbit counter-clockwise.
        /// OriginName: radius, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field RadiusField = new Field.Builder()
            .Name(nameof(Radius))
            .Title("radius")
            .Description("Radius of the orbit circle. Positive values orbit clockwise, negative values orbit counter-clockwise.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _radius;
        public float Radius { get => _radius; set => _radius = value; }
        /// <summary>
        /// X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public static readonly Field XField = new Field.Builder()
            .Name(nameof(X))
            .Title("x")
            .Description("X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.")

            .DataType(Int32Type.Default)
        .Build();
        private int _x;
        public int X { get => _x; set => _x = value; }
        /// <summary>
        /// Y coordinate of center point.  Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public static readonly Field YField = new Field.Builder()
            .Name(nameof(Y))
            .Title("y")
            .Description("Y coordinate of center point.  Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.")

            .DataType(Int32Type.Default)
        .Build();
        private int _y;
        public int Y { get => _y; set => _y = value; }
        /// <summary>
        /// Altitude of center point. Coordinate system depends on frame field.
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field ZField = new Field.Builder()
            .Name(nameof(Z))
            .Title("z")
            .Description("Altitude of center point. Coordinate system depends on frame field.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _z;
        public float Z { get => _z; set => _z = value; }
        /// <summary>
        /// The coordinate system of the fields: x, y, z.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FrameField = new Field.Builder()
            .Name(nameof(Frame))
            .Title("frame")
            .Description("The coordinate system of the fields: x, y, z.")
            .DataType(new UInt8Type(MavFrameHelper.GetValues(x=>(byte)x).Min(),MavFrameHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavFrameHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavFrame _frame;
        public MavFrame Frame { get => _frame; set => _frame = value; } 
    }
    /// <summary>
    /// Smart Battery information (static/infrequent update). Use for updates from: smart battery to flight stack, flight stack to GCS. Use BATTERY_STATUS for smart battery frequent updates.
    ///  SMART_BATTERY_INFO
    /// </summary>
    public class SmartBatteryInfoPacket : MavlinkV2Message<SmartBatteryInfoPayload>
    {
        public const int MessageId = 370;
        
        public const byte CrcExtra = 75;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SmartBatteryInfoPayload Payload { get; } = new();

        public override string Name => "SMART_BATTERY_INFO";
    }

    /// <summary>
    ///  SMART_BATTERY_INFO
    /// </summary>
    public class SmartBatteryInfoPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 109; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 109; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t capacity_full_specification
            +4 // int32_t capacity_full
            +2 // uint16_t cycle_count
            +2 // uint16_t weight
            +2 // uint16_t discharge_minimum_voltage
            +2 // uint16_t charging_minimum_voltage
            +2 // uint16_t resting_minimum_voltage
            +1 // uint8_t id
            + 1 // uint8_t battery_function
            + 1 // uint8_t type
            +SerialNumber.Length // char[16] serial_number
            +DeviceName.Length // char[50] device_name
            +2 // uint16_t charging_maximum_voltage
            +1 // uint8_t cells_in_series
            +4 // uint32_t discharge_maximum_current
            +4 // uint32_t discharge_maximum_burst_current
            +ManufactureDate.Length // char[11] manufacture_date
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            CapacityFullSpecification = BinSerialize.ReadInt(ref buffer);
            CapacityFull = BinSerialize.ReadInt(ref buffer);
            CycleCount = BinSerialize.ReadUShort(ref buffer);
            Weight = BinSerialize.ReadUShort(ref buffer);
            DischargeMinimumVoltage = BinSerialize.ReadUShort(ref buffer);
            ChargingMinimumVoltage = BinSerialize.ReadUShort(ref buffer);
            RestingMinimumVoltage = BinSerialize.ReadUShort(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            BatteryFunction = (MavBatteryFunction)BinSerialize.ReadByte(ref buffer);
            Type = (MavBatteryType)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = SerialNumber)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, SerialNumber.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = /*ArrayLength*/50 - Math.Max(0,((/*PayloadByteSize*/109 - payloadSize - /*ExtendedFieldsLength*/22)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = DeviceName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, DeviceName.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            // extended field 'ChargingMaximumVoltage' can be empty
            if (buffer.IsEmpty) return;
            ChargingMaximumVoltage = BinSerialize.ReadUShort(ref buffer);
            // extended field 'CellsInSeries' can be empty
            if (buffer.IsEmpty) return;
            CellsInSeries = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'DischargeMaximumCurrent' can be empty
            if (buffer.IsEmpty) return;
            DischargeMaximumCurrent = BinSerialize.ReadUInt(ref buffer);
            // extended field 'DischargeMaximumBurstCurrent' can be empty
            if (buffer.IsEmpty) return;
            DischargeMaximumBurstCurrent = BinSerialize.ReadUInt(ref buffer);
            // extended field 'ManufactureDate' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 11;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ManufactureDate)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ManufactureDate.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,CapacityFullSpecification);
            BinSerialize.WriteInt(ref buffer,CapacityFull);
            BinSerialize.WriteUShort(ref buffer,CycleCount);
            BinSerialize.WriteUShort(ref buffer,Weight);
            BinSerialize.WriteUShort(ref buffer,DischargeMinimumVoltage);
            BinSerialize.WriteUShort(ref buffer,ChargingMinimumVoltage);
            BinSerialize.WriteUShort(ref buffer,RestingMinimumVoltage);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryFunction);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = SerialNumber)
                {
                    Encoding.ASCII.GetBytes(charPointer, SerialNumber.Length, bytePointer, SerialNumber.Length);
                }
            }
            buffer = buffer.Slice(SerialNumber.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = DeviceName)
                {
                    Encoding.ASCII.GetBytes(charPointer, DeviceName.Length, bytePointer, DeviceName.Length);
                }
            }
            buffer = buffer.Slice(DeviceName.Length);
            
            BinSerialize.WriteUShort(ref buffer,ChargingMaximumVoltage);
            BinSerialize.WriteByte(ref buffer,(byte)CellsInSeries);
            BinSerialize.WriteUInt(ref buffer,DischargeMaximumCurrent);
            BinSerialize.WriteUInt(ref buffer,DischargeMaximumBurstCurrent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ManufactureDate)
                {
                    Encoding.ASCII.GetBytes(charPointer, ManufactureDate.Length, bytePointer, ManufactureDate.Length);
                }
            }
            buffer = buffer.Slice(ManufactureDate.Length);
            
            /* PayloadByteSize = 109 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,CapacityFullSpecificationField, ref _capacityFullSpecification);    
            Int32Type.Accept(visitor,CapacityFullField, ref _capacityFull);    
            UInt16Type.Accept(visitor,CycleCountField, ref _cycleCount);    
            UInt16Type.Accept(visitor,WeightField, ref _weight);    
            UInt16Type.Accept(visitor,DischargeMinimumVoltageField, ref _dischargeMinimumVoltage);    
            UInt16Type.Accept(visitor,ChargingMinimumVoltageField, ref _chargingMinimumVoltage);    
            UInt16Type.Accept(visitor,RestingMinimumVoltageField, ref _restingMinimumVoltage);    
            UInt8Type.Accept(visitor,IdField, ref _id);    
            var tmpBatteryFunction = (byte)BatteryFunction;
            UInt8Type.Accept(visitor,BatteryFunctionField, ref tmpBatteryFunction);
            BatteryFunction = (MavBatteryFunction)tmpBatteryFunction;
            var tmpType = (byte)Type;
            UInt8Type.Accept(visitor,TypeField, ref tmpType);
            Type = (MavBatteryType)tmpType;
            ArrayType.Accept(visitor,SerialNumberField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref SerialNumber[index]));
            ArrayType.Accept(visitor,DeviceNameField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref DeviceName[index]));
            UInt16Type.Accept(visitor,ChargingMaximumVoltageField, ref _chargingMaximumVoltage);    
            UInt8Type.Accept(visitor,CellsInSeriesField, ref _cellsInSeries);    
            UInt32Type.Accept(visitor,DischargeMaximumCurrentField, ref _dischargeMaximumCurrent);    
            UInt32Type.Accept(visitor,DischargeMaximumBurstCurrentField, ref _dischargeMaximumBurstCurrent);    
            ArrayType.Accept(visitor,ManufactureDateField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref ManufactureDate[index]));

        }

        /// <summary>
        /// Capacity when full according to manufacturer, -1: field not provided.
        /// OriginName: capacity_full_specification, Units: mAh, IsExtended: false
        /// </summary>
        public static readonly Field CapacityFullSpecificationField = new Field.Builder()
            .Name(nameof(CapacityFullSpecification))
            .Title("capacity_full_specification")
            .Description("Capacity when full according to manufacturer, -1: field not provided.")
.Units(@"mAh")
            .DataType(Int32Type.Default)
        .Build();
        private int _capacityFullSpecification;
        public int CapacityFullSpecification { get => _capacityFullSpecification; set => _capacityFullSpecification = value; }
        /// <summary>
        /// Capacity when full (accounting for battery degradation), -1: field not provided.
        /// OriginName: capacity_full, Units: mAh, IsExtended: false
        /// </summary>
        public static readonly Field CapacityFullField = new Field.Builder()
            .Name(nameof(CapacityFull))
            .Title("capacity_full")
            .Description("Capacity when full (accounting for battery degradation), -1: field not provided.")
.Units(@"mAh")
            .DataType(Int32Type.Default)
        .Build();
        private int _capacityFull;
        public int CapacityFull { get => _capacityFull; set => _capacityFull = value; }
        /// <summary>
        /// Charge/discharge cycle count. UINT16_MAX: field not provided.
        /// OriginName: cycle_count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CycleCountField = new Field.Builder()
            .Name(nameof(CycleCount))
            .Title("cycle_count")
            .Description("Charge/discharge cycle count. UINT16_MAX: field not provided.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _cycleCount;
        public ushort CycleCount { get => _cycleCount; set => _cycleCount = value; }
        /// <summary>
        /// Battery weight. 0: field not provided.
        /// OriginName: weight, Units: g, IsExtended: false
        /// </summary>
        public static readonly Field WeightField = new Field.Builder()
            .Name(nameof(Weight))
            .Title("weight")
            .Description("Battery weight. 0: field not provided.")
.Units(@"g")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _weight;
        public ushort Weight { get => _weight; set => _weight = value; }
        /// <summary>
        /// Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value.
        /// OriginName: discharge_minimum_voltage, Units: mV, IsExtended: false
        /// </summary>
        public static readonly Field DischargeMinimumVoltageField = new Field.Builder()
            .Name(nameof(DischargeMinimumVoltage))
            .Title("discharge_minimum_voltage")
            .Description("Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value.")
.Units(@"mV")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _dischargeMinimumVoltage;
        public ushort DischargeMinimumVoltage { get => _dischargeMinimumVoltage; set => _dischargeMinimumVoltage = value; }
        /// <summary>
        /// Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value.
        /// OriginName: charging_minimum_voltage, Units: mV, IsExtended: false
        /// </summary>
        public static readonly Field ChargingMinimumVoltageField = new Field.Builder()
            .Name(nameof(ChargingMinimumVoltage))
            .Title("charging_minimum_voltage")
            .Description("Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value.")
.Units(@"mV")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chargingMinimumVoltage;
        public ushort ChargingMinimumVoltage { get => _chargingMinimumVoltage; set => _chargingMinimumVoltage = value; }
        /// <summary>
        /// Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value.
        /// OriginName: resting_minimum_voltage, Units: mV, IsExtended: false
        /// </summary>
        public static readonly Field RestingMinimumVoltageField = new Field.Builder()
            .Name(nameof(RestingMinimumVoltage))
            .Title("resting_minimum_voltage")
            .Description("Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value.")
.Units(@"mV")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _restingMinimumVoltage;
        public ushort RestingMinimumVoltage { get => _restingMinimumVoltage; set => _restingMinimumVoltage = value; }
        /// <summary>
        /// Battery ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Battery ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
        /// <summary>
        /// Function of the battery
        /// OriginName: battery_function, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BatteryFunctionField = new Field.Builder()
            .Name(nameof(BatteryFunction))
            .Title("battery_function")
            .Description("Function of the battery")
            .DataType(new UInt8Type(MavBatteryFunctionHelper.GetValues(x=>(byte)x).Min(),MavBatteryFunctionHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavBatteryFunctionHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavBatteryFunction _batteryFunction;
        public MavBatteryFunction BatteryFunction { get => _batteryFunction; set => _batteryFunction = value; } 
        /// <summary>
        /// Type (chemistry) of the battery
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type (chemistry) of the battery")
            .DataType(new UInt8Type(MavBatteryTypeHelper.GetValues(x=>(byte)x).Min(),MavBatteryTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavBatteryTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavBatteryType _type;
        public MavBatteryType Type { get => _type; set => _type = value; } 
        /// <summary>
        /// Serial number in ASCII characters, 0 terminated. All 0: field not provided.
        /// OriginName: serial_number, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SerialNumberField = new Field.Builder()
            .Name(nameof(SerialNumber))
            .Title("serial_number")
            .Description("Serial number in ASCII characters, 0 terminated. All 0: field not provided.")

            .DataType(new ArrayType(CharType.Ascii,16))
        .Build();
        public const int SerialNumberMaxItemsCount = 16;
        public char[] SerialNumber { get; } = new char[16];
        /// <summary>
        /// Static device name in ASCII characters, 0 terminated. All 0: field not provided. Encode as manufacturer name then product name separated using an underscore.
        /// OriginName: device_name, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DeviceNameField = new Field.Builder()
            .Name(nameof(DeviceName))
            .Title("device_name")
            .Description("Static device name in ASCII characters, 0 terminated. All 0: field not provided. Encode as manufacturer name then product name separated using an underscore.")

            .DataType(new ArrayType(CharType.Ascii,50))
        .Build();
        public const int DeviceNameMaxItemsCount = 50;
        public char[] DeviceName { get; } = new char[50];
        [Obsolete("This method is deprecated. Use GetDeviceNameMaxItemsCount instead.")]
        public byte GetDeviceNameMaxItemsCount() => 50;
        /// <summary>
        /// Maximum per-cell voltage when charged. 0: field not provided.
        /// OriginName: charging_maximum_voltage, Units: mV, IsExtended: true
        /// </summary>
        public static readonly Field ChargingMaximumVoltageField = new Field.Builder()
            .Name(nameof(ChargingMaximumVoltage))
            .Title("charging_maximum_voltage")
            .Description("Maximum per-cell voltage when charged. 0: field not provided.")
.Units(@"mV")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _chargingMaximumVoltage;
        public ushort ChargingMaximumVoltage { get => _chargingMaximumVoltage; set => _chargingMaximumVoltage = value; }
        /// <summary>
        /// Number of battery cells in series. 0: field not provided.
        /// OriginName: cells_in_series, Units: , IsExtended: true
        /// </summary>
        public static readonly Field CellsInSeriesField = new Field.Builder()
            .Name(nameof(CellsInSeries))
            .Title("cells_in_series")
            .Description("Number of battery cells in series. 0: field not provided.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _cellsInSeries;
        public byte CellsInSeries { get => _cellsInSeries; set => _cellsInSeries = value; }
        /// <summary>
        /// Maximum pack discharge current. 0: field not provided.
        /// OriginName: discharge_maximum_current, Units: mA, IsExtended: true
        /// </summary>
        public static readonly Field DischargeMaximumCurrentField = new Field.Builder()
            .Name(nameof(DischargeMaximumCurrent))
            .Title("discharge_maximum_current")
            .Description("Maximum pack discharge current. 0: field not provided.")
.Units(@"mA")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _dischargeMaximumCurrent;
        public uint DischargeMaximumCurrent { get => _dischargeMaximumCurrent; set => _dischargeMaximumCurrent = value; }
        /// <summary>
        /// Maximum pack discharge burst current. 0: field not provided.
        /// OriginName: discharge_maximum_burst_current, Units: mA, IsExtended: true
        /// </summary>
        public static readonly Field DischargeMaximumBurstCurrentField = new Field.Builder()
            .Name(nameof(DischargeMaximumBurstCurrent))
            .Title("discharge_maximum_burst_current")
            .Description("Maximum pack discharge burst current. 0: field not provided.")
.Units(@"mA")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _dischargeMaximumBurstCurrent;
        public uint DischargeMaximumBurstCurrent { get => _dischargeMaximumBurstCurrent; set => _dischargeMaximumBurstCurrent = value; }
        /// <summary>
        /// Manufacture date (DD/MM/YYYY) in ASCII characters, 0 terminated. All 0: field not provided.
        /// OriginName: manufacture_date, Units: , IsExtended: true
        /// </summary>
        public static readonly Field ManufactureDateField = new Field.Builder()
            .Name(nameof(ManufactureDate))
            .Title("manufacture_date")
            .Description("Manufacture date (DD/MM/YYYY) in ASCII characters, 0 terminated. All 0: field not provided.")

            .DataType(new ArrayType(CharType.Ascii,11))
        .Build();
        public const int ManufactureDateMaxItemsCount = 11;
        public char[] ManufactureDate { get; } = new char[11];
    }
    /// <summary>
    /// Telemetry of power generation system. Alternator or mechanical generator.
    ///  GENERATOR_STATUS
    /// </summary>
    public class GeneratorStatusPacket : MavlinkV2Message<GeneratorStatusPayload>
    {
        public const int MessageId = 373;
        
        public const byte CrcExtra = 117;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override GeneratorStatusPayload Payload { get; } = new();

        public override string Name => "GENERATOR_STATUS";
    }

    /// <summary>
    ///  GENERATOR_STATUS
    /// </summary>
    public class GeneratorStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 8 // uint64_t status
            +4 // float battery_current
            +4 // float load_current
            +4 // float power_generated
            +4 // float bus_voltage
            +4 // float bat_current_setpoint
            +4 // uint32_t runtime
            +4 // int32_t time_until_maintenance
            +2 // uint16_t generator_speed
            +2 // int16_t rectifier_temperature
            +2 // int16_t generator_temperature
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Status = (MavGeneratorStatusFlag)BinSerialize.ReadULong(ref buffer);
            BatteryCurrent = BinSerialize.ReadFloat(ref buffer);
            LoadCurrent = BinSerialize.ReadFloat(ref buffer);
            PowerGenerated = BinSerialize.ReadFloat(ref buffer);
            BusVoltage = BinSerialize.ReadFloat(ref buffer);
            BatCurrentSetpoint = BinSerialize.ReadFloat(ref buffer);
            Runtime = BinSerialize.ReadUInt(ref buffer);
            TimeUntilMaintenance = BinSerialize.ReadInt(ref buffer);
            GeneratorSpeed = BinSerialize.ReadUShort(ref buffer);
            RectifierTemperature = BinSerialize.ReadShort(ref buffer);
            GeneratorTemperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,(ulong)Status);
            BinSerialize.WriteFloat(ref buffer,BatteryCurrent);
            BinSerialize.WriteFloat(ref buffer,LoadCurrent);
            BinSerialize.WriteFloat(ref buffer,PowerGenerated);
            BinSerialize.WriteFloat(ref buffer,BusVoltage);
            BinSerialize.WriteFloat(ref buffer,BatCurrentSetpoint);
            BinSerialize.WriteUInt(ref buffer,Runtime);
            BinSerialize.WriteInt(ref buffer,TimeUntilMaintenance);
            BinSerialize.WriteUShort(ref buffer,GeneratorSpeed);
            BinSerialize.WriteShort(ref buffer,RectifierTemperature);
            BinSerialize.WriteShort(ref buffer,GeneratorTemperature);
            /* PayloadByteSize = 42 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpStatus = (ulong)Status;
            UInt64Type.Accept(visitor,StatusField, ref tmpStatus);
            Status = (MavGeneratorStatusFlag)tmpStatus;
            FloatType.Accept(visitor,BatteryCurrentField, ref _batteryCurrent);    
            FloatType.Accept(visitor,LoadCurrentField, ref _loadCurrent);    
            FloatType.Accept(visitor,PowerGeneratedField, ref _powerGenerated);    
            FloatType.Accept(visitor,BusVoltageField, ref _busVoltage);    
            FloatType.Accept(visitor,BatCurrentSetpointField, ref _batCurrentSetpoint);    
            UInt32Type.Accept(visitor,RuntimeField, ref _runtime);    
            Int32Type.Accept(visitor,TimeUntilMaintenanceField, ref _timeUntilMaintenance);    
            UInt16Type.Accept(visitor,GeneratorSpeedField, ref _generatorSpeed);    
            Int16Type.Accept(visitor,RectifierTemperatureField, ref _rectifierTemperature);
            Int16Type.Accept(visitor,GeneratorTemperatureField, ref _generatorTemperature);

        }

        /// <summary>
        /// Status flags.
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StatusField = new Field.Builder()
            .Name(nameof(Status))
            .Title("bitmask")
            .Description("Status flags.")
            .DataType(new UInt64Type(MavGeneratorStatusFlagHelper.GetValues(x=>(ulong)x).Min(),MavGeneratorStatusFlagHelper.GetValues(x=>(ulong)x).Max()))
            .Enum(MavGeneratorStatusFlagHelper.GetEnumValues(x=>(ulong)x))
            .Build();
        private MavGeneratorStatusFlag _status;
        public MavGeneratorStatusFlag Status { get => _status; set => _status = value; } 
        /// <summary>
        /// Current into/out of battery. Positive for out. Negative for in. NaN: field not provided.
        /// OriginName: battery_current, Units: A, IsExtended: false
        /// </summary>
        public static readonly Field BatteryCurrentField = new Field.Builder()
            .Name(nameof(BatteryCurrent))
            .Title("battery_current")
            .Description("Current into/out of battery. Positive for out. Negative for in. NaN: field not provided.")
.Units(@"A")
            .DataType(FloatType.Default)
        .Build();
        private float _batteryCurrent;
        public float BatteryCurrent { get => _batteryCurrent; set => _batteryCurrent = value; }
        /// <summary>
        /// Current going to the UAV. If battery current not available this is the DC current from the generator. Positive for out. Negative for in. NaN: field not provided
        /// OriginName: load_current, Units: A, IsExtended: false
        /// </summary>
        public static readonly Field LoadCurrentField = new Field.Builder()
            .Name(nameof(LoadCurrent))
            .Title("load_current")
            .Description("Current going to the UAV. If battery current not available this is the DC current from the generator. Positive for out. Negative for in. NaN: field not provided")
.Units(@"A")
            .DataType(FloatType.Default)
        .Build();
        private float _loadCurrent;
        public float LoadCurrent { get => _loadCurrent; set => _loadCurrent = value; }
        /// <summary>
        /// The power being generated. NaN: field not provided
        /// OriginName: power_generated, Units: W, IsExtended: false
        /// </summary>
        public static readonly Field PowerGeneratedField = new Field.Builder()
            .Name(nameof(PowerGenerated))
            .Title("power_generated")
            .Description("The power being generated. NaN: field not provided")
.Units(@"W")
            .DataType(FloatType.Default)
        .Build();
        private float _powerGenerated;
        public float PowerGenerated { get => _powerGenerated; set => _powerGenerated = value; }
        /// <summary>
        /// Voltage of the bus seen at the generator, or battery bus if battery bus is controlled by generator and at a different voltage to main bus.
        /// OriginName: bus_voltage, Units: V, IsExtended: false
        /// </summary>
        public static readonly Field BusVoltageField = new Field.Builder()
            .Name(nameof(BusVoltage))
            .Title("bus_voltage")
            .Description("Voltage of the bus seen at the generator, or battery bus if battery bus is controlled by generator and at a different voltage to main bus.")
.Units(@"V")
            .DataType(FloatType.Default)
        .Build();
        private float _busVoltage;
        public float BusVoltage { get => _busVoltage; set => _busVoltage = value; }
        /// <summary>
        /// The target battery current. Positive for out. Negative for in. NaN: field not provided
        /// OriginName: bat_current_setpoint, Units: A, IsExtended: false
        /// </summary>
        public static readonly Field BatCurrentSetpointField = new Field.Builder()
            .Name(nameof(BatCurrentSetpoint))
            .Title("bat_current_setpoint")
            .Description("The target battery current. Positive for out. Negative for in. NaN: field not provided")
.Units(@"A")
            .DataType(FloatType.Default)
        .Build();
        private float _batCurrentSetpoint;
        public float BatCurrentSetpoint { get => _batCurrentSetpoint; set => _batCurrentSetpoint = value; }
        /// <summary>
        /// Seconds this generator has run since it was rebooted. UINT32_MAX: field not provided.
        /// OriginName: runtime, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field RuntimeField = new Field.Builder()
            .Name(nameof(Runtime))
            .Title("runtime")
            .Description("Seconds this generator has run since it was rebooted. UINT32_MAX: field not provided.")
.Units(@"s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _runtime;
        public uint Runtime { get => _runtime; set => _runtime = value; }
        /// <summary>
        /// Seconds until this generator requires maintenance.  A negative value indicates maintenance is past-due. INT32_MAX: field not provided.
        /// OriginName: time_until_maintenance, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TimeUntilMaintenanceField = new Field.Builder()
            .Name(nameof(TimeUntilMaintenance))
            .Title("time_until_maintenance")
            .Description("Seconds until this generator requires maintenance.  A negative value indicates maintenance is past-due. INT32_MAX: field not provided.")
.Units(@"s")
            .DataType(Int32Type.Default)
        .Build();
        private int _timeUntilMaintenance;
        public int TimeUntilMaintenance { get => _timeUntilMaintenance; set => _timeUntilMaintenance = value; }
        /// <summary>
        /// Speed of electrical generator or alternator. UINT16_MAX: field not provided.
        /// OriginName: generator_speed, Units: rpm, IsExtended: false
        /// </summary>
        public static readonly Field GeneratorSpeedField = new Field.Builder()
            .Name(nameof(GeneratorSpeed))
            .Title("generator_speed")
            .Description("Speed of electrical generator or alternator. UINT16_MAX: field not provided.")
.Units(@"rpm")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _generatorSpeed;
        public ushort GeneratorSpeed { get => _generatorSpeed; set => _generatorSpeed = value; }
        /// <summary>
        /// The temperature of the rectifier or power converter. INT16_MAX: field not provided.
        /// OriginName: rectifier_temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field RectifierTemperatureField = new Field.Builder()
            .Name(nameof(RectifierTemperature))
            .Title("rectifier_temperature")
            .Description("The temperature of the rectifier or power converter. INT16_MAX: field not provided.")
.Units(@"degC")
            .DataType(Int16Type.Default)
        .Build();
        private short _rectifierTemperature;
        public short RectifierTemperature { get => _rectifierTemperature; set => _rectifierTemperature = value; }
        /// <summary>
        /// The temperature of the mechanical motor, fuel cell core or generator. INT16_MAX: field not provided.
        /// OriginName: generator_temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field GeneratorTemperatureField = new Field.Builder()
            .Name(nameof(GeneratorTemperature))
            .Title("generator_temperature")
            .Description("The temperature of the mechanical motor, fuel cell core or generator. INT16_MAX: field not provided.")
.Units(@"degC")
            .DataType(Int16Type.Default)
        .Build();
        private short _generatorTemperature;
        public short GeneratorTemperature { get => _generatorTemperature; set => _generatorTemperature = value; }
    }
    /// <summary>
    /// The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN, AUX ports). This message supersedes SERVO_OUTPUT_RAW.
    ///  ACTUATOR_OUTPUT_STATUS
    /// </summary>
    public class ActuatorOutputStatusPacket : MavlinkV2Message<ActuatorOutputStatusPayload>
    {
        public const int MessageId = 375;
        
        public const byte CrcExtra = 251;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ActuatorOutputStatusPayload Payload { get; } = new();

        public override string Name => "ACTUATOR_OUTPUT_STATUS";
    }

    /// <summary>
    ///  ACTUATOR_OUTPUT_STATUS
    /// </summary>
    public class ActuatorOutputStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 140; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 140; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t active
            +Actuator.Length * 4 // float[32] actuator
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Active = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/140 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Actuator[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Active);
            for(var i=0;i<Actuator.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Actuator[i]);
            }
            /* PayloadByteSize = 140 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,ActiveField, ref _active);    
            ArrayType.Accept(visitor,ActuatorField, 
                (index, v, f, t) => FloatType.Accept(v, f, t, ref Actuator[index]));

        }

        /// <summary>
        /// Timestamp (since system boot).
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (since system boot).")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Active outputs
        /// OriginName: active, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ActiveField = new Field.Builder()
            .Name(nameof(Active))
            .Title("bitmask")
            .Description("Active outputs")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _active;
        public uint Active { get => _active; set => _active = value; }
        /// <summary>
        /// Servo / motor output array values. Zero values indicate unused channels.
        /// OriginName: actuator, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ActuatorField = new Field.Builder()
            .Name(nameof(Actuator))
            .Title("actuator")
            .Description("Servo / motor output array values. Zero values indicate unused channels.")

            .DataType(new ArrayType(FloatType.Default,32))        
        .Build();
        public const int ActuatorMaxItemsCount = 32;
        public float[] Actuator { get; } = new float[32];
        [Obsolete("This method is deprecated. Use GetActuatorMaxItemsCount instead.")]
        public byte GetActuatorMaxItemsCount() => 32;
    }
    /// <summary>
    /// Time/duration estimates for various events and actions given the current vehicle state and position.
    ///  TIME_ESTIMATE_TO_TARGET
    /// </summary>
    public class TimeEstimateToTargetPacket : MavlinkV2Message<TimeEstimateToTargetPayload>
    {
        public const int MessageId = 380;
        
        public const byte CrcExtra = 232;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TimeEstimateToTargetPayload Payload { get; } = new();

        public override string Name => "TIME_ESTIMATE_TO_TARGET";
    }

    /// <summary>
    ///  TIME_ESTIMATE_TO_TARGET
    /// </summary>
    public class TimeEstimateToTargetPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t safe_return
            +4 // int32_t land
            +4 // int32_t mission_next_item
            +4 // int32_t mission_end
            +4 // int32_t commanded_action
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            SafeReturn = BinSerialize.ReadInt(ref buffer);
            Land = BinSerialize.ReadInt(ref buffer);
            MissionNextItem = BinSerialize.ReadInt(ref buffer);
            MissionEnd = BinSerialize.ReadInt(ref buffer);
            CommandedAction = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,SafeReturn);
            BinSerialize.WriteInt(ref buffer,Land);
            BinSerialize.WriteInt(ref buffer,MissionNextItem);
            BinSerialize.WriteInt(ref buffer,MissionEnd);
            BinSerialize.WriteInt(ref buffer,CommandedAction);
            /* PayloadByteSize = 20 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,SafeReturnField, ref _safeReturn);    
            Int32Type.Accept(visitor,LandField, ref _land);    
            Int32Type.Accept(visitor,MissionNextItemField, ref _missionNextItem);    
            Int32Type.Accept(visitor,MissionEndField, ref _missionEnd);    
            Int32Type.Accept(visitor,CommandedActionField, ref _commandedAction);    

        }

        /// <summary>
        /// Estimated time to complete the vehicle's configured "safe return" action from its current position (e.g. RTL, Smart RTL, etc.). -1 indicates that the vehicle is landed, or that no time estimate available.
        /// OriginName: safe_return, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field SafeReturnField = new Field.Builder()
            .Name(nameof(SafeReturn))
            .Title("safe_return")
            .Description("Estimated time to complete the vehicle's configured \"safe return\" action from its current position (e.g. RTL, Smart RTL, etc.). -1 indicates that the vehicle is landed, or that no time estimate available.")
.Units(@"s")
            .DataType(Int32Type.Default)
        .Build();
        private int _safeReturn;
        public int SafeReturn { get => _safeReturn; set => _safeReturn = value; }
        /// <summary>
        /// Estimated time for vehicle to complete the LAND action from its current position. -1 indicates that the vehicle is landed, or that no time estimate available.
        /// OriginName: land, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field LandField = new Field.Builder()
            .Name(nameof(Land))
            .Title("land")
            .Description("Estimated time for vehicle to complete the LAND action from its current position. -1 indicates that the vehicle is landed, or that no time estimate available.")
.Units(@"s")
            .DataType(Int32Type.Default)
        .Build();
        private int _land;
        public int Land { get => _land; set => _land = value; }
        /// <summary>
        /// Estimated time for reaching/completing the currently active mission item. -1 means no time estimate available.
        /// OriginName: mission_next_item, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field MissionNextItemField = new Field.Builder()
            .Name(nameof(MissionNextItem))
            .Title("mission_next_item")
            .Description("Estimated time for reaching/completing the currently active mission item. -1 means no time estimate available.")
.Units(@"s")
            .DataType(Int32Type.Default)
        .Build();
        private int _missionNextItem;
        public int MissionNextItem { get => _missionNextItem; set => _missionNextItem = value; }
        /// <summary>
        /// Estimated time for completing the current mission. -1 means no mission active and/or no estimate available.
        /// OriginName: mission_end, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field MissionEndField = new Field.Builder()
            .Name(nameof(MissionEnd))
            .Title("mission_end")
            .Description("Estimated time for completing the current mission. -1 means no mission active and/or no estimate available.")
.Units(@"s")
            .DataType(Int32Type.Default)
        .Build();
        private int _missionEnd;
        public int MissionEnd { get => _missionEnd; set => _missionEnd = value; }
        /// <summary>
        /// Estimated time for completing the current commanded action (i.e. Go To, Takeoff, Land, etc.). -1 means no action active and/or no estimate available.
        /// OriginName: commanded_action, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field CommandedActionField = new Field.Builder()
            .Name(nameof(CommandedAction))
            .Title("commanded_action")
            .Description("Estimated time for completing the current commanded action (i.e. Go To, Takeoff, Land, etc.). -1 means no action active and/or no estimate available.")
.Units(@"s")
            .DataType(Int32Type.Default)
        .Build();
        private int _commandedAction;
        public int CommandedAction { get => _commandedAction; set => _commandedAction = value; }
    }
    /// <summary>
    /// Message for transporting "arbitrary" variable-length data from one component to another (broadcast is not forbidden, but discouraged). The encoding of the data is usually extension specific, i.e. determined by the source, and is usually not documented as part of the MAVLink specification.
    ///  TUNNEL
    /// </summary>
    public class TunnelPacket : MavlinkV2Message<TunnelPayload>
    {
        public const int MessageId = 385;
        
        public const byte CrcExtra = 147;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override TunnelPayload Payload { get; } = new();

        public override string Name => "TUNNEL";
    }

    /// <summary>
    ///  TUNNEL
    /// </summary>
    public class TunnelPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 133; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 133; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 2 // uint16_t payload_type
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t payload_length
            +Payload.Length // uint8_t[128] payload
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            PayloadType = (MavTunnelPayloadType)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            PayloadLength = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/133 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Payload[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,(ushort)PayloadType);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)PayloadLength);
            for(var i=0;i<Payload.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Payload[i]);
            }
            /* PayloadByteSize = 133 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpPayloadType = (ushort)PayloadType;
            UInt16Type.Accept(visitor,PayloadTypeField, ref tmpPayloadType);
            PayloadType = (MavTunnelPayloadType)tmpPayloadType;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,PayloadLengthField, ref _payloadLength);    
            ArrayType.Accept(visitor,PayloadField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Payload[index]));    

        }

        /// <summary>
        /// A code that identifies the content of the payload (0 for unknown, which is the default). If this code is less than 32768, it is a 'registered' payload type and the corresponding code should be added to the MAV_TUNNEL_PAYLOAD_TYPE enum. Software creators can register blocks of types as needed. Codes greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// OriginName: payload_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PayloadTypeField = new Field.Builder()
            .Name(nameof(PayloadType))
            .Title("payload_type")
            .Description("A code that identifies the content of the payload (0 for unknown, which is the default). If this code is less than 32768, it is a 'registered' payload type and the corresponding code should be added to the MAV_TUNNEL_PAYLOAD_TYPE enum. Software creators can register blocks of types as needed. Codes greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.")
            .DataType(new UInt16Type(MavTunnelPayloadTypeHelper.GetValues(x=>(ushort)x).Min(),MavTunnelPayloadTypeHelper.GetValues(x=>(ushort)x).Max()))
            .Enum(MavTunnelPayloadTypeHelper.GetEnumValues(x=>(ushort)x))
            .Build();
        private MavTunnelPayloadType _payloadType;
        public MavTunnelPayloadType PayloadType { get => _payloadType; set => _payloadType = value; } 
        /// <summary>
        /// System ID (can be 0 for broadcast, but this is discouraged)
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (can be 0 for broadcast, but this is discouraged)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (can be 0 for broadcast, but this is discouraged)
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (can be 0 for broadcast, but this is discouraged)")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Length of the data transported in payload
        /// OriginName: payload_length, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PayloadLengthField = new Field.Builder()
            .Name(nameof(PayloadLength))
            .Title("payload_length")
            .Description("Length of the data transported in payload")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _payloadLength;
        public byte PayloadLength { get => _payloadLength; set => _payloadLength = value; }
        /// <summary>
        /// Variable length payload. The payload length is defined by payload_length. The entire content of this block is opaque unless you understand the encoding specified by payload_type.
        /// OriginName: payload, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PayloadField = new Field.Builder()
            .Name(nameof(Payload))
            .Title("payload")
            .Description("Variable length payload. The payload length is defined by payload_length. The entire content of this block is opaque unless you understand the encoding specified by payload_type.")

            .DataType(new ArrayType(UInt8Type.Default,128))
        .Build();
        public const int PayloadMaxItemsCount = 128;
        public byte[] Payload { get; } = new byte[128];
        [Obsolete("This method is deprecated. Use GetPayloadMaxItemsCount instead.")]
        public byte GetPayloadMaxItemsCount() => 128;
    }
    /// <summary>
    /// A forwarded CAN frame as requested by MAV_CMD_CAN_FORWARD.
    ///  CAN_FRAME
    /// </summary>
    public class CanFramePacket : MavlinkV2Message<CanFramePayload>
    {
        public const int MessageId = 386;
        
        public const byte CrcExtra = 132;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CanFramePayload Payload { get; } = new();

        public override string Name => "CAN_FRAME";
    }

    /// <summary>
    ///  CAN_FRAME
    /// </summary>
    public class CanFramePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t id
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t bus
            +1 // uint8_t len
            +Data.Length // uint8_t[8] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Id = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Bus = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/16 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Bus);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 16 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,IdField, ref _id);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,BusField, ref _bus);    
            UInt8Type.Accept(visitor,LenField, ref _len);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// Frame ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Frame ID")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _id;
        public uint Id { get => _id; set => _id = value; }
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Bus number
        /// OriginName: bus, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BusField = new Field.Builder()
            .Name(nameof(Bus))
            .Title("bus")
            .Description("Bus number")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _bus;
        public byte Bus { get => _bus; set => _bus = value; }
        /// <summary>
        /// Frame length
        /// OriginName: len, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LenField = new Field.Builder()
            .Name(nameof(Len))
            .Title("len")
            .Description("Frame length")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _len;
        public byte Len { get => _len; set => _len = value; }
        /// <summary>
        /// Frame data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("Frame data")

            .DataType(new ArrayType(UInt8Type.Default,8))
        .Build();
        public const int DataMaxItemsCount = 8;
        public byte[] Data { get; } = new byte[8];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 8;
    }
    /// <summary>
    /// Hardware status sent by an onboard computer.
    ///  ONBOARD_COMPUTER_STATUS
    /// </summary>
    public class OnboardComputerStatusPacket : MavlinkV2Message<OnboardComputerStatusPayload>
    {
        public const int MessageId = 390;
        
        public const byte CrcExtra = 156;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OnboardComputerStatusPayload Payload { get; } = new();

        public override string Name => "ONBOARD_COMPUTER_STATUS";
    }

    /// <summary>
    ///  ONBOARD_COMPUTER_STATUS
    /// </summary>
    public class OnboardComputerStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 238; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 238; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // uint32_t uptime
            +4 // uint32_t ram_usage
            +4 // uint32_t ram_total
            +StorageType.Length * 4 // uint32_t[4] storage_type
            +StorageUsage.Length * 4 // uint32_t[4] storage_usage
            +StorageTotal.Length * 4 // uint32_t[4] storage_total
            +LinkType.Length * 4 // uint32_t[6] link_type
            +LinkTxRate.Length * 4 // uint32_t[6] link_tx_rate
            +LinkRxRate.Length * 4 // uint32_t[6] link_rx_rate
            +LinkTxMax.Length * 4 // uint32_t[6] link_tx_max
            +LinkRxMax.Length * 4 // uint32_t[6] link_rx_max
            +FanSpeed.Length * 2 // int16_t[4] fan_speed
            +1 // uint8_t type
            +CpuCores.Length // uint8_t[8] cpu_cores
            +CpuCombined.Length // uint8_t[10] cpu_combined
            +GpuCores.Length // uint8_t[4] gpu_cores
            +GpuCombined.Length // uint8_t[10] gpu_combined
            +1 // int8_t temperature_board
            +TemperatureCore.Length // int8_t[8] temperature_core
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Uptime = BinSerialize.ReadUInt(ref buffer);
            RamUsage = BinSerialize.ReadUInt(ref buffer);
            RamTotal = BinSerialize.ReadUInt(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                StorageType[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                StorageUsage[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                StorageTotal[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = /*ArrayLength*/6 - Math.Max(0,((/*PayloadByteSize*/238 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                LinkType[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkTxRate[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkRxRate[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkTxMax[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkRxMax[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                FanSpeed[i] = BinSerialize.ReadShort(ref buffer);
            }
            Type = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                CpuCores[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 10;
            for(var i=0;i<arraySize;i++)
            {
                CpuCombined[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                GpuCores[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 10;
            for(var i=0;i<arraySize;i++)
            {
                GpuCombined[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            TemperatureBoard = (sbyte)BinSerialize.ReadByte(ref buffer);
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                TemperatureCore[i] = (sbyte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Uptime);
            BinSerialize.WriteUInt(ref buffer,RamUsage);
            BinSerialize.WriteUInt(ref buffer,RamTotal);
            for(var i=0;i<StorageType.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,StorageType[i]);
            }
            for(var i=0;i<StorageUsage.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,StorageUsage[i]);
            }
            for(var i=0;i<StorageTotal.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,StorageTotal[i]);
            }
            for(var i=0;i<LinkType.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkType[i]);
            }
            for(var i=0;i<LinkTxRate.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkTxRate[i]);
            }
            for(var i=0;i<LinkRxRate.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkRxRate[i]);
            }
            for(var i=0;i<LinkTxMax.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkTxMax[i]);
            }
            for(var i=0;i<LinkRxMax.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkRxMax[i]);
            }
            for(var i=0;i<FanSpeed.Length;i++)
            {
                BinSerialize.WriteShort(ref buffer,FanSpeed[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            for(var i=0;i<CpuCores.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)CpuCores[i]);
            }
            for(var i=0;i<CpuCombined.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)CpuCombined[i]);
            }
            for(var i=0;i<GpuCores.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)GpuCores[i]);
            }
            for(var i=0;i<GpuCombined.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)GpuCombined[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TemperatureBoard);
            for(var i=0;i<TemperatureCore.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)TemperatureCore[i]);
            }
            /* PayloadByteSize = 238 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            UInt32Type.Accept(visitor,UptimeField, ref _uptime);    
            UInt32Type.Accept(visitor,RamUsageField, ref _ramUsage);    
            UInt32Type.Accept(visitor,RamTotalField, ref _ramTotal);    
            ArrayType.Accept(visitor,StorageTypeField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref StorageType[index]));    
            ArrayType.Accept(visitor,StorageUsageField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref StorageUsage[index]));    
            ArrayType.Accept(visitor,StorageTotalField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref StorageTotal[index]));    
            ArrayType.Accept(visitor,LinkTypeField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref LinkType[index]));    
            ArrayType.Accept(visitor,LinkTxRateField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref LinkTxRate[index]));    
            ArrayType.Accept(visitor,LinkRxRateField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref LinkRxRate[index]));    
            ArrayType.Accept(visitor,LinkTxMaxField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref LinkTxMax[index]));    
            ArrayType.Accept(visitor,LinkRxMaxField, 
                (index, v, f, t) => UInt32Type.Accept(v, f, t, ref LinkRxMax[index]));    
            ArrayType.Accept(visitor,FanSpeedField, 
                (index, v, f, t) => Int16Type.Accept(v, f, t, ref FanSpeed[index]));    
            UInt8Type.Accept(visitor,TypeField, ref _type);    
            ArrayType.Accept(visitor,CpuCoresField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref CpuCores[index]));    
            ArrayType.Accept(visitor,CpuCombinedField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref CpuCombined[index]));    
            ArrayType.Accept(visitor,GpuCoresField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref GpuCores[index]));    
            ArrayType.Accept(visitor,GpuCombinedField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref GpuCombined[index]));    
            Int8Type.Accept(visitor,TemperatureBoardField, ref _temperatureBoard);                
            ArrayType.Accept(visitor,TemperatureCoreField,  
                (index, v, f, t) => Int8Type.Accept(v, f, t, ref TemperatureCore[index]));

        }

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Time since system boot.
        /// OriginName: uptime, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field UptimeField = new Field.Builder()
            .Name(nameof(Uptime))
            .Title("uptime")
            .Description("Time since system boot.")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _uptime;
        public uint Uptime { get => _uptime; set => _uptime = value; }
        /// <summary>
        /// Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: ram_usage, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field RamUsageField = new Field.Builder()
            .Name(nameof(RamUsage))
            .Title("ram_usage")
            .Description("Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"MiB")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _ramUsage;
        public uint RamUsage { get => _ramUsage; set => _ramUsage = value; }
        /// <summary>
        /// Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: ram_total, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field RamTotalField = new Field.Builder()
            .Name(nameof(RamTotal))
            .Title("ram_total")
            .Description("Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"MiB")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _ramTotal;
        public uint RamTotal { get => _ramTotal; set => _ramTotal = value; }
        /// <summary>
        /// Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.
        /// OriginName: storage_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StorageTypeField = new Field.Builder()
            .Name(nameof(StorageType))
            .Title("storage_type")
            .Description("Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.")

            .DataType(new ArrayType(UInt32Type.Default,4))        
        .Build();
        public const int StorageTypeMaxItemsCount = 4;
        public uint[] StorageType { get; } = new uint[4];
        /// <summary>
        /// Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: storage_usage, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field StorageUsageField = new Field.Builder()
            .Name(nameof(StorageUsage))
            .Title("storage_usage")
            .Description("Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"MiB")
            .DataType(new ArrayType(UInt32Type.Default,4))        
        .Build();
        public const int StorageUsageMaxItemsCount = 4;
        public uint[] StorageUsage { get; } = new uint[4];
        /// <summary>
        /// Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: storage_total, Units: MiB, IsExtended: false
        /// </summary>
        public static readonly Field StorageTotalField = new Field.Builder()
            .Name(nameof(StorageTotal))
            .Title("storage_total")
            .Description("Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"MiB")
            .DataType(new ArrayType(UInt32Type.Default,4))        
        .Build();
        public const int StorageTotalMaxItemsCount = 4;
        public uint[] StorageTotal { get; } = new uint[4];
        /// <summary>
        /// Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary
        /// OriginName: link_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LinkTypeField = new Field.Builder()
            .Name(nameof(LinkType))
            .Title("link_type")
            .Description("Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary")

            .DataType(new ArrayType(UInt32Type.Default,6))        
        .Build();
        public const int LinkTypeMaxItemsCount = 6;
        public uint[] LinkType { get; } = new uint[6];
        [Obsolete("This method is deprecated. Use GetLinkTypeMaxItemsCount instead.")]
        public byte GetLinkTypeMaxItemsCount() => 6;
        /// <summary>
        /// Network traffic from the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_tx_rate, Units: KiB/s, IsExtended: false
        /// </summary>
        public static readonly Field LinkTxRateField = new Field.Builder()
            .Name(nameof(LinkTxRate))
            .Title("link_tx_rate")
            .Description("Network traffic from the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"KiB/s")
            .DataType(new ArrayType(UInt32Type.Default,6))        
        .Build();
        public const int LinkTxRateMaxItemsCount = 6;
        public uint[] LinkTxRate { get; } = new uint[6];
        /// <summary>
        /// Network traffic to the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_rx_rate, Units: KiB/s, IsExtended: false
        /// </summary>
        public static readonly Field LinkRxRateField = new Field.Builder()
            .Name(nameof(LinkRxRate))
            .Title("link_rx_rate")
            .Description("Network traffic to the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"KiB/s")
            .DataType(new ArrayType(UInt32Type.Default,6))        
        .Build();
        public const int LinkRxRateMaxItemsCount = 6;
        public uint[] LinkRxRate { get; } = new uint[6];
        /// <summary>
        /// Network capacity from the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_tx_max, Units: KiB/s, IsExtended: false
        /// </summary>
        public static readonly Field LinkTxMaxField = new Field.Builder()
            .Name(nameof(LinkTxMax))
            .Title("link_tx_max")
            .Description("Network capacity from the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"KiB/s")
            .DataType(new ArrayType(UInt32Type.Default,6))        
        .Build();
        public const int LinkTxMaxMaxItemsCount = 6;
        public uint[] LinkTxMax { get; } = new uint[6];
        /// <summary>
        /// Network capacity to the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_rx_max, Units: KiB/s, IsExtended: false
        /// </summary>
        public static readonly Field LinkRxMaxField = new Field.Builder()
            .Name(nameof(LinkRxMax))
            .Title("link_rx_max")
            .Description("Network capacity to the component system. A value of UINT32_MAX implies the field is unused.")
.Units(@"KiB/s")
            .DataType(new ArrayType(UInt32Type.Default,6))        
        .Build();
        public const int LinkRxMaxMaxItemsCount = 6;
        public uint[] LinkRxMax { get; } = new uint[6];
        /// <summary>
        /// Fan speeds. A value of INT16_MAX implies the field is unused.
        /// OriginName: fan_speed, Units: rpm, IsExtended: false
        /// </summary>
        public static readonly Field FanSpeedField = new Field.Builder()
            .Name(nameof(FanSpeed))
            .Title("fan_speed")
            .Description("Fan speeds. A value of INT16_MAX implies the field is unused.")
.Units(@"rpm")
            .DataType(new ArrayType(Int16Type.Default,4))
        .Build();
        public const int FanSpeedMaxItemsCount = 4;
        public short[] FanSpeed { get; } = new short[4];
        /// <summary>
        /// Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TypeField = new Field.Builder()
            .Name(nameof(Type))
            .Title("type")
            .Description("Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _type;
        public byte Type { get => _type; set => _type = value; }
        /// <summary>
        /// CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
        /// OriginName: cpu_cores, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CpuCoresField = new Field.Builder()
            .Name(nameof(CpuCores))
            .Title("cpu_cores")
            .Description("CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.")

            .DataType(new ArrayType(UInt8Type.Default,8))
        .Build();
        public const int CpuCoresMaxItemsCount = 8;
        public byte[] CpuCores { get; } = new byte[8];
        /// <summary>
        /// Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
        /// OriginName: cpu_combined, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CpuCombinedField = new Field.Builder()
            .Name(nameof(CpuCombined))
            .Title("cpu_combined")
            .Description("Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.")

            .DataType(new ArrayType(UInt8Type.Default,10))
        .Build();
        public const int CpuCombinedMaxItemsCount = 10;
        public byte[] CpuCombined { get; } = new byte[10];
        /// <summary>
        /// GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
        /// OriginName: gpu_cores, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GpuCoresField = new Field.Builder()
            .Name(nameof(GpuCores))
            .Title("gpu_cores")
            .Description("GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.")

            .DataType(new ArrayType(UInt8Type.Default,4))
        .Build();
        public const int GpuCoresMaxItemsCount = 4;
        public byte[] GpuCores { get; } = new byte[4];
        /// <summary>
        /// Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
        /// OriginName: gpu_combined, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GpuCombinedField = new Field.Builder()
            .Name(nameof(GpuCombined))
            .Title("gpu_combined")
            .Description("Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.")

            .DataType(new ArrayType(UInt8Type.Default,10))
        .Build();
        public const int GpuCombinedMaxItemsCount = 10;
        public byte[] GpuCombined { get; } = new byte[10];
        /// <summary>
        /// Temperature of the board. A value of INT8_MAX implies the field is unused.
        /// OriginName: temperature_board, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureBoardField = new Field.Builder()
            .Name(nameof(TemperatureBoard))
            .Title("temperature_board")
            .Description("Temperature of the board. A value of INT8_MAX implies the field is unused.")
.Units(@"degC")
            .DataType(Int8Type.Default)
        .Build();
        private sbyte _temperatureBoard;
        public sbyte TemperatureBoard { get => _temperatureBoard; set => _temperatureBoard = value; }
        /// <summary>
        /// Temperature of the CPU core. A value of INT8_MAX implies the field is unused.
        /// OriginName: temperature_core, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureCoreField = new Field.Builder()
            .Name(nameof(TemperatureCore))
            .Title("temperature_core")
            .Description("Temperature of the CPU core. A value of INT8_MAX implies the field is unused.")
.Units(@"degC")
            .DataType(new ArrayType(Int8Type.Default,8))
        .Build();
        public const int TemperatureCoreMaxItemsCount = 8;
        public sbyte[] TemperatureCore { get; } = new sbyte[8];
    }
    /// <summary>
    /// 
    ///         Component information message, which may be requested using MAV_CMD_REQUEST_MESSAGE.
    ///       
    ///  COMPONENT_INFORMATION
    /// </summary>
    public class ComponentInformationPacket : MavlinkV2Message<ComponentInformationPayload>
    {
        public const int MessageId = 395;
        
        public const byte CrcExtra = 0;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ComponentInformationPayload Payload { get; } = new();

        public override string Name => "COMPONENT_INFORMATION";
    }

    /// <summary>
    ///  COMPONENT_INFORMATION
    /// </summary>
    public class ComponentInformationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 212; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 212; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // uint32_t general_metadata_file_crc
            +4 // uint32_t peripherals_metadata_file_crc
            +GeneralMetadataUri.Length // char[100] general_metadata_uri
            +PeripheralsMetadataUri.Length // char[100] peripherals_metadata_uri
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            GeneralMetadataFileCrc = BinSerialize.ReadUInt(ref buffer);
            PeripheralsMetadataFileCrc = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/100 - Math.Max(0,((/*PayloadByteSize*/212 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = GeneralMetadataUri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, GeneralMetadataUri.Length);
                }
            }
            buffer = buffer[arraySize..];
           
            arraySize = 100;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = PeripheralsMetadataUri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, PeripheralsMetadataUri.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,GeneralMetadataFileCrc);
            BinSerialize.WriteUInt(ref buffer,PeripheralsMetadataFileCrc);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = GeneralMetadataUri)
                {
                    Encoding.ASCII.GetBytes(charPointer, GeneralMetadataUri.Length, bytePointer, GeneralMetadataUri.Length);
                }
            }
            buffer = buffer.Slice(GeneralMetadataUri.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = PeripheralsMetadataUri)
                {
                    Encoding.ASCII.GetBytes(charPointer, PeripheralsMetadataUri.Length, bytePointer, PeripheralsMetadataUri.Length);
                }
            }
            buffer = buffer.Slice(PeripheralsMetadataUri.Length);
            
            /* PayloadByteSize = 212 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt32Type.Accept(visitor,GeneralMetadataFileCrcField, ref _generalMetadataFileCrc);    
            UInt32Type.Accept(visitor,PeripheralsMetadataFileCrcField, ref _peripheralsMetadataFileCrc);    
            ArrayType.Accept(visitor,GeneralMetadataUriField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref GeneralMetadataUri[index]));
            ArrayType.Accept(visitor,PeripheralsMetadataUriField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref PeripheralsMetadataUri[index]));

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// CRC32 of the general metadata file (general_metadata_uri).
        /// OriginName: general_metadata_file_crc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GeneralMetadataFileCrcField = new Field.Builder()
            .Name(nameof(GeneralMetadataFileCrc))
            .Title("general_metadata_file_crc")
            .Description("CRC32 of the general metadata file (general_metadata_uri).")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _generalMetadataFileCrc;
        public uint GeneralMetadataFileCrc { get => _generalMetadataFileCrc; set => _generalMetadataFileCrc = value; }
        /// <summary>
        /// CRC32 of peripherals metadata file (peripherals_metadata_uri).
        /// OriginName: peripherals_metadata_file_crc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PeripheralsMetadataFileCrcField = new Field.Builder()
            .Name(nameof(PeripheralsMetadataFileCrc))
            .Title("peripherals_metadata_file_crc")
            .Description("CRC32 of peripherals metadata file (peripherals_metadata_uri).")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _peripheralsMetadataFileCrc;
        public uint PeripheralsMetadataFileCrc { get => _peripheralsMetadataFileCrc; set => _peripheralsMetadataFileCrc = value; }
        /// <summary>
        /// MAVLink FTP URI for the general metadata file (COMP_METADATA_TYPE_GENERAL), which may be compressed with xz. The file contains general component metadata, and may contain URI links for additional metadata (see COMP_METADATA_TYPE). The information is static from boot, and may be generated at compile time. The string needs to be zero terminated.
        /// OriginName: general_metadata_uri, Units: , IsExtended: false
        /// </summary>
        public static readonly Field GeneralMetadataUriField = new Field.Builder()
            .Name(nameof(GeneralMetadataUri))
            .Title("general_metadata_uri")
            .Description("MAVLink FTP URI for the general metadata file (COMP_METADATA_TYPE_GENERAL), which may be compressed with xz. The file contains general component metadata, and may contain URI links for additional metadata (see COMP_METADATA_TYPE). The information is static from boot, and may be generated at compile time. The string needs to be zero terminated.")

            .DataType(new ArrayType(CharType.Ascii,100))
        .Build();
        public const int GeneralMetadataUriMaxItemsCount = 100;
        public char[] GeneralMetadataUri { get; } = new char[100];
        [Obsolete("This method is deprecated. Use GetGeneralMetadataUriMaxItemsCount instead.")]
        public byte GetGeneralMetadataUriMaxItemsCount() => 100;
        /// <summary>
        /// (Optional) MAVLink FTP URI for the peripherals metadata file (COMP_METADATA_TYPE_PERIPHERALS), which may be compressed with xz. This contains data about "attached components" such as UAVCAN nodes. The peripherals are in a separate file because the information must be generated dynamically at runtime. The string needs to be zero terminated.
        /// OriginName: peripherals_metadata_uri, Units: , IsExtended: false
        /// </summary>
        public static readonly Field PeripheralsMetadataUriField = new Field.Builder()
            .Name(nameof(PeripheralsMetadataUri))
            .Title("peripherals_metadata_uri")
            .Description("(Optional) MAVLink FTP URI for the peripherals metadata file (COMP_METADATA_TYPE_PERIPHERALS), which may be compressed with xz. This contains data about \"attached components\" such as UAVCAN nodes. The peripherals are in a separate file because the information must be generated dynamically at runtime. The string needs to be zero terminated.")

            .DataType(new ArrayType(CharType.Ascii,100))
        .Build();
        public const int PeripheralsMetadataUriMaxItemsCount = 100;
        public char[] PeripheralsMetadataUri { get; } = new char[100];
    }
    /// <summary>
    /// 
    ///         Component metadata message, which may be requested using MAV_CMD_REQUEST_MESSAGE.
    /// 
    ///         This contains the MAVLink FTP URI and CRC for the component's general metadata file.
    ///         The file must be hosted on the component, and may be xz compressed.
    ///         The file CRC can be used for file caching.
    /// 
    ///         The general metadata file can be read to get the locations of other metadata files (COMP_METADATA_TYPE) and translations, which may be hosted either on the vehicle or the internet.
    ///         For more information see: https://mavlink.io/en/services/component_information.html.
    /// 
    ///         Note: Camera components should use CAMERA_INFORMATION instead, and autopilots may use both this message and AUTOPILOT_VERSION.
    ///       
    ///  COMPONENT_METADATA
    /// </summary>
    public class ComponentMetadataPacket : MavlinkV2Message<ComponentMetadataPayload>
    {
        public const int MessageId = 397;
        
        public const byte CrcExtra = 182;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ComponentMetadataPayload Payload { get; } = new();

        public override string Name => "COMPONENT_METADATA";
    }

    /// <summary>
    ///  COMPONENT_METADATA
    /// </summary>
    public class ComponentMetadataPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 108; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 108; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t time_boot_ms
            +4 // uint32_t file_crc
            +Uri.Length // char[100] uri
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            FileCrc = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/100 - Math.Max(0,((/*PayloadByteSize*/108 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Uri.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,FileCrc);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetBytes(charPointer, Uri.Length, bytePointer, Uri.Length);
                }
            }
            buffer = buffer.Slice(Uri.Length);
            
            /* PayloadByteSize = 108 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimeBootMsField, ref _timeBootMs);    
            UInt32Type.Accept(visitor,FileCrcField, ref _fileCrc);    
            ArrayType.Accept(visitor,UriField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Uri[index]));

        }

        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field TimeBootMsField = new Field.Builder()
            .Name(nameof(TimeBootMs))
            .Title("time_boot_ms")
            .Description("Timestamp (time since system boot).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timeBootMs;
        public uint TimeBootMs { get => _timeBootMs; set => _timeBootMs = value; }
        /// <summary>
        /// CRC32 of the general metadata file.
        /// OriginName: file_crc, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FileCrcField = new Field.Builder()
            .Name(nameof(FileCrc))
            .Title("file_crc")
            .Description("CRC32 of the general metadata file.")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _fileCrc;
        public uint FileCrc { get => _fileCrc; set => _fileCrc = value; }
        /// <summary>
        /// MAVLink FTP URI for the general metadata file (COMP_METADATA_TYPE_GENERAL), which may be compressed with xz. The file contains general component metadata, and may contain URI links for additional metadata (see COMP_METADATA_TYPE). The information is static from boot, and may be generated at compile time. The string needs to be zero terminated.
        /// OriginName: uri, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UriField = new Field.Builder()
            .Name(nameof(Uri))
            .Title("uri")
            .Description("MAVLink FTP URI for the general metadata file (COMP_METADATA_TYPE_GENERAL), which may be compressed with xz. The file contains general component metadata, and may contain URI links for additional metadata (see COMP_METADATA_TYPE). The information is static from boot, and may be generated at compile time. The string needs to be zero terminated.")

            .DataType(new ArrayType(CharType.Ascii,100))
        .Build();
        public const int UriMaxItemsCount = 100;
        public char[] Uri { get; } = new char[100];
        [Obsolete("This method is deprecated. Use GetUriMaxItemsCount instead.")]
        public byte GetUriMaxItemsCount() => 100;
    }
    /// <summary>
    /// Play vehicle tone/tune (buzzer). Supersedes message PLAY_TUNE.
    ///  PLAY_TUNE_V2
    /// </summary>
    public class PlayTuneV2Packet : MavlinkV2Message<PlayTuneV2Payload>
    {
        public const int MessageId = 400;
        
        public const byte CrcExtra = 110;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override PlayTuneV2Payload Payload { get; } = new();

        public override string Name => "PLAY_TUNE_V2";
    }

    /// <summary>
    ///  PLAY_TUNE_V2
    /// </summary>
    public class PlayTuneV2Payload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 254; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 254; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 4 // uint32_t format
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +Tune.Length // char[248] tune
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Format = (TuneFormat)BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/248 - Math.Max(0,((/*PayloadByteSize*/254 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Tune.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Format);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetBytes(charPointer, Tune.Length, bytePointer, Tune.Length);
                }
            }
            buffer = buffer.Slice(Tune.Length);
            
            /* PayloadByteSize = 254 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpFormat = (uint)Format;
            UInt32Type.Accept(visitor,FormatField, ref tmpFormat);
            Format = (TuneFormat)tmpFormat;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,TuneField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Tune[index]));

        }

        /// <summary>
        /// Tune format
        /// OriginName: format, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FormatField = new Field.Builder()
            .Name(nameof(Format))
            .Title("bitmask")
            .Description("Tune format")
            .DataType(new UInt32Type(TuneFormatHelper.GetValues(x=>(uint)x).Min(),TuneFormatHelper.GetValues(x=>(uint)x).Max()))
            .Enum(TuneFormatHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private TuneFormat _format;
        public TuneFormat Format { get => _format; set => _format = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Tune definition as a NULL-terminated string.
        /// OriginName: tune, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TuneField = new Field.Builder()
            .Name(nameof(Tune))
            .Title("tune")
            .Description("Tune definition as a NULL-terminated string.")

            .DataType(new ArrayType(CharType.Ascii,248))
        .Build();
        public const int TuneMaxItemsCount = 248;
        public char[] Tune { get; } = new char[248];
        [Obsolete("This method is deprecated. Use GetTuneMaxItemsCount instead.")]
        public byte GetTuneMaxItemsCount() => 248;
    }
    /// <summary>
    /// Tune formats supported by vehicle. This should be emitted as response to MAV_CMD_REQUEST_MESSAGE.
    ///  SUPPORTED_TUNES
    /// </summary>
    public class SupportedTunesPacket : MavlinkV2Message<SupportedTunesPayload>
    {
        public const int MessageId = 401;
        
        public const byte CrcExtra = 183;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override SupportedTunesPayload Payload { get; } = new();

        public override string Name => "SUPPORTED_TUNES";
    }

    /// <summary>
    ///  SUPPORTED_TUNES
    /// </summary>
    public class SupportedTunesPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 4 // uint32_t format
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Format = (TuneFormat)BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Format);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpFormat = (uint)Format;
            UInt32Type.Accept(visitor,FormatField, ref tmpFormat);
            Format = (TuneFormat)tmpFormat;
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Bitfield of supported tune formats.
        /// OriginName: format, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FormatField = new Field.Builder()
            .Name(nameof(Format))
            .Title("bitmask")
            .Description("Bitfield of supported tune formats.")
            .DataType(new UInt32Type(TuneFormatHelper.GetValues(x=>(uint)x).Min(),TuneFormatHelper.GetValues(x=>(uint)x).Max()))
            .Enum(TuneFormatHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private TuneFormat _format;
        public TuneFormat Format { get => _format; set => _format = value; } 
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Event message. Each new event from a particular component gets a new sequence number. The same message might be sent multiple times if (re-)requested. Most events are broadcast, some can be specific to a target component (as receivers keep track of the sequence for missed events, all events need to be broadcast. Thus we use destination_component instead of target_component).
    ///  EVENT
    /// </summary>
    public class EventPacket : MavlinkV2Message<EventPayload>
    {
        public const int MessageId = 410;
        
        public const byte CrcExtra = 160;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override EventPayload Payload { get; } = new();

        public override string Name => "EVENT";
    }

    /// <summary>
    ///  EVENT
    /// </summary>
    public class EventPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t id
            +4 // uint32_t event_time_boot_ms
            +2 // uint16_t sequence
            +1 // uint8_t destination_component
            +1 // uint8_t destination_system
            +1 // uint8_t log_levels
            +Arguments.Length // uint8_t[40] arguments
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Id = BinSerialize.ReadUInt(ref buffer);
            EventTimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Sequence = BinSerialize.ReadUShort(ref buffer);
            DestinationComponent = (byte)BinSerialize.ReadByte(ref buffer);
            DestinationSystem = (byte)BinSerialize.ReadByte(ref buffer);
            LogLevels = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/40 - Math.Max(0,((/*PayloadByteSize*/53 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Arguments[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteUInt(ref buffer,EventTimeBootMs);
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)DestinationComponent);
            BinSerialize.WriteByte(ref buffer,(byte)DestinationSystem);
            BinSerialize.WriteByte(ref buffer,(byte)LogLevels);
            for(var i=0;i<Arguments.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Arguments[i]);
            }
            /* PayloadByteSize = 53 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,IdField, ref _id);    
            UInt32Type.Accept(visitor,EventTimeBootMsField, ref _eventTimeBootMs);    
            UInt16Type.Accept(visitor,SequenceField, ref _sequence);    
            UInt8Type.Accept(visitor,DestinationComponentField, ref _destinationComponent);    
            UInt8Type.Accept(visitor,DestinationSystemField, ref _destinationSystem);    
            UInt8Type.Accept(visitor,LogLevelsField, ref _logLevels);    
            ArrayType.Accept(visitor,ArgumentsField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Arguments[index]));    

        }

        /// <summary>
        /// Event ID (as defined in the component metadata)
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Event ID (as defined in the component metadata)")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _id;
        public uint Id { get => _id; set => _id = value; }
        /// <summary>
        /// Timestamp (time since system boot when the event happened).
        /// OriginName: event_time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public static readonly Field EventTimeBootMsField = new Field.Builder()
            .Name(nameof(EventTimeBootMs))
            .Title("event_time_boot_ms")
            .Description("Timestamp (time since system boot when the event happened).")
.Units(@"ms")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _eventTimeBootMs;
        public uint EventTimeBootMs { get => _eventTimeBootMs; set => _eventTimeBootMs = value; }
        /// <summary>
        /// Sequence number.
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SequenceField = new Field.Builder()
            .Name(nameof(Sequence))
            .Title("sequence")
            .Description("Sequence number.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _sequence;
        public ushort Sequence { get => _sequence; set => _sequence = value; }
        /// <summary>
        /// Component ID
        /// OriginName: destination_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DestinationComponentField = new Field.Builder()
            .Name(nameof(DestinationComponent))
            .Title("destination_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _destinationComponent;
        public byte DestinationComponent { get => _destinationComponent; set => _destinationComponent = value; }
        /// <summary>
        /// System ID
        /// OriginName: destination_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DestinationSystemField = new Field.Builder()
            .Name(nameof(DestinationSystem))
            .Title("destination_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _destinationSystem;
        public byte DestinationSystem { get => _destinationSystem; set => _destinationSystem = value; }
        /// <summary>
        /// LoggerFactory levels: 4 bits MSB: internal (for logging purposes), 4 bits LSB: external. Levels: Emergency = 0, Alert = 1, Critical = 2, Error = 3, Warning = 4, Notice = 5, Info = 6, Debug = 7, Protocol = 8, Disabled = 9
        /// OriginName: log_levels, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LogLevelsField = new Field.Builder()
            .Name(nameof(LogLevels))
            .Title("log_levels")
            .Description("LoggerFactory levels: 4 bits MSB: internal (for logging purposes), 4 bits LSB: external. Levels: Emergency = 0, Alert = 1, Critical = 2, Error = 3, Warning = 4, Notice = 5, Info = 6, Debug = 7, Protocol = 8, Disabled = 9")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _logLevels;
        public byte LogLevels { get => _logLevels; set => _logLevels = value; }
        /// <summary>
        /// Arguments (depend on event ID).
        /// OriginName: arguments, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ArgumentsField = new Field.Builder()
            .Name(nameof(Arguments))
            .Title("arguments")
            .Description("Arguments (depend on event ID).")

            .DataType(new ArrayType(UInt8Type.Default,40))
        .Build();
        public const int ArgumentsMaxItemsCount = 40;
        public byte[] Arguments { get; } = new byte[40];
        [Obsolete("This method is deprecated. Use GetArgumentsMaxItemsCount instead.")]
        public byte GetArgumentsMaxItemsCount() => 40;
    }
    /// <summary>
    /// Regular broadcast for the current latest event sequence number for a component. This is used to check for dropped events.
    ///  CURRENT_EVENT_SEQUENCE
    /// </summary>
    public class CurrentEventSequencePacket : MavlinkV2Message<CurrentEventSequencePayload>
    {
        public const int MessageId = 411;
        
        public const byte CrcExtra = 106;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CurrentEventSequencePayload Payload { get; } = new();

        public override string Name => "CURRENT_EVENT_SEQUENCE";
    }

    /// <summary>
    ///  CURRENT_EVENT_SEQUENCE
    /// </summary>
    public class CurrentEventSequencePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t sequence
            + 1 // uint8_t flags
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Sequence = BinSerialize.ReadUShort(ref buffer);
            Flags = (MavEventCurrentSequenceFlags)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            /* PayloadByteSize = 3 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SequenceField, ref _sequence);    
            var tmpFlags = (byte)Flags;
            UInt8Type.Accept(visitor,FlagsField, ref tmpFlags);
            Flags = (MavEventCurrentSequenceFlags)tmpFlags;

        }

        /// <summary>
        /// Sequence number.
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SequenceField = new Field.Builder()
            .Name(nameof(Sequence))
            .Title("sequence")
            .Description("Sequence number.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _sequence;
        public ushort Sequence { get => _sequence; set => _sequence = value; }
        /// <summary>
        /// Flag bitset.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FlagsField = new Field.Builder()
            .Name(nameof(Flags))
            .Title("bitmask")
            .Description("Flag bitset.")
            .DataType(new UInt8Type(MavEventCurrentSequenceFlagsHelper.GetValues(x=>(byte)x).Min(),MavEventCurrentSequenceFlagsHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavEventCurrentSequenceFlagsHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavEventCurrentSequenceFlags _flags;
        public MavEventCurrentSequenceFlags Flags { get => _flags; set => _flags = value; } 
    }
    /// <summary>
    /// Request one or more events to be (re-)sent. If first_sequence==last_sequence, only a single event is requested. Note that first_sequence can be larger than last_sequence (because the sequence number can wrap). Each sequence will trigger an EVENT or EVENT_ERROR response.
    ///  REQUEST_EVENT
    /// </summary>
    public class RequestEventPacket : MavlinkV2Message<RequestEventPayload>
    {
        public const int MessageId = 412;
        
        public const byte CrcExtra = 33;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override RequestEventPayload Payload { get; } = new();

        public override string Name => "REQUEST_EVENT";
    }

    /// <summary>
    ///  REQUEST_EVENT
    /// </summary>
    public class RequestEventPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t first_sequence
            +2 // uint16_t last_sequence
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            FirstSequence = BinSerialize.ReadUShort(ref buffer);
            LastSequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,FirstSequence);
            BinSerialize.WriteUShort(ref buffer,LastSequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 6 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,FirstSequenceField, ref _firstSequence);    
            UInt16Type.Accept(visitor,LastSequenceField, ref _lastSequence);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// First sequence number of the requested event.
        /// OriginName: first_sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field FirstSequenceField = new Field.Builder()
            .Name(nameof(FirstSequence))
            .Title("first_sequence")
            .Description("First sequence number of the requested event.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _firstSequence;
        public ushort FirstSequence { get => _firstSequence; set => _firstSequence = value; }
        /// <summary>
        /// Last sequence number of the requested event.
        /// OriginName: last_sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LastSequenceField = new Field.Builder()
            .Name(nameof(LastSequence))
            .Title("last_sequence")
            .Description("Last sequence number of the requested event.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _lastSequence;
        public ushort LastSequence { get => _lastSequence; set => _lastSequence = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Response to a REQUEST_EVENT in case of an error (e.g. the event is not available anymore).
    ///  RESPONSE_EVENT_ERROR
    /// </summary>
    public class ResponseEventErrorPacket : MavlinkV2Message<ResponseEventErrorPayload>
    {
        public const int MessageId = 413;
        
        public const byte CrcExtra = 77;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override ResponseEventErrorPayload Payload { get; } = new();

        public override string Name => "RESPONSE_EVENT_ERROR";
    }

    /// <summary>
    ///  RESPONSE_EVENT_ERROR
    /// </summary>
    public class ResponseEventErrorPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 7; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 7; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // uint16_t sequence
            +2 // uint16_t sequence_oldest_available
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            + 1 // uint8_t reason
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Sequence = BinSerialize.ReadUShort(ref buffer);
            SequenceOldestAvailable = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Reason = (MavEventErrorReason)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteUShort(ref buffer,SequenceOldestAvailable);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Reason);
            /* PayloadByteSize = 7 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt16Type.Accept(visitor,SequenceField, ref _sequence);    
            UInt16Type.Accept(visitor,SequenceOldestAvailableField, ref _sequenceOldestAvailable);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            var tmpReason = (byte)Reason;
            UInt8Type.Accept(visitor,ReasonField, ref tmpReason);
            Reason = (MavEventErrorReason)tmpReason;

        }

        /// <summary>
        /// Sequence number.
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SequenceField = new Field.Builder()
            .Name(nameof(Sequence))
            .Title("sequence")
            .Description("Sequence number.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _sequence;
        public ushort Sequence { get => _sequence; set => _sequence = value; }
        /// <summary>
        /// Oldest Sequence number that is still available after the sequence set in REQUEST_EVENT.
        /// OriginName: sequence_oldest_available, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SequenceOldestAvailableField = new Field.Builder()
            .Name(nameof(SequenceOldestAvailable))
            .Title("sequence_oldest_available")
            .Description("Oldest Sequence number that is still available after the sequence set in REQUEST_EVENT.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _sequenceOldestAvailable;
        public ushort SequenceOldestAvailable { get => _sequenceOldestAvailable; set => _sequenceOldestAvailable = value; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Error reason.
        /// OriginName: reason, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ReasonField = new Field.Builder()
            .Name(nameof(Reason))
            .Title("reason")
            .Description("Error reason.")
            .DataType(new UInt8Type(MavEventErrorReasonHelper.GetValues(x=>(byte)x).Min(),MavEventErrorReasonHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavEventErrorReasonHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavEventErrorReason _reason;
        public MavEventErrorReason Reason { get => _reason; set => _reason = value; } 
    }
    /// <summary>
    /// A forwarded CANFD frame as requested by MAV_CMD_CAN_FORWARD. These are separated from CAN_FRAME as they need different handling (eg. TAO handling)
    ///  CANFD_FRAME
    /// </summary>
    public class CanfdFramePacket : MavlinkV2Message<CanfdFramePayload>
    {
        public const int MessageId = 387;
        
        public const byte CrcExtra = 4;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CanfdFramePayload Payload { get; } = new();

        public override string Name => "CANFD_FRAME";
    }

    /// <summary>
    ///  CANFD_FRAME
    /// </summary>
    public class CanfdFramePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 72; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 72; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t id
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t bus
            +1 // uint8_t len
            +Data.Length // uint8_t[64] data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Id = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Bus = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/64 - Math.Max(0,((/*PayloadByteSize*/72 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Bus);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 72 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,IdField, ref _id);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,BusField, ref _bus);    
            UInt8Type.Accept(visitor,LenField, ref _len);    
            ArrayType.Accept(visitor,DataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Data[index]));    

        }

        /// <summary>
        /// Frame ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Frame ID")

            .DataType(UInt32Type.Default)
        .Build();
        private uint _id;
        public uint Id { get => _id; set => _id = value; }
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// bus number
        /// OriginName: bus, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BusField = new Field.Builder()
            .Name(nameof(Bus))
            .Title("bus")
            .Description("bus number")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _bus;
        public byte Bus { get => _bus; set => _bus = value; }
        /// <summary>
        /// Frame length
        /// OriginName: len, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LenField = new Field.Builder()
            .Name(nameof(Len))
            .Title("len")
            .Description("Frame length")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _len;
        public byte Len { get => _len; set => _len = value; }
        /// <summary>
        /// Frame data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataField = new Field.Builder()
            .Name(nameof(Data))
            .Title("data")
            .Description("Frame data")

            .DataType(new ArrayType(UInt8Type.Default,64))
        .Build();
        public const int DataMaxItemsCount = 64;
        public byte[] Data { get; } = new byte[64];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 64;
    }
    /// <summary>
    /// Modify the filter of what CAN messages to forward over the mavlink. This can be used to make CAN forwarding work well on low bandwidth links. The filtering is applied on bits 8 to 24 of the CAN id (2nd and 3rd bytes) which corresponds to the DroneCAN message ID for DroneCAN. Filters with more than 16 IDs can be constructed by sending multiple CAN_FILTER_MODIFY messages.
    ///  CAN_FILTER_MODIFY
    /// </summary>
    public class CanFilterModifyPacket : MavlinkV2Message<CanFilterModifyPayload>
    {
        public const int MessageId = 388;
        
        public const byte CrcExtra = 8;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override CanFilterModifyPayload Payload { get; } = new();

        public override string Name => "CAN_FILTER_MODIFY";
    }

    /// <summary>
    ///  CAN_FILTER_MODIFY
    /// </summary>
    public class CanFilterModifyPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +Ids.Length * 2 // uint16_t[16] ids
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +1 // uint8_t bus
            + 1 // uint8_t operation
            +1 // uint8_t num_ids
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/37 - payloadSize - /*ExtendedFieldsLength*/0)/2 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Ids[i] = BinSerialize.ReadUShort(ref buffer);
            }
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Bus = (byte)BinSerialize.ReadByte(ref buffer);
            Operation = (CanFilterOp)BinSerialize.ReadByte(ref buffer);
            NumIds = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            for(var i=0;i<Ids.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,Ids[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Bus);
            BinSerialize.WriteByte(ref buffer,(byte)Operation);
            BinSerialize.WriteByte(ref buffer,(byte)NumIds);
            /* PayloadByteSize = 37 */;
        }

        public void Accept(IVisitor visitor)
        {
            ArrayType.Accept(visitor,IdsField, 
                (index, v, f, t) => UInt16Type.Accept(v, f, t, ref Ids[index]));    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            UInt8Type.Accept(visitor,BusField, ref _bus);    
            var tmpOperation = (byte)Operation;
            UInt8Type.Accept(visitor,OperationField, ref tmpOperation);
            Operation = (CanFilterOp)tmpOperation;
            UInt8Type.Accept(visitor,NumIdsField, ref _numIds);    

        }

        /// <summary>
        /// filter IDs, length num_ids
        /// OriginName: ids, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdsField = new Field.Builder()
            .Name(nameof(Ids))
            .Title("ids")
            .Description("filter IDs, length num_ids")

            .DataType(new ArrayType(UInt16Type.Default,16))
        .Build();
        public const int IdsMaxItemsCount = 16;
        public ushort[] Ids { get; } = new ushort[16];
        [Obsolete("This method is deprecated. Use GetIdsMaxItemsCount instead.")]
        public byte GetIdsMaxItemsCount() => 16;
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// bus number
        /// OriginName: bus, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BusField = new Field.Builder()
            .Name(nameof(Bus))
            .Title("bus")
            .Description("bus number")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _bus;
        public byte Bus { get => _bus; set => _bus = value; }
        /// <summary>
        /// what operation to perform on the filter list. See CAN_FILTER_OP enum.
        /// OriginName: operation, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OperationField = new Field.Builder()
            .Name(nameof(Operation))
            .Title("operation")
            .Description("what operation to perform on the filter list. See CAN_FILTER_OP enum.")
            .DataType(new UInt8Type(CanFilterOpHelper.GetValues(x=>(byte)x).Min(),CanFilterOpHelper.GetValues(x=>(byte)x).Max()))
            .Enum(CanFilterOpHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private CanFilterOp _operation;
        public CanFilterOp Operation { get => _operation; set => _operation = value; } 
        /// <summary>
        /// number of IDs in filter list
        /// OriginName: num_ids, Units: , IsExtended: false
        /// </summary>
        public static readonly Field NumIdsField = new Field.Builder()
            .Name(nameof(NumIds))
            .Title("num_ids")
            .Description("number of IDs in filter list")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _numIds;
        public byte NumIds { get => _numIds; set => _numIds = value; }
    }
    /// <summary>
    /// Cumulative distance traveled for each reported wheel.
    ///  WHEEL_DISTANCE
    /// </summary>
    public class WheelDistancePacket : MavlinkV2Message<WheelDistancePayload>
    {
        public const int MessageId = 9000;
        
        public const byte CrcExtra = 113;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override WheelDistancePayload Payload { get; } = new();

        public override string Name => "WHEEL_DISTANCE";
    }

    /// <summary>
    ///  WHEEL_DISTANCE
    /// </summary>
    public class WheelDistancePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 137; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 137; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +Distance.Length * 8 // double[16] distance
            +1 // uint8_t count
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/137 - payloadSize - /*ExtendedFieldsLength*/0)/8 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Distance[i] = BinSerialize.ReadDouble(ref buffer);
            }
            Count = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Distance.Length;i++)
            {
                BinSerialize.WriteDouble(ref buffer,Distance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            /* PayloadByteSize = 137 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            ArrayType.Accept(visitor,DistanceField, 
                (index, v, f, t) => DoubleType.Accept(v, f, t, ref Distance[index]));    
            UInt8Type.Accept(visitor,CountField, ref _count);    

        }

        /// <summary>
        /// Timestamp (synced to UNIX time or since system boot).
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (synced to UNIX time or since system boot).")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints.
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field DistanceField = new Field.Builder()
            .Name(nameof(Distance))
            .Title("distance")
            .Description("Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints.")
.Units(@"m")
            .DataType(new ArrayType(DoubleType.Default,16))        
        .Build();
        public const int DistanceMaxItemsCount = 16;
        public double[] Distance { get; } = new double[16];
        [Obsolete("This method is deprecated. Use GetDistanceMaxItemsCount instead.")]
        public byte GetDistanceMaxItemsCount() => 16;
        /// <summary>
        /// Number of wheels reported.
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CountField = new Field.Builder()
            .Name(nameof(Count))
            .Title("count")
            .Description("Number of wheels reported.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _count;
        public byte Count { get => _count; set => _count = value; }
    }
    /// <summary>
    /// Winch status.
    ///  WINCH_STATUS
    /// </summary>
    public class WinchStatusPacket : MavlinkV2Message<WinchStatusPayload>
    {
        public const int MessageId = 9005;
        
        public const byte CrcExtra = 117;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override WinchStatusPayload Payload { get; } = new();

        public override string Name => "WINCH_STATUS";
    }

    /// <summary>
    ///  WINCH_STATUS
    /// </summary>
    public class WinchStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 34; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 34; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +8 // uint64_t time_usec
            +4 // float line_length
            +4 // float speed
            +4 // float tension
            +4 // float voltage
            +4 // float current
            + 4 // uint32_t status
            +2 // int16_t temperature
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            LineLength = BinSerialize.ReadFloat(ref buffer);
            Speed = BinSerialize.ReadFloat(ref buffer);
            Tension = BinSerialize.ReadFloat(ref buffer);
            Voltage = BinSerialize.ReadFloat(ref buffer);
            Current = BinSerialize.ReadFloat(ref buffer);
            Status = (MavWinchStatusFlag)BinSerialize.ReadUInt(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,LineLength);
            BinSerialize.WriteFloat(ref buffer,Speed);
            BinSerialize.WriteFloat(ref buffer,Tension);
            BinSerialize.WriteFloat(ref buffer,Voltage);
            BinSerialize.WriteFloat(ref buffer,Current);
            BinSerialize.WriteUInt(ref buffer,(uint)Status);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 34 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt64Type.Accept(visitor,TimeUsecField, ref _timeUsec);    
            FloatType.Accept(visitor,LineLengthField, ref _lineLength);    
            FloatType.Accept(visitor,SpeedField, ref _speed);    
            FloatType.Accept(visitor,TensionField, ref _tension);    
            FloatType.Accept(visitor,VoltageField, ref _voltage);    
            FloatType.Accept(visitor,CurrentField, ref _current);    
            var tmpStatus = (uint)Status;
            UInt32Type.Accept(visitor,StatusField, ref tmpStatus);
            Status = (MavWinchStatusFlag)tmpStatus;
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);

        }

        /// <summary>
        /// Timestamp (synced to UNIX time or since system boot).
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public static readonly Field TimeUsecField = new Field.Builder()
            .Name(nameof(TimeUsec))
            .Title("time_usec")
            .Description("Timestamp (synced to UNIX time or since system boot).")
.Units(@"us")
            .DataType(UInt64Type.Default)
        .Build();
        private ulong _timeUsec;
        public ulong TimeUsec { get => _timeUsec; set => _timeUsec = value; }
        /// <summary>
        /// Length of line released. NaN if unknown
        /// OriginName: line_length, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field LineLengthField = new Field.Builder()
            .Name(nameof(LineLength))
            .Title("line_length")
            .Description("Length of line released. NaN if unknown")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _lineLength;
        public float LineLength { get => _lineLength; set => _lineLength = value; }
        /// <summary>
        /// Speed line is being released or retracted. Positive values if being released, negative values if being retracted, NaN if unknown
        /// OriginName: speed, Units: m/s, IsExtended: false
        /// </summary>
        public static readonly Field SpeedField = new Field.Builder()
            .Name(nameof(Speed))
            .Title("speed")
            .Description("Speed line is being released or retracted. Positive values if being released, negative values if being retracted, NaN if unknown")
.Units(@"m/s")
            .DataType(FloatType.Default)
        .Build();
        private float _speed;
        public float Speed { get => _speed; set => _speed = value; }
        /// <summary>
        /// Tension on the line. NaN if unknown
        /// OriginName: tension, Units: kg, IsExtended: false
        /// </summary>
        public static readonly Field TensionField = new Field.Builder()
            .Name(nameof(Tension))
            .Title("tension")
            .Description("Tension on the line. NaN if unknown")
.Units(@"kg")
            .DataType(FloatType.Default)
        .Build();
        private float _tension;
        public float Tension { get => _tension; set => _tension = value; }
        /// <summary>
        /// Voltage of the battery supplying the winch. NaN if unknown
        /// OriginName: voltage, Units: V, IsExtended: false
        /// </summary>
        public static readonly Field VoltageField = new Field.Builder()
            .Name(nameof(Voltage))
            .Title("voltage")
            .Description("Voltage of the battery supplying the winch. NaN if unknown")
.Units(@"V")
            .DataType(FloatType.Default)
        .Build();
        private float _voltage;
        public float Voltage { get => _voltage; set => _voltage = value; }
        /// <summary>
        /// Current draw from the winch. NaN if unknown
        /// OriginName: current, Units: A, IsExtended: false
        /// </summary>
        public static readonly Field CurrentField = new Field.Builder()
            .Name(nameof(Current))
            .Title("current")
            .Description("Current draw from the winch. NaN if unknown")
.Units(@"A")
            .DataType(FloatType.Default)
        .Build();
        private float _current;
        public float Current { get => _current; set => _current = value; }
        /// <summary>
        /// Status flags
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StatusField = new Field.Builder()
            .Name(nameof(Status))
            .Title("bitmask")
            .Description("Status flags")
            .DataType(new UInt32Type(MavWinchStatusFlagHelper.GetValues(x=>(uint)x).Min(),MavWinchStatusFlagHelper.GetValues(x=>(uint)x).Max()))
            .Enum(MavWinchStatusFlagHelper.GetEnumValues(x=>(uint)x))
            .Build();
        private MavWinchStatusFlag _status;
        public MavWinchStatusFlag Status { get => _status; set => _status = value; } 
        /// <summary>
        /// Temperature of the motor. INT16_MAX if unknown
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature of the motor. INT16_MAX if unknown")
.Units(@"degC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
    }
    /// <summary>
    /// Data for filling the OpenDroneID Basic ID message. This and the below messages are primarily meant for feeding data to/from an OpenDroneID implementation. E.g. https://github.com/opendroneid/opendroneid-core-c. These messages are compatible with the ASTM F3411 Remote ID standard and the ASD-STAN prEN 4709-002 Direct Remote ID standard. Additional information and usage of these messages is documented at https://mavlink.io/en/services/opendroneid.html.
    ///  OPEN_DRONE_ID_BASIC_ID
    /// </summary>
    public class OpenDroneIdBasicIdPacket : MavlinkV2Message<OpenDroneIdBasicIdPayload>
    {
        public const int MessageId = 12900;
        
        public const byte CrcExtra = 114;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdBasicIdPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_BASIC_ID";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_BASIC_ID
    /// </summary>
    public class OpenDroneIdBasicIdPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 44; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 44; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +IdOrMac.Length // uint8_t[20] id_or_mac
            + 1 // uint8_t id_type
            + 1 // uint8_t ua_type
            +UasId.Length // uint8_t[20] uas_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/44 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            IdType = (MavOdidIdType)BinSerialize.ReadByte(ref buffer);
            UaType = (MavOdidUaType)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                UasId[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)IdType);
            BinSerialize.WriteByte(ref buffer,(byte)UaType);
            for(var i=0;i<UasId.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)UasId[i]);
            }
            /* PayloadByteSize = 44 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,IdOrMacField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref IdOrMac[index]));    
            var tmpIdType = (byte)IdType;
            UInt8Type.Accept(visitor,IdTypeField, ref tmpIdType);
            IdType = (MavOdidIdType)tmpIdType;
            var tmpUaType = (byte)UaType;
            UInt8Type.Accept(visitor,UaTypeField, ref tmpUaType);
            UaType = (MavOdidUaType)tmpUaType;
            ArrayType.Accept(visitor,UasIdField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref UasId[index]));    

        }

        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdOrMacField = new Field.Builder()
            .Name(nameof(IdOrMac))
            .Title("id_or_mac")
            .Description("Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. ")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Indicates the format for the uas_id field of this message.
        /// OriginName: id_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdTypeField = new Field.Builder()
            .Name(nameof(IdType))
            .Title("id_type")
            .Description("Indicates the format for the uas_id field of this message.")
            .DataType(new UInt8Type(MavOdidIdTypeHelper.GetValues(x=>(byte)x).Min(),MavOdidIdTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidIdTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidIdType _idType;
        public MavOdidIdType IdType { get => _idType; set => _idType = value; } 
        /// <summary>
        /// Indicates the type of UA (Unmanned Aircraft).
        /// OriginName: ua_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UaTypeField = new Field.Builder()
            .Name(nameof(UaType))
            .Title("ua_type")
            .Description("Indicates the type of UA (Unmanned Aircraft).")
            .DataType(new UInt8Type(MavOdidUaTypeHelper.GetValues(x=>(byte)x).Min(),MavOdidUaTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidUaTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidUaType _uaType;
        public MavOdidUaType UaType { get => _uaType; set => _uaType = value; } 
        /// <summary>
        /// UAS (Unmanned Aircraft System) ID following the format specified by id_type. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: uas_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field UasIdField = new Field.Builder()
            .Name(nameof(UasId))
            .Title("uas_id")
            .Description("UAS (Unmanned Aircraft System) ID following the format specified by id_type. Shall be filled with nulls in the unused portion of the field.")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int UasIdMaxItemsCount = 20;
        public byte[] UasId { get; } = new byte[20];
    }
    /// <summary>
    /// Data for filling the OpenDroneID Location message. The float data types are 32-bit IEEE 754. The Location message provides the location, altitude, direction and speed of the aircraft.
    ///  OPEN_DRONE_ID_LOCATION
    /// </summary>
    public class OpenDroneIdLocationPacket : MavlinkV2Message<OpenDroneIdLocationPayload>
    {
        public const int MessageId = 12901;
        
        public const byte CrcExtra = 254;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdLocationPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_LOCATION";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_LOCATION
    /// </summary>
    public class OpenDroneIdLocationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 59; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 59; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t latitude
            +4 // int32_t longitude
            +4 // float altitude_barometric
            +4 // float altitude_geodetic
            +4 // float height
            +4 // float timestamp
            +2 // uint16_t direction
            +2 // uint16_t speed_horizontal
            +2 // int16_t speed_vertical
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +IdOrMac.Length // uint8_t[20] id_or_mac
            + 1 // uint8_t status
            + 1 // uint8_t height_reference
            + 1 // uint8_t horizontal_accuracy
            + 1 // uint8_t vertical_accuracy
            + 1 // uint8_t barometer_accuracy
            + 1 // uint8_t speed_accuracy
            + 1 // uint8_t timestamp_accuracy
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            AltitudeBarometric = BinSerialize.ReadFloat(ref buffer);
            AltitudeGeodetic = BinSerialize.ReadFloat(ref buffer);
            Height = BinSerialize.ReadFloat(ref buffer);
            Timestamp = BinSerialize.ReadFloat(ref buffer);
            Direction = BinSerialize.ReadUShort(ref buffer);
            SpeedHorizontal = BinSerialize.ReadUShort(ref buffer);
            SpeedVertical = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/59 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            Status = (MavOdidStatus)BinSerialize.ReadByte(ref buffer);
            HeightReference = (MavOdidHeightRef)BinSerialize.ReadByte(ref buffer);
            HorizontalAccuracy = (MavOdidHorAcc)BinSerialize.ReadByte(ref buffer);
            VerticalAccuracy = (MavOdidVerAcc)BinSerialize.ReadByte(ref buffer);
            BarometerAccuracy = (MavOdidVerAcc)BinSerialize.ReadByte(ref buffer);
            SpeedAccuracy = (MavOdidSpeedAcc)BinSerialize.ReadByte(ref buffer);
            TimestampAccuracy = (MavOdidTimeAcc)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteFloat(ref buffer,AltitudeBarometric);
            BinSerialize.WriteFloat(ref buffer,AltitudeGeodetic);
            BinSerialize.WriteFloat(ref buffer,Height);
            BinSerialize.WriteFloat(ref buffer,Timestamp);
            BinSerialize.WriteUShort(ref buffer,Direction);
            BinSerialize.WriteUShort(ref buffer,SpeedHorizontal);
            BinSerialize.WriteShort(ref buffer,SpeedVertical);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            BinSerialize.WriteByte(ref buffer,(byte)HeightReference);
            BinSerialize.WriteByte(ref buffer,(byte)HorizontalAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)VerticalAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)BarometerAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)SpeedAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)TimestampAccuracy);
            /* PayloadByteSize = 59 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,LatitudeField, ref _latitude);    
            Int32Type.Accept(visitor,LongitudeField, ref _longitude);    
            FloatType.Accept(visitor,AltitudeBarometricField, ref _altitudeBarometric);    
            FloatType.Accept(visitor,AltitudeGeodeticField, ref _altitudeGeodetic);    
            FloatType.Accept(visitor,HeightField, ref _height);    
            FloatType.Accept(visitor,TimestampField, ref _timestamp);    
            UInt16Type.Accept(visitor,DirectionField, ref _direction);    
            UInt16Type.Accept(visitor,SpeedHorizontalField, ref _speedHorizontal);    
            Int16Type.Accept(visitor,SpeedVerticalField, ref _speedVertical);
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,IdOrMacField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref IdOrMac[index]));    
            var tmpStatus = (byte)Status;
            UInt8Type.Accept(visitor,StatusField, ref tmpStatus);
            Status = (MavOdidStatus)tmpStatus;
            var tmpHeightReference = (byte)HeightReference;
            UInt8Type.Accept(visitor,HeightReferenceField, ref tmpHeightReference);
            HeightReference = (MavOdidHeightRef)tmpHeightReference;
            var tmpHorizontalAccuracy = (byte)HorizontalAccuracy;
            UInt8Type.Accept(visitor,HorizontalAccuracyField, ref tmpHorizontalAccuracy);
            HorizontalAccuracy = (MavOdidHorAcc)tmpHorizontalAccuracy;
            var tmpVerticalAccuracy = (byte)VerticalAccuracy;
            UInt8Type.Accept(visitor,VerticalAccuracyField, ref tmpVerticalAccuracy);
            VerticalAccuracy = (MavOdidVerAcc)tmpVerticalAccuracy;
            var tmpBarometerAccuracy = (byte)BarometerAccuracy;
            UInt8Type.Accept(visitor,BarometerAccuracyField, ref tmpBarometerAccuracy);
            BarometerAccuracy = (MavOdidVerAcc)tmpBarometerAccuracy;
            var tmpSpeedAccuracy = (byte)SpeedAccuracy;
            UInt8Type.Accept(visitor,SpeedAccuracyField, ref tmpSpeedAccuracy);
            SpeedAccuracy = (MavOdidSpeedAcc)tmpSpeedAccuracy;
            var tmpTimestampAccuracy = (byte)TimestampAccuracy;
            UInt8Type.Accept(visitor,TimestampAccuracyField, ref tmpTimestampAccuracy);
            TimestampAccuracy = (MavOdidTimeAcc)tmpTimestampAccuracy;

        }

        /// <summary>
        /// Current latitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LatitudeField = new Field.Builder()
            .Name(nameof(Latitude))
            .Title("latitude")
            .Description("Current latitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _latitude;
        public int Latitude { get => _latitude; set => _latitude = value; }
        /// <summary>
        /// Current longitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field LongitudeField = new Field.Builder()
            .Name(nameof(Longitude))
            .Title("longitude")
            .Description("Current longitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _longitude;
        public int Longitude { get => _longitude; set => _longitude = value; }
        /// <summary>
        /// The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.
        /// OriginName: altitude_barometric, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeBarometricField = new Field.Builder()
            .Name(nameof(AltitudeBarometric))
            .Title("altitude_barometric")
            .Description("The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeBarometric;
        public float AltitudeBarometric { get => _altitudeBarometric; set => _altitudeBarometric = value; }
        /// <summary>
        /// The geodetic altitude as defined by WGS84. If unknown: -1000 m.
        /// OriginName: altitude_geodetic, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AltitudeGeodeticField = new Field.Builder()
            .Name(nameof(AltitudeGeodetic))
            .Title("altitude_geodetic")
            .Description("The geodetic altitude as defined by WGS84. If unknown: -1000 m.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _altitudeGeodetic;
        public float AltitudeGeodetic { get => _altitudeGeodetic; set => _altitudeGeodetic = value; }
        /// <summary>
        /// The current height of the unmanned aircraft above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m.
        /// OriginName: height, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field HeightField = new Field.Builder()
            .Name(nameof(Height))
            .Title("height")
            .Description("The current height of the unmanned aircraft above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _height;
        public float Height { get => _height; set => _height = value; }
        /// <summary>
        /// Seconds after the full hour with reference to UTC time. Typically the GPS outputs a time-of-week value in milliseconds. First convert that to UTC and then convert for this field using ((float) (time_week_ms % (60*60*1000))) / 1000. If unknown: 0xFFFF.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("Seconds after the full hour with reference to UTC time. Typically the GPS outputs a time-of-week value in milliseconds. First convert that to UTC and then convert for this field using ((float) (time_week_ms % (60*60*1000))) / 1000. If unknown: 0xFFFF.")
.Units(@"s")
            .DataType(FloatType.Default)
        .Build();
        private float _timestamp;
        public float Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// Direction over ground (not heading, but direction of movement) measured clockwise from true North: 0 - 35999 centi-degrees. If unknown: 36100 centi-degrees.
        /// OriginName: direction, Units: cdeg, IsExtended: false
        /// </summary>
        public static readonly Field DirectionField = new Field.Builder()
            .Name(nameof(Direction))
            .Title("direction")
            .Description("Direction over ground (not heading, but direction of movement) measured clockwise from true North: 0 - 35999 centi-degrees. If unknown: 36100 centi-degrees.")
.Units(@"cdeg")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _direction;
        public ushort Direction { get => _direction; set => _direction = value; }
        /// <summary>
        /// Ground speed. Positive only. If unknown: 25500 cm/s. If speed is larger than 25425 cm/s, use 25425 cm/s.
        /// OriginName: speed_horizontal, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field SpeedHorizontalField = new Field.Builder()
            .Name(nameof(SpeedHorizontal))
            .Title("speed_horizontal")
            .Description("Ground speed. Positive only. If unknown: 25500 cm/s. If speed is larger than 25425 cm/s, use 25425 cm/s.")
.Units(@"cm/s")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _speedHorizontal;
        public ushort SpeedHorizontal { get => _speedHorizontal; set => _speedHorizontal = value; }
        /// <summary>
        /// The vertical speed. Up is positive. If unknown: 6300 cm/s. If speed is larger than 6200 cm/s, use 6200 cm/s. If lower than -6200 cm/s, use -6200 cm/s.
        /// OriginName: speed_vertical, Units: cm/s, IsExtended: false
        /// </summary>
        public static readonly Field SpeedVerticalField = new Field.Builder()
            .Name(nameof(SpeedVertical))
            .Title("speed_vertical")
            .Description("The vertical speed. Up is positive. If unknown: 6300 cm/s. If speed is larger than 6200 cm/s, use 6200 cm/s. If lower than -6200 cm/s, use -6200 cm/s.")
.Units(@"cm/s")
            .DataType(Int16Type.Default)
        .Build();
        private short _speedVertical;
        public short SpeedVertical { get => _speedVertical; set => _speedVertical = value; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdOrMacField = new Field.Builder()
            .Name(nameof(IdOrMac))
            .Title("id_or_mac")
            .Description("Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. ")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Indicates whether the unmanned aircraft is on the ground or in the air.
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StatusField = new Field.Builder()
            .Name(nameof(Status))
            .Title("status")
            .Description("Indicates whether the unmanned aircraft is on the ground or in the air.")
            .DataType(new UInt8Type(MavOdidStatusHelper.GetValues(x=>(byte)x).Min(),MavOdidStatusHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidStatusHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidStatus _status;
        public MavOdidStatus Status { get => _status; set => _status = value; } 
        /// <summary>
        /// Indicates the reference point for the height field.
        /// OriginName: height_reference, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HeightReferenceField = new Field.Builder()
            .Name(nameof(HeightReference))
            .Title("height_reference")
            .Description("Indicates the reference point for the height field.")
            .DataType(new UInt8Type(MavOdidHeightRefHelper.GetValues(x=>(byte)x).Min(),MavOdidHeightRefHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidHeightRefHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidHeightRef _heightReference;
        public MavOdidHeightRef HeightReference { get => _heightReference; set => _heightReference = value; } 
        /// <summary>
        /// The accuracy of the horizontal position.
        /// OriginName: horizontal_accuracy, Units: , IsExtended: false
        /// </summary>
        public static readonly Field HorizontalAccuracyField = new Field.Builder()
            .Name(nameof(HorizontalAccuracy))
            .Title("horizontal_accuracy")
            .Description("The accuracy of the horizontal position.")
            .DataType(new UInt8Type(MavOdidHorAccHelper.GetValues(x=>(byte)x).Min(),MavOdidHorAccHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidHorAccHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidHorAcc _horizontalAccuracy;
        public MavOdidHorAcc HorizontalAccuracy { get => _horizontalAccuracy; set => _horizontalAccuracy = value; } 
        /// <summary>
        /// The accuracy of the vertical position.
        /// OriginName: vertical_accuracy, Units: , IsExtended: false
        /// </summary>
        public static readonly Field VerticalAccuracyField = new Field.Builder()
            .Name(nameof(VerticalAccuracy))
            .Title("vertical_accuracy")
            .Description("The accuracy of the vertical position.")
            .DataType(new UInt8Type(MavOdidVerAccHelper.GetValues(x=>(byte)x).Min(),MavOdidVerAccHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidVerAccHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidVerAcc _verticalAccuracy;
        public MavOdidVerAcc VerticalAccuracy { get => _verticalAccuracy; set => _verticalAccuracy = value; } 
        /// <summary>
        /// The accuracy of the barometric altitude.
        /// OriginName: barometer_accuracy, Units: , IsExtended: false
        /// </summary>
        public static readonly Field BarometerAccuracyField = new Field.Builder()
            .Name(nameof(BarometerAccuracy))
            .Title("barometer_accuracy")
            .Description("The accuracy of the barometric altitude.")
            .DataType(new UInt8Type(MavOdidVerAccHelper.GetValues(x=>(byte)x).Min(),MavOdidVerAccHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidVerAccHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidVerAcc _barometerAccuracy;
        public MavOdidVerAcc BarometerAccuracy { get => _barometerAccuracy; set => _barometerAccuracy = value; } 
        /// <summary>
        /// The accuracy of the horizontal and vertical speed.
        /// OriginName: speed_accuracy, Units: , IsExtended: false
        /// </summary>
        public static readonly Field SpeedAccuracyField = new Field.Builder()
            .Name(nameof(SpeedAccuracy))
            .Title("speed_accuracy")
            .Description("The accuracy of the horizontal and vertical speed.")
            .DataType(new UInt8Type(MavOdidSpeedAccHelper.GetValues(x=>(byte)x).Min(),MavOdidSpeedAccHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidSpeedAccHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidSpeedAcc _speedAccuracy;
        public MavOdidSpeedAcc SpeedAccuracy { get => _speedAccuracy; set => _speedAccuracy = value; } 
        /// <summary>
        /// The accuracy of the timestamps.
        /// OriginName: timestamp_accuracy, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TimestampAccuracyField = new Field.Builder()
            .Name(nameof(TimestampAccuracy))
            .Title("timestamp_accuracy")
            .Description("The accuracy of the timestamps.")
            .DataType(new UInt8Type(MavOdidTimeAccHelper.GetValues(x=>(byte)x).Min(),MavOdidTimeAccHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidTimeAccHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidTimeAcc _timestampAccuracy;
        public MavOdidTimeAcc TimestampAccuracy { get => _timestampAccuracy; set => _timestampAccuracy = value; } 
    }
    /// <summary>
    /// Data for filling the OpenDroneID Authentication message. The Authentication Message defines a field that can provide a means of authenticity for the identity of the UAS (Unmanned Aircraft System). The Authentication message can have two different formats. For data page 0, the fields PageCount, Length and TimeStamp are present and AuthData is only 17 bytes. For data page 1 through 15, PageCount, Length and TimeStamp are not present and the size of AuthData is 23 bytes.
    ///  OPEN_DRONE_ID_AUTHENTICATION
    /// </summary>
    public class OpenDroneIdAuthenticationPacket : MavlinkV2Message<OpenDroneIdAuthenticationPayload>
    {
        public const int MessageId = 12902;
        
        public const byte CrcExtra = 140;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdAuthenticationPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_AUTHENTICATION";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_AUTHENTICATION
    /// </summary>
    public class OpenDroneIdAuthenticationPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // uint32_t timestamp
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +IdOrMac.Length // uint8_t[20] id_or_mac
            + 1 // uint8_t authentication_type
            +1 // uint8_t data_page
            +1 // uint8_t last_page_index
            +1 // uint8_t length
            +AuthenticationData.Length // uint8_t[23] authentication_data
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            AuthenticationType = (MavOdidAuthType)BinSerialize.ReadByte(ref buffer);
            DataPage = (byte)BinSerialize.ReadByte(ref buffer);
            LastPageIndex = (byte)BinSerialize.ReadByte(ref buffer);
            Length = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/23 - Math.Max(0,((/*PayloadByteSize*/53 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                AuthenticationData[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)AuthenticationType);
            BinSerialize.WriteByte(ref buffer,(byte)DataPage);
            BinSerialize.WriteByte(ref buffer,(byte)LastPageIndex);
            BinSerialize.WriteByte(ref buffer,(byte)Length);
            for(var i=0;i<AuthenticationData.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)AuthenticationData[i]);
            }
            /* PayloadByteSize = 53 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt32Type.Accept(visitor,TimestampField, ref _timestamp);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,IdOrMacField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref IdOrMac[index]));    
            var tmpAuthenticationType = (byte)AuthenticationType;
            UInt8Type.Accept(visitor,AuthenticationTypeField, ref tmpAuthenticationType);
            AuthenticationType = (MavOdidAuthType)tmpAuthenticationType;
            UInt8Type.Accept(visitor,DataPageField, ref _dataPage);    
            UInt8Type.Accept(visitor,LastPageIndexField, ref _lastPageIndex);    
            UInt8Type.Accept(visitor,LengthField, ref _length);    
            ArrayType.Accept(visitor,AuthenticationDataField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref AuthenticationData[index]));    

        }

        /// <summary>
        /// This field is only present for page 0. 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("This field is only present for page 0. 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.")
.Units(@"s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timestamp;
        public uint Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdOrMacField = new Field.Builder()
            .Name(nameof(IdOrMac))
            .Title("id_or_mac")
            .Description("Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. ")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        /// <summary>
        /// Indicates the type of authentication.
        /// OriginName: authentication_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AuthenticationTypeField = new Field.Builder()
            .Name(nameof(AuthenticationType))
            .Title("authentication_type")
            .Description("Indicates the type of authentication.")
            .DataType(new UInt8Type(MavOdidAuthTypeHelper.GetValues(x=>(byte)x).Min(),MavOdidAuthTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidAuthTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidAuthType _authenticationType;
        public MavOdidAuthType AuthenticationType { get => _authenticationType; set => _authenticationType = value; } 
        /// <summary>
        /// Allowed range is 0 - 15.
        /// OriginName: data_page, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DataPageField = new Field.Builder()
            .Name(nameof(DataPage))
            .Title("data_page")
            .Description("Allowed range is 0 - 15.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _dataPage;
        public byte DataPage { get => _dataPage; set => _dataPage = value; }
        /// <summary>
        /// This field is only present for page 0. Allowed range is 0 - 15. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h.
        /// OriginName: last_page_index, Units: , IsExtended: false
        /// </summary>
        public static readonly Field LastPageIndexField = new Field.Builder()
            .Name(nameof(LastPageIndex))
            .Title("last_page_index")
            .Description("This field is only present for page 0. Allowed range is 0 - 15. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _lastPageIndex;
        public byte LastPageIndex { get => _lastPageIndex; set => _lastPageIndex = value; }
        /// <summary>
        /// This field is only present for page 0. Total bytes of authentication_data from all data pages. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h.
        /// OriginName: length, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field LengthField = new Field.Builder()
            .Name(nameof(Length))
            .Title("length")
            .Description("This field is only present for page 0. Total bytes of authentication_data from all data pages. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h.")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _length;
        public byte Length { get => _length; set => _length = value; }
        /// <summary>
        /// Opaque authentication data. For page 0, the size is only 17 bytes. For other pages, the size is 23 bytes. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: authentication_data, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AuthenticationDataField = new Field.Builder()
            .Name(nameof(AuthenticationData))
            .Title("authentication_data")
            .Description("Opaque authentication data. For page 0, the size is only 17 bytes. For other pages, the size is 23 bytes. Shall be filled with nulls in the unused portion of the field.")

            .DataType(new ArrayType(UInt8Type.Default,23))
        .Build();
        public const int AuthenticationDataMaxItemsCount = 23;
        public byte[] AuthenticationData { get; } = new byte[23];
        [Obsolete("This method is deprecated. Use GetAuthenticationDataMaxItemsCount instead.")]
        public byte GetAuthenticationDataMaxItemsCount() => 23;
    }
    /// <summary>
    /// Data for filling the OpenDroneID Self ID message. The Self ID Message is an opportunity for the operator to (optionally) declare their identity and purpose of the flight. This message can provide additional information that could reduce the threat profile of a UA (Unmanned Aircraft) flying in a particular area or manner. This message can also be used to provide optional additional clarification in an emergency/remote ID system failure situation.
    ///  OPEN_DRONE_ID_SELF_ID
    /// </summary>
    public class OpenDroneIdSelfIdPacket : MavlinkV2Message<OpenDroneIdSelfIdPayload>
    {
        public const int MessageId = 12903;
        
        public const byte CrcExtra = 249;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdSelfIdPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_SELF_ID";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_SELF_ID
    /// </summary>
    public class OpenDroneIdSelfIdPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 46; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 46; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +IdOrMac.Length // uint8_t[20] id_or_mac
            + 1 // uint8_t description_type
            +Description.Length // char[23] description
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            DescriptionType = (MavOdidDescType)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/23 - Math.Max(0,((/*PayloadByteSize*/46 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Description)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Description.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)DescriptionType);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Description)
                {
                    Encoding.ASCII.GetBytes(charPointer, Description.Length, bytePointer, Description.Length);
                }
            }
            buffer = buffer.Slice(Description.Length);
            
            /* PayloadByteSize = 46 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,IdOrMacField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref IdOrMac[index]));    
            var tmpDescriptionType = (byte)DescriptionType;
            UInt8Type.Accept(visitor,DescriptionTypeField, ref tmpDescriptionType);
            DescriptionType = (MavOdidDescType)tmpDescriptionType;
            ArrayType.Accept(visitor,DescriptionField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Description[index]));

        }

        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdOrMacField = new Field.Builder()
            .Name(nameof(IdOrMac))
            .Title("id_or_mac")
            .Description("Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. ")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        /// <summary>
        /// Indicates the type of the description field.
        /// OriginName: description_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DescriptionTypeField = new Field.Builder()
            .Name(nameof(DescriptionType))
            .Title("description_type")
            .Description("Indicates the type of the description field.")
            .DataType(new UInt8Type(MavOdidDescTypeHelper.GetValues(x=>(byte)x).Min(),MavOdidDescTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidDescTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidDescType _descriptionType;
        public MavOdidDescType DescriptionType { get => _descriptionType; set => _descriptionType = value; } 
        /// <summary>
        /// Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: description, Units: , IsExtended: false
        /// </summary>
        public static readonly Field DescriptionField = new Field.Builder()
            .Name(nameof(Description))
            .Title("description")
            .Description("Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.")

            .DataType(new ArrayType(CharType.Ascii,23))
        .Build();
        public const int DescriptionMaxItemsCount = 23;
        public char[] Description { get; } = new char[23];
        [Obsolete("This method is deprecated. Use GetDescriptionMaxItemsCount instead.")]
        public byte GetDescriptionMaxItemsCount() => 23;
    }
    /// <summary>
    /// Data for filling the OpenDroneID System message. The System Message contains general system information including the operator location/altitude and possible aircraft group and/or category/class information.
    ///  OPEN_DRONE_ID_SYSTEM
    /// </summary>
    public class OpenDroneIdSystemPacket : MavlinkV2Message<OpenDroneIdSystemPayload>
    {
        public const int MessageId = 12904;
        
        public const byte CrcExtra = 77;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdSystemPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_SYSTEM";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_SYSTEM
    /// </summary>
    public class OpenDroneIdSystemPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t operator_latitude
            +4 // int32_t operator_longitude
            +4 // float area_ceiling
            +4 // float area_floor
            +4 // float operator_altitude_geo
            +4 // uint32_t timestamp
            +2 // uint16_t area_count
            +2 // uint16_t area_radius
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +IdOrMac.Length // uint8_t[20] id_or_mac
            + 1 // uint8_t operator_location_type
            + 1 // uint8_t classification_type
            + 1 // uint8_t category_eu
            + 1 // uint8_t class_eu
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            OperatorLatitude = BinSerialize.ReadInt(ref buffer);
            OperatorLongitude = BinSerialize.ReadInt(ref buffer);
            AreaCeiling = BinSerialize.ReadFloat(ref buffer);
            AreaFloor = BinSerialize.ReadFloat(ref buffer);
            OperatorAltitudeGeo = BinSerialize.ReadFloat(ref buffer);
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            AreaCount = BinSerialize.ReadUShort(ref buffer);
            AreaRadius = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/54 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            OperatorLocationType = (MavOdidOperatorLocationType)BinSerialize.ReadByte(ref buffer);
            ClassificationType = (MavOdidClassificationType)BinSerialize.ReadByte(ref buffer);
            CategoryEu = (MavOdidCategoryEu)BinSerialize.ReadByte(ref buffer);
            ClassEu = (MavOdidClassEu)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,OperatorLatitude);
            BinSerialize.WriteInt(ref buffer,OperatorLongitude);
            BinSerialize.WriteFloat(ref buffer,AreaCeiling);
            BinSerialize.WriteFloat(ref buffer,AreaFloor);
            BinSerialize.WriteFloat(ref buffer,OperatorAltitudeGeo);
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteUShort(ref buffer,AreaCount);
            BinSerialize.WriteUShort(ref buffer,AreaRadius);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)OperatorLocationType);
            BinSerialize.WriteByte(ref buffer,(byte)ClassificationType);
            BinSerialize.WriteByte(ref buffer,(byte)CategoryEu);
            BinSerialize.WriteByte(ref buffer,(byte)ClassEu);
            /* PayloadByteSize = 54 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,OperatorLatitudeField, ref _operatorLatitude);    
            Int32Type.Accept(visitor,OperatorLongitudeField, ref _operatorLongitude);    
            FloatType.Accept(visitor,AreaCeilingField, ref _areaCeiling);    
            FloatType.Accept(visitor,AreaFloorField, ref _areaFloor);    
            FloatType.Accept(visitor,OperatorAltitudeGeoField, ref _operatorAltitudeGeo);    
            UInt32Type.Accept(visitor,TimestampField, ref _timestamp);    
            UInt16Type.Accept(visitor,AreaCountField, ref _areaCount);    
            UInt16Type.Accept(visitor,AreaRadiusField, ref _areaRadius);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,IdOrMacField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref IdOrMac[index]));    
            var tmpOperatorLocationType = (byte)OperatorLocationType;
            UInt8Type.Accept(visitor,OperatorLocationTypeField, ref tmpOperatorLocationType);
            OperatorLocationType = (MavOdidOperatorLocationType)tmpOperatorLocationType;
            var tmpClassificationType = (byte)ClassificationType;
            UInt8Type.Accept(visitor,ClassificationTypeField, ref tmpClassificationType);
            ClassificationType = (MavOdidClassificationType)tmpClassificationType;
            var tmpCategoryEu = (byte)CategoryEu;
            UInt8Type.Accept(visitor,CategoryEuField, ref tmpCategoryEu);
            CategoryEu = (MavOdidCategoryEu)tmpCategoryEu;
            var tmpClassEu = (byte)ClassEu;
            UInt8Type.Accept(visitor,ClassEuField, ref tmpClassEu);
            ClassEu = (MavOdidClassEu)tmpClassEu;

        }

        /// <summary>
        /// Latitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field OperatorLatitudeField = new Field.Builder()
            .Name(nameof(OperatorLatitude))
            .Title("operator_latitude")
            .Description("Latitude of the operator. If unknown: 0 (both Lat/Lon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _operatorLatitude;
        public int OperatorLatitude { get => _operatorLatitude; set => _operatorLatitude = value; }
        /// <summary>
        /// Longitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field OperatorLongitudeField = new Field.Builder()
            .Name(nameof(OperatorLongitude))
            .Title("operator_longitude")
            .Description("Longitude of the operator. If unknown: 0 (both Lat/Lon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _operatorLongitude;
        public int OperatorLongitude { get => _operatorLongitude; set => _operatorLongitude = value; }
        /// <summary>
        /// Area Operations Ceiling relative to WGS84. If unknown: -1000 m. Used only for swarms/multiple UA.
        /// OriginName: area_ceiling, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AreaCeilingField = new Field.Builder()
            .Name(nameof(AreaCeiling))
            .Title("area_ceiling")
            .Description("Area Operations Ceiling relative to WGS84. If unknown: -1000 m. Used only for swarms/multiple UA.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _areaCeiling;
        public float AreaCeiling { get => _areaCeiling; set => _areaCeiling = value; }
        /// <summary>
        /// Area Operations Floor relative to WGS84. If unknown: -1000 m. Used only for swarms/multiple UA.
        /// OriginName: area_floor, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AreaFloorField = new Field.Builder()
            .Name(nameof(AreaFloor))
            .Title("area_floor")
            .Description("Area Operations Floor relative to WGS84. If unknown: -1000 m. Used only for swarms/multiple UA.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _areaFloor;
        public float AreaFloor { get => _areaFloor; set => _areaFloor = value; }
        /// <summary>
        /// Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m.
        /// OriginName: operator_altitude_geo, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field OperatorAltitudeGeoField = new Field.Builder()
            .Name(nameof(OperatorAltitudeGeo))
            .Title("operator_altitude_geo")
            .Description("Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _operatorAltitudeGeo;
        public float OperatorAltitudeGeo { get => _operatorAltitudeGeo; set => _operatorAltitudeGeo = value; }
        /// <summary>
        /// 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.")
.Units(@"s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timestamp;
        public uint Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// Number of aircraft in the area, group or formation (default 1). Used only for swarms/multiple UA.
        /// OriginName: area_count, Units: , IsExtended: false
        /// </summary>
        public static readonly Field AreaCountField = new Field.Builder()
            .Name(nameof(AreaCount))
            .Title("area_count")
            .Description("Number of aircraft in the area, group or formation (default 1). Used only for swarms/multiple UA.")

            .DataType(UInt16Type.Default)
        .Build();
        private ushort _areaCount;
        public ushort AreaCount { get => _areaCount; set => _areaCount = value; }
        /// <summary>
        /// Radius of the cylindrical area of the group or formation (default 0). Used only for swarms/multiple UA.
        /// OriginName: area_radius, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field AreaRadiusField = new Field.Builder()
            .Name(nameof(AreaRadius))
            .Title("area_radius")
            .Description("Radius of the cylindrical area of the group or formation (default 0). Used only for swarms/multiple UA.")
.Units(@"m")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _areaRadius;
        public ushort AreaRadius { get => _areaRadius; set => _areaRadius = value; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdOrMacField = new Field.Builder()
            .Name(nameof(IdOrMac))
            .Title("id_or_mac")
            .Description("Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. ")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Specifies the operator location type.
        /// OriginName: operator_location_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OperatorLocationTypeField = new Field.Builder()
            .Name(nameof(OperatorLocationType))
            .Title("operator_location_type")
            .Description("Specifies the operator location type.")
            .DataType(new UInt8Type(MavOdidOperatorLocationTypeHelper.GetValues(x=>(byte)x).Min(),MavOdidOperatorLocationTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidOperatorLocationTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidOperatorLocationType _operatorLocationType;
        public MavOdidOperatorLocationType OperatorLocationType { get => _operatorLocationType; set => _operatorLocationType = value; } 
        /// <summary>
        /// Specifies the classification type of the UA.
        /// OriginName: classification_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ClassificationTypeField = new Field.Builder()
            .Name(nameof(ClassificationType))
            .Title("classification_type")
            .Description("Specifies the classification type of the UA.")
            .DataType(new UInt8Type(MavOdidClassificationTypeHelper.GetValues(x=>(byte)x).Min(),MavOdidClassificationTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidClassificationTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidClassificationType _classificationType;
        public MavOdidClassificationType ClassificationType { get => _classificationType; set => _classificationType = value; } 
        /// <summary>
        /// When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the category of the UA.
        /// OriginName: category_eu, Units: , IsExtended: false
        /// </summary>
        public static readonly Field CategoryEuField = new Field.Builder()
            .Name(nameof(CategoryEu))
            .Title("category_eu")
            .Description("When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the category of the UA.")
            .DataType(new UInt8Type(MavOdidCategoryEuHelper.GetValues(x=>(byte)x).Min(),MavOdidCategoryEuHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidCategoryEuHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidCategoryEu _categoryEu;
        public MavOdidCategoryEu CategoryEu { get => _categoryEu; set => _categoryEu = value; } 
        /// <summary>
        /// When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the class of the UA.
        /// OriginName: class_eu, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ClassEuField = new Field.Builder()
            .Name(nameof(ClassEu))
            .Title("class_eu")
            .Description("When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the class of the UA.")
            .DataType(new UInt8Type(MavOdidClassEuHelper.GetValues(x=>(byte)x).Min(),MavOdidClassEuHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidClassEuHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidClassEu _classEu;
        public MavOdidClassEu ClassEu { get => _classEu; set => _classEu = value; } 
    }
    /// <summary>
    /// Data for filling the OpenDroneID Operator ID message, which contains the CAA (Civil Aviation Authority) issued operator ID.
    ///  OPEN_DRONE_ID_OPERATOR_ID
    /// </summary>
    public class OpenDroneIdOperatorIdPacket : MavlinkV2Message<OpenDroneIdOperatorIdPayload>
    {
        public const int MessageId = 12905;
        
        public const byte CrcExtra = 49;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdOperatorIdPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_OPERATOR_ID";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_OPERATOR_ID
    /// </summary>
    public class OpenDroneIdOperatorIdPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +IdOrMac.Length // uint8_t[20] id_or_mac
            + 1 // uint8_t operator_id_type
            +OperatorId.Length // char[20] operator_id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/43 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            OperatorIdType = (MavOdidOperatorIdType)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = OperatorId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, OperatorId.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)OperatorIdType);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = OperatorId)
                {
                    Encoding.ASCII.GetBytes(charPointer, OperatorId.Length, bytePointer, OperatorId.Length);
                }
            }
            buffer = buffer.Slice(OperatorId.Length);
            
            /* PayloadByteSize = 43 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,IdOrMacField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref IdOrMac[index]));    
            var tmpOperatorIdType = (byte)OperatorIdType;
            UInt8Type.Accept(visitor,OperatorIdTypeField, ref tmpOperatorIdType);
            OperatorIdType = (MavOdidOperatorIdType)tmpOperatorIdType;
            ArrayType.Accept(visitor,OperatorIdField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref OperatorId[index]));

        }

        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdOrMacField = new Field.Builder()
            .Name(nameof(IdOrMac))
            .Title("id_or_mac")
            .Description("Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. ")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Indicates the type of the operator_id field.
        /// OriginName: operator_id_type, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OperatorIdTypeField = new Field.Builder()
            .Name(nameof(OperatorIdType))
            .Title("operator_id_type")
            .Description("Indicates the type of the operator_id field.")
            .DataType(new UInt8Type(MavOdidOperatorIdTypeHelper.GetValues(x=>(byte)x).Min(),MavOdidOperatorIdTypeHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidOperatorIdTypeHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidOperatorIdType _operatorIdType;
        public MavOdidOperatorIdType OperatorIdType { get => _operatorIdType; set => _operatorIdType = value; } 
        /// <summary>
        /// Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: operator_id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field OperatorIdField = new Field.Builder()
            .Name(nameof(OperatorId))
            .Title("operator_id")
            .Description("Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.")

            .DataType(new ArrayType(CharType.Ascii,20))
        .Build();
        public const int OperatorIdMaxItemsCount = 20;
        public char[] OperatorId { get; } = new char[20];
    }
    /// <summary>
    /// An OpenDroneID message pack is a container for multiple encoded OpenDroneID messages (i.e. not in the format given for the above message descriptions but after encoding into the compressed OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0 Long Range/Extended Advertising or on WiFi Neighbor Aware Networking or on WiFi Beacon.
    ///  OPEN_DRONE_ID_MESSAGE_PACK
    /// </summary>
    public class OpenDroneIdMessagePackPacket : MavlinkV2Message<OpenDroneIdMessagePackPayload>
    {
        public const int MessageId = 12915;
        
        public const byte CrcExtra = 94;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdMessagePackPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_MESSAGE_PACK";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_MESSAGE_PACK
    /// </summary>
    public class OpenDroneIdMessagePackPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 249; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 249; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            +IdOrMac.Length // uint8_t[20] id_or_mac
            +1 // uint8_t single_message_size
            +1 // uint8_t msg_pack_size
            +Messages.Length // uint8_t[225] messages
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            SingleMessageSize = (byte)BinSerialize.ReadByte(ref buffer);
            MsgPackSize = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/225 - Math.Max(0,((/*PayloadByteSize*/249 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            for(var i=0;i<arraySize;i++)
            {
                Messages[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)SingleMessageSize);
            BinSerialize.WriteByte(ref buffer,(byte)MsgPackSize);
            for(var i=0;i<Messages.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Messages[i]);
            }
            /* PayloadByteSize = 249 */;
        }

        public void Accept(IVisitor visitor)
        {
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    
            ArrayType.Accept(visitor,IdOrMacField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref IdOrMac[index]));    
            UInt8Type.Accept(visitor,SingleMessageSizeField, ref _singleMessageSize);    
            UInt8Type.Accept(visitor,MsgPackSizeField, ref _msgPackSize);    
            ArrayType.Accept(visitor,MessagesField, 
                (index, v, f, t) => UInt8Type.Accept(v, f, t, ref Messages[index]));    

        }

        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdOrMacField = new Field.Builder()
            .Name(nameof(IdOrMac))
            .Title("id_or_mac")
            .Description("Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. ")

            .DataType(new ArrayType(UInt8Type.Default,20))
        .Build();
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        /// <summary>
        /// This field must currently always be equal to 25 (bytes), since all encoded OpenDroneID messages are specified to have this length.
        /// OriginName: single_message_size, Units: bytes, IsExtended: false
        /// </summary>
        public static readonly Field SingleMessageSizeField = new Field.Builder()
            .Name(nameof(SingleMessageSize))
            .Title("single_message_size")
            .Description("This field must currently always be equal to 25 (bytes), since all encoded OpenDroneID messages are specified to have this length.")
.Units(@"bytes")
            .DataType(UInt8Type.Default)
        .Build();
        private byte _singleMessageSize;
        public byte SingleMessageSize { get => _singleMessageSize; set => _singleMessageSize = value; }
        /// <summary>
        /// Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 9.
        /// OriginName: msg_pack_size, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MsgPackSizeField = new Field.Builder()
            .Name(nameof(MsgPackSize))
            .Title("msg_pack_size")
            .Description("Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 9.")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _msgPackSize;
        public byte MsgPackSize { get => _msgPackSize; set => _msgPackSize = value; }
        /// <summary>
        /// Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: messages, Units: , IsExtended: false
        /// </summary>
        public static readonly Field MessagesField = new Field.Builder()
            .Name(nameof(Messages))
            .Title("messages")
            .Description("Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field.")

            .DataType(new ArrayType(UInt8Type.Default,225))
        .Build();
        public const int MessagesMaxItemsCount = 225;
        public byte[] Messages { get; } = new byte[225];
        [Obsolete("This method is deprecated. Use GetMessagesMaxItemsCount instead.")]
        public byte GetMessagesMaxItemsCount() => 225;
    }
    /// <summary>
    /// Transmitter (remote ID system) is enabled and ready to start sending location and other required information. This is streamed by transmitter. A flight controller uses it as a condition to arm.
    ///  OPEN_DRONE_ID_ARM_STATUS
    /// </summary>
    public class OpenDroneIdArmStatusPacket : MavlinkV2Message<OpenDroneIdArmStatusPayload>
    {
        public const int MessageId = 12918;
        
        public const byte CrcExtra = 139;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdArmStatusPayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_ARM_STATUS";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_ARM_STATUS
    /// </summary>
    public class OpenDroneIdArmStatusPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            + 1 // uint8_t status
            +Error.Length // char[50] error
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Status = (MavOdidArmStatus)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/50 - Math.Max(0,((/*PayloadByteSize*/51 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Error)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Error.Length);
                }
            }
            buffer = buffer[arraySize..];
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Error)
                {
                    Encoding.ASCII.GetBytes(charPointer, Error.Length, bytePointer, Error.Length);
                }
            }
            buffer = buffer.Slice(Error.Length);
            
            /* PayloadByteSize = 51 */;
        }

        public void Accept(IVisitor visitor)
        {
            var tmpStatus = (byte)Status;
            UInt8Type.Accept(visitor,StatusField, ref tmpStatus);
            Status = (MavOdidArmStatus)tmpStatus;
            ArrayType.Accept(visitor,ErrorField,  
                (index, v, f, t) => CharType.Accept(v, f, t, ref Error[index]));

        }

        /// <summary>
        /// Status level indicating if arming is allowed.
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public static readonly Field StatusField = new Field.Builder()
            .Name(nameof(Status))
            .Title("status")
            .Description("Status level indicating if arming is allowed.")
            .DataType(new UInt8Type(MavOdidArmStatusHelper.GetValues(x=>(byte)x).Min(),MavOdidArmStatusHelper.GetValues(x=>(byte)x).Max()))
            .Enum(MavOdidArmStatusHelper.GetEnumValues(x=>(byte)x))
            .Build();
        private MavOdidArmStatus _status;
        public MavOdidArmStatus Status { get => _status; set => _status = value; } 
        /// <summary>
        /// Text error message, should be empty if status is good to arm. Fill with nulls in unused portion.
        /// OriginName: error, Units: , IsExtended: false
        /// </summary>
        public static readonly Field ErrorField = new Field.Builder()
            .Name(nameof(Error))
            .Title("error")
            .Description("Text error message, should be empty if status is good to arm. Fill with nulls in unused portion.")

            .DataType(new ArrayType(CharType.Ascii,50))
        .Build();
        public const int ErrorMaxItemsCount = 50;
        public char[] Error { get; } = new char[50];
        [Obsolete("This method is deprecated. Use GetErrorMaxItemsCount instead.")]
        public byte GetErrorMaxItemsCount() => 50;
    }
    /// <summary>
    /// Update the data in the OPEN_DRONE_ID_SYSTEM message with new location information. This can be sent to update the location information for the operator when no other information in the SYSTEM message has changed. This message allows for efficient operation on radio links which have limited uplink bandwidth while meeting requirements for update frequency of the operator location.
    ///  OPEN_DRONE_ID_SYSTEM_UPDATE
    /// </summary>
    public class OpenDroneIdSystemUpdatePacket : MavlinkV2Message<OpenDroneIdSystemUpdatePayload>
    {
        public const int MessageId = 12919;
        
        public const byte CrcExtra = 7;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdSystemUpdatePayload Payload { get; } = new();

        public override string Name => "OPEN_DRONE_ID_SYSTEM_UPDATE";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_SYSTEM_UPDATE
    /// </summary>
    public class OpenDroneIdSystemUpdatePayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +4 // int32_t operator_latitude
            +4 // int32_t operator_longitude
            +4 // float operator_altitude_geo
            +4 // uint32_t timestamp
            +1 // uint8_t target_system
            +1 // uint8_t target_component
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            OperatorLatitude = BinSerialize.ReadInt(ref buffer);
            OperatorLongitude = BinSerialize.ReadInt(ref buffer);
            OperatorAltitudeGeo = BinSerialize.ReadFloat(ref buffer);
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,OperatorLatitude);
            BinSerialize.WriteInt(ref buffer,OperatorLongitude);
            BinSerialize.WriteFloat(ref buffer,OperatorAltitudeGeo);
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 18 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int32Type.Accept(visitor,OperatorLatitudeField, ref _operatorLatitude);    
            Int32Type.Accept(visitor,OperatorLongitudeField, ref _operatorLongitude);    
            FloatType.Accept(visitor,OperatorAltitudeGeoField, ref _operatorAltitudeGeo);    
            UInt32Type.Accept(visitor,TimestampField, ref _timestamp);    
            UInt8Type.Accept(visitor,TargetSystemField, ref _targetSystem);    
            UInt8Type.Accept(visitor,TargetComponentField, ref _targetComponent);    

        }

        /// <summary>
        /// Latitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_latitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field OperatorLatitudeField = new Field.Builder()
            .Name(nameof(OperatorLatitude))
            .Title("operator_latitude")
            .Description("Latitude of the operator. If unknown: 0 (both Lat/Lon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _operatorLatitude;
        public int OperatorLatitude { get => _operatorLatitude; set => _operatorLatitude = value; }
        /// <summary>
        /// Longitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_longitude, Units: degE7, IsExtended: false
        /// </summary>
        public static readonly Field OperatorLongitudeField = new Field.Builder()
            .Name(nameof(OperatorLongitude))
            .Title("operator_longitude")
            .Description("Longitude of the operator. If unknown: 0 (both Lat/Lon).")
.Units(@"degE7")
            .DataType(Int32Type.Default)
        .Build();
        private int _operatorLongitude;
        public int OperatorLongitude { get => _operatorLongitude; set => _operatorLongitude = value; }
        /// <summary>
        /// Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m.
        /// OriginName: operator_altitude_geo, Units: m, IsExtended: false
        /// </summary>
        public static readonly Field OperatorAltitudeGeoField = new Field.Builder()
            .Name(nameof(OperatorAltitudeGeo))
            .Title("operator_altitude_geo")
            .Description("Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m.")
.Units(@"m")
            .DataType(FloatType.Default)
        .Build();
        private float _operatorAltitudeGeo;
        public float OperatorAltitudeGeo { get => _operatorAltitudeGeo; set => _operatorAltitudeGeo = value; }
        /// <summary>
        /// 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public static readonly Field TimestampField = new Field.Builder()
            .Name(nameof(Timestamp))
            .Title("timestamp")
            .Description("32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.")
.Units(@"s")
            .DataType(UInt32Type.Default)
        .Build();
        private uint _timestamp;
        public uint Timestamp { get => _timestamp; set => _timestamp = value; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetSystemField = new Field.Builder()
            .Name(nameof(TargetSystem))
            .Title("target_system")
            .Description("System ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetSystem;
        public byte TargetSystem { get => _targetSystem; set => _targetSystem = value; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public static readonly Field TargetComponentField = new Field.Builder()
            .Name(nameof(TargetComponent))
            .Title("target_component")
            .Description("Component ID (0 for broadcast).")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _targetComponent;
        public byte TargetComponent { get => _targetComponent; set => _targetComponent = value; }
    }
    /// <summary>
    /// Temperature and humidity from hygrometer.
    ///  HYGROMETER_SENSOR
    /// </summary>
    public class HygrometerSensorPacket : MavlinkV2Message<HygrometerSensorPayload>
    {
        public const int MessageId = 12920;
        
        public const byte CrcExtra = 20;
        
        public override int Id => MessageId;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override byte GetCrcExtra() => CrcExtra;
        
        public override bool WrapToV2Extension => false;

        public override HygrometerSensorPayload Payload { get; } = new();

        public override string Name => "HYGROMETER_SENSOR";
    }

    /// <summary>
    ///  HYGROMETER_SENSOR
    /// </summary>
    public class HygrometerSensorPayload : IPayload
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public int GetByteSize()
        {
            return (byte)(
            +2 // int16_t temperature
            +2 // uint16_t humidity
            +1 // uint8_t id
            );
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Temperature = BinSerialize.ReadShort(ref buffer);
            Humidity = BinSerialize.ReadUShort(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteUShort(ref buffer,Humidity);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            /* PayloadByteSize = 5 */;
        }

        public void Accept(IVisitor visitor)
        {
            Int16Type.Accept(visitor,TemperatureField, ref _temperature);
            UInt16Type.Accept(visitor,HumidityField, ref _humidity);    
            UInt8Type.Accept(visitor,IdField, ref _id);    

        }

        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public static readonly Field TemperatureField = new Field.Builder()
            .Name(nameof(Temperature))
            .Title("temperature")
            .Description("Temperature")
.Units(@"cdegC")
            .DataType(Int16Type.Default)
        .Build();
        private short _temperature;
        public short Temperature { get => _temperature; set => _temperature = value; }
        /// <summary>
        /// Humidity
        /// OriginName: humidity, Units: c%, IsExtended: false
        /// </summary>
        public static readonly Field HumidityField = new Field.Builder()
            .Name(nameof(Humidity))
            .Title("humidity")
            .Description("Humidity")
.Units(@"c%")
            .DataType(UInt16Type.Default)
        .Build();
        private ushort _humidity;
        public ushort Humidity { get => _humidity; set => _humidity = value; }
        /// <summary>
        /// Hygrometer ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public static readonly Field IdField = new Field.Builder()
            .Name(nameof(Id))
            .Title("id")
            .Description("Hygrometer ID")

            .DataType(UInt8Type.Default)
        .Build();
        private byte _id;
        public byte Id { get => _id; set => _id = value; }
    }




        


#endregion


}
