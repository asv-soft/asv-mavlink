// MIT License
//
// Copyright (c) 2023 asv-soft (https://github.com/asv-soft)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This code was generate by tool Asv.Mavlink.Shell version 3.7.1+471ae71350a63dca343f7ae51dc97567e049496b

using System;
using System.Text;
using System.ComponentModel;
using Asv.Mavlink.V2.Common;
using Asv.Mavlink.V2.Minimal;
using Asv.IO;

namespace Asv.Mavlink.V2.Common
{

    public static class CommonHelper
    {
        public static void RegisterCommonDialect(this IPacketDecoder<IPacketV2<IPayload>> src)
        {
            src.Register(()=>new SysStatusPacket());
            src.Register(()=>new SystemTimePacket());
            src.Register(()=>new PingPacket());
            src.Register(()=>new ChangeOperatorControlPacket());
            src.Register(()=>new ChangeOperatorControlAckPacket());
            src.Register(()=>new AuthKeyPacket());
            src.Register(()=>new LinkNodeStatusPacket());
            src.Register(()=>new SetModePacket());
            src.Register(()=>new ParamRequestReadPacket());
            src.Register(()=>new ParamRequestListPacket());
            src.Register(()=>new ParamValuePacket());
            src.Register(()=>new ParamSetPacket());
            src.Register(()=>new GpsRawIntPacket());
            src.Register(()=>new GpsStatusPacket());
            src.Register(()=>new ScaledImuPacket());
            src.Register(()=>new RawImuPacket());
            src.Register(()=>new RawPressurePacket());
            src.Register(()=>new ScaledPressurePacket());
            src.Register(()=>new AttitudePacket());
            src.Register(()=>new AttitudeQuaternionPacket());
            src.Register(()=>new LocalPositionNedPacket());
            src.Register(()=>new GlobalPositionIntPacket());
            src.Register(()=>new RcChannelsScaledPacket());
            src.Register(()=>new RcChannelsRawPacket());
            src.Register(()=>new ServoOutputRawPacket());
            src.Register(()=>new MissionRequestPartialListPacket());
            src.Register(()=>new MissionWritePartialListPacket());
            src.Register(()=>new MissionItemPacket());
            src.Register(()=>new MissionRequestPacket());
            src.Register(()=>new MissionSetCurrentPacket());
            src.Register(()=>new MissionCurrentPacket());
            src.Register(()=>new MissionRequestListPacket());
            src.Register(()=>new MissionCountPacket());
            src.Register(()=>new MissionClearAllPacket());
            src.Register(()=>new MissionItemReachedPacket());
            src.Register(()=>new MissionAckPacket());
            src.Register(()=>new SetGpsGlobalOriginPacket());
            src.Register(()=>new GpsGlobalOriginPacket());
            src.Register(()=>new ParamMapRcPacket());
            src.Register(()=>new MissionRequestIntPacket());
            src.Register(()=>new SafetySetAllowedAreaPacket());
            src.Register(()=>new SafetyAllowedAreaPacket());
            src.Register(()=>new AttitudeQuaternionCovPacket());
            src.Register(()=>new NavControllerOutputPacket());
            src.Register(()=>new GlobalPositionIntCovPacket());
            src.Register(()=>new LocalPositionNedCovPacket());
            src.Register(()=>new RcChannelsPacket());
            src.Register(()=>new RequestDataStreamPacket());
            src.Register(()=>new DataStreamPacket());
            src.Register(()=>new ManualControlPacket());
            src.Register(()=>new RcChannelsOverridePacket());
            src.Register(()=>new MissionItemIntPacket());
            src.Register(()=>new VfrHudPacket());
            src.Register(()=>new CommandIntPacket());
            src.Register(()=>new CommandLongPacket());
            src.Register(()=>new CommandAckPacket());
            src.Register(()=>new CommandCancelPacket());
            src.Register(()=>new ManualSetpointPacket());
            src.Register(()=>new SetAttitudeTargetPacket());
            src.Register(()=>new AttitudeTargetPacket());
            src.Register(()=>new SetPositionTargetLocalNedPacket());
            src.Register(()=>new PositionTargetLocalNedPacket());
            src.Register(()=>new SetPositionTargetGlobalIntPacket());
            src.Register(()=>new PositionTargetGlobalIntPacket());
            src.Register(()=>new LocalPositionNedSystemGlobalOffsetPacket());
            src.Register(()=>new HilStatePacket());
            src.Register(()=>new HilControlsPacket());
            src.Register(()=>new HilRcInputsRawPacket());
            src.Register(()=>new HilActuatorControlsPacket());
            src.Register(()=>new OpticalFlowPacket());
            src.Register(()=>new GlobalVisionPositionEstimatePacket());
            src.Register(()=>new VisionPositionEstimatePacket());
            src.Register(()=>new VisionSpeedEstimatePacket());
            src.Register(()=>new ViconPositionEstimatePacket());
            src.Register(()=>new HighresImuPacket());
            src.Register(()=>new OpticalFlowRadPacket());
            src.Register(()=>new HilSensorPacket());
            src.Register(()=>new SimStatePacket());
            src.Register(()=>new RadioStatusPacket());
            src.Register(()=>new FileTransferProtocolPacket());
            src.Register(()=>new TimesyncPacket());
            src.Register(()=>new CameraTriggerPacket());
            src.Register(()=>new HilGpsPacket());
            src.Register(()=>new HilOpticalFlowPacket());
            src.Register(()=>new HilStateQuaternionPacket());
            src.Register(()=>new ScaledImu2Packet());
            src.Register(()=>new LogRequestListPacket());
            src.Register(()=>new LogEntryPacket());
            src.Register(()=>new LogRequestDataPacket());
            src.Register(()=>new LogDataPacket());
            src.Register(()=>new LogErasePacket());
            src.Register(()=>new LogRequestEndPacket());
            src.Register(()=>new GpsInjectDataPacket());
            src.Register(()=>new Gps2RawPacket());
            src.Register(()=>new PowerStatusPacket());
            src.Register(()=>new SerialControlPacket());
            src.Register(()=>new GpsRtkPacket());
            src.Register(()=>new Gps2RtkPacket());
            src.Register(()=>new ScaledImu3Packet());
            src.Register(()=>new DataTransmissionHandshakePacket());
            src.Register(()=>new EncapsulatedDataPacket());
            src.Register(()=>new DistanceSensorPacket());
            src.Register(()=>new TerrainRequestPacket());
            src.Register(()=>new TerrainDataPacket());
            src.Register(()=>new TerrainCheckPacket());
            src.Register(()=>new TerrainReportPacket());
            src.Register(()=>new ScaledPressure2Packet());
            src.Register(()=>new AttPosMocapPacket());
            src.Register(()=>new SetActuatorControlTargetPacket());
            src.Register(()=>new ActuatorControlTargetPacket());
            src.Register(()=>new AltitudePacket());
            src.Register(()=>new ResourceRequestPacket());
            src.Register(()=>new ScaledPressure3Packet());
            src.Register(()=>new FollowTargetPacket());
            src.Register(()=>new ControlSystemStatePacket());
            src.Register(()=>new BatteryStatusPacket());
            src.Register(()=>new AutopilotVersionPacket());
            src.Register(()=>new LandingTargetPacket());
            src.Register(()=>new FenceStatusPacket());
            src.Register(()=>new MagCalReportPacket());
            src.Register(()=>new EfiStatusPacket());
            src.Register(()=>new EstimatorStatusPacket());
            src.Register(()=>new WindCovPacket());
            src.Register(()=>new GpsInputPacket());
            src.Register(()=>new GpsRtcmDataPacket());
            src.Register(()=>new HighLatencyPacket());
            src.Register(()=>new HighLatency2Packet());
            src.Register(()=>new VibrationPacket());
            src.Register(()=>new HomePositionPacket());
            src.Register(()=>new SetHomePositionPacket());
            src.Register(()=>new MessageIntervalPacket());
            src.Register(()=>new ExtendedSysStatePacket());
            src.Register(()=>new AdsbVehiclePacket());
            src.Register(()=>new CollisionPacket());
            src.Register(()=>new V2ExtensionPacket());
            src.Register(()=>new MemoryVectPacket());
            src.Register(()=>new DebugVectPacket());
            src.Register(()=>new NamedValueFloatPacket());
            src.Register(()=>new NamedValueIntPacket());
            src.Register(()=>new StatustextPacket());
            src.Register(()=>new DebugPacket());
            src.Register(()=>new SetupSigningPacket());
            src.Register(()=>new ButtonChangePacket());
            src.Register(()=>new PlayTunePacket());
            src.Register(()=>new CameraInformationPacket());
            src.Register(()=>new CameraSettingsPacket());
            src.Register(()=>new StorageInformationPacket());
            src.Register(()=>new CameraCaptureStatusPacket());
            src.Register(()=>new CameraImageCapturedPacket());
            src.Register(()=>new FlightInformationPacket());
            src.Register(()=>new MountOrientationPacket());
            src.Register(()=>new LoggingDataPacket());
            src.Register(()=>new LoggingDataAckedPacket());
            src.Register(()=>new LoggingAckPacket());
            src.Register(()=>new VideoStreamInformationPacket());
            src.Register(()=>new VideoStreamStatusPacket());
            src.Register(()=>new CameraFovStatusPacket());
            src.Register(()=>new CameraTrackingImageStatusPacket());
            src.Register(()=>new CameraTrackingGeoStatusPacket());
            src.Register(()=>new GimbalManagerInformationPacket());
            src.Register(()=>new GimbalManagerStatusPacket());
            src.Register(()=>new GimbalManagerSetAttitudePacket());
            src.Register(()=>new GimbalDeviceInformationPacket());
            src.Register(()=>new GimbalDeviceSetAttitudePacket());
            src.Register(()=>new GimbalDeviceAttitudeStatusPacket());
            src.Register(()=>new AutopilotStateForGimbalDevicePacket());
            src.Register(()=>new GimbalManagerSetPitchyawPacket());
            src.Register(()=>new GimbalManagerSetManualControlPacket());
            src.Register(()=>new EscInfoPacket());
            src.Register(()=>new EscStatusPacket());
            src.Register(()=>new WifiConfigApPacket());
            src.Register(()=>new AisVesselPacket());
            src.Register(()=>new UavcanNodeStatusPacket());
            src.Register(()=>new UavcanNodeInfoPacket());
            src.Register(()=>new ParamExtRequestReadPacket());
            src.Register(()=>new ParamExtRequestListPacket());
            src.Register(()=>new ParamExtValuePacket());
            src.Register(()=>new ParamExtSetPacket());
            src.Register(()=>new ParamExtAckPacket());
            src.Register(()=>new ObstacleDistancePacket());
            src.Register(()=>new OdometryPacket());
            src.Register(()=>new TrajectoryRepresentationWaypointsPacket());
            src.Register(()=>new TrajectoryRepresentationBezierPacket());
            src.Register(()=>new CellularStatusPacket());
            src.Register(()=>new IsbdLinkStatusPacket());
            src.Register(()=>new CellularConfigPacket());
            src.Register(()=>new RawRpmPacket());
            src.Register(()=>new UtmGlobalPositionPacket());
            src.Register(()=>new DebugFloatArrayPacket());
            src.Register(()=>new OrbitExecutionStatusPacket());
            src.Register(()=>new SmartBatteryInfoPacket());
            src.Register(()=>new GeneratorStatusPacket());
            src.Register(()=>new ActuatorOutputStatusPacket());
            src.Register(()=>new TimeEstimateToTargetPacket());
            src.Register(()=>new TunnelPacket());
            src.Register(()=>new CanFramePacket());
            src.Register(()=>new OnboardComputerStatusPacket());
            src.Register(()=>new ComponentInformationPacket());
            src.Register(()=>new ComponentMetadataPacket());
            src.Register(()=>new PlayTuneV2Packet());
            src.Register(()=>new SupportedTunesPacket());
            src.Register(()=>new EventPacket());
            src.Register(()=>new CurrentEventSequencePacket());
            src.Register(()=>new RequestEventPacket());
            src.Register(()=>new ResponseEventErrorPacket());
            src.Register(()=>new CanfdFramePacket());
            src.Register(()=>new CanFilterModifyPacket());
            src.Register(()=>new WheelDistancePacket());
            src.Register(()=>new WinchStatusPacket());
            src.Register(()=>new OpenDroneIdBasicIdPacket());
            src.Register(()=>new OpenDroneIdLocationPacket());
            src.Register(()=>new OpenDroneIdAuthenticationPacket());
            src.Register(()=>new OpenDroneIdSelfIdPacket());
            src.Register(()=>new OpenDroneIdSystemPacket());
            src.Register(()=>new OpenDroneIdOperatorIdPacket());
            src.Register(()=>new OpenDroneIdMessagePackPacket());
            src.Register(()=>new OpenDroneIdArmStatusPacket());
            src.Register(()=>new OpenDroneIdSystemUpdatePacket());
            src.Register(()=>new HygrometerSensorPacket());
        }
    }

#region Enums

    /// <summary>
    /// These values define the type of firmware release.  These values indicate the first version or release of this type.  For example the first alpha release would be 64, the second would be 65.
    ///  FIRMWARE_VERSION_TYPE
    /// </summary>
    public enum FirmwareVersionType:uint
    {
        /// <summary>
        /// development release
        /// FIRMWARE_VERSION_TYPE_DEV
        /// </summary>
        FirmwareVersionTypeDev = 0,
        /// <summary>
        /// alpha release
        /// FIRMWARE_VERSION_TYPE_ALPHA
        /// </summary>
        FirmwareVersionTypeAlpha = 64,
        /// <summary>
        /// beta release
        /// FIRMWARE_VERSION_TYPE_BETA
        /// </summary>
        FirmwareVersionTypeBeta = 128,
        /// <summary>
        /// release candidate
        /// FIRMWARE_VERSION_TYPE_RC
        /// </summary>
        FirmwareVersionTypeRc = 192,
        /// <summary>
        /// official stable release
        /// FIRMWARE_VERSION_TYPE_OFFICIAL
        /// </summary>
        FirmwareVersionTypeOfficial = 255,
    }

    /// <summary>
    /// Flags to report failure cases over the high latency telemetry.
    ///  HL_FAILURE_FLAG
    /// </summary>
    public enum HlFailureFlag:uint
    {
        /// <summary>
        /// GPS failure.
        /// HL_FAILURE_FLAG_GPS
        /// </summary>
        HlFailureFlagGps = 1,
        /// <summary>
        /// Differential pressure sensor failure.
        /// HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE
        /// </summary>
        HlFailureFlagDifferentialPressure = 2,
        /// <summary>
        /// Absolute pressure sensor failure.
        /// HL_FAILURE_FLAG_ABSOLUTE_PRESSURE
        /// </summary>
        HlFailureFlagAbsolutePressure = 4,
        /// <summary>
        /// Accelerometer sensor failure.
        /// HL_FAILURE_FLAG_3D_ACCEL
        /// </summary>
        HlFailureFlag3dAccel = 8,
        /// <summary>
        /// Gyroscope sensor failure.
        /// HL_FAILURE_FLAG_3D_GYRO
        /// </summary>
        HlFailureFlag3dGyro = 16,
        /// <summary>
        /// Magnetometer sensor failure.
        /// HL_FAILURE_FLAG_3D_MAG
        /// </summary>
        HlFailureFlag3dMag = 32,
        /// <summary>
        /// Terrain subsystem failure.
        /// HL_FAILURE_FLAG_TERRAIN
        /// </summary>
        HlFailureFlagTerrain = 64,
        /// <summary>
        /// Battery failure/critical low battery.
        /// HL_FAILURE_FLAG_BATTERY
        /// </summary>
        HlFailureFlagBattery = 128,
        /// <summary>
        /// RC receiver failure/no RC connection.
        /// HL_FAILURE_FLAG_RC_RECEIVER
        /// </summary>
        HlFailureFlagRcReceiver = 256,
        /// <summary>
        /// Offboard link failure.
        /// HL_FAILURE_FLAG_OFFBOARD_LINK
        /// </summary>
        HlFailureFlagOffboardLink = 512,
        /// <summary>
        /// Engine failure.
        /// HL_FAILURE_FLAG_ENGINE
        /// </summary>
        HlFailureFlagEngine = 1024,
        /// <summary>
        /// Geofence violation.
        /// HL_FAILURE_FLAG_GEOFENCE
        /// </summary>
        HlFailureFlagGeofence = 2048,
        /// <summary>
        /// Estimator failure, for example measurement rejection or large variances.
        /// HL_FAILURE_FLAG_ESTIMATOR
        /// </summary>
        HlFailureFlagEstimator = 4096,
        /// <summary>
        /// Mission failure.
        /// HL_FAILURE_FLAG_MISSION
        /// </summary>
        HlFailureFlagMission = 8192,
    }

    /// <summary>
    /// Actions that may be specified in MAV_CMD_OVERRIDE_GOTO to override mission execution.
    ///  MAV_GOTO
    /// </summary>
    public enum MavGoto:uint
    {
        /// <summary>
        /// Hold at the current position.
        /// MAV_GOTO_DO_HOLD
        /// </summary>
        MavGotoDoHold = 0,
        /// <summary>
        /// Continue with the next item in mission execution.
        /// MAV_GOTO_DO_CONTINUE
        /// </summary>
        MavGotoDoContinue = 1,
        /// <summary>
        /// Hold at the current position of the system
        /// MAV_GOTO_HOLD_AT_CURRENT_POSITION
        /// </summary>
        MavGotoHoldAtCurrentPosition = 2,
        /// <summary>
        /// Hold at the position specified in the parameters of the DO_HOLD action
        /// MAV_GOTO_HOLD_AT_SPECIFIED_POSITION
        /// </summary>
        MavGotoHoldAtSpecifiedPosition = 3,
    }

    /// <summary>
    /// These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it
    ///                simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override.
    ///  MAV_MODE
    /// </summary>
    public enum MavMode:uint
    {
        /// <summary>
        /// System is not ready to fly, booting, calibrating, etc. No flag is set.
        /// MAV_MODE_PREFLIGHT
        /// </summary>
        MavModePreflight = 0,
        /// <summary>
        /// System is allowed to be active, under assisted RC control.
        /// MAV_MODE_STABILIZE_DISARMED
        /// </summary>
        MavModeStabilizeDisarmed = 80,
        /// <summary>
        /// System is allowed to be active, under assisted RC control.
        /// MAV_MODE_STABILIZE_ARMED
        /// </summary>
        MavModeStabilizeArmed = 208,
        /// <summary>
        /// System is allowed to be active, under manual (RC) control, no stabilization
        /// MAV_MODE_MANUAL_DISARMED
        /// </summary>
        MavModeManualDisarmed = 64,
        /// <summary>
        /// System is allowed to be active, under manual (RC) control, no stabilization
        /// MAV_MODE_MANUAL_ARMED
        /// </summary>
        MavModeManualArmed = 192,
        /// <summary>
        /// System is allowed to be active, under autonomous control, manual setpoint
        /// MAV_MODE_GUIDED_DISARMED
        /// </summary>
        MavModeGuidedDisarmed = 88,
        /// <summary>
        /// System is allowed to be active, under autonomous control, manual setpoint
        /// MAV_MODE_GUIDED_ARMED
        /// </summary>
        MavModeGuidedArmed = 216,
        /// <summary>
        /// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
        /// MAV_MODE_AUTO_DISARMED
        /// </summary>
        MavModeAutoDisarmed = 92,
        /// <summary>
        /// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
        /// MAV_MODE_AUTO_ARMED
        /// </summary>
        MavModeAutoArmed = 220,
        /// <summary>
        /// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
        /// MAV_MODE_TEST_DISARMED
        /// </summary>
        MavModeTestDisarmed = 66,
        /// <summary>
        /// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
        /// MAV_MODE_TEST_ARMED
        /// </summary>
        MavModeTestArmed = 194,
    }

    /// <summary>
    /// These encode the sensors whose status is sent as part of the SYS_STATUS message.
    ///  MAV_SYS_STATUS_SENSOR
    /// </summary>
    public enum MavSysStatusSensor:uint
    {
        /// <summary>
        /// 0x01 3D gyro
        /// MAV_SYS_STATUS_SENSOR_3D_GYRO
        /// </summary>
        MavSysStatusSensor3dGyro = 1,
        /// <summary>
        /// 0x02 3D accelerometer
        /// MAV_SYS_STATUS_SENSOR_3D_ACCEL
        /// </summary>
        MavSysStatusSensor3dAccel = 2,
        /// <summary>
        /// 0x04 3D magnetometer
        /// MAV_SYS_STATUS_SENSOR_3D_MAG
        /// </summary>
        MavSysStatusSensor3dMag = 4,
        /// <summary>
        /// 0x08 absolute pressure
        /// MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE
        /// </summary>
        MavSysStatusSensorAbsolutePressure = 8,
        /// <summary>
        /// 0x10 differential pressure
        /// MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE
        /// </summary>
        MavSysStatusSensorDifferentialPressure = 16,
        /// <summary>
        /// 0x20 GPS
        /// MAV_SYS_STATUS_SENSOR_GPS
        /// </summary>
        MavSysStatusSensorGps = 32,
        /// <summary>
        /// 0x40 optical flow
        /// MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW
        /// </summary>
        MavSysStatusSensorOpticalFlow = 64,
        /// <summary>
        /// 0x80 computer vision position
        /// MAV_SYS_STATUS_SENSOR_VISION_POSITION
        /// </summary>
        MavSysStatusSensorVisionPosition = 128,
        /// <summary>
        /// 0x100 laser based position
        /// MAV_SYS_STATUS_SENSOR_LASER_POSITION
        /// </summary>
        MavSysStatusSensorLaserPosition = 256,
        /// <summary>
        /// 0x200 external ground truth (Vicon or Leica)
        /// MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH
        /// </summary>
        MavSysStatusSensorExternalGroundTruth = 512,
        /// <summary>
        /// 0x400 3D angular rate control
        /// MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL
        /// </summary>
        MavSysStatusSensorAngularRateControl = 1024,
        /// <summary>
        /// 0x800 attitude stabilization
        /// MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION
        /// </summary>
        MavSysStatusSensorAttitudeStabilization = 2048,
        /// <summary>
        /// 0x1000 yaw position
        /// MAV_SYS_STATUS_SENSOR_YAW_POSITION
        /// </summary>
        MavSysStatusSensorYawPosition = 4096,
        /// <summary>
        /// 0x2000 z/altitude control
        /// MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL
        /// </summary>
        MavSysStatusSensorZAltitudeControl = 8192,
        /// <summary>
        /// 0x4000 x/y position control
        /// MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL
        /// </summary>
        MavSysStatusSensorXyPositionControl = 16384,
        /// <summary>
        /// 0x8000 motor outputs / control
        /// MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS
        /// </summary>
        MavSysStatusSensorMotorOutputs = 32768,
        /// <summary>
        /// 0x10000 RC receiver
        /// MAV_SYS_STATUS_SENSOR_RC_RECEIVER
        /// </summary>
        MavSysStatusSensorRcReceiver = 65536,
        /// <summary>
        /// 0x20000 2nd 3D gyro
        /// MAV_SYS_STATUS_SENSOR_3D_GYRO2
        /// </summary>
        MavSysStatusSensor3dGyro2 = 131072,
        /// <summary>
        /// 0x40000 2nd 3D accelerometer
        /// MAV_SYS_STATUS_SENSOR_3D_ACCEL2
        /// </summary>
        MavSysStatusSensor3dAccel2 = 262144,
        /// <summary>
        /// 0x80000 2nd 3D magnetometer
        /// MAV_SYS_STATUS_SENSOR_3D_MAG2
        /// </summary>
        MavSysStatusSensor3dMag2 = 524288,
        /// <summary>
        /// 0x100000 geofence
        /// MAV_SYS_STATUS_GEOFENCE
        /// </summary>
        MavSysStatusGeofence = 1048576,
        /// <summary>
        /// 0x200000 AHRS subsystem health
        /// MAV_SYS_STATUS_AHRS
        /// </summary>
        MavSysStatusAhrs = 2097152,
        /// <summary>
        /// 0x400000 Terrain subsystem health
        /// MAV_SYS_STATUS_TERRAIN
        /// </summary>
        MavSysStatusTerrain = 4194304,
        /// <summary>
        /// 0x800000 Motors are reversed
        /// MAV_SYS_STATUS_REVERSE_MOTOR
        /// </summary>
        MavSysStatusReverseMotor = 8388608,
        /// <summary>
        /// 0x1000000 Logging
        /// MAV_SYS_STATUS_LOGGING
        /// </summary>
        MavSysStatusLogging = 16777216,
        /// <summary>
        /// 0x2000000 Battery
        /// MAV_SYS_STATUS_SENSOR_BATTERY
        /// </summary>
        MavSysStatusSensorBattery = 33554432,
        /// <summary>
        /// 0x4000000 Proximity
        /// MAV_SYS_STATUS_SENSOR_PROXIMITY
        /// </summary>
        MavSysStatusSensorProximity = 67108864,
        /// <summary>
        /// 0x8000000 Satellite Communication 
        /// MAV_SYS_STATUS_SENSOR_SATCOM
        /// </summary>
        MavSysStatusSensorSatcom = 134217728,
        /// <summary>
        /// 0x10000000 pre-arm check status. Always healthy when armed
        /// MAV_SYS_STATUS_PREARM_CHECK
        /// </summary>
        MavSysStatusPrearmCheck = 268435456,
        /// <summary>
        /// 0x20000000 Avoidance/collision prevention
        /// MAV_SYS_STATUS_OBSTACLE_AVOIDANCE
        /// </summary>
        MavSysStatusObstacleAvoidance = 536870912,
        /// <summary>
        /// 0x40000000 propulsion (actuator, esc, motor or propellor)
        /// MAV_SYS_STATUS_SENSOR_PROPULSION
        /// </summary>
        MavSysStatusSensorPropulsion = 1073741824,
        /// <summary>
        /// 0x80000000 Extended bit-field are used for further sensor status bits (needs to be set in onboard_control_sensors_present only)
        /// MAV_SYS_STATUS_EXTENSION_USED
        /// </summary>
        MavSysStatusExtensionUsed = 2147483648,
    }

    /// <summary>
    /// These encode the sensors whose status is sent as part of the SYS_STATUS message in the extended fields.
    ///  MAV_SYS_STATUS_SENSOR_EXTENDED
    /// </summary>
    public enum MavSysStatusSensorExtended:uint
    {
        /// <summary>
        /// 0x01 Recovery system (parachute, balloon, retracts etc)
        /// MAV_SYS_STATUS_RECOVERY_SYSTEM
        /// </summary>
        MavSysStatusRecoverySystem = 1,
    }

    /// <summary>
    /// Coordinate frames used by MAVLink. Not all frames are supported by all commands, messages, or vehicles.
    /// 
    ///       Global frames use the following naming conventions:
    ///       - "GLOBAL": Global coordinate frame with WGS84 latitude/longitude and altitude positive over mean sea level (MSL) by default.
    ///         The following modifiers may be used with "GLOBAL":
    ///         - "RELATIVE_ALT": Altitude is relative to the vehicle home position rather than MSL.
    ///         - "TERRAIN_ALT": Altitude is relative to ground level rather than MSL.
    ///         - "INT": Latitude/longitude (in degrees) are scaled by multiplying by 1E7.
    /// 
    ///       Local frames use the following naming conventions:
    ///       - "LOCAL": Origin of local frame is fixed relative to earth. Unless otherwise specified this origin is the origin of the vehicle position-estimator ("EKF").
    ///       - "BODY": Origin of local frame travels with the vehicle. NOTE, "BODY" does NOT indicate alignment of frame axis with vehicle attitude.
    ///       - "OFFSET": Deprecated synonym for "BODY" (origin travels with the vehicle). Not to be used for new frames.
    /// 
    ///       Some deprecated frames do not follow these conventions (e.g. MAV_FRAME_BODY_NED and MAV_FRAME_BODY_OFFSET_NED).
    ///  
    ///  MAV_FRAME
    /// </summary>
    public enum MavFrame:uint
    {
        /// <summary>
        /// Global (WGS84) coordinate frame + MSL altitude. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL).
        /// MAV_FRAME_GLOBAL
        /// </summary>
        MavFrameGlobal = 0,
        /// <summary>
        /// NED local tangent frame (x: North, y: East, z: Down) with origin fixed relative to earth.
        /// MAV_FRAME_LOCAL_NED
        /// </summary>
        MavFrameLocalNed = 1,
        /// <summary>
        /// NOT a coordinate frame, indicates a mission command.
        /// MAV_FRAME_MISSION
        /// </summary>
        MavFrameMission = 2,
        /// <summary>
        /// 
        ///           Global (WGS84) coordinate frame + altitude relative to the home position.
        ///           First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home position.
        ///         
        /// MAV_FRAME_GLOBAL_RELATIVE_ALT
        /// </summary>
        MavFrameGlobalRelativeAlt = 3,
        /// <summary>
        /// ENU local tangent frame (x: East, y: North, z: Up) with origin fixed relative to earth.
        /// MAV_FRAME_LOCAL_ENU
        /// </summary>
        MavFrameLocalEnu = 4,
        /// <summary>
        /// Global (WGS84) coordinate frame (scaled) + MSL altitude. First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude over mean sea level (MSL).
        /// MAV_FRAME_GLOBAL_INT
        /// </summary>
        MavFrameGlobalInt = 5,
        /// <summary>
        /// 
        ///           Global (WGS84) coordinate frame (scaled) + altitude relative to the home position.
        ///           First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude with 0 being at the altitude of the home position.
        ///         
        /// MAV_FRAME_GLOBAL_RELATIVE_ALT_INT
        /// </summary>
        MavFrameGlobalRelativeAltInt = 6,
        /// <summary>
        /// NED local tangent frame (x: North, y: East, z: Down) with origin that travels with the vehicle.
        /// MAV_FRAME_LOCAL_OFFSET_NED
        /// </summary>
        MavFrameLocalOffsetNed = 7,
        /// <summary>
        /// Same as MAV_FRAME_LOCAL_NED when used to represent position values. Same as MAV_FRAME_BODY_FRD when used with velocity/acceleration values.
        /// MAV_FRAME_BODY_NED
        /// </summary>
        MavFrameBodyNed = 8,
        /// <summary>
        /// This is the same as MAV_FRAME_BODY_FRD.
        /// MAV_FRAME_BODY_OFFSET_NED
        /// </summary>
        MavFrameBodyOffsetNed = 9,
        /// <summary>
        /// Global (WGS84) coordinate frame with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        /// MAV_FRAME_GLOBAL_TERRAIN_ALT
        /// </summary>
        MavFrameGlobalTerrainAlt = 10,
        /// <summary>
        /// Global (WGS84) coordinate frame (scaled) with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        /// MAV_FRAME_GLOBAL_TERRAIN_ALT_INT
        /// </summary>
        MavFrameGlobalTerrainAltInt = 11,
        /// <summary>
        /// FRD local frame aligned to the vehicle's attitude (x: Forward, y: Right, z: Down) with an origin that travels with vehicle.
        /// MAV_FRAME_BODY_FRD
        /// </summary>
        MavFrameBodyFrd = 12,
        /// <summary>
        /// MAV_FRAME_BODY_FLU - Body fixed frame of reference, Z-up (x: Forward, y: Left, z: Up).
        /// MAV_FRAME_RESERVED_13
        /// </summary>
        MavFrameReserved13 = 13,
        /// <summary>
        /// MAV_FRAME_MOCAP_NED - Odometry local coordinate frame of data given by a motion capture system, Z-down (x: North, y: East, z: Down).
        /// MAV_FRAME_RESERVED_14
        /// </summary>
        MavFrameReserved14 = 14,
        /// <summary>
        /// MAV_FRAME_MOCAP_ENU - Odometry local coordinate frame of data given by a motion capture system, Z-up (x: East, y: North, z: Up).
        /// MAV_FRAME_RESERVED_15
        /// </summary>
        MavFrameReserved15 = 15,
        /// <summary>
        /// MAV_FRAME_VISION_NED - Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: North, y: East, z: Down).
        /// MAV_FRAME_RESERVED_16
        /// </summary>
        MavFrameReserved16 = 16,
        /// <summary>
        /// MAV_FRAME_VISION_ENU - Odometry local coordinate frame of data given by a vision estimation system, Z-up (x: East, y: North, z: Up).
        /// MAV_FRAME_RESERVED_17
        /// </summary>
        MavFrameReserved17 = 17,
        /// <summary>
        /// MAV_FRAME_ESTIM_NED - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: North, y: East, z: Down).
        /// MAV_FRAME_RESERVED_18
        /// </summary>
        MavFrameReserved18 = 18,
        /// <summary>
        /// MAV_FRAME_ESTIM_ENU - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-up (x: East, y: North, z: Up).
        /// MAV_FRAME_RESERVED_19
        /// </summary>
        MavFrameReserved19 = 19,
        /// <summary>
        /// FRD local tangent frame (x: Forward, y: Right, z: Down) with origin fixed relative to earth. The forward axis is aligned to the front of the vehicle in the horizontal plane.
        /// MAV_FRAME_LOCAL_FRD
        /// </summary>
        MavFrameLocalFrd = 20,
        /// <summary>
        /// FLU local tangent frame (x: Forward, y: Left, z: Up) with origin fixed relative to earth. The forward axis is aligned to the front of the vehicle in the horizontal plane.
        /// MAV_FRAME_LOCAL_FLU
        /// </summary>
        MavFrameLocalFlu = 21,
    }

    /// <summary>
    ///  MAVLINK_DATA_STREAM_TYPE
    /// </summary>
    public enum MavlinkDataStreamType:uint
    {
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_JPEG
        /// </summary>
        MavlinkDataStreamImgJpeg = 0,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_BMP
        /// </summary>
        MavlinkDataStreamImgBmp = 1,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_RAW8U
        /// </summary>
        MavlinkDataStreamImgRaw8u = 2,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_RAW32U
        /// </summary>
        MavlinkDataStreamImgRaw32u = 3,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_PGM
        /// </summary>
        MavlinkDataStreamImgPgm = 4,
        /// <summary>
        /// 
        /// MAVLINK_DATA_STREAM_IMG_PNG
        /// </summary>
        MavlinkDataStreamImgPng = 5,
    }

    /// <summary>
    /// Actions following geofence breach.
    ///  FENCE_ACTION
    /// </summary>
    public enum FenceAction:uint
    {
        /// <summary>
        /// Disable fenced mode. If used in a plan this would mean the next fence is disabled.
        /// FENCE_ACTION_NONE
        /// </summary>
        FenceActionNone = 0,
        /// <summary>
        /// Fly to geofence MAV_CMD_NAV_FENCE_RETURN_POINT in GUIDED mode. Note: This action is only supported by ArduPlane, and may not be supported in all versions.
        /// FENCE_ACTION_GUIDED
        /// </summary>
        FenceActionGuided = 1,
        /// <summary>
        /// Report fence breach, but don't take action
        /// FENCE_ACTION_REPORT
        /// </summary>
        FenceActionReport = 2,
        /// <summary>
        /// Fly to geofence MAV_CMD_NAV_FENCE_RETURN_POINT with manual throttle control in GUIDED mode. Note: This action is only supported by ArduPlane, and may not be supported in all versions.
        /// FENCE_ACTION_GUIDED_THR_PASS
        /// </summary>
        FenceActionGuidedThrPass = 3,
        /// <summary>
        /// Return/RTL mode.
        /// FENCE_ACTION_RTL
        /// </summary>
        FenceActionRtl = 4,
        /// <summary>
        /// Hold at current location.
        /// FENCE_ACTION_HOLD
        /// </summary>
        FenceActionHold = 5,
        /// <summary>
        /// Termination failsafe. Motors are shut down (some flight stacks may trigger other failsafe actions).
        /// FENCE_ACTION_TERMINATE
        /// </summary>
        FenceActionTerminate = 6,
        /// <summary>
        /// Land at current location.
        /// FENCE_ACTION_LAND
        /// </summary>
        FenceActionLand = 7,
    }

    /// <summary>
    ///  FENCE_BREACH
    /// </summary>
    public enum FenceBreach:uint
    {
        /// <summary>
        /// No last fence breach
        /// FENCE_BREACH_NONE
        /// </summary>
        FenceBreachNone = 0,
        /// <summary>
        /// Breached minimum altitude
        /// FENCE_BREACH_MINALT
        /// </summary>
        FenceBreachMinalt = 1,
        /// <summary>
        /// Breached maximum altitude
        /// FENCE_BREACH_MAXALT
        /// </summary>
        FenceBreachMaxalt = 2,
        /// <summary>
        /// Breached fence boundary
        /// FENCE_BREACH_BOUNDARY
        /// </summary>
        FenceBreachBoundary = 3,
    }

    /// <summary>
    /// Actions being taken to mitigate/prevent fence breach
    ///  FENCE_MITIGATE
    /// </summary>
    public enum FenceMitigate:uint
    {
        /// <summary>
        /// Unknown
        /// FENCE_MITIGATE_UNKNOWN
        /// </summary>
        FenceMitigateUnknown = 0,
        /// <summary>
        /// No actions being taken
        /// FENCE_MITIGATE_NONE
        /// </summary>
        FenceMitigateNone = 1,
        /// <summary>
        /// Velocity limiting active to prevent breach
        /// FENCE_MITIGATE_VEL_LIMIT
        /// </summary>
        FenceMitigateVelLimit = 2,
    }

    /// <summary>
    /// Enumeration of possible mount operation modes. This message is used by obsolete/deprecated gimbal messages.
    ///  MAV_MOUNT_MODE
    /// </summary>
    public enum MavMountMode:uint
    {
        /// <summary>
        /// Load and keep safe position (Roll,Pitch,Yaw) from permanent memory and stop stabilization
        /// MAV_MOUNT_MODE_RETRACT
        /// </summary>
        MavMountModeRetract = 0,
        /// <summary>
        /// Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory.
        /// MAV_MOUNT_MODE_NEUTRAL
        /// </summary>
        MavMountModeNeutral = 1,
        /// <summary>
        /// Load neutral position and start MAVLink Roll,Pitch,Yaw control with stabilization
        /// MAV_MOUNT_MODE_MAVLINK_TARGETING
        /// </summary>
        MavMountModeMavlinkTargeting = 2,
        /// <summary>
        /// Load neutral position and start RC Roll,Pitch,Yaw control with stabilization
        /// MAV_MOUNT_MODE_RC_TARGETING
        /// </summary>
        MavMountModeRcTargeting = 3,
        /// <summary>
        /// Load neutral position and start to point to Lat,Lon,Alt
        /// MAV_MOUNT_MODE_GPS_POINT
        /// </summary>
        MavMountModeGpsPoint = 4,
        /// <summary>
        /// Gimbal tracks system with specified system ID
        /// MAV_MOUNT_MODE_SYSID_TARGET
        /// </summary>
        MavMountModeSysidTarget = 5,
        /// <summary>
        /// Gimbal tracks home position
        /// MAV_MOUNT_MODE_HOME_LOCATION
        /// </summary>
        MavMountModeHomeLocation = 6,
    }

    /// <summary>
    /// Gimbal device (low level) capability flags (bitmap).
    ///  GIMBAL_DEVICE_CAP_FLAGS
    /// </summary>
    public enum GimbalDeviceCapFlags:uint
    {
        /// <summary>
        /// Gimbal device supports a retracted position.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT
        /// </summary>
        GimbalDeviceCapFlagsHasRetract = 1,
        /// <summary>
        /// Gimbal device supports a horizontal, forward looking position, stabilized.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL
        /// </summary>
        GimbalDeviceCapFlagsHasNeutral = 2,
        /// <summary>
        /// Gimbal device supports rotating around roll axis.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS
        /// </summary>
        GimbalDeviceCapFlagsHasRollAxis = 4,
        /// <summary>
        /// Gimbal device supports to follow a roll angle relative to the vehicle.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW
        /// </summary>
        GimbalDeviceCapFlagsHasRollFollow = 8,
        /// <summary>
        /// Gimbal device supports locking to a roll angle (generally that's the default with roll stabilized).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK
        /// </summary>
        GimbalDeviceCapFlagsHasRollLock = 16,
        /// <summary>
        /// Gimbal device supports rotating around pitch axis.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS
        /// </summary>
        GimbalDeviceCapFlagsHasPitchAxis = 32,
        /// <summary>
        /// Gimbal device supports to follow a pitch angle relative to the vehicle.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW
        /// </summary>
        GimbalDeviceCapFlagsHasPitchFollow = 64,
        /// <summary>
        /// Gimbal device supports locking to a pitch angle (generally that's the default with pitch stabilized).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK
        /// </summary>
        GimbalDeviceCapFlagsHasPitchLock = 128,
        /// <summary>
        /// Gimbal device supports rotating around yaw axis.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS
        /// </summary>
        GimbalDeviceCapFlagsHasYawAxis = 256,
        /// <summary>
        /// Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW
        /// </summary>
        GimbalDeviceCapFlagsHasYawFollow = 512,
        /// <summary>
        /// Gimbal device supports locking to an absolute heading, i.e., yaw angle relative to North (earth frame, often this is an option available).
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK
        /// </summary>
        GimbalDeviceCapFlagsHasYawLock = 1024,
        /// <summary>
        /// Gimbal device supports yawing/panning infinitely (e.g. using slip disk).
        /// GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW
        /// </summary>
        GimbalDeviceCapFlagsSupportsInfiniteYaw = 2048,
        /// <summary>
        /// Gimbal device supports yaw angles and angular velocities relative to North (earth frame). This usually requires support by an autopilot via AUTOPILOT_STATE_FOR_GIMBAL_DEVICE. Support can go on and off during runtime, which is reported by the flag GIMBAL_DEVICE_FLAGS_CAN_ACCEPT_YAW_IN_EARTH_FRAME.
        /// GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalDeviceCapFlagsSupportsYawInEarthFrame = 4096,
        /// <summary>
        /// Gimbal device supports radio control inputs as an alternative input for controlling the gimbal orientation.
        /// GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS
        /// </summary>
        GimbalDeviceCapFlagsHasRcInputs = 8192,
    }

    /// <summary>
    /// Gimbal manager high level capability flags (bitmap). The first 16 bits are identical to the GIMBAL_DEVICE_CAP_FLAGS. However, the gimbal manager does not need to copy the flags from the gimbal but can also enhance the capabilities and thus add flags.
    ///  GIMBAL_MANAGER_CAP_FLAGS
    /// </summary>
    public enum GimbalManagerCapFlags:uint
    {
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT
        /// </summary>
        GimbalManagerCapFlagsHasRetract = 1,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL
        /// </summary>
        GimbalManagerCapFlagsHasNeutral = 2,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS
        /// </summary>
        GimbalManagerCapFlagsHasRollAxis = 4,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW
        /// </summary>
        GimbalManagerCapFlagsHasRollFollow = 8,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK
        /// </summary>
        GimbalManagerCapFlagsHasRollLock = 16,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS
        /// </summary>
        GimbalManagerCapFlagsHasPitchAxis = 32,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW
        /// </summary>
        GimbalManagerCapFlagsHasPitchFollow = 64,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK
        /// </summary>
        GimbalManagerCapFlagsHasPitchLock = 128,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS
        /// </summary>
        GimbalManagerCapFlagsHasYawAxis = 256,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW
        /// </summary>
        GimbalManagerCapFlagsHasYawFollow = 512,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK
        /// </summary>
        GimbalManagerCapFlagsHasYawLock = 1024,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.
        /// GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW
        /// </summary>
        GimbalManagerCapFlagsSupportsInfiniteYaw = 2048,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME.
        /// GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalManagerCapFlagsSupportsYawInEarthFrame = 4096,
        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS.
        /// GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS
        /// </summary>
        GimbalManagerCapFlagsHasRcInputs = 8192,
        /// <summary>
        /// Gimbal manager supports to point to a local position.
        /// GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL
        /// </summary>
        GimbalManagerCapFlagsCanPointLocationLocal = 65536,
        /// <summary>
        /// Gimbal manager supports to point to a global latitude, longitude, altitude position.
        /// GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL
        /// </summary>
        GimbalManagerCapFlagsCanPointLocationGlobal = 131072,
    }

    /// <summary>
    /// Flags for gimbal device (lower level) operation.
    ///  GIMBAL_DEVICE_FLAGS
    /// </summary>
    public enum GimbalDeviceFlags:uint
    {
        /// <summary>
        /// Set to retracted safe position (no stabilization), takes precedence over all other flags.
        /// GIMBAL_DEVICE_FLAGS_RETRACT
        /// </summary>
        GimbalDeviceFlagsRetract = 1,
        /// <summary>
        /// Set to neutral/default position, taking precedence over all other flags except RETRACT. Neutral is commonly forward-facing and horizontal (roll=pitch=yaw=0) but may be any orientation.
        /// GIMBAL_DEVICE_FLAGS_NEUTRAL
        /// </summary>
        GimbalDeviceFlagsNeutral = 2,
        /// <summary>
        /// Lock roll angle to absolute angle relative to horizon (not relative to vehicle). This is generally the default with a stabilizing gimbal.
        /// GIMBAL_DEVICE_FLAGS_ROLL_LOCK
        /// </summary>
        GimbalDeviceFlagsRollLock = 4,
        /// <summary>
        /// Lock pitch angle to absolute angle relative to horizon (not relative to vehicle). This is generally the default with a stabilizing gimbal.
        /// GIMBAL_DEVICE_FLAGS_PITCH_LOCK
        /// </summary>
        GimbalDeviceFlagsPitchLock = 8,
        /// <summary>
        /// Lock yaw angle to absolute angle relative to North (not relative to vehicle). If this flag is set, the yaw angle and z component of angular velocity are relative to North (earth frame, x-axis pointing North), else they are relative to the vehicle heading (vehicle frame, earth frame rotated so that the x-axis is pointing forward).
        /// GIMBAL_DEVICE_FLAGS_YAW_LOCK
        /// </summary>
        GimbalDeviceFlagsYawLock = 16,
        /// <summary>
        /// Yaw angle and z component of angular velocity are relative to the vehicle heading (vehicle frame, earth frame rotated such that the x-axis is pointing forward).
        /// GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME
        /// </summary>
        GimbalDeviceFlagsYawInVehicleFrame = 32,
        /// <summary>
        /// Yaw angle and z component of angular velocity are relative to North (earth frame, x-axis is pointing North).
        /// GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalDeviceFlagsYawInEarthFrame = 64,
        /// <summary>
        /// Gimbal device can accept yaw angle inputs relative to North (earth frame). This flag is only for reporting (attempts to set this flag are ignored).
        /// GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalDeviceFlagsAcceptsYawInEarthFrame = 128,
        /// <summary>
        /// The gimbal orientation is set exclusively by the RC signals feed to the gimbal's radio control inputs. MAVLink messages for setting the gimbal orientation (GIMBAL_DEVICE_SET_ATTITUDE) are ignored.
        /// GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE
        /// </summary>
        GimbalDeviceFlagsRcExclusive = 256,
        /// <summary>
        /// The gimbal orientation is determined by combining/mixing the RC signals feed to the gimbal's radio control inputs and the MAVLink messages for setting the gimbal orientation (GIMBAL_DEVICE_SET_ATTITUDE). How these two controls are combined or mixed is not defined by the protocol but is up to the implementation.
        /// GIMBAL_DEVICE_FLAGS_RC_MIXED
        /// </summary>
        GimbalDeviceFlagsRcMixed = 512,
    }

    /// <summary>
    /// Flags for high level gimbal manager operation The first 16 bits are identical to the GIMBAL_DEVICE_FLAGS.
    ///  GIMBAL_MANAGER_FLAGS
    /// </summary>
    public enum GimbalManagerFlags:uint
    {
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_RETRACT.
        /// GIMBAL_MANAGER_FLAGS_RETRACT
        /// </summary>
        GimbalManagerFlagsRetract = 1,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_NEUTRAL.
        /// GIMBAL_MANAGER_FLAGS_NEUTRAL
        /// </summary>
        GimbalManagerFlagsNeutral = 2,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK.
        /// GIMBAL_MANAGER_FLAGS_ROLL_LOCK
        /// </summary>
        GimbalManagerFlagsRollLock = 4,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK.
        /// GIMBAL_MANAGER_FLAGS_PITCH_LOCK
        /// </summary>
        GimbalManagerFlagsPitchLock = 8,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK.
        /// GIMBAL_MANAGER_FLAGS_YAW_LOCK
        /// </summary>
        GimbalManagerFlagsYawLock = 16,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME.
        /// GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME
        /// </summary>
        GimbalManagerFlagsYawInVehicleFrame = 32,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME.
        /// GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalManagerFlagsYawInEarthFrame = 64,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME.
        /// GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME
        /// </summary>
        GimbalManagerFlagsAcceptsYawInEarthFrame = 128,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE.
        /// GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE
        /// </summary>
        GimbalManagerFlagsRcExclusive = 256,
        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_RC_MIXED.
        /// GIMBAL_MANAGER_FLAGS_RC_MIXED
        /// </summary>
        GimbalManagerFlagsRcMixed = 512,
    }

    /// <summary>
    /// Gimbal device (low level) error flags (bitmap, 0 means no error)
    ///  GIMBAL_DEVICE_ERROR_FLAGS
    /// </summary>
    public enum GimbalDeviceErrorFlags:uint
    {
        /// <summary>
        /// Gimbal device is limited by hardware roll limit.
        /// GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT
        /// </summary>
        GimbalDeviceErrorFlagsAtRollLimit = 1,
        /// <summary>
        /// Gimbal device is limited by hardware pitch limit.
        /// GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT
        /// </summary>
        GimbalDeviceErrorFlagsAtPitchLimit = 2,
        /// <summary>
        /// Gimbal device is limited by hardware yaw limit.
        /// GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT
        /// </summary>
        GimbalDeviceErrorFlagsAtYawLimit = 4,
        /// <summary>
        /// There is an error with the gimbal encoders.
        /// GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsEncoderError = 8,
        /// <summary>
        /// There is an error with the gimbal power source.
        /// GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsPowerError = 16,
        /// <summary>
        /// There is an error with the gimbal motors.
        /// GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsMotorError = 32,
        /// <summary>
        /// There is an error with the gimbal's software.
        /// GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsSoftwareError = 64,
        /// <summary>
        /// There is an error with the gimbal's communication.
        /// GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR
        /// </summary>
        GimbalDeviceErrorFlagsCommsError = 128,
        /// <summary>
        /// Gimbal device is currently calibrating.
        /// GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING
        /// </summary>
        GimbalDeviceErrorFlagsCalibrationRunning = 256,
        /// <summary>
        /// Gimbal device is not assigned to a gimbal manager.
        /// GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER
        /// </summary>
        GimbalDeviceErrorFlagsNoManager = 512,
    }

    /// <summary>
    /// Gripper actions.
    ///  GRIPPER_ACTIONS
    /// </summary>
    public enum GripperActions:uint
    {
        /// <summary>
        /// Gripper release cargo.
        /// GRIPPER_ACTION_RELEASE
        /// </summary>
        GripperActionRelease = 0,
        /// <summary>
        /// Gripper grab onto cargo.
        /// GRIPPER_ACTION_GRAB
        /// </summary>
        GripperActionGrab = 1,
    }

    /// <summary>
    /// Winch actions.
    ///  WINCH_ACTIONS
    /// </summary>
    public enum WinchActions:uint
    {
        /// <summary>
        /// Allow motor to freewheel.
        /// WINCH_RELAXED
        /// </summary>
        WinchRelaxed = 0,
        /// <summary>
        /// Wind or unwind specified length of line, optionally using specified rate.
        /// WINCH_RELATIVE_LENGTH_CONTROL
        /// </summary>
        WinchRelativeLengthControl = 1,
        /// <summary>
        /// Wind or unwind line at specified rate.
        /// WINCH_RATE_CONTROL
        /// </summary>
        WinchRateControl = 2,
        /// <summary>
        /// Perform the locking sequence to relieve motor while in the fully retracted position. Only action and instance command parameters are used, others are ignored.
        /// WINCH_LOCK
        /// </summary>
        WinchLock = 3,
        /// <summary>
        /// Sequence of drop, slow down, touch down, reel up, lock. Only action and instance command parameters are used, others are ignored.
        /// WINCH_DELIVER
        /// </summary>
        WinchDeliver = 4,
        /// <summary>
        /// Engage motor and hold current position. Only action and instance command parameters are used, others are ignored.
        /// WINCH_HOLD
        /// </summary>
        WinchHold = 5,
        /// <summary>
        /// Return the reel to the fully retracted position. Only action and instance command parameters are used, others are ignored.
        /// WINCH_RETRACT
        /// </summary>
        WinchRetract = 6,
        /// <summary>
        /// Load the reel with line. The winch will calculate the total loaded length and stop when the tension exceeds a threshold. Only action and instance command parameters are used, others are ignored.
        /// WINCH_LOAD_LINE
        /// </summary>
        WinchLoadLine = 7,
        /// <summary>
        /// Spool out the entire length of the line. Only action and instance command parameters are used, others are ignored.
        /// WINCH_ABANDON_LINE
        /// </summary>
        WinchAbandonLine = 8,
        /// <summary>
        /// Spools out just enough to present the hook to the user to load the payload. Only action and instance command parameters are used, others are ignored
        /// WINCH_LOAD_PAYLOAD
        /// </summary>
        WinchLoadPayload = 9,
    }

    /// <summary>
    /// Generalized UAVCAN node health
    ///  UAVCAN_NODE_HEALTH
    /// </summary>
    public enum UavcanNodeHealth:uint
    {
        /// <summary>
        /// The node is functioning properly.
        /// UAVCAN_NODE_HEALTH_OK
        /// </summary>
        UavcanNodeHealthOk = 0,
        /// <summary>
        /// A critical parameter went out of range or the node has encountered a minor failure.
        /// UAVCAN_NODE_HEALTH_WARNING
        /// </summary>
        UavcanNodeHealthWarning = 1,
        /// <summary>
        /// The node has encountered a major failure.
        /// UAVCAN_NODE_HEALTH_ERROR
        /// </summary>
        UavcanNodeHealthError = 2,
        /// <summary>
        /// The node has suffered a fatal malfunction.
        /// UAVCAN_NODE_HEALTH_CRITICAL
        /// </summary>
        UavcanNodeHealthCritical = 3,
    }

    /// <summary>
    /// Generalized UAVCAN node mode
    ///  UAVCAN_NODE_MODE
    /// </summary>
    public enum UavcanNodeMode:uint
    {
        /// <summary>
        /// The node is performing its primary functions.
        /// UAVCAN_NODE_MODE_OPERATIONAL
        /// </summary>
        UavcanNodeModeOperational = 0,
        /// <summary>
        /// The node is initializing; this mode is entered immediately after startup.
        /// UAVCAN_NODE_MODE_INITIALIZATION
        /// </summary>
        UavcanNodeModeInitialization = 1,
        /// <summary>
        /// The node is under maintenance.
        /// UAVCAN_NODE_MODE_MAINTENANCE
        /// </summary>
        UavcanNodeModeMaintenance = 2,
        /// <summary>
        /// The node is in the process of updating its software.
        /// UAVCAN_NODE_MODE_SOFTWARE_UPDATE
        /// </summary>
        UavcanNodeModeSoftwareUpdate = 3,
        /// <summary>
        /// The node is no longer available online.
        /// UAVCAN_NODE_MODE_OFFLINE
        /// </summary>
        UavcanNodeModeOffline = 7,
    }

    /// <summary>
    /// Indicates the ESC connection type.
    ///  ESC_CONNECTION_TYPE
    /// </summary>
    public enum EscConnectionType:uint
    {
        /// <summary>
        /// Traditional PPM ESC.
        /// ESC_CONNECTION_TYPE_PPM
        /// </summary>
        EscConnectionTypePpm = 0,
        /// <summary>
        /// Serial Bus connected ESC.
        /// ESC_CONNECTION_TYPE_SERIAL
        /// </summary>
        EscConnectionTypeSerial = 1,
        /// <summary>
        /// One Shot PPM ESC.
        /// ESC_CONNECTION_TYPE_ONESHOT
        /// </summary>
        EscConnectionTypeOneshot = 2,
        /// <summary>
        /// I2C ESC.
        /// ESC_CONNECTION_TYPE_I2C
        /// </summary>
        EscConnectionTypeI2c = 3,
        /// <summary>
        /// CAN-Bus ESC.
        /// ESC_CONNECTION_TYPE_CAN
        /// </summary>
        EscConnectionTypeCan = 4,
        /// <summary>
        /// DShot ESC.
        /// ESC_CONNECTION_TYPE_DSHOT
        /// </summary>
        EscConnectionTypeDshot = 5,
    }

    /// <summary>
    /// Flags to report ESC failures.
    ///  ESC_FAILURE_FLAGS
    /// </summary>
    public enum EscFailureFlags:uint
    {
        /// <summary>
        /// No ESC failure.
        /// ESC_FAILURE_NONE
        /// </summary>
        EscFailureNone = 0,
        /// <summary>
        /// Over current failure.
        /// ESC_FAILURE_OVER_CURRENT
        /// </summary>
        EscFailureOverCurrent = 1,
        /// <summary>
        /// Over voltage failure.
        /// ESC_FAILURE_OVER_VOLTAGE
        /// </summary>
        EscFailureOverVoltage = 2,
        /// <summary>
        /// Over temperature failure.
        /// ESC_FAILURE_OVER_TEMPERATURE
        /// </summary>
        EscFailureOverTemperature = 4,
        /// <summary>
        /// Over RPM failure.
        /// ESC_FAILURE_OVER_RPM
        /// </summary>
        EscFailureOverRpm = 8,
        /// <summary>
        /// Inconsistent command failure i.e. out of bounds.
        /// ESC_FAILURE_INCONSISTENT_CMD
        /// </summary>
        EscFailureInconsistentCmd = 16,
        /// <summary>
        /// Motor stuck failure.
        /// ESC_FAILURE_MOTOR_STUCK
        /// </summary>
        EscFailureMotorStuck = 32,
        /// <summary>
        /// Generic ESC failure.
        /// ESC_FAILURE_GENERIC
        /// </summary>
        EscFailureGeneric = 64,
    }

    /// <summary>
    /// Flags to indicate the status of camera storage.
    ///  STORAGE_STATUS
    /// </summary>
    public enum StorageStatus:uint
    {
        /// <summary>
        /// Storage is missing (no microSD card loaded for example.)
        /// STORAGE_STATUS_EMPTY
        /// </summary>
        StorageStatusEmpty = 0,
        /// <summary>
        /// Storage present but unformatted.
        /// STORAGE_STATUS_UNFORMATTED
        /// </summary>
        StorageStatusUnformatted = 1,
        /// <summary>
        /// Storage present and ready.
        /// STORAGE_STATUS_READY
        /// </summary>
        StorageStatusReady = 2,
        /// <summary>
        /// Camera does not supply storage status information. Capacity information in STORAGE_INFORMATION fields will be ignored.
        /// STORAGE_STATUS_NOT_SUPPORTED
        /// </summary>
        StorageStatusNotSupported = 3,
    }

    /// <summary>
    /// Flags to indicate the type of storage.
    ///  STORAGE_TYPE
    /// </summary>
    public enum StorageType:uint
    {
        /// <summary>
        /// Storage type is not known.
        /// STORAGE_TYPE_UNKNOWN
        /// </summary>
        StorageTypeUnknown = 0,
        /// <summary>
        /// Storage type is USB device.
        /// STORAGE_TYPE_USB_STICK
        /// </summary>
        StorageTypeUsbStick = 1,
        /// <summary>
        /// Storage type is SD card.
        /// STORAGE_TYPE_SD
        /// </summary>
        StorageTypeSd = 2,
        /// <summary>
        /// Storage type is microSD card.
        /// STORAGE_TYPE_MICROSD
        /// </summary>
        StorageTypeMicrosd = 3,
        /// <summary>
        /// Storage type is CFast.
        /// STORAGE_TYPE_CF
        /// </summary>
        StorageTypeCf = 4,
        /// <summary>
        /// Storage type is CFexpress.
        /// STORAGE_TYPE_CFE
        /// </summary>
        StorageTypeCfe = 5,
        /// <summary>
        /// Storage type is XQD.
        /// STORAGE_TYPE_XQD
        /// </summary>
        StorageTypeXqd = 6,
        /// <summary>
        /// Storage type is HD mass storage type.
        /// STORAGE_TYPE_HD
        /// </summary>
        StorageTypeHd = 7,
        /// <summary>
        /// Storage type is other, not listed type.
        /// STORAGE_TYPE_OTHER
        /// </summary>
        StorageTypeOther = 254,
    }

    /// <summary>
    /// Flags to indicate usage for a particular storage (see STORAGE_INFORMATION.storage_usage and MAV_CMD_SET_STORAGE_USAGE).
    ///  STORAGE_USAGE_FLAG
    /// </summary>
    public enum StorageUsageFlag:uint
    {
        /// <summary>
        /// Always set to 1 (indicates STORAGE_INFORMATION.storage_usage is supported).
        /// STORAGE_USAGE_FLAG_SET
        /// </summary>
        StorageUsageFlagSet = 1,
        /// <summary>
        /// Storage for saving photos.
        /// STORAGE_USAGE_FLAG_PHOTO
        /// </summary>
        StorageUsageFlagPhoto = 2,
        /// <summary>
        /// Storage for saving videos.
        /// STORAGE_USAGE_FLAG_VIDEO
        /// </summary>
        StorageUsageFlagVideo = 4,
        /// <summary>
        /// Storage for saving logs.
        /// STORAGE_USAGE_FLAG_LOGS
        /// </summary>
        StorageUsageFlagLogs = 8,
    }

    /// <summary>
    /// Yaw behaviour during orbit flight.
    ///  ORBIT_YAW_BEHAVIOUR
    /// </summary>
    public enum OrbitYawBehaviour:uint
    {
        /// <summary>
        /// Vehicle front points to the center (default).
        /// ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER
        /// </summary>
        OrbitYawBehaviourHoldFrontToCircleCenter = 0,
        /// <summary>
        /// Vehicle front holds heading when message received.
        /// ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING
        /// </summary>
        OrbitYawBehaviourHoldInitialHeading = 1,
        /// <summary>
        /// Yaw uncontrolled.
        /// ORBIT_YAW_BEHAVIOUR_UNCONTROLLED
        /// </summary>
        OrbitYawBehaviourUncontrolled = 2,
        /// <summary>
        /// Vehicle front follows flight path (tangential to circle).
        /// ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE
        /// </summary>
        OrbitYawBehaviourHoldFrontTangentToCircle = 3,
        /// <summary>
        /// Yaw controlled by RC input.
        /// ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED
        /// </summary>
        OrbitYawBehaviourRcControlled = 4,
    }

    /// <summary>
    /// Possible responses from a WIFI_CONFIG_AP message.
    ///  WIFI_CONFIG_AP_RESPONSE
    /// </summary>
    public enum WifiConfigApResponse:uint
    {
        /// <summary>
        /// Undefined response. Likely an indicative of a system that doesn't support this request.
        /// WIFI_CONFIG_AP_RESPONSE_UNDEFINED
        /// </summary>
        WifiConfigApResponseUndefined = 0,
        /// <summary>
        /// Changes accepted.
        /// WIFI_CONFIG_AP_RESPONSE_ACCEPTED
        /// </summary>
        WifiConfigApResponseAccepted = 1,
        /// <summary>
        /// Changes rejected.
        /// WIFI_CONFIG_AP_RESPONSE_REJECTED
        /// </summary>
        WifiConfigApResponseRejected = 2,
        /// <summary>
        /// Invalid Mode.
        /// WIFI_CONFIG_AP_RESPONSE_MODE_ERROR
        /// </summary>
        WifiConfigApResponseModeError = 3,
        /// <summary>
        /// Invalid SSID.
        /// WIFI_CONFIG_AP_RESPONSE_SSID_ERROR
        /// </summary>
        WifiConfigApResponseSsidError = 4,
        /// <summary>
        /// Invalid Password.
        /// WIFI_CONFIG_AP_RESPONSE_PASSWORD_ERROR
        /// </summary>
        WifiConfigApResponsePasswordError = 5,
    }

    /// <summary>
    /// Possible responses from a CELLULAR_CONFIG message.
    ///  CELLULAR_CONFIG_RESPONSE
    /// </summary>
    public enum CellularConfigResponse:uint
    {
        /// <summary>
        /// Changes accepted.
        /// CELLULAR_CONFIG_RESPONSE_ACCEPTED
        /// </summary>
        CellularConfigResponseAccepted = 0,
        /// <summary>
        /// Invalid APN.
        /// CELLULAR_CONFIG_RESPONSE_APN_ERROR
        /// </summary>
        CellularConfigResponseApnError = 1,
        /// <summary>
        /// Invalid PIN.
        /// CELLULAR_CONFIG_RESPONSE_PIN_ERROR
        /// </summary>
        CellularConfigResponsePinError = 2,
        /// <summary>
        /// Changes rejected.
        /// CELLULAR_CONFIG_RESPONSE_REJECTED
        /// </summary>
        CellularConfigResponseRejected = 3,
        /// <summary>
        /// PUK is required to unblock SIM card.
        /// CELLULAR_CONFIG_BLOCKED_PUK_REQUIRED
        /// </summary>
        CellularConfigBlockedPukRequired = 4,
    }

    /// <summary>
    /// WiFi Mode.
    ///  WIFI_CONFIG_AP_MODE
    /// </summary>
    public enum WifiConfigApMode:uint
    {
        /// <summary>
        /// WiFi mode is undefined.
        /// WIFI_CONFIG_AP_MODE_UNDEFINED
        /// </summary>
        WifiConfigApModeUndefined = 0,
        /// <summary>
        /// WiFi configured as an access point.
        /// WIFI_CONFIG_AP_MODE_AP
        /// </summary>
        WifiConfigApModeAp = 1,
        /// <summary>
        /// WiFi configured as a station connected to an existing local WiFi network.
        /// WIFI_CONFIG_AP_MODE_STATION
        /// </summary>
        WifiConfigApModeStation = 2,
        /// <summary>
        /// WiFi disabled.
        /// WIFI_CONFIG_AP_MODE_DISABLED
        /// </summary>
        WifiConfigApModeDisabled = 3,
    }

    /// <summary>
    /// Supported component metadata types. These are used in the "general" metadata file returned by COMPONENT_METADATA to provide information about supported metadata types. The types are not used directly in MAVLink messages.
    ///  COMP_METADATA_TYPE
    /// </summary>
    public enum CompMetadataType:uint
    {
        /// <summary>
        /// General information about the component. General metadata includes information about other metadata types supported by the component. Files of this type must be supported, and must be downloadable from vehicle using a MAVLink FTP URI.
        /// COMP_METADATA_TYPE_GENERAL
        /// </summary>
        CompMetadataTypeGeneral = 0,
        /// <summary>
        /// Parameter meta data.
        /// COMP_METADATA_TYPE_PARAMETER
        /// </summary>
        CompMetadataTypeParameter = 1,
        /// <summary>
        /// Meta data that specifies which commands and command parameters the vehicle supports. (WIP)
        /// COMP_METADATA_TYPE_COMMANDS
        /// </summary>
        CompMetadataTypeCommands = 2,
        /// <summary>
        /// Meta data that specifies external non-MAVLink peripherals.
        /// COMP_METADATA_TYPE_PERIPHERALS
        /// </summary>
        CompMetadataTypePeripherals = 3,
        /// <summary>
        /// Meta data for the events interface.
        /// COMP_METADATA_TYPE_EVENTS
        /// </summary>
        CompMetadataTypeEvents = 4,
        /// <summary>
        /// Meta data for actuator configuration (motors, servos and vehicle geometry) and testing.
        /// COMP_METADATA_TYPE_ACTUATORS
        /// </summary>
        CompMetadataTypeActuators = 5,
    }

    /// <summary>
    /// Actuator configuration, used to change a setting on an actuator. Component information metadata can be used to know which outputs support which commands.
    ///  ACTUATOR_CONFIGURATION
    /// </summary>
    public enum ActuatorConfiguration:uint
    {
        /// <summary>
        /// Do nothing.
        /// ACTUATOR_CONFIGURATION_NONE
        /// </summary>
        ActuatorConfigurationNone = 0,
        /// <summary>
        /// Command the actuator to beep now.
        /// ACTUATOR_CONFIGURATION_BEEP
        /// </summary>
        ActuatorConfigurationBeep = 1,
        /// <summary>
        /// Permanently set the actuator (ESC) to 3D mode (reversible thrust).
        /// ACTUATOR_CONFIGURATION_3D_MODE_ON
        /// </summary>
        ActuatorConfiguration3dModeOn = 2,
        /// <summary>
        /// Permanently set the actuator (ESC) to non 3D mode (non-reversible thrust).
        /// ACTUATOR_CONFIGURATION_3D_MODE_OFF
        /// </summary>
        ActuatorConfiguration3dModeOff = 3,
        /// <summary>
        /// Permanently set the actuator (ESC) to spin direction 1 (which can be clockwise or counter-clockwise).
        /// ACTUATOR_CONFIGURATION_SPIN_DIRECTION1
        /// </summary>
        ActuatorConfigurationSpinDirection1 = 4,
        /// <summary>
        /// Permanently set the actuator (ESC) to spin direction 2 (opposite of direction 1).
        /// ACTUATOR_CONFIGURATION_SPIN_DIRECTION2
        /// </summary>
        ActuatorConfigurationSpinDirection2 = 5,
    }

    /// <summary>
    /// Actuator output function. Values greater or equal to 1000 are autopilot-specific.
    ///  ACTUATOR_OUTPUT_FUNCTION
    /// </summary>
    public enum ActuatorOutputFunction:uint
    {
        /// <summary>
        /// No function (disabled).
        /// ACTUATOR_OUTPUT_FUNCTION_NONE
        /// </summary>
        ActuatorOutputFunctionNone = 0,
        /// <summary>
        /// Motor 1
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR1
        /// </summary>
        ActuatorOutputFunctionMotor1 = 1,
        /// <summary>
        /// Motor 2
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR2
        /// </summary>
        ActuatorOutputFunctionMotor2 = 2,
        /// <summary>
        /// Motor 3
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR3
        /// </summary>
        ActuatorOutputFunctionMotor3 = 3,
        /// <summary>
        /// Motor 4
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR4
        /// </summary>
        ActuatorOutputFunctionMotor4 = 4,
        /// <summary>
        /// Motor 5
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR5
        /// </summary>
        ActuatorOutputFunctionMotor5 = 5,
        /// <summary>
        /// Motor 6
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR6
        /// </summary>
        ActuatorOutputFunctionMotor6 = 6,
        /// <summary>
        /// Motor 7
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR7
        /// </summary>
        ActuatorOutputFunctionMotor7 = 7,
        /// <summary>
        /// Motor 8
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR8
        /// </summary>
        ActuatorOutputFunctionMotor8 = 8,
        /// <summary>
        /// Motor 9
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR9
        /// </summary>
        ActuatorOutputFunctionMotor9 = 9,
        /// <summary>
        /// Motor 10
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR10
        /// </summary>
        ActuatorOutputFunctionMotor10 = 10,
        /// <summary>
        /// Motor 11
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR11
        /// </summary>
        ActuatorOutputFunctionMotor11 = 11,
        /// <summary>
        /// Motor 12
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR12
        /// </summary>
        ActuatorOutputFunctionMotor12 = 12,
        /// <summary>
        /// Motor 13
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR13
        /// </summary>
        ActuatorOutputFunctionMotor13 = 13,
        /// <summary>
        /// Motor 14
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR14
        /// </summary>
        ActuatorOutputFunctionMotor14 = 14,
        /// <summary>
        /// Motor 15
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR15
        /// </summary>
        ActuatorOutputFunctionMotor15 = 15,
        /// <summary>
        /// Motor 16
        /// ACTUATOR_OUTPUT_FUNCTION_MOTOR16
        /// </summary>
        ActuatorOutputFunctionMotor16 = 16,
        /// <summary>
        /// Servo 1
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO1
        /// </summary>
        ActuatorOutputFunctionServo1 = 33,
        /// <summary>
        /// Servo 2
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO2
        /// </summary>
        ActuatorOutputFunctionServo2 = 34,
        /// <summary>
        /// Servo 3
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO3
        /// </summary>
        ActuatorOutputFunctionServo3 = 35,
        /// <summary>
        /// Servo 4
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO4
        /// </summary>
        ActuatorOutputFunctionServo4 = 36,
        /// <summary>
        /// Servo 5
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO5
        /// </summary>
        ActuatorOutputFunctionServo5 = 37,
        /// <summary>
        /// Servo 6
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO6
        /// </summary>
        ActuatorOutputFunctionServo6 = 38,
        /// <summary>
        /// Servo 7
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO7
        /// </summary>
        ActuatorOutputFunctionServo7 = 39,
        /// <summary>
        /// Servo 8
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO8
        /// </summary>
        ActuatorOutputFunctionServo8 = 40,
        /// <summary>
        /// Servo 9
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO9
        /// </summary>
        ActuatorOutputFunctionServo9 = 41,
        /// <summary>
        /// Servo 10
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO10
        /// </summary>
        ActuatorOutputFunctionServo10 = 42,
        /// <summary>
        /// Servo 11
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO11
        /// </summary>
        ActuatorOutputFunctionServo11 = 43,
        /// <summary>
        /// Servo 12
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO12
        /// </summary>
        ActuatorOutputFunctionServo12 = 44,
        /// <summary>
        /// Servo 13
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO13
        /// </summary>
        ActuatorOutputFunctionServo13 = 45,
        /// <summary>
        /// Servo 14
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO14
        /// </summary>
        ActuatorOutputFunctionServo14 = 46,
        /// <summary>
        /// Servo 15
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO15
        /// </summary>
        ActuatorOutputFunctionServo15 = 47,
        /// <summary>
        /// Servo 16
        /// ACTUATOR_OUTPUT_FUNCTION_SERVO16
        /// </summary>
        ActuatorOutputFunctionServo16 = 48,
    }

    /// <summary>
    /// Enable axes that will be tuned via autotuning. Used in MAV_CMD_DO_AUTOTUNE_ENABLE.
    ///  AUTOTUNE_AXIS
    /// </summary>
    public enum AutotuneAxis:uint
    {
        /// <summary>
        /// Flight stack tunes axis according to its default settings.
        /// AUTOTUNE_AXIS_DEFAULT
        /// </summary>
        AutotuneAxisDefault = 0,
        /// <summary>
        /// Autotune roll axis.
        /// AUTOTUNE_AXIS_ROLL
        /// </summary>
        AutotuneAxisRoll = 1,
        /// <summary>
        /// Autotune pitch axis.
        /// AUTOTUNE_AXIS_PITCH
        /// </summary>
        AutotuneAxisPitch = 2,
        /// <summary>
        /// Autotune yaw axis.
        /// AUTOTUNE_AXIS_YAW
        /// </summary>
        AutotuneAxisYaw = 4,
    }

    /// <summary>
    /// 
    ///         Actions for reading/writing parameters between persistent and volatile storage when using MAV_CMD_PREFLIGHT_STORAGE.
    ///         (Commonly parameters are loaded from persistent storage (flash/EEPROM) into volatile storage (RAM) on startup and written back when they are changed.)
    ///       
    ///  PREFLIGHT_STORAGE_PARAMETER_ACTION
    /// </summary>
    public enum PreflightStorageParameterAction:uint
    {
        /// <summary>
        /// Read all parameters from persistent storage. Replaces values in volatile storage.
        /// PARAM_READ_PERSISTENT
        /// </summary>
        ParamReadPersistent = 0,
        /// <summary>
        /// Write all parameter values to persistent storage (flash/EEPROM)
        /// PARAM_WRITE_PERSISTENT
        /// </summary>
        ParamWritePersistent = 1,
        /// <summary>
        /// Reset all user configurable parameters to their default value (including airframe selection, sensor calibration data, safety settings, and so on). Does not reset values that contain operation counters and vehicle computed statistics.
        /// PARAM_RESET_CONFIG_DEFAULT
        /// </summary>
        ParamResetConfigDefault = 2,
        /// <summary>
        /// Reset only sensor calibration parameters to factory defaults (or firmware default if not available)
        /// PARAM_RESET_SENSOR_DEFAULT
        /// </summary>
        ParamResetSensorDefault = 3,
        /// <summary>
        /// Reset all parameters, including operation counters, to default values
        /// PARAM_RESET_ALL_DEFAULT
        /// </summary>
        ParamResetAllDefault = 4,
    }

    /// <summary>
    /// 
    ///         Actions for reading and writing plan information (mission, rally points, geofence) between persistent and volatile storage when using MAV_CMD_PREFLIGHT_STORAGE.
    ///         (Commonly missions are loaded from persistent storage (flash/EEPROM) into volatile storage (RAM) on startup and written back when they are changed.)
    ///       
    ///  PREFLIGHT_STORAGE_MISSION_ACTION
    /// </summary>
    public enum PreflightStorageMissionAction:uint
    {
        /// <summary>
        /// Read current mission data from persistent storage
        /// MISSION_READ_PERSISTENT
        /// </summary>
        MissionReadPersistent = 0,
        /// <summary>
        /// Write current mission data to persistent storage
        /// MISSION_WRITE_PERSISTENT
        /// </summary>
        MissionWritePersistent = 1,
        /// <summary>
        /// Erase all mission data stored on the vehicle (both persistent and volatile storage)
        /// MISSION_RESET_DEFAULT
        /// </summary>
        MissionResetDefault = 2,
    }

    /// <summary>
    /// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries
    ///  MAV_CMD
    /// </summary>
    public enum MavCmd:uint
    {
        /// <summary>
        /// Navigate to waypoint. This is intended for use in missions (for guided commands outside of missions use MAV_CMD_DO_REPOSITION).
        /// Param 1 - Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
        /// Param 2 - Acceptance radius (if the sphere with this radius is hit, the waypoint counts as reached)
        /// Param 3 - 0 to pass through the WP, if > 0 radius to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
        /// Param 4 - Desired yaw angle at waypoint (rotary wing). NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_WAYPOINT
        /// </summary>
        MavCmdNavWaypoint = 16,
        /// <summary>
        /// Loiter around this waypoint an unlimited amount of time
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
        /// Param 4 - Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_UNLIM
        /// </summary>
        MavCmdNavLoiterUnlim = 17,
        /// <summary>
        /// Loiter around this waypoint for X turns
        /// Param 1 - Number of turns.
        /// Param 2 - Leave loiter circle only once heading towards the next waypoint (0 = False)
        /// Param 3 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
        /// Param 4 - Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_TURNS
        /// </summary>
        MavCmdNavLoiterTurns = 18,
        /// <summary>
        /// Loiter at the specified latitude, longitude and altitude for a certain amount of time. Multicopter vehicles stop at the point (within a vehicle-specific acceptance radius). Forward-only moving vehicles (e.g. fixed-wing) circle the point with the specified radius/direction. If the Heading Required parameter (2) is non-zero forward moving aircraft will only leave the loiter circle once heading towards the next waypoint.
        /// Param 1 - Loiter time (only starts once Lat, Lon and Alt is reached).
        /// Param 2 - Leave loiter circle only once heading towards the next waypoint (0 = False)
        /// Param 3 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise.
        /// Param 4 - Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_TIME
        /// </summary>
        MavCmdNavLoiterTime = 19,
        /// <summary>
        /// Return to launch location
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_RETURN_TO_LAUNCH
        /// </summary>
        MavCmdNavReturnToLaunch = 20,
        /// <summary>
        /// Land at location.
        /// Param 1 - Minimum target altitude if landing is aborted (0 = undefined/use system default).
        /// Param 2 - Precision land mode.
        /// Param 3 - Empty.
        /// Param 4 - Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude.
        /// Param 6 - Longitude.
        /// Param 7 - Landing altitude (ground level in current frame).
        /// MAV_CMD_NAV_LAND
        /// </summary>
        MavCmdNavLand = 21,
        /// <summary>
        /// Takeoff from ground / hand. Vehicles that support multiple takeoff modes (e.g. VTOL quadplane) should take off using the currently configured mode.
        /// Param 1 - Minimum pitch (if airspeed sensor present), desired pitch without sensor
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Yaw angle (if magnetometer present), ignored without magnetometer. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_TAKEOFF
        /// </summary>
        MavCmdNavTakeoff = 22,
        /// <summary>
        /// Land at local position (local frame only)
        /// Param 1 - Landing target number (if available)
        /// Param 2 - Maximum accepted offset from desired landing position - computed magnitude from spherical coordinates: d = sqrt(x^2 + y^2 + z^2), which gives the maximum accepted distance between the desired landing position and the position where the vehicle is about to land
        /// Param 3 - Landing descend rate
        /// Param 4 - Desired yaw angle
        /// Param 5 - Y-axis position
        /// Param 6 - X-axis position
        /// Param 7 - Z-axis / ground level position
        /// MAV_CMD_NAV_LAND_LOCAL
        /// </summary>
        MavCmdNavLandLocal = 23,
        /// <summary>
        /// Takeoff from local position (local frame only)
        /// Param 1 - Minimum pitch (if airspeed sensor present), desired pitch without sensor
        /// Param 2 - Empty
        /// Param 3 - Takeoff ascend rate
        /// Param 4 - Yaw angle (if magnetometer or another yaw estimation source present), ignored without one of these
        /// Param 5 - Y-axis position
        /// Param 6 - X-axis position
        /// Param 7 - Z-axis position
        /// MAV_CMD_NAV_TAKEOFF_LOCAL
        /// </summary>
        MavCmdNavTakeoffLocal = 24,
        /// <summary>
        /// Vehicle following, i.e. this waypoint represents the position of a moving vehicle
        /// Param 1 - Following logic to use (e.g. loitering or sinusoidal following) - depends on specific autopilot implementation
        /// Param 2 - Ground speed of vehicle to be followed
        /// Param 3 - Radius around waypoint. If positive loiter clockwise, else counter-clockwise
        /// Param 4 - Desired yaw angle.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_FOLLOW
        /// </summary>
        MavCmdNavFollow = 25,
        /// <summary>
        /// Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
        /// Param 1 - Climb or Descend (0 = Neutral, command completes when within 5m of this command's altitude, 1 = Climbing, command completes when at or above this command's altitude, 2 = Descending, command completes when at or below this command's altitude.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Desired altitude
        /// MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT
        /// </summary>
        MavCmdNavContinueAndChangeAlt = 30,
        /// <summary>
        /// Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached. Additionally, if the Heading Required parameter is non-zero the aircraft will not leave the loiter until heading toward the next waypoint.
        /// Param 1 - Leave loiter circle only once heading towards the next waypoint (0 = False)
        /// Param 2 - Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, negative counter-clockwise, 0 means no change to standard loiter.
        /// Param 3 - Empty
        /// Param 4 - Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_LOITER_TO_ALT
        /// </summary>
        MavCmdNavLoiterToAlt = 31,
        /// <summary>
        /// Begin following a target
        /// Param 1 - System ID (of the FOLLOW_TARGET beacon). Send 0 to disable follow-me and return to the default position hold mode.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Altitude mode: 0: Keep current altitude, 1: keep altitude difference to target, 2: go to a fixed altitude above home.
        /// Param 5 - Altitude above home. (used if mode=2)
        /// Param 6 - Reserved
        /// Param 7 - Time to land in which the MAV should go to the default position hold mode after a message RX timeout.
        /// MAV_CMD_DO_FOLLOW
        /// </summary>
        MavCmdDoFollow = 32,
        /// <summary>
        /// Reposition the MAV after a follow target command has been sent
        /// Param 1 - Camera q1 (where 0 is on the ray from the camera to the tracking device)
        /// Param 2 - Camera q2
        /// Param 3 - Camera q3
        /// Param 4 - Camera q4
        /// Param 5 - altitude offset from target
        /// Param 6 - X offset from target
        /// Param 7 - Y offset from target
        /// MAV_CMD_DO_FOLLOW_REPOSITION
        /// </summary>
        MavCmdDoFollowReposition = 33,
        /// <summary>
        /// Start orbiting on the circumference of a circle defined by the parameters. Setting values to NaN/INT32_MAX (as appropriate) results in using defaults.
        /// Param 1 - Radius of the circle. Positive: orbit clockwise. Negative: orbit counter-clockwise. NaN: Use vehicle default radius, or current radius if already orbiting.
        /// Param 2 - Tangential Velocity. NaN: Use vehicle default velocity, or current velocity if already orbiting.
        /// Param 3 - Yaw behavior of the vehicle.
        /// Param 4 - Orbit around the centre point for this many radians (i.e. for a three-quarter orbit set 270*Pi/180). 0: Orbit forever. NaN: Use vehicle default, or current value if already orbiting.
        /// Param 5 - Center point latitude (if no MAV_FRAME specified) / X coordinate according to MAV_FRAME. INT32_MAX (or NaN if sent in COMMAND_LONG): Use current vehicle position, or current center if already orbiting.
        /// Param 6 - Center point longitude (if no MAV_FRAME specified) / Y coordinate according to MAV_FRAME. INT32_MAX (or NaN if sent in COMMAND_LONG): Use current vehicle position, or current center if already orbiting.
        /// Param 7 - Center point altitude (MSL) (if no MAV_FRAME specified) / Z coordinate according to MAV_FRAME. NaN: Use current vehicle altitude.
        /// MAV_CMD_DO_ORBIT
        /// </summary>
        MavCmdDoOrbit = 34,
        /// <summary>
        /// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
        /// Param 1 - Region of interest mode.
        /// Param 2 - Waypoint index/ target ID. (see MAV_ROI enum)
        /// Param 3 - ROI index (allows a vehicle to manage multiple ROI's)
        /// Param 4 - Empty
        /// Param 5 - x the location of the fixed ROI (see MAV_FRAME)
        /// Param 6 - y
        /// Param 7 - z
        /// MAV_CMD_NAV_ROI
        /// </summary>
        MavCmdNavRoi = 80,
        /// <summary>
        /// Control autonomous path planning on the MAV.
        /// Param 1 - 0: Disable local obstacle avoidance / local path planning (without resetting map), 1: Enable local path planning, 2: Enable and reset local path planning
        /// Param 2 - 0: Disable full path planning (without resetting map), 1: Enable, 2: Enable and reset map/occupancy grid, 3: Enable and reset planned route, but not occupancy grid
        /// Param 3 - Empty
        /// Param 4 - Yaw angle at goal
        /// Param 5 - Latitude/X of goal
        /// Param 6 - Longitude/Y of goal
        /// Param 7 - Altitude/Z of goal
        /// MAV_CMD_NAV_PATHPLANNING
        /// </summary>
        MavCmdNavPathplanning = 81,
        /// <summary>
        /// Navigate to waypoint using a spline path.
        /// Param 1 - Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude/X of goal
        /// Param 6 - Longitude/Y of goal
        /// Param 7 - Altitude/Z of goal
        /// MAV_CMD_NAV_SPLINE_WAYPOINT
        /// </summary>
        MavCmdNavSplineWaypoint = 82,
        /// <summary>
        /// Takeoff from ground using VTOL mode, and transition to forward flight with specified heading. The command should be ignored by vehicles that dont support both VTOL and fixed-wing flight (multicopters, boats,etc.).
        /// Param 1 - Empty
        /// Param 2 - Front transition heading.
        /// Param 3 - Empty
        /// Param 4 - Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_VTOL_TAKEOFF
        /// </summary>
        MavCmdNavVtolTakeoff = 84,
        /// <summary>
        /// Land using VTOL mode
        /// Param 1 - Landing behaviour.
        /// Param 2 - Empty
        /// Param 3 - Approach altitude (with the same reference as the Altitude field). NaN if unspecified.
        /// Param 4 - Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude (ground level) relative to the current coordinate frame. NaN to use system default landing altitude (ignore value).
        /// MAV_CMD_NAV_VTOL_LAND
        /// </summary>
        MavCmdNavVtolLand = 85,
        /// <summary>
        /// hand control over to an external controller
        /// Param 1 - On / Off (> 0.5f on)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_GUIDED_ENABLE
        /// </summary>
        MavCmdNavGuidedEnable = 92,
        /// <summary>
        /// Delay the next navigation command a number of seconds or until a specified time
        /// Param 1 - Delay (-1 to enable time-of-day fields)
        /// Param 2 - hour (24h format, UTC, -1 to ignore)
        /// Param 3 - minute (24h format, UTC, -1 to ignore)
        /// Param 4 - second (24h format, UTC, -1 to ignore)
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_DELAY
        /// </summary>
        MavCmdNavDelay = 93,
        /// <summary>
        /// Descend and place payload. Vehicle moves to specified location, descends until it detects a hanging payload has reached the ground, and then releases the payload. If ground is not detected before the reaching the maximum descent value (param1), the command will complete without releasing the payload.
        /// Param 1 - Maximum distance to descend.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_PAYLOAD_PLACE
        /// </summary>
        MavCmdNavPayloadPlace = 94,
        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_LAST
        /// </summary>
        MavCmdNavLast = 95,
        /// <summary>
        /// Delay mission state machine.
        /// Param 1 - Delay
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_DELAY
        /// </summary>
        MavCmdConditionDelay = 112,
        /// <summary>
        /// Ascend/descend to target altitude at specified rate. Delay mission state machine until desired altitude reached.
        /// Param 1 - Descent / Ascend rate.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Target Altitude
        /// MAV_CMD_CONDITION_CHANGE_ALT
        /// </summary>
        MavCmdConditionChangeAlt = 113,
        /// <summary>
        /// Delay mission state machine until within desired distance of next NAV point.
        /// Param 1 - Distance.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_DISTANCE
        /// </summary>
        MavCmdConditionDistance = 114,
        /// <summary>
        /// Reach a certain target angle.
        /// Param 1 - target angle, 0 is north
        /// Param 2 - angular speed
        /// Param 3 - direction: -1: counter clockwise, 1: clockwise
        /// Param 4 - 0: absolute angle, 1: relative offset
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_YAW
        /// </summary>
        MavCmdConditionYaw = 115,
        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONDITION_LAST
        /// </summary>
        MavCmdConditionLast = 159,
        /// <summary>
        /// Set system mode.
        /// Param 1 - Mode
        /// Param 2 - Custom mode - this is system specific, please refer to the individual autopilot specifications for details.
        /// Param 3 - Custom sub mode - this is system specific, please refer to the individual autopilot specifications for details.
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_MODE
        /// </summary>
        MavCmdDoSetMode = 176,
        /// <summary>
        /// Jump to the desired command in the mission list.  Repeat this action only the specified number of times
        /// Param 1 - Sequence number
        /// Param 2 - Repeat count
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_JUMP
        /// </summary>
        MavCmdDoJump = 177,
        /// <summary>
        /// Change speed and/or throttle set points. The value persists until it is overridden or there is a mode change
        /// Param 1 - Speed type of value set in param2 (such as airspeed, ground speed, and so on)
        /// Param 2 - Speed (-1 indicates no change, -2 indicates return to default vehicle speed)
        /// Param 3 - Throttle (-1 indicates no change, -2 indicates return to default vehicle throttle value)
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_DO_CHANGE_SPEED
        /// </summary>
        MavCmdDoChangeSpeed = 178,
        /// <summary>
        /// 
        ///           Sets the home position to either to the current position or a specified position.
        ///           The home position is the default position that the system will return to and land on.
        ///           The position is set automatically by the system during the takeoff (and may also be set using this command).
        ///           Note: the current home position may be emitted in a HOME_POSITION message on request (using MAV_CMD_REQUEST_MESSAGE with param1=242).
        ///         
        /// Param 1 - Use current (1=use current location, 0=use specified location)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Yaw angle. NaN to use default heading
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_DO_SET_HOME
        /// </summary>
        MavCmdDoSetHome = 179,
        /// <summary>
        /// Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
        /// Param 1 - Parameter number
        /// Param 2 - Parameter value
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_PARAMETER
        /// </summary>
        MavCmdDoSetParameter = 180,
        /// <summary>
        /// Set a relay to a condition.
        /// Param 1 - Relay instance number.
        /// Param 2 - Setting. (1=on, 0=off, others possible depending on system hardware)
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_RELAY
        /// </summary>
        MavCmdDoSetRelay = 181,
        /// <summary>
        /// Cycle a relay on and off for a desired number of cycles with a desired period.
        /// Param 1 - Relay instance number.
        /// Param 2 - Cycle count.
        /// Param 3 - Cycle time.
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_REPEAT_RELAY
        /// </summary>
        MavCmdDoRepeatRelay = 182,
        /// <summary>
        /// Set a servo to a desired PWM value.
        /// Param 1 - Servo instance number.
        /// Param 2 - Pulse Width Modulation.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_SERVO
        /// </summary>
        MavCmdDoSetServo = 183,
        /// <summary>
        /// Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
        /// Param 1 - Servo instance number.
        /// Param 2 - Pulse Width Modulation.
        /// Param 3 - Cycle count.
        /// Param 4 - Cycle time.
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_REPEAT_SERVO
        /// </summary>
        MavCmdDoRepeatServo = 184,
        /// <summary>
        /// Terminate flight immediately.
        ///           Flight termination immediately and irreversibly terminates the current flight, returning the vehicle to ground.
        ///           The vehicle will ignore RC or other input until it has been power-cycled.
        ///           Termination may trigger safety measures, including: disabling motors and deployment of parachute on multicopters, and setting flight surfaces to initiate a landing pattern on fixed-wing).
        ///           On multicopters without a parachute it may trigger a crash landing.
        ///           Support for this command can be tested using the protocol bit: MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION.
        ///           Support for this command can also be tested by sending the command with param1=0 (< 0.5); the ACK should be either MAV_RESULT_FAILED or MAV_RESULT_UNSUPPORTED.
        ///         
        /// Param 1 - Flight termination activated if > 0.5. Otherwise not activated and ACK with MAV_RESULT_FAILED.
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_FLIGHTTERMINATION
        /// </summary>
        MavCmdDoFlighttermination = 185,
        /// <summary>
        /// Change altitude set point.
        /// Param 1 - Altitude.
        /// Param 2 - Frame of new altitude.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_CHANGE_ALTITUDE
        /// </summary>
        MavCmdDoChangeAltitude = 186,
        /// <summary>
        /// Sets actuators (e.g. servos) to a desired value. The actuator numbers are mapped to specific outputs (e.g. on any MAIN or AUX PWM or UAVCAN) using a flight-stack specific mechanism (i.e. a parameter).
        /// Param 1 - Actuator 1 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 2 - Actuator 2 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 3 - Actuator 3 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 4 - Actuator 4 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 5 - Actuator 5 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 6 - Actuator 6 value, scaled from [-1 to 1]. NaN to ignore.
        /// Param 7 - Index of actuator set (i.e if set to 1, Actuator 1 becomes Actuator 7)
        /// MAV_CMD_DO_SET_ACTUATOR
        /// </summary>
        MavCmdDoSetActuator = 187,
        /// <summary>
        /// Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts.
        /// 	  It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used.
        /// 	  The Latitude/Longitude/Altitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence.
        /// 	
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_DO_LAND_START
        /// </summary>
        MavCmdDoLandStart = 189,
        /// <summary>
        /// Mission command to perform a landing from a rally point.
        /// Param 1 - Break altitude
        /// Param 2 - Landing speed
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_RALLY_LAND
        /// </summary>
        MavCmdDoRallyLand = 190,
        /// <summary>
        /// Mission command to safely abort an autonomous landing.
        /// Param 1 - Altitude
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GO_AROUND
        /// </summary>
        MavCmdDoGoAround = 191,
        /// <summary>
        /// Reposition the vehicle to a specific WGS84 global position. This command is intended for guided commands (for missions use MAV_CMD_NAV_WAYPOINT instead).
        /// Param 1 - Ground speed, less than 0 (-1) for default
        /// Param 2 - Bitmask of option flags.
        /// Param 3 - Loiter radius for planes. Positive values only, direction is controlled by Yaw value. A value of zero or NaN is ignored. 
        /// Param 4 - Yaw heading. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.). For planes indicates loiter direction (0: clockwise, 1: counter clockwise)
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_DO_REPOSITION
        /// </summary>
        MavCmdDoReposition = 192,
        /// <summary>
        /// If in a GPS controlled position mode, hold the current position or continue.
        /// Param 1 - 0: Pause current mission or reposition command, hold current position. 1: Continue mission. A VTOL capable vehicle should enter hover mode (multicopter and VTOL planes). A plane should loiter with the default loiter radius.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_DO_PAUSE_CONTINUE
        /// </summary>
        MavCmdDoPauseContinue = 193,
        /// <summary>
        /// Set moving direction to forward or reverse.
        /// Param 1 - Direction (0=Forward, 1=Reverse)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_REVERSE
        /// </summary>
        MavCmdDoSetReverse = 194,
        /// <summary>
        /// Sets the region of interest (ROI) to a location. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal is not to react to this message.
        /// Param 1 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude of ROI location
        /// Param 6 - Longitude of ROI location
        /// Param 7 - Altitude of ROI location
        /// MAV_CMD_DO_SET_ROI_LOCATION
        /// </summary>
        MavCmdDoSetRoiLocation = 195,
        /// <summary>
        /// Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
        /// Param 1 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Pitch offset from next waypoint, positive pitching up
        /// Param 6 - Roll offset from next waypoint, positive rolling to the right
        /// Param 7 - Yaw offset from next waypoint, positive yawing to the right
        /// MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
        /// </summary>
        MavCmdDoSetRoiWpnextOffset = 196,
        /// <summary>
        /// Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message. After this command the gimbal manager should go back to manual input if available, and otherwise assume a neutral position.
        /// Param 1 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_ROI_NONE
        /// </summary>
        MavCmdDoSetRoiNone = 197,
        /// <summary>
        /// Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
        /// Param 1 - System ID
        /// Param 2 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// MAV_CMD_DO_SET_ROI_SYSID
        /// </summary>
        MavCmdDoSetRoiSysid = 198,
        /// <summary>
        /// Control onboard camera system.
        /// Param 1 - Camera ID (-1 for all)
        /// Param 2 - Transmission: 0: disabled, 1: enabled compressed, 2: enabled raw
        /// Param 3 - Transmission mode: 0: video stream, >0: single images every n seconds
        /// Param 4 - Recording: 0: disabled, 1: enabled compressed, 2: enabled raw
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_CONTROL_VIDEO
        /// </summary>
        MavCmdDoControlVideo = 200,
        /// <summary>
        /// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
        /// Param 1 - Region of interest mode.
        /// Param 2 - Waypoint index/ target ID (depends on param 1).
        /// Param 3 - Region of interest index. (allows a vehicle to manage multiple ROI's)
        /// Param 4 - Empty
        /// Param 5 - MAV_ROI_WPNEXT: pitch offset from next waypoint, MAV_ROI_LOCATION: latitude
        /// Param 6 - MAV_ROI_WPNEXT: roll offset from next waypoint, MAV_ROI_LOCATION: longitude
        /// Param 7 - MAV_ROI_WPNEXT: yaw offset from next waypoint, MAV_ROI_LOCATION: altitude
        /// MAV_CMD_DO_SET_ROI
        /// </summary>
        MavCmdDoSetRoi = 201,
        /// <summary>
        /// Configure digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
        /// Param 1 - Modes: P, TV, AV, M, Etc.
        /// Param 2 - Shutter speed: Divisor number for one second.
        /// Param 3 - Aperture: F stop number.
        /// Param 4 - ISO number e.g. 80, 100, 200, Etc.
        /// Param 5 - Exposure type enumerator.
        /// Param 6 - Command Identity.
        /// Param 7 - Main engine cut-off time before camera trigger. (0 means no cut-off)
        /// MAV_CMD_DO_DIGICAM_CONFIGURE
        /// </summary>
        MavCmdDoDigicamConfigure = 202,
        /// <summary>
        /// Control digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
        /// Param 1 - Session control e.g. show/hide lens
        /// Param 2 - Zoom's absolute position
        /// Param 3 - Zooming step value to offset zoom from the current position
        /// Param 4 - Focus Locking, Unlocking or Re-locking
        /// Param 5 - Shooting Command
        /// Param 6 - Command Identity
        /// Param 7 - Test shot identifier. If set to 1, image will only be captured, but not counted towards internal frame count.
        /// MAV_CMD_DO_DIGICAM_CONTROL
        /// </summary>
        MavCmdDoDigicamControl = 203,
        /// <summary>
        /// Mission command to configure a camera or antenna mount
        /// Param 1 - Mount operation mode
        /// Param 2 - stabilize roll? (1 = yes, 0 = no)
        /// Param 3 - stabilize pitch? (1 = yes, 0 = no)
        /// Param 4 - stabilize yaw? (1 = yes, 0 = no)
        /// Param 5 - roll input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
        /// Param 6 - pitch input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
        /// Param 7 - yaw input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
        /// MAV_CMD_DO_MOUNT_CONFIGURE
        /// </summary>
        MavCmdDoMountConfigure = 204,
        /// <summary>
        /// Mission command to control a camera or antenna mount
        /// Param 1 - pitch depending on mount mode (degrees or degrees/second depending on pitch input).
        /// Param 2 - roll depending on mount mode (degrees or degrees/second depending on roll input).
        /// Param 3 - yaw depending on mount mode (degrees or degrees/second depending on yaw input).
        /// Param 4 - altitude depending on mount mode.
        /// Param 5 - latitude, set if appropriate mount mode.
        /// Param 6 - longitude, set if appropriate mount mode.
        /// Param 7 - Mount mode.
        /// MAV_CMD_DO_MOUNT_CONTROL
        /// </summary>
        MavCmdDoMountControl = 205,
        /// <summary>
        /// Mission command to set camera trigger distance for this flight. The camera is triggered each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera.
        /// Param 1 - Camera trigger distance. 0 to stop triggering.
        /// Param 2 - Camera shutter integration time. -1 or 0 to ignore
        /// Param 3 - Trigger camera once immediately. (0 = no trigger, 1 = trigger)
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_CAM_TRIGG_DIST
        /// </summary>
        MavCmdDoSetCamTriggDist = 206,
        /// <summary>
        /// Mission command to enable the geofence
        /// Param 1 - enable? (0=disable, 1=enable, 2=disable_floor_only)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_FENCE_ENABLE
        /// </summary>
        MavCmdDoFenceEnable = 207,
        /// <summary>
        /// Mission item/command to release a parachute or enable/disable auto release.
        /// Param 1 - Action
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_PARACHUTE
        /// </summary>
        MavCmdDoParachute = 208,
        /// <summary>
        /// Command to perform motor test.
        /// Param 1 - Motor instance number (from 1 to max number of motors on the vehicle).
        /// Param 2 - Throttle type (whether the Throttle Value in param3 is a percentage, PWM value, etc.)
        /// Param 3 - Throttle value.
        /// Param 4 - Timeout between tests that are run in sequence.
        /// Param 5 - Motor count. Number of motors to test in sequence: 0/1=one motor, 2= two motors, etc. The Timeout (param4) is used between tests.
        /// Param 6 - Motor test order.
        /// Param 7 - Empty
        /// MAV_CMD_DO_MOTOR_TEST
        /// </summary>
        MavCmdDoMotorTest = 209,
        /// <summary>
        /// Change to/from inverted flight.
        /// Param 1 - Inverted flight. (0=normal, 1=inverted)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_INVERTED_FLIGHT
        /// </summary>
        MavCmdDoInvertedFlight = 210,
        /// <summary>
        /// Mission command to operate a gripper.
        /// Param 1 - Gripper instance number.
        /// Param 2 - Gripper action to perform.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GRIPPER
        /// </summary>
        MavCmdDoGripper = 211,
        /// <summary>
        /// Enable/disable autotune.
        /// Param 1 - Enable (1: enable, 0:disable).
        /// Param 2 - Specify which axis are autotuned. 0 indicates autopilot default settings.
        /// Param 3 - Empty.
        /// Param 4 - Empty.
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_DO_AUTOTUNE_ENABLE
        /// </summary>
        MavCmdDoAutotuneEnable = 212,
        /// <summary>
        /// Sets a desired vehicle turn angle and speed change.
        /// Param 1 - Yaw angle to adjust steering by.
        /// Param 2 - Speed.
        /// Param 3 - Final angle. (0=absolute, 1=relative)
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_NAV_SET_YAW_SPEED
        /// </summary>
        MavCmdNavSetYawSpeed = 213,
        /// <summary>
        /// Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera.
        /// Param 1 - Camera trigger cycle time. -1 or 0 to ignore.
        /// Param 2 - Camera shutter integration time. Should be less than trigger cycle time. -1 or 0 to ignore.
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL
        /// </summary>
        MavCmdDoSetCamTriggInterval = 214,
        /// <summary>
        /// Mission command to control a camera or antenna mount, using a quaternion as reference.
        /// Param 1 - quaternion param q1, w (1 in null-rotation)
        /// Param 2 - quaternion param q2, x (0 in null-rotation)
        /// Param 3 - quaternion param q3, y (0 in null-rotation)
        /// Param 4 - quaternion param q4, z (0 in null-rotation)
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_MOUNT_CONTROL_QUAT
        /// </summary>
        MavCmdDoMountControlQuat = 220,
        /// <summary>
        /// set id of master controller
        /// Param 1 - System ID
        /// Param 2 - Component ID
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GUIDED_MASTER
        /// </summary>
        MavCmdDoGuidedMaster = 221,
        /// <summary>
        /// Set limits for external control
        /// Param 1 - Timeout - maximum time that external controller will be allowed to control vehicle. 0 means no timeout.
        /// Param 2 - Altitude (MSL) min - if vehicle moves below this alt, the command will be aborted and the mission will continue. 0 means no lower altitude limit.
        /// Param 3 - Altitude (MSL) max - if vehicle moves above this alt, the command will be aborted and the mission will continue. 0 means no upper altitude limit.
        /// Param 4 - Horizontal move limit - if vehicle moves more than this distance from its location at the moment the command was executed, the command will be aborted and the mission will continue. 0 means no horizontal move limit.
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_GUIDED_LIMITS
        /// </summary>
        MavCmdDoGuidedLimits = 222,
        /// <summary>
        /// Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines
        /// Param 1 - 0: Stop engine, 1:Start Engine
        /// Param 2 - 0: Warm start, 1:Cold start. Controls use of choke where applicable
        /// Param 3 - Height delay. This is for commanding engine start only after the vehicle has gained the specified height. Used in VTOL vehicles during takeoff to start engine after the aircraft is off the ground. Zero for no delay.
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_ENGINE_CONTROL
        /// </summary>
        MavCmdDoEngineControl = 223,
        /// <summary>
        /// 
        ///           Set the mission item with sequence number seq as the current item and emit MISSION_CURRENT (whether or not the mission number changed).
        ///           If a mission is currently being executed, the system will continue to this new mission item on the shortest path, skipping any intermediate mission items.
        /// 	  Note that mission jump repeat counters are not reset unless param2 is set (see MAV_CMD_DO_JUMP param2).
        /// 
        ///           This command may trigger a mission state-machine change on some systems: for example from MISSION_STATE_NOT_STARTED or MISSION_STATE_PAUSED to MISSION_STATE_ACTIVE.
        ///           If the system is in mission mode, on those systems this command might therefore start, restart or resume the mission.
        ///           If the system is not in mission mode this command must not trigger a switch to mission mode.
        /// 
        ///           The mission may be "reset" using param2.
        ///           Resetting sets jump counters to initial values (to reset counters without changing the current mission item set the param1 to `-1`).
        ///           Resetting also explicitly changes a mission state of MISSION_STATE_COMPLETE to MISSION_STATE_PAUSED or MISSION_STATE_ACTIVE, potentially allowing it to resume when it is (next) in a mission mode.
        /// 
        /// 	  The command will ACK with MAV_RESULT_FAILED if the sequence number is out of range (including if there is no mission item).
        ///         
        /// Param 1 - Mission sequence value to set. -1 for the current mission item (use to reset mission without changing current mission item).
        /// Param 2 - Resets mission. 1: true, 0: false. Resets jump counters to initial values and changes mission state "completed" to be "active" or "paused".
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_SET_MISSION_CURRENT
        /// </summary>
        MavCmdDoSetMissionCurrent = 224,
        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
        /// Param 1 - Empty
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_DO_LAST
        /// </summary>
        MavCmdDoLast = 240,
        /// <summary>
        /// Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero.
        /// Param 1 - 1: gyro calibration, 3: gyro temperature calibration
        /// Param 2 - 1: magnetometer calibration
        /// Param 3 - 1: ground pressure calibration
        /// Param 4 - 1: radio RC calibration, 2: RC trim calibration
        /// Param 5 - 1: accelerometer calibration, 2: board level calibration, 3: accelerometer temperature calibration, 4: simple accelerometer calibration
        /// Param 6 - 1: APM: compass/motor interference calibration (PX4: airspeed calibration, deprecated), 2: airspeed calibration
        /// Param 7 - 1: ESC calibration, 3: barometer temperature calibration
        /// MAV_CMD_PREFLIGHT_CALIBRATION
        /// </summary>
        MavCmdPreflightCalibration = 241,
        /// <summary>
        /// Set sensor offsets. This command will be only accepted if in pre-flight mode.
        /// Param 1 - Sensor to adjust the offsets for: 0: gyros, 1: accelerometer, 2: magnetometer, 3: barometer, 4: optical flow, 5: second magnetometer, 6: third magnetometer
        /// Param 2 - X axis offset (or generic dimension 1), in the sensor's raw units
        /// Param 3 - Y axis offset (or generic dimension 2), in the sensor's raw units
        /// Param 4 - Z axis offset (or generic dimension 3), in the sensor's raw units
        /// Param 5 - Generic dimension 4, in the sensor's raw units
        /// Param 6 - Generic dimension 5, in the sensor's raw units
        /// Param 7 - Generic dimension 6, in the sensor's raw units
        /// MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS
        /// </summary>
        MavCmdPreflightSetSensorOffsets = 242,
        /// <summary>
        /// Trigger UAVCAN configuration (actuator ID assignment and direction mapping). Note that this maps to the legacy UAVCAN v0 function UAVCAN_ENUMERATE, which is intended to be executed just once during initial vehicle configuration (it is not a normal pre-flight command and has been poorly named).
        /// Param 1 - 1: Trigger actuator ID assignment and direction mapping. 0: Cancel command.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_PREFLIGHT_UAVCAN
        /// </summary>
        MavCmdPreflightUavcan = 243,
        /// <summary>
        /// Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
        /// Param 1 - Action to perform on the persistent parameter storage
        /// Param 2 - Action to perform on the persistent mission storage
        /// Param 3 - Onboard logging: 0: Ignore, 1: Start default rate logging, -1: Stop logging, > 1: logging rate (e.g. set to 1000 for 1000 Hz logging)
        /// Param 4 - Reserved
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_PREFLIGHT_STORAGE
        /// </summary>
        MavCmdPreflightStorage = 245,
        /// <summary>
        /// Request the reboot or shutdown of system components.
        /// Param 1 - 0: Do nothing for autopilot, 1: Reboot autopilot, 2: Shutdown autopilot, 3: Reboot autopilot and keep it in the bootloader until upgraded.
        /// Param 2 - 0: Do nothing for onboard computer, 1: Reboot onboard computer, 2: Shutdown onboard computer, 3: Reboot onboard computer and keep it in the bootloader until upgraded.
        /// Param 3 - 0: Do nothing for component, 1: Reboot component, 2: Shutdown component, 3: Reboot component and keep it in the bootloader until upgraded
        /// Param 4 - MAVLink Component ID targeted in param3 (0 for all components).
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - WIP: ID (e.g. camera ID -1 for all IDs)
        /// MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN
        /// </summary>
        MavCmdPreflightRebootShutdown = 246,
        /// <summary>
        /// Override current mission with command to pause mission, pause mission and move to position, continue/resume mission. When param 1 indicates that the mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in place or moves to another position.
        /// Param 1 - MAV_GOTO_DO_HOLD: pause mission and either hold or move to specified position (depending on param2), MAV_GOTO_DO_CONTINUE: resume mission.
        /// Param 2 - MAV_GOTO_HOLD_AT_CURRENT_POSITION: hold at current position, MAV_GOTO_HOLD_AT_SPECIFIED_POSITION: hold at specified position.
        /// Param 3 - Coordinate frame of hold point.
        /// Param 4 - Desired yaw angle.
        /// Param 5 - Latitude/X position.
        /// Param 6 - Longitude/Y position.
        /// Param 7 - Altitude/Z position.
        /// MAV_CMD_OVERRIDE_GOTO
        /// </summary>
        MavCmdOverrideGoto = 252,
        /// <summary>
        /// Mission command to set a Camera Auto Mount Pivoting Oblique Survey (Replaces CAM_TRIGG_DIST for this purpose). The camera is triggered each time this distance is exceeded, then the mount moves to the next position. Params 4~6 set-up the angle limits and number of positions for oblique survey, where mount-enabled vehicles automatically roll the camera between shots to emulate an oblique camera setup (providing an increased HFOV). This command can also be used to set the shutter integration time for the camera.
        /// Param 1 - Camera trigger distance. 0 to stop triggering.
        /// Param 2 - Camera shutter integration time. 0 to ignore
        /// Param 3 - The minimum interval in which the camera is capable of taking subsequent pictures repeatedly. 0 to ignore.
        /// Param 4 - Total number of roll positions at which the camera will capture photos (images captures spread evenly across the limits defined by param5).
        /// Param 5 - Angle limits that the camera can be rolled to left and right of center.
        /// Param 6 - Fixed pitch angle that the camera will hold in oblique mode if the mount is actuated in the pitch axis.
        /// Param 7 - Empty
        /// MAV_CMD_OBLIQUE_SURVEY
        /// </summary>
        MavCmdObliqueSurvey = 260,
        /// <summary>
        /// start running a mission
        /// Param 1 - first_item: the first mission item to run
        /// Param 2 - last_item:  the last mission item to run (after this item is run, the mission ends)
        /// MAV_CMD_MISSION_START
        /// </summary>
        MavCmdMissionStart = 300,
        /// <summary>
        /// Actuator testing command. This is similar to MAV_CMD_DO_MOTOR_TEST but operates on the level of output functions, i.e. it is possible to test Motor1 independent from which output it is configured on. Autopilots typically refuse this command while armed.
        /// Param 1 - Output value: 1 means maximum positive output, 0 to center servos or minimum motor thrust (expected to spin), -1 for maximum negative (if not supported by the motors, i.e. motor is not reversible, smaller than 0 maps to NaN). And NaN maps to disarmed (stop the motors).
        /// Param 2 - Timeout after which the test command expires and the output is restored to the previous value. A timeout has to be set for safety reasons. A timeout of 0 means to restore the previous value immediately.
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - Actuator Output function
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_ACTUATOR_TEST
        /// </summary>
        MavCmdActuatorTest = 310,
        /// <summary>
        /// Actuator configuration command.
        /// Param 1 - Actuator configuration action
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - Actuator Output function
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_CONFIGURE_ACTUATOR
        /// </summary>
        MavCmdConfigureActuator = 311,
        /// <summary>
        /// Arms / Disarms a component
        /// Param 1 - 0: disarm, 1: arm
        /// Param 2 - 0: arm-disarm unless prevented by safety checks (i.e. when landed), 21196: force arming/disarming (e.g. allow arming to override preflight checks and disarming in flight)
        /// MAV_CMD_COMPONENT_ARM_DISARM
        /// </summary>
        MavCmdComponentArmDisarm = 400,
        /// <summary>
        /// Instructs a target system to run pre-arm checks.
        ///           This allows preflight checks to be run on demand, which may be useful on systems that normally run them at low rate, or which do not trigger checks when the armable state might have changed.
        ///           This command should return MAV_RESULT_ACCEPTED if it will run the checks.
        ///           The results of the checks are usually then reported in SYS_STATUS messages (this is system-specific).
        ///           The command should return MAV_RESULT_TEMPORARILY_REJECTED if the system is already armed.
        ///         
        /// MAV_CMD_RUN_PREARM_CHECKS
        /// </summary>
        MavCmdRunPrearmChecks = 401,
        /// <summary>
        /// Turns illuminators ON/OFF. An illuminator is a light source that is used for lighting up dark areas external to the system: e.g. a torch or searchlight (as opposed to a light source for illuminating the system itself, e.g. an indicator light).
        /// Param 1 - 0: Illuminators OFF, 1: Illuminators ON
        /// MAV_CMD_ILLUMINATOR_ON_OFF
        /// </summary>
        MavCmdIlluminatorOnOff = 405,
        /// <summary>
        /// Request the home position from the vehicle.
        /// 	  The vehicle will ACK the command and then emit the HOME_POSITION message.
        /// Param 1 - Reserved
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_GET_HOME_POSITION
        /// </summary>
        MavCmdGetHomePosition = 410,
        /// <summary>
        /// Inject artificial failure for testing purposes. Note that autopilots should implement an additional protection before accepting this command such as a specific param setting.
        /// Param 1 - The unit which is affected by the failure.
        /// Param 2 - The type how the failure manifests itself.
        /// Param 3 - Instance affected by failure (0 to signal all).
        /// MAV_CMD_INJECT_FAILURE
        /// </summary>
        MavCmdInjectFailure = 420,
        /// <summary>
        /// Starts receiver pairing.
        /// Param 1 - 0:Spektrum.
        /// Param 2 - RC type.
        /// MAV_CMD_START_RX_PAIR
        /// </summary>
        MavCmdStartRxPair = 500,
        /// <summary>
        /// 
        ///           Request the interval between messages for a particular MAVLink message ID.
        ///           The receiver should ACK the command and then emit its response in a MESSAGE_INTERVAL message.
        ///         
        /// Param 1 - The MAVLink message ID
        /// MAV_CMD_GET_MESSAGE_INTERVAL
        /// </summary>
        MavCmdGetMessageInterval = 510,
        /// <summary>
        /// Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.
        /// Param 1 - The MAVLink message ID
        /// Param 2 - The interval between two messages. -1: disable. 0: request default rate (which may be zero).
        /// Param 7 - Target address of message stream (if message has target address fields). 0: Flight-stack default (recommended), 1: address of requestor, 2: broadcast.
        /// MAV_CMD_SET_MESSAGE_INTERVAL
        /// </summary>
        MavCmdSetMessageInterval = 511,
        /// <summary>
        /// Request the target system(s) emit a single instance of a specified message (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL).
        /// Param 1 - The MAVLink message ID of the requested message.
        /// Param 2 - Use for index ID, if required. Otherwise, the use of this parameter (if any) must be defined in the requested message. By default assumed not used (0).
        /// Param 3 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 4 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 5 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 6 - The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
        /// Param 7 - Target address for requested message (if message has target address fields). 0: Flight-stack default, 1: address of requestor, 2: broadcast.
        /// MAV_CMD_REQUEST_MESSAGE
        /// </summary>
        MavCmdRequestMessage = 512,
        /// <summary>
        /// Request MAVLink protocol version compatibility. All receivers should ACK the command and then emit their capabilities in an PROTOCOL_VERSION message
        /// Param 1 - 1: Request supported protocol versions by all nodes on the network
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_PROTOCOL_VERSION
        /// </summary>
        MavCmdRequestProtocolVersion = 519,
        /// <summary>
        /// Request autopilot capabilities. The receiver should ACK the command and then emit its capabilities in an AUTOPILOT_VERSION message
        /// Param 1 - 1: Request autopilot version
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES
        /// </summary>
        MavCmdRequestAutopilotCapabilities = 520,
        /// <summary>
        /// Request camera information (CAMERA_INFORMATION).
        /// Param 1 - 0: No action 1: Request camera capabilities
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_CAMERA_INFORMATION
        /// </summary>
        MavCmdRequestCameraInformation = 521,
        /// <summary>
        /// Request camera settings (CAMERA_SETTINGS).
        /// Param 1 - 0: No Action 1: Request camera settings
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_CAMERA_SETTINGS
        /// </summary>
        MavCmdRequestCameraSettings = 522,
        /// <summary>
        /// Request storage information (STORAGE_INFORMATION). Use the command's target_component to target a specific component's storage.
        /// Param 1 - Storage ID (0 for all, 1 for first, 2 for second, etc.)
        /// Param 2 - 0: No Action 1: Request storage information
        /// Param 3 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_STORAGE_INFORMATION
        /// </summary>
        MavCmdRequestStorageInformation = 525,
        /// <summary>
        /// Format a storage medium. Once format is complete, a STORAGE_INFORMATION message is sent. Use the command's target_component to target a specific component's storage.
        /// Param 1 - Storage ID (1 for first, 2 for second, etc.)
        /// Param 2 - Format storage (and reset image log). 0: No action 1: Format storage
        /// Param 3 - Reset Image Log (without formatting storage medium). This will reset CAMERA_CAPTURE_STATUS.image_count and CAMERA_IMAGE_CAPTURED.image_index. 0: No action 1: Reset Image Log
        /// Param 4 - Reserved (all remaining params)
        /// MAV_CMD_STORAGE_FORMAT
        /// </summary>
        MavCmdStorageFormat = 526,
        /// <summary>
        /// Request camera capture status (CAMERA_CAPTURE_STATUS)
        /// Param 1 - 0: No Action 1: Request camera capture status
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS
        /// </summary>
        MavCmdRequestCameraCaptureStatus = 527,
        /// <summary>
        /// Request flight information (FLIGHT_INFORMATION)
        /// Param 1 - 1: Request flight information
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_REQUEST_FLIGHT_INFORMATION
        /// </summary>
        MavCmdRequestFlightInformation = 528,
        /// <summary>
        /// Reset all camera settings to Factory Default
        /// Param 1 - 0: No Action 1: Reset all settings
        /// Param 2 - Reserved (all remaining params)
        /// MAV_CMD_RESET_CAMERA_SETTINGS
        /// </summary>
        MavCmdResetCameraSettings = 529,
        /// <summary>
        /// Set camera running mode. Use NaN for reserved values. GCS will send a MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the camera supports video streaming.
        /// Param 1 - Reserved (Set to 0)
        /// Param 2 - Camera mode
        /// Param 3 - 
        /// Param 4 - 
        /// Param 7 - 
        /// MAV_CMD_SET_CAMERA_MODE
        /// </summary>
        MavCmdSetCameraMode = 530,
        /// <summary>
        /// Set camera zoom. Camera must respond with a CAMERA_SETTINGS message (on success).
        /// Param 1 - Zoom type
        /// Param 2 - Zoom value. The range of valid values depend on the zoom type.
        /// Param 3 - 
        /// Param 4 - 
        /// Param 7 - 
        /// MAV_CMD_SET_CAMERA_ZOOM
        /// </summary>
        MavCmdSetCameraZoom = 531,
        /// <summary>
        /// Set camera focus. Camera must respond with a CAMERA_SETTINGS message (on success).
        /// Param 1 - Focus type
        /// Param 2 - Focus value
        /// Param 3 - 
        /// Param 4 - 
        /// Param 7 - 
        /// MAV_CMD_SET_CAMERA_FOCUS
        /// </summary>
        MavCmdSetCameraFocus = 532,
        /// <summary>
        /// Set that a particular storage is the preferred location for saving photos, videos, and/or other media (e.g. to set that an SD card is used for storing videos).
        ///           There can only be one preferred save location for each particular media type: setting a media usage flag will clear/reset that same flag if set on any other storage.
        ///           If no flag is set the system should use its default storage.
        ///           A target system can choose to always use default storage, in which case it should ACK the command with MAV_RESULT_UNSUPPORTED.
        ///           A target system can choose to not allow a particular storage to be set as preferred storage, in which case it should ACK the command with MAV_RESULT_DENIED.
        /// Param 1 - Storage ID (1 for first, 2 for second, etc.)
        /// Param 2 - Usage flags
        /// MAV_CMD_SET_STORAGE_USAGE
        /// </summary>
        MavCmdSetStorageUsage = 533,
        /// <summary>
        /// Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.
        /// Param 1 - Tag.
        /// MAV_CMD_JUMP_TAG
        /// </summary>
        MavCmdJumpTag = 600,
        /// <summary>
        /// Jump to the matching tag in the mission list. Repeat this action for the specified number of times. A mission should contain a single matching tag for each jump. If this is not the case then a jump to a missing tag should complete the mission, and a jump where there are multiple matching tags should always select the one with the lowest mission sequence number.
        /// Param 1 - Target tag to jump to.
        /// Param 2 - Repeat count.
        /// MAV_CMD_DO_JUMP_TAG
        /// </summary>
        MavCmdDoJumpTag = 601,
        /// <summary>
        /// Set gimbal manager pitch/yaw setpoints (low rate command). It is possible to set combinations of the values below. E.g. an angle as well as a desired angular rate can be used to get to this angle at a certain angular rate, or an angular rate only will result in continuous turning. NaN is to be used to signal unset. Note: only the gimbal manager will react to this command - it will be ignored by a gimbal device. Use GIMBAL_MANAGER_SET_PITCHYAW if you need to stream pitch/yaw setpoints at higher rate. 
        /// Param 1 - Pitch angle (positive to pitch up, relative to vehicle for FOLLOW mode, relative to world horizon for LOCK mode).
        /// Param 2 - Yaw angle (positive to yaw to the right, relative to vehicle for FOLLOW mode, absolute to North for LOCK mode).
        /// Param 3 - Pitch rate (positive to pitch up).
        /// Param 4 - Yaw rate (positive to yaw to the right).
        /// Param 5 - Gimbal manager flags to use.
        /// Param 7 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW
        /// </summary>
        MavCmdDoGimbalManagerPitchyaw = 1000,
        /// <summary>
        /// Gimbal configuration to set which sysid/compid is in primary and secondary control.
        /// Param 1 - Sysid for primary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 2 - Compid for primary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 3 - Sysid for secondary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 4 - Compid for secondary control (0: no one in control, -1: leave unchanged, -2: set itself in control (for missions where the own sysid is still unknown), -3: remove control if currently in control).
        /// Param 7 - Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
        /// </summary>
        MavCmdDoGimbalManagerConfigure = 1001,
        /// <summary>
        /// Start image capture sequence. CAMERA_IMAGE_CAPTURED must be emitted after each capture.
        /// 
        ///           Param1 (id) may be used to specify the target camera: 0: all cameras, 1 to 6: autopilot-connected cameras, 7-255: MAVLink camera component ID.
        ///           It is needed in order to target specific cameras connected to the autopilot, or specific sensors in a multi-sensor camera (neither of which have a distinct MAVLink component ID).
        ///           It is also needed to specify the target camera in missions.
        /// 
        ///           When used in a mission, an autopilot should execute the MAV_CMD for a specified local camera (param1 = 1-6), or resend it as a command if it is intended for a MAVLink camera (param1 = 7 - 255), setting the command's target_component as the param1 value (and setting param1 in the command to zero).
        ///           If the param1 is 0 the autopilot should do both.
        ///           
        ///           When sent in a command the target MAVLink address is set using target_component.
        ///           If addressed specifically to an autopilot: param1 should be used in the same way as it is for missions (though command should NACK with MAV_RESULT_DENIED if a specified local camera does not exist).
        ///           If addressed to a MAVLink camera, param 1 can be used to address all cameras (0), or to separately address 1 to 7 individual sensors. Other values should be NACKed with MAV_RESULT_DENIED.
        ///           If the command is broadcast (target_component is 0) then param 1 should be set to 0 (any other value should be NACKED with MAV_RESULT_DENIED). An autopilot would trigger any local cameras and forward the command to all channels.
        ///         
        /// Param 1 - Target camera ID. 7 to 255: MAVLink camera component id. 1 to 6 for cameras that don't have a distinct component id (such as autopilot-attached cameras). 0: all cameras. This is used to specifically target autopilot-connected cameras or individual sensors in a multi-sensor MAVLink camera. It is also used to target specific cameras when the MAV_CMD is used in a mission
        /// Param 2 - Desired elapsed time between two consecutive pictures (in seconds). Minimum values depend on hardware (typically greater than 2 seconds).
        /// Param 3 - Total number of images to capture. 0 to capture forever/until MAV_CMD_IMAGE_STOP_CAPTURE.
        /// Param 4 - Capture sequence number starting from 1. This is only valid for single-capture (param3 == 1), otherwise set to 0. Increment the capture ID for each capture command to prevent double captures when a command is re-transmitted.
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_IMAGE_START_CAPTURE
        /// </summary>
        MavCmdImageStartCapture = 2000,
        /// <summary>
        /// Stop image capture sequence.
        ///         
        ///           Param1 (id) may be used to specify the target camera: 0: all cameras, 1 to 6: autopilot-connected cameras, 7-255: MAVLink camera component ID.
        ///           It is needed in order to target specific cameras connected to the autopilot, or specific sensors in a multi-sensor camera (neither of which have a distinct MAVLink component ID).
        ///           It is also needed to specify the target camera in missions.
        /// 
        ///           When used in a mission, an autopilot should execute the MAV_CMD for a specified local camera (param1 = 1-6), or resend it as a command if it is intended for a MAVLink camera (param1 = 7 - 255), setting the command's target_component as the param1 value (and setting param1 in the command to zero).
        ///           If the param1 is 0 the autopilot should do both.
        /// 
        ///           When sent in a command the target MAVLink address is set using target_component.
        ///           If addressed specifically to an autopilot: param1 should be used in the same way as it is for missions (though command should NACK with MAV_RESULT_DENIED if a specified local camera does not exist).
        ///           If addressed to a MAVLink camera, param1 can be used to address all cameras (0), or to separately address 1 to 7 individual sensors. Other values should be NACKed with MAV_RESULT_DENIED.
        ///           If the command is broadcast (target_component is 0) then param 1 should be set to 0 (any other value should be NACKED with MAV_RESULT_DENIED). An autopilot would trigger any local cameras and forward the command to all channels.
        ///         
        /// Param 1 - Target camera ID. 7 to 255: MAVLink camera component id. 1 to 6 for cameras that don't have a distinct component id (such as autopilot-attached cameras). 0: all cameras. This is used to specifically target autopilot-connected cameras or individual sensors in a multi-sensor MAVLink camera. It is also used to target specific cameras when the MAV_CMD is used in a mission
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_IMAGE_STOP_CAPTURE
        /// </summary>
        MavCmdImageStopCapture = 2001,
        /// <summary>
        /// Re-request a CAMERA_IMAGE_CAPTURED message.
        /// Param 1 - Sequence number for missing CAMERA_IMAGE_CAPTURED message
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE
        /// </summary>
        MavCmdRequestCameraImageCapture = 2002,
        /// <summary>
        /// Enable or disable on-board camera triggering system.
        /// Param 1 - Trigger enable/disable (0 for disable, 1 for start), -1 to ignore
        /// Param 2 - 1 to reset the trigger sequence, -1 or 0 to ignore
        /// Param 3 - 1 to pause triggering, but without switching the camera off or retracting it. -1 to ignore
        /// MAV_CMD_DO_TRIGGER_CONTROL
        /// </summary>
        MavCmdDoTriggerControl = 2003,
        /// <summary>
        /// If the camera supports point visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking.
        /// Param 1 - Point to track x value (normalized 0..1, 0 is left, 1 is right).
        /// Param 2 - Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
        /// Param 3 - Point radius (normalized 0..1, 0 is image left, 1 is image right).
        /// MAV_CMD_CAMERA_TRACK_POINT
        /// </summary>
        MavCmdCameraTrackPoint = 2004,
        /// <summary>
        /// If the camera supports rectangle visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking.
        /// Param 1 - Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
        /// Param 2 - Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
        /// Param 3 - Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
        /// Param 4 - Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
        /// MAV_CMD_CAMERA_TRACK_RECTANGLE
        /// </summary>
        MavCmdCameraTrackRectangle = 2005,
        /// <summary>
        /// Stops ongoing tracking.
        /// MAV_CMD_CAMERA_STOP_TRACKING
        /// </summary>
        MavCmdCameraStopTracking = 2010,
        /// <summary>
        /// Starts video capture (recording).
        /// Param 1 - Video Stream ID (0 for all streams)
        /// Param 2 - Frequency CAMERA_CAPTURE_STATUS messages should be sent while recording (0 for no messages, otherwise frequency)
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_VIDEO_START_CAPTURE
        /// </summary>
        MavCmdVideoStartCapture = 2500,
        /// <summary>
        /// Stop the current video capture (recording).
        /// Param 1 - Video Stream ID (0 for all streams)
        /// Param 2 - 
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_VIDEO_STOP_CAPTURE
        /// </summary>
        MavCmdVideoStopCapture = 2501,
        /// <summary>
        /// Start video streaming
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_VIDEO_START_STREAMING
        /// </summary>
        MavCmdVideoStartStreaming = 2502,
        /// <summary>
        /// Stop the given video stream
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_VIDEO_STOP_STREAMING
        /// </summary>
        MavCmdVideoStopStreaming = 2503,
        /// <summary>
        /// Request video stream information (VIDEO_STREAM_INFORMATION)
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION
        /// </summary>
        MavCmdRequestVideoStreamInformation = 2504,
        /// <summary>
        /// Request video stream status (VIDEO_STREAM_STATUS)
        /// Param 1 - Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
        /// MAV_CMD_REQUEST_VIDEO_STREAM_STATUS
        /// </summary>
        MavCmdRequestVideoStreamStatus = 2505,
        /// <summary>
        /// Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)
        /// Param 1 - Format: 0: ULog
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_LOGGING_START
        /// </summary>
        MavCmdLoggingStart = 2510,
        /// <summary>
        /// Request to stop streaming log data over MAVLink
        /// Param 1 - Reserved (set to 0)
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_LOGGING_STOP
        /// </summary>
        MavCmdLoggingStop = 2511,
        /// <summary>
        /// 
        /// Param 1 - Landing gear ID (default: 0, -1 for all)
        /// Param 2 - Landing gear position (Down: 0, Up: 1, NaN for no change)
        /// Param 3 - 
        /// Param 4 - 
        /// Param 5 - 
        /// Param 6 - 
        /// Param 7 - 
        /// MAV_CMD_AIRFRAME_CONFIGURATION
        /// </summary>
        MavCmdAirframeConfiguration = 2520,
        /// <summary>
        /// Request to start/stop transmitting over the high latency telemetry
        /// Param 1 - Control transmission over high latency telemetry (0: stop, 1: start)
        /// Param 2 - Empty
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Empty
        /// Param 6 - Empty
        /// Param 7 - Empty
        /// MAV_CMD_CONTROL_HIGH_LATENCY
        /// </summary>
        MavCmdControlHighLatency = 2600,
        /// <summary>
        /// Create a panorama at the current position
        /// Param 1 - Viewing angle horizontal of the panorama (+- 0.5 the total angle)
        /// Param 2 - Viewing angle vertical of panorama.
        /// Param 3 - Speed of the horizontal rotation.
        /// Param 4 - Speed of the vertical rotation.
        /// MAV_CMD_PANORAMA_CREATE
        /// </summary>
        MavCmdPanoramaCreate = 2800,
        /// <summary>
        /// Request VTOL transition
        /// Param 1 - The target VTOL state. For normal transitions, only MAV_VTOL_STATE_MC and MAV_VTOL_STATE_FW can be used.
        /// Param 2 - Force immediate transition to the specified MAV_VTOL_STATE. 1: Force immediate, 0: normal transition. Can be used, for example, to trigger an emergency "Quadchute". Caution: Can be dangerous/damage vehicle, depending on autopilot implementation of this command.
        /// MAV_CMD_DO_VTOL_TRANSITION
        /// </summary>
        MavCmdDoVtolTransition = 3000,
        /// <summary>
        /// Request authorization to arm the vehicle to a external entity, the arm authorizer is responsible to request all data that is needs from the vehicle before authorize or deny the request.
        /// 		If approved the COMMAND_ACK message progress field should be set with period of time that this authorization is valid in seconds.
        /// 		If the authorization is denied COMMAND_ACK.result_param2 should be set with one of the reasons in ARM_AUTH_DENIED_REASON.
        ///         
        /// Param 1 - Vehicle system id, this way ground station can request arm authorization on behalf of any vehicle
        /// MAV_CMD_ARM_AUTHORIZATION_REQUEST
        /// </summary>
        MavCmdArmAuthorizationRequest = 3001,
        /// <summary>
        /// This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocities along all three axes.
        ///                   
        /// MAV_CMD_SET_GUIDED_SUBMODE_STANDARD
        /// </summary>
        MavCmdSetGuidedSubmodeStandard = 4000,
        /// <summary>
        /// This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.
        ///                   
        /// Param 1 - Radius of desired circle in CIRCLE_MODE
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Target latitude of center of circle in CIRCLE_MODE
        /// Param 6 - Target longitude of center of circle in CIRCLE_MODE
        /// MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE
        /// </summary>
        MavCmdSetGuidedSubmodeCircle = 4001,
        /// <summary>
        /// Delay mission state machine until gate has been reached.
        /// Param 1 - Geometry: 0: orthogonal to path between previous and next waypoint.
        /// Param 2 - Altitude: 0: ignore altitude
        /// Param 3 - Empty
        /// Param 4 - Empty
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_CONDITION_GATE
        /// </summary>
        MavCmdConditionGate = 4501,
        /// <summary>
        /// Fence return point (there can only be one such point in a geofence definition). If rally points are supported they should be used instead.
        /// Param 1 - Reserved
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_FENCE_RETURN_POINT
        /// </summary>
        MavCmdNavFenceReturnPoint = 5000,
        /// <summary>
        /// Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required.
        ///         
        /// Param 1 - Polygon vertex count
        /// Param 2 - Vehicle must be inside ALL inclusion zones in a single group, vehicle must be inside at least one group, must be the same for all points in each polygon
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION
        /// </summary>
        MavCmdNavFencePolygonVertexInclusion = 5001,
        /// <summary>
        /// Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required.
        ///         
        /// Param 1 - Polygon vertex count
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION
        /// </summary>
        MavCmdNavFencePolygonVertexExclusion = 5002,
        /// <summary>
        /// Circular fence area. The vehicle must stay inside this area.
        ///         
        /// Param 1 - Radius.
        /// Param 2 - Vehicle must be inside ALL inclusion zones in a single group, vehicle must be inside at least one group
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION
        /// </summary>
        MavCmdNavFenceCircleInclusion = 5003,
        /// <summary>
        /// Circular fence area. The vehicle must stay outside this area.
        ///         
        /// Param 1 - Radius.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Reserved
        /// MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION
        /// </summary>
        MavCmdNavFenceCircleExclusion = 5004,
        /// <summary>
        /// Rally point. You can have multiple rally points defined.
        ///         
        /// Param 1 - Reserved
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Latitude
        /// Param 6 - Longitude
        /// Param 7 - Altitude
        /// MAV_CMD_NAV_RALLY_POINT
        /// </summary>
        MavCmdNavRallyPoint = 5100,
        /// <summary>
        /// Commands the vehicle to respond with a sequence of messages UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note that some of the response messages can be lost, which the receiver can detect easily by checking whether every received UAVCAN_NODE_STATUS has a matching message UAVCAN_NODE_INFO received earlier; if not, this command should be sent again in order to request re-transmission of the node information messages.
        /// Param 1 - Reserved (set to 0)
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_UAVCAN_GET_NODE_INFO
        /// </summary>
        MavCmdUavcanGetNodeInfo = 5200,
        /// <summary>
        /// Trigger the start of an ADSB-out IDENT. This should only be used when requested to do so by an Air Traffic Controller in controlled airspace. This starts the IDENT which is then typically held for 18 seconds by the hardware per the Mode A, C, and S transponder spec.
        /// Param 1 - Reserved (set to 0)
        /// Param 2 - Reserved (set to 0)
        /// Param 3 - Reserved (set to 0)
        /// Param 4 - Reserved (set to 0)
        /// Param 5 - Reserved (set to 0)
        /// Param 6 - Reserved (set to 0)
        /// Param 7 - Reserved (set to 0)
        /// MAV_CMD_DO_ADSB_OUT_IDENT
        /// </summary>
        MavCmdDoAdsbOutIdent = 10001,
        /// <summary>
        /// Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.
        /// Param 1 - Operation mode. 0: prepare single payload deploy (overwriting previous requests), but do not execute it. 1: execute payload deploy immediately (rejecting further deploy commands during execution, but allowing abort). 2: add payload deploy to existing deployment list.
        /// Param 2 - Desired approach vector in compass heading. A negative value indicates the system can define the approach vector at will.
        /// Param 3 - Desired ground speed at release time. This can be overridden by the airframe in case it needs to meet minimum airspeed. A negative value indicates the system can define the ground speed at will.
        /// Param 4 - Minimum altitude clearance to the release position. A negative value indicates the system can define the clearance at will.
        /// Param 5 - Latitude.
        /// Param 6 - Longitude.
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_PAYLOAD_PREPARE_DEPLOY
        /// </summary>
        MavCmdPayloadPrepareDeploy = 30001,
        /// <summary>
        /// Control the payload deployment.
        /// Param 1 - Operation mode. 0: Abort deployment, continue normal mission. 1: switch to payload deployment mode. 100: delete first payload deployment request. 101: delete all payload deployment requests.
        /// Param 2 - Reserved
        /// Param 3 - Reserved
        /// Param 4 - Reserved
        /// Param 5 - Reserved
        /// Param 6 - Reserved
        /// Param 7 - Reserved
        /// MAV_CMD_PAYLOAD_CONTROL_DEPLOY
        /// </summary>
        MavCmdPayloadControlDeploy = 30002,
        /// <summary>
        /// Magnetometer calibration based on provided known yaw. This allows for fast calibration using WMM field tables in the vehicle, given only the known yaw of the vehicle. If Latitude and longitude are both zero then use the current vehicle location.
        /// Param 1 - Yaw of vehicle in earth frame.
        /// Param 2 - CompassMask, 0 for all.
        /// Param 3 - Latitude.
        /// Param 4 - Longitude.
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_FIXED_MAG_CAL_YAW
        /// </summary>
        MavCmdFixedMagCalYaw = 42006,
        /// <summary>
        /// Command to operate winch.
        /// Param 1 - Winch instance number.
        /// Param 2 - Action to perform.
        /// Param 3 - Length of line to release (negative to wind).
        /// Param 4 - Release rate (negative to wind).
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_DO_WINCH
        /// </summary>
        MavCmdDoWinch = 42600,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_1
        /// </summary>
        MavCmdWaypointUser1 = 31000,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_2
        /// </summary>
        MavCmdWaypointUser2 = 31001,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_3
        /// </summary>
        MavCmdWaypointUser3 = 31002,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_4
        /// </summary>
        MavCmdWaypointUser4 = 31003,
        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_WAYPOINT_USER_5
        /// </summary>
        MavCmdWaypointUser5 = 31004,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_1
        /// </summary>
        MavCmdSpatialUser1 = 31005,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_2
        /// </summary>
        MavCmdSpatialUser2 = 31006,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_3
        /// </summary>
        MavCmdSpatialUser3 = 31007,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_4
        /// </summary>
        MavCmdSpatialUser4 = 31008,
        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - Latitude unscaled
        /// Param 6 - Longitude unscaled
        /// Param 7 - Altitude (MSL)
        /// MAV_CMD_SPATIAL_USER_5
        /// </summary>
        MavCmdSpatialUser5 = 31009,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_1
        /// </summary>
        MavCmdUser1 = 31010,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_2
        /// </summary>
        MavCmdUser2 = 31011,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_3
        /// </summary>
        MavCmdUser3 = 31012,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_4
        /// </summary>
        MavCmdUser4 = 31013,
        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// Param 1 - User defined
        /// Param 2 - User defined
        /// Param 3 - User defined
        /// Param 4 - User defined
        /// Param 5 - User defined
        /// Param 6 - User defined
        /// Param 7 - User defined
        /// MAV_CMD_USER_5
        /// </summary>
        MavCmdUser5 = 31014,
        /// <summary>
        /// Request forwarding of CAN packets from the given CAN bus to this component. CAN Frames are sent using CAN_FRAME and CANFD_FRAME messages
        /// Param 1 - Bus number (0 to disable forwarding, 1 for first bus, 2 for 2nd bus, 3 for 3rd bus).
        /// Param 2 - Empty.
        /// Param 3 - Empty.
        /// Param 4 - Empty.
        /// Param 5 - Empty.
        /// Param 6 - Empty.
        /// Param 7 - Empty.
        /// MAV_CMD_CAN_FORWARD
        /// </summary>
        MavCmdCanForward = 32000,
    }

    /// <summary>
    /// A data stream is not a fixed set of messages, but rather a
    ///      recommendation to the autopilot software. Individual autopilots may or may not obey
    ///      the recommended messages.
    ///  MAV_DATA_STREAM
    /// </summary>
    public enum MavDataStream:uint
    {
        /// <summary>
        /// Enable all data streams
        /// MAV_DATA_STREAM_ALL
        /// </summary>
        MavDataStreamAll = 0,
        /// <summary>
        /// Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
        /// MAV_DATA_STREAM_RAW_SENSORS
        /// </summary>
        MavDataStreamRawSensors = 1,
        /// <summary>
        /// Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
        /// MAV_DATA_STREAM_EXTENDED_STATUS
        /// </summary>
        MavDataStreamExtendedStatus = 2,
        /// <summary>
        /// Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
        /// MAV_DATA_STREAM_RC_CHANNELS
        /// </summary>
        MavDataStreamRcChannels = 3,
        /// <summary>
        /// Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.
        /// MAV_DATA_STREAM_RAW_CONTROLLER
        /// </summary>
        MavDataStreamRawController = 4,
        /// <summary>
        /// Enable LOCAL_POSITION, GLOBAL_POSITION_INT messages.
        /// MAV_DATA_STREAM_POSITION
        /// </summary>
        MavDataStreamPosition = 6,
        /// <summary>
        /// Dependent on the autopilot
        /// MAV_DATA_STREAM_EXTRA1
        /// </summary>
        MavDataStreamExtra1 = 10,
        /// <summary>
        /// Dependent on the autopilot
        /// MAV_DATA_STREAM_EXTRA2
        /// </summary>
        MavDataStreamExtra2 = 11,
        /// <summary>
        /// Dependent on the autopilot
        /// MAV_DATA_STREAM_EXTRA3
        /// </summary>
        MavDataStreamExtra3 = 12,
    }

    /// <summary>
    /// The ROI (region of interest) for the vehicle. This can be
    ///                 be used by the vehicle for camera/vehicle attitude alignment (see
    ///                 MAV_CMD_NAV_ROI).
    ///  MAV_ROI
    /// </summary>
    public enum MavRoi:uint
    {
        /// <summary>
        /// No region of interest.
        /// MAV_ROI_NONE
        /// </summary>
        MavRoiNone = 0,
        /// <summary>
        /// Point toward next waypoint, with optional pitch/roll/yaw offset.
        /// MAV_ROI_WPNEXT
        /// </summary>
        MavRoiWpnext = 1,
        /// <summary>
        /// Point toward given waypoint.
        /// MAV_ROI_WPINDEX
        /// </summary>
        MavRoiWpindex = 2,
        /// <summary>
        /// Point toward fixed location.
        /// MAV_ROI_LOCATION
        /// </summary>
        MavRoiLocation = 3,
        /// <summary>
        /// Point toward of given id.
        /// MAV_ROI_TARGET
        /// </summary>
        MavRoiTarget = 4,
    }

    /// <summary>
    /// Specifies the datatype of a MAVLink parameter.
    ///  MAV_PARAM_TYPE
    /// </summary>
    public enum MavParamType:uint
    {
        /// <summary>
        /// 8-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT8
        /// </summary>
        MavParamTypeUint8 = 1,
        /// <summary>
        /// 8-bit signed integer
        /// MAV_PARAM_TYPE_INT8
        /// </summary>
        MavParamTypeInt8 = 2,
        /// <summary>
        /// 16-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT16
        /// </summary>
        MavParamTypeUint16 = 3,
        /// <summary>
        /// 16-bit signed integer
        /// MAV_PARAM_TYPE_INT16
        /// </summary>
        MavParamTypeInt16 = 4,
        /// <summary>
        /// 32-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT32
        /// </summary>
        MavParamTypeUint32 = 5,
        /// <summary>
        /// 32-bit signed integer
        /// MAV_PARAM_TYPE_INT32
        /// </summary>
        MavParamTypeInt32 = 6,
        /// <summary>
        /// 64-bit unsigned integer
        /// MAV_PARAM_TYPE_UINT64
        /// </summary>
        MavParamTypeUint64 = 7,
        /// <summary>
        /// 64-bit signed integer
        /// MAV_PARAM_TYPE_INT64
        /// </summary>
        MavParamTypeInt64 = 8,
        /// <summary>
        /// 32-bit floating-point
        /// MAV_PARAM_TYPE_REAL32
        /// </summary>
        MavParamTypeReal32 = 9,
        /// <summary>
        /// 64-bit floating-point
        /// MAV_PARAM_TYPE_REAL64
        /// </summary>
        MavParamTypeReal64 = 10,
    }

    /// <summary>
    /// Specifies the datatype of a MAVLink extended parameter.
    ///  MAV_PARAM_EXT_TYPE
    /// </summary>
    public enum MavParamExtType:uint
    {
        /// <summary>
        /// 8-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT8
        /// </summary>
        MavParamExtTypeUint8 = 1,
        /// <summary>
        /// 8-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT8
        /// </summary>
        MavParamExtTypeInt8 = 2,
        /// <summary>
        /// 16-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT16
        /// </summary>
        MavParamExtTypeUint16 = 3,
        /// <summary>
        /// 16-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT16
        /// </summary>
        MavParamExtTypeInt16 = 4,
        /// <summary>
        /// 32-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT32
        /// </summary>
        MavParamExtTypeUint32 = 5,
        /// <summary>
        /// 32-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT32
        /// </summary>
        MavParamExtTypeInt32 = 6,
        /// <summary>
        /// 64-bit unsigned integer
        /// MAV_PARAM_EXT_TYPE_UINT64
        /// </summary>
        MavParamExtTypeUint64 = 7,
        /// <summary>
        /// 64-bit signed integer
        /// MAV_PARAM_EXT_TYPE_INT64
        /// </summary>
        MavParamExtTypeInt64 = 8,
        /// <summary>
        /// 32-bit floating-point
        /// MAV_PARAM_EXT_TYPE_REAL32
        /// </summary>
        MavParamExtTypeReal32 = 9,
        /// <summary>
        /// 64-bit floating-point
        /// MAV_PARAM_EXT_TYPE_REAL64
        /// </summary>
        MavParamExtTypeReal64 = 10,
        /// <summary>
        /// Custom Type
        /// MAV_PARAM_EXT_TYPE_CUSTOM
        /// </summary>
        MavParamExtTypeCustom = 11,
    }

    /// <summary>
    /// Result from a MAVLink command (MAV_CMD)
    ///  MAV_RESULT
    /// </summary>
    public enum MavResult:uint
    {
        /// <summary>
        /// Command is valid (is supported and has valid parameters), and was executed.
        /// MAV_RESULT_ACCEPTED
        /// </summary>
        MavResultAccepted = 0,
        /// <summary>
        /// Command is valid, but cannot be executed at this time. This is used to indicate a problem that should be fixed just by waiting (e.g. a state machine is busy, can't arm because have not got GPS lock, etc.). Retrying later should work.
        /// MAV_RESULT_TEMPORARILY_REJECTED
        /// </summary>
        MavResultTemporarilyRejected = 1,
        /// <summary>
        /// Command is invalid (is supported but has invalid parameters). Retrying same command and parameters will not work.
        /// MAV_RESULT_DENIED
        /// </summary>
        MavResultDenied = 2,
        /// <summary>
        /// Command is not supported (unknown).
        /// MAV_RESULT_UNSUPPORTED
        /// </summary>
        MavResultUnsupported = 3,
        /// <summary>
        /// Command is valid, but execution has failed. This is used to indicate any non-temporary or unexpected problem, i.e. any problem that must be fixed before the command can succeed/be retried. For example, attempting to write a file when out of memory, attempting to arm when sensors are not calibrated, etc.
        /// MAV_RESULT_FAILED
        /// </summary>
        MavResultFailed = 4,
        /// <summary>
        /// Command is valid and is being executed. This will be followed by further progress updates, i.e. the component may send further COMMAND_ACK messages with result MAV_RESULT_IN_PROGRESS (at a rate decided by the implementation), and must terminate by sending a COMMAND_ACK message with final result of the operation. The COMMAND_ACK.progress field can be used to indicate the progress of the operation.
        /// MAV_RESULT_IN_PROGRESS
        /// </summary>
        MavResultInProgress = 5,
        /// <summary>
        /// Command has been cancelled (as a result of receiving a COMMAND_CANCEL message).
        /// MAV_RESULT_CANCELLED
        /// </summary>
        MavResultCancelled = 6,
        /// <summary>
        /// Command is valid, but it is only accepted when sent as a COMMAND_LONG (as it has float values for params 5 and 6).
        /// MAV_RESULT_COMMAND_LONG_ONLY
        /// </summary>
        MavResultCommandLongOnly = 7,
        /// <summary>
        /// Command is valid, but it is only accepted when sent as a COMMAND_INT (as it encodes a location in params 5, 6 and 7, and hence requires a reference MAV_FRAME).
        /// MAV_RESULT_COMMAND_INT_ONLY
        /// </summary>
        MavResultCommandIntOnly = 8,
        /// <summary>
        /// Command is invalid because a frame is required and the specified frame is not supported.
        /// MAV_RESULT_COMMAND_UNSUPPORTED_MAV_FRAME
        /// </summary>
        MavResultCommandUnsupportedMavFrame = 9,
    }

    /// <summary>
    /// Result of mission operation (in a MISSION_ACK message).
    ///  MAV_MISSION_RESULT
    /// </summary>
    public enum MavMissionResult:uint
    {
        /// <summary>
        /// mission accepted OK
        /// MAV_MISSION_ACCEPTED
        /// </summary>
        MavMissionAccepted = 0,
        /// <summary>
        /// Generic error / not accepting mission commands at all right now.
        /// MAV_MISSION_ERROR
        /// </summary>
        MavMissionError = 1,
        /// <summary>
        /// Coordinate frame is not supported.
        /// MAV_MISSION_UNSUPPORTED_FRAME
        /// </summary>
        MavMissionUnsupportedFrame = 2,
        /// <summary>
        /// Command is not supported.
        /// MAV_MISSION_UNSUPPORTED
        /// </summary>
        MavMissionUnsupported = 3,
        /// <summary>
        /// Mission items exceed storage space.
        /// MAV_MISSION_NO_SPACE
        /// </summary>
        MavMissionNoSpace = 4,
        /// <summary>
        /// One of the parameters has an invalid value.
        /// MAV_MISSION_INVALID
        /// </summary>
        MavMissionInvalid = 5,
        /// <summary>
        /// param1 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM1
        /// </summary>
        MavMissionInvalidParam1 = 6,
        /// <summary>
        /// param2 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM2
        /// </summary>
        MavMissionInvalidParam2 = 7,
        /// <summary>
        /// param3 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM3
        /// </summary>
        MavMissionInvalidParam3 = 8,
        /// <summary>
        /// param4 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM4
        /// </summary>
        MavMissionInvalidParam4 = 9,
        /// <summary>
        /// x / param5 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM5_X
        /// </summary>
        MavMissionInvalidParam5X = 10,
        /// <summary>
        /// y / param6 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM6_Y
        /// </summary>
        MavMissionInvalidParam6Y = 11,
        /// <summary>
        /// z / param7 has an invalid value.
        /// MAV_MISSION_INVALID_PARAM7
        /// </summary>
        MavMissionInvalidParam7 = 12,
        /// <summary>
        /// Mission item received out of sequence
        /// MAV_MISSION_INVALID_SEQUENCE
        /// </summary>
        MavMissionInvalidSequence = 13,
        /// <summary>
        /// Not accepting any mission commands from this communication partner.
        /// MAV_MISSION_DENIED
        /// </summary>
        MavMissionDenied = 14,
        /// <summary>
        /// Current mission operation cancelled (e.g. mission upload, mission download).
        /// MAV_MISSION_OPERATION_CANCELLED
        /// </summary>
        MavMissionOperationCancelled = 15,
    }

    /// <summary>
    /// Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.
    ///  MAV_SEVERITY
    /// </summary>
    public enum MavSeverity:uint
    {
        /// <summary>
        /// System is unusable. This is a "panic" condition.
        /// MAV_SEVERITY_EMERGENCY
        /// </summary>
        MavSeverityEmergency = 0,
        /// <summary>
        /// Action should be taken immediately. Indicates error in non-critical systems.
        /// MAV_SEVERITY_ALERT
        /// </summary>
        MavSeverityAlert = 1,
        /// <summary>
        /// Action must be taken immediately. Indicates failure in a primary system.
        /// MAV_SEVERITY_CRITICAL
        /// </summary>
        MavSeverityCritical = 2,
        /// <summary>
        /// Indicates an error in secondary/redundant systems.
        /// MAV_SEVERITY_ERROR
        /// </summary>
        MavSeverityError = 3,
        /// <summary>
        /// Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.
        /// MAV_SEVERITY_WARNING
        /// </summary>
        MavSeverityWarning = 4,
        /// <summary>
        /// An unusual event has occurred, though not an error condition. This should be investigated for the root cause.
        /// MAV_SEVERITY_NOTICE
        /// </summary>
        MavSeverityNotice = 5,
        /// <summary>
        /// Normal operational messages. Useful for logging. No action is required for these messages.
        /// MAV_SEVERITY_INFO
        /// </summary>
        MavSeverityInfo = 6,
        /// <summary>
        /// Useful non-operational messages that can assist in debugging. These should not occur during normal operation.
        /// MAV_SEVERITY_DEBUG
        /// </summary>
        MavSeverityDebug = 7,
    }

    /// <summary>
    /// Power supply status flags (bitmask)
    ///  MAV_POWER_STATUS
    /// </summary>
    public enum MavPowerStatus:uint
    {
        /// <summary>
        /// main brick power supply valid
        /// MAV_POWER_STATUS_BRICK_VALID
        /// </summary>
        MavPowerStatusBrickValid = 1,
        /// <summary>
        /// main servo power supply valid for FMU
        /// MAV_POWER_STATUS_SERVO_VALID
        /// </summary>
        MavPowerStatusServoValid = 2,
        /// <summary>
        /// USB power is connected
        /// MAV_POWER_STATUS_USB_CONNECTED
        /// </summary>
        MavPowerStatusUsbConnected = 4,
        /// <summary>
        /// peripheral supply is in over-current state
        /// MAV_POWER_STATUS_PERIPH_OVERCURRENT
        /// </summary>
        MavPowerStatusPeriphOvercurrent = 8,
        /// <summary>
        /// hi-power peripheral supply is in over-current state
        /// MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT
        /// </summary>
        MavPowerStatusPeriphHipowerOvercurrent = 16,
        /// <summary>
        /// Power status has changed since boot
        /// MAV_POWER_STATUS_CHANGED
        /// </summary>
        MavPowerStatusChanged = 32,
    }

    /// <summary>
    /// SERIAL_CONTROL device types
    ///  SERIAL_CONTROL_DEV
    /// </summary>
    public enum SerialControlDev:uint
    {
        /// <summary>
        /// First telemetry port
        /// SERIAL_CONTROL_DEV_TELEM1
        /// </summary>
        SerialControlDevTelem1 = 0,
        /// <summary>
        /// Second telemetry port
        /// SERIAL_CONTROL_DEV_TELEM2
        /// </summary>
        SerialControlDevTelem2 = 1,
        /// <summary>
        /// First GPS port
        /// SERIAL_CONTROL_DEV_GPS1
        /// </summary>
        SerialControlDevGps1 = 2,
        /// <summary>
        /// Second GPS port
        /// SERIAL_CONTROL_DEV_GPS2
        /// </summary>
        SerialControlDevGps2 = 3,
        /// <summary>
        /// system shell
        /// SERIAL_CONTROL_DEV_SHELL
        /// </summary>
        SerialControlDevShell = 10,
        /// <summary>
        /// SERIAL0
        /// SERIAL_CONTROL_SERIAL0
        /// </summary>
        SerialControlSerial0 = 100,
        /// <summary>
        /// SERIAL1
        /// SERIAL_CONTROL_SERIAL1
        /// </summary>
        SerialControlSerial1 = 101,
        /// <summary>
        /// SERIAL2
        /// SERIAL_CONTROL_SERIAL2
        /// </summary>
        SerialControlSerial2 = 102,
        /// <summary>
        /// SERIAL3
        /// SERIAL_CONTROL_SERIAL3
        /// </summary>
        SerialControlSerial3 = 103,
        /// <summary>
        /// SERIAL4
        /// SERIAL_CONTROL_SERIAL4
        /// </summary>
        SerialControlSerial4 = 104,
        /// <summary>
        /// SERIAL5
        /// SERIAL_CONTROL_SERIAL5
        /// </summary>
        SerialControlSerial5 = 105,
        /// <summary>
        /// SERIAL6
        /// SERIAL_CONTROL_SERIAL6
        /// </summary>
        SerialControlSerial6 = 106,
        /// <summary>
        /// SERIAL7
        /// SERIAL_CONTROL_SERIAL7
        /// </summary>
        SerialControlSerial7 = 107,
        /// <summary>
        /// SERIAL8
        /// SERIAL_CONTROL_SERIAL8
        /// </summary>
        SerialControlSerial8 = 108,
        /// <summary>
        /// SERIAL9
        /// SERIAL_CONTROL_SERIAL9
        /// </summary>
        SerialControlSerial9 = 109,
    }

    /// <summary>
    /// SERIAL_CONTROL flags (bitmask)
    ///  SERIAL_CONTROL_FLAG
    /// </summary>
    public enum SerialControlFlag:uint
    {
        /// <summary>
        /// Set if this is a reply
        /// SERIAL_CONTROL_FLAG_REPLY
        /// </summary>
        SerialControlFlagReply = 1,
        /// <summary>
        /// Set if the sender wants the receiver to send a response as another SERIAL_CONTROL message
        /// SERIAL_CONTROL_FLAG_RESPOND
        /// </summary>
        SerialControlFlagRespond = 2,
        /// <summary>
        /// Set if access to the serial port should be removed from whatever driver is currently using it, giving exclusive access to the SERIAL_CONTROL protocol. The port can be handed back by sending a request without this flag set
        /// SERIAL_CONTROL_FLAG_EXCLUSIVE
        /// </summary>
        SerialControlFlagExclusive = 4,
        /// <summary>
        /// Block on writes to the serial port
        /// SERIAL_CONTROL_FLAG_BLOCKING
        /// </summary>
        SerialControlFlagBlocking = 8,
        /// <summary>
        /// Send multiple replies until port is drained
        /// SERIAL_CONTROL_FLAG_MULTI
        /// </summary>
        SerialControlFlagMulti = 16,
    }

    /// <summary>
    /// Enumeration of distance sensor types
    ///  MAV_DISTANCE_SENSOR
    /// </summary>
    public enum MavDistanceSensor:uint
    {
        /// <summary>
        /// Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units
        /// MAV_DISTANCE_SENSOR_LASER
        /// </summary>
        MavDistanceSensorLaser = 0,
        /// <summary>
        /// Ultrasound rangefinder, e.g. MaxBotix units
        /// MAV_DISTANCE_SENSOR_ULTRASOUND
        /// </summary>
        MavDistanceSensorUltrasound = 1,
        /// <summary>
        /// Infrared rangefinder, e.g. Sharp units
        /// MAV_DISTANCE_SENSOR_INFRARED
        /// </summary>
        MavDistanceSensorInfrared = 2,
        /// <summary>
        /// Radar type, e.g. uLanding units
        /// MAV_DISTANCE_SENSOR_RADAR
        /// </summary>
        MavDistanceSensorRadar = 3,
        /// <summary>
        /// Broken or unknown type, e.g. analog units
        /// MAV_DISTANCE_SENSOR_UNKNOWN
        /// </summary>
        MavDistanceSensorUnknown = 4,
    }

    /// <summary>
    /// Enumeration of sensor orientation, according to its rotations
    ///  MAV_SENSOR_ORIENTATION
    /// </summary>
    public enum MavSensorOrientation:uint
    {
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_NONE
        /// </summary>
        MavSensorRotationNone = 0,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_YAW_45
        /// </summary>
        MavSensorRotationYaw45 = 1,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_YAW_90
        /// </summary>
        MavSensorRotationYaw90 = 2,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_YAW_135
        /// </summary>
        MavSensorRotationYaw135 = 3,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 180
        /// MAV_SENSOR_ROTATION_YAW_180
        /// </summary>
        MavSensorRotationYaw180 = 4,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 225
        /// MAV_SENSOR_ROTATION_YAW_225
        /// </summary>
        MavSensorRotationYaw225 = 5,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 270
        /// MAV_SENSOR_ROTATION_YAW_270
        /// </summary>
        MavSensorRotationYaw270 = 6,
        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 315
        /// MAV_SENSOR_ROTATION_YAW_315
        /// </summary>
        MavSensorRotationYaw315 = 7,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_180
        /// </summary>
        MavSensorRotationRoll180 = 8,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_45
        /// </summary>
        MavSensorRotationRoll180Yaw45 = 9,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_90
        /// </summary>
        MavSensorRotationRoll180Yaw90 = 10,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_135
        /// </summary>
        MavSensorRotationRoll180Yaw135 = 11,
        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 0
        /// MAV_SENSOR_ROTATION_PITCH_180
        /// </summary>
        MavSensorRotationPitch180 = 12,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 225
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_225
        /// </summary>
        MavSensorRotationRoll180Yaw225 = 13,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 270
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_270
        /// </summary>
        MavSensorRotationRoll180Yaw270 = 14,
        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 315
        /// MAV_SENSOR_ROTATION_ROLL_180_YAW_315
        /// </summary>
        MavSensorRotationRoll180Yaw315 = 15,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90
        /// </summary>
        MavSensorRotationRoll90 = 16,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_45
        /// </summary>
        MavSensorRotationRoll90Yaw45 = 17,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_90
        /// </summary>
        MavSensorRotationRoll90Yaw90 = 18,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_135
        /// </summary>
        MavSensorRotationRoll90Yaw135 = 19,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270
        /// </summary>
        MavSensorRotationRoll270 = 20,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 45
        /// MAV_SENSOR_ROTATION_ROLL_270_YAW_45
        /// </summary>
        MavSensorRotationRoll270Yaw45 = 21,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_270_YAW_90
        /// </summary>
        MavSensorRotationRoll270Yaw90 = 22,
        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 135
        /// MAV_SENSOR_ROTATION_ROLL_270_YAW_135
        /// </summary>
        MavSensorRotationRoll270Yaw135 = 23,
        /// <summary>
        /// Roll: 0, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_PITCH_90
        /// </summary>
        MavSensorRotationPitch90 = 24,
        /// <summary>
        /// Roll: 0, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_PITCH_270
        /// </summary>
        MavSensorRotationPitch270 = 25,
        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 90
        /// MAV_SENSOR_ROTATION_PITCH_180_YAW_90
        /// </summary>
        MavSensorRotationPitch180Yaw90 = 26,
        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 270
        /// MAV_SENSOR_ROTATION_PITCH_180_YAW_270
        /// </summary>
        MavSensorRotationPitch180Yaw270 = 27,
        /// <summary>
        /// Roll: 90, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_90
        /// </summary>
        MavSensorRotationRoll90Pitch90 = 28,
        /// <summary>
        /// Roll: 180, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_180_PITCH_90
        /// </summary>
        MavSensorRotationRoll180Pitch90 = 29,
        /// <summary>
        /// Roll: 270, Pitch: 90, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270_PITCH_90
        /// </summary>
        MavSensorRotationRoll270Pitch90 = 30,
        /// <summary>
        /// Roll: 90, Pitch: 180, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_180
        /// </summary>
        MavSensorRotationRoll90Pitch180 = 31,
        /// <summary>
        /// Roll: 270, Pitch: 180, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270_PITCH_180
        /// </summary>
        MavSensorRotationRoll270Pitch180 = 32,
        /// <summary>
        /// Roll: 90, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_270
        /// </summary>
        MavSensorRotationRoll90Pitch270 = 33,
        /// <summary>
        /// Roll: 180, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_180_PITCH_270
        /// </summary>
        MavSensorRotationRoll180Pitch270 = 34,
        /// <summary>
        /// Roll: 270, Pitch: 270, Yaw: 0
        /// MAV_SENSOR_ROTATION_ROLL_270_PITCH_270
        /// </summary>
        MavSensorRotationRoll270Pitch270 = 35,
        /// <summary>
        /// Roll: 90, Pitch: 180, Yaw: 90
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90
        /// </summary>
        MavSensorRotationRoll90Pitch180Yaw90 = 36,
        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 270
        /// MAV_SENSOR_ROTATION_ROLL_90_YAW_270
        /// </summary>
        MavSensorRotationRoll90Yaw270 = 37,
        /// <summary>
        /// Roll: 90, Pitch: 68, Yaw: 293
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293
        /// </summary>
        MavSensorRotationRoll90Pitch68Yaw293 = 38,
        /// <summary>
        /// Pitch: 315
        /// MAV_SENSOR_ROTATION_PITCH_315
        /// </summary>
        MavSensorRotationPitch315 = 39,
        /// <summary>
        /// Roll: 90, Pitch: 315
        /// MAV_SENSOR_ROTATION_ROLL_90_PITCH_315
        /// </summary>
        MavSensorRotationRoll90Pitch315 = 40,
        /// <summary>
        /// Custom orientation
        /// MAV_SENSOR_ROTATION_CUSTOM
        /// </summary>
        MavSensorRotationCustom = 100,
    }

    /// <summary>
    /// Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability.
    ///  MAV_PROTOCOL_CAPABILITY
    /// </summary>
    public enum MavProtocolCapability:uint
    {
        /// <summary>
        /// Autopilot supports the MISSION_ITEM float message type.
        ///           Note that MISSION_ITEM is deprecated, and autopilots should use MISSION_INT instead.
        ///         
        /// MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT
        /// </summary>
        MavProtocolCapabilityMissionFloat = 1,
        /// <summary>
        /// Autopilot supports the new param float message type.
        /// MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT
        /// </summary>
        MavProtocolCapabilityParamFloat = 2,
        /// <summary>
        /// Autopilot supports MISSION_ITEM_INT scaled integer message type.
        ///           Note that this flag must always be set if missions are supported, because missions must always use MISSION_ITEM_INT (rather than MISSION_ITEM, which is deprecated).
        ///         
        /// MAV_PROTOCOL_CAPABILITY_MISSION_INT
        /// </summary>
        MavProtocolCapabilityMissionInt = 4,
        /// <summary>
        /// Autopilot supports COMMAND_INT scaled integer message type.
        /// MAV_PROTOCOL_CAPABILITY_COMMAND_INT
        /// </summary>
        MavProtocolCapabilityCommandInt = 8,
        /// <summary>
        /// Parameter protocol uses byte-wise encoding of parameter values into param_value (float) fields: https://mavlink.io/en/services/parameter.html#parameter-encoding.
        ///           Note that either this flag or MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST should be set if the parameter protocol is supported.
        ///         
        /// MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE
        /// </summary>
        MavProtocolCapabilityParamEncodeBytewise = 16,
        /// <summary>
        /// Autopilot supports the File Transfer Protocol v1: https://mavlink.io/en/services/ftp.html.
        /// MAV_PROTOCOL_CAPABILITY_FTP
        /// </summary>
        MavProtocolCapabilityFtp = 32,
        /// <summary>
        /// Autopilot supports commanding attitude offboard.
        /// MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET
        /// </summary>
        MavProtocolCapabilitySetAttitudeTarget = 64,
        /// <summary>
        /// Autopilot supports commanding position and velocity targets in local NED frame.
        /// MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED
        /// </summary>
        MavProtocolCapabilitySetPositionTargetLocalNed = 128,
        /// <summary>
        /// Autopilot supports commanding position and velocity targets in global scaled integers.
        /// MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT
        /// </summary>
        MavProtocolCapabilitySetPositionTargetGlobalInt = 256,
        /// <summary>
        /// Autopilot supports terrain protocol / data handling.
        /// MAV_PROTOCOL_CAPABILITY_TERRAIN
        /// </summary>
        MavProtocolCapabilityTerrain = 512,
        /// <summary>
        /// Reserved for future use.
        /// MAV_PROTOCOL_CAPABILITY_RESERVED3
        /// </summary>
        MavProtocolCapabilityReserved3 = 1024,
        /// <summary>
        /// Autopilot supports the MAV_CMD_DO_FLIGHTTERMINATION command (flight termination).
        /// MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION
        /// </summary>
        MavProtocolCapabilityFlightTermination = 2048,
        /// <summary>
        /// Autopilot supports onboard compass calibration.
        /// MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION
        /// </summary>
        MavProtocolCapabilityCompassCalibration = 4096,
        /// <summary>
        /// Autopilot supports MAVLink version 2.
        /// MAV_PROTOCOL_CAPABILITY_MAVLINK2
        /// </summary>
        MavProtocolCapabilityMavlink2 = 8192,
        /// <summary>
        /// Autopilot supports mission fence protocol.
        /// MAV_PROTOCOL_CAPABILITY_MISSION_FENCE
        /// </summary>
        MavProtocolCapabilityMissionFence = 16384,
        /// <summary>
        /// Autopilot supports mission rally point protocol.
        /// MAV_PROTOCOL_CAPABILITY_MISSION_RALLY
        /// </summary>
        MavProtocolCapabilityMissionRally = 32768,
        /// <summary>
        /// Reserved for future use.
        /// MAV_PROTOCOL_CAPABILITY_RESERVED2
        /// </summary>
        MavProtocolCapabilityReserved2 = 65536,
        /// <summary>
        /// Parameter protocol uses C-cast of parameter values to set the param_value (float) fields: https://mavlink.io/en/services/parameter.html#parameter-encoding.
        ///           Note that either this flag or MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE should be set if the parameter protocol is supported.
        ///         
        /// MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST
        /// </summary>
        MavProtocolCapabilityParamEncodeCCast = 131072,
    }

    /// <summary>
    /// Type of mission items being requested/sent in mission protocol.
    ///  MAV_MISSION_TYPE
    /// </summary>
    public enum MavMissionType:uint
    {
        /// <summary>
        /// Items are mission commands for main mission.
        /// MAV_MISSION_TYPE_MISSION
        /// </summary>
        MavMissionTypeMission = 0,
        /// <summary>
        /// Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence items.
        /// MAV_MISSION_TYPE_FENCE
        /// </summary>
        MavMissionTypeFence = 1,
        /// <summary>
        /// Specifies the rally points for the vehicle. Rally points are alternative RTL points. Items are MAV_CMD_NAV_RALLY_POINT rally point items.
        /// MAV_MISSION_TYPE_RALLY
        /// </summary>
        MavMissionTypeRally = 2,
        /// <summary>
        /// Only used in MISSION_CLEAR_ALL to clear all mission types.
        /// MAV_MISSION_TYPE_ALL
        /// </summary>
        MavMissionTypeAll = 255,
    }

    /// <summary>
    /// Enumeration of estimator types
    ///  MAV_ESTIMATOR_TYPE
    /// </summary>
    public enum MavEstimatorType:uint
    {
        /// <summary>
        /// Unknown type of the estimator.
        /// MAV_ESTIMATOR_TYPE_UNKNOWN
        /// </summary>
        MavEstimatorTypeUnknown = 0,
        /// <summary>
        /// This is a naive estimator without any real covariance feedback.
        /// MAV_ESTIMATOR_TYPE_NAIVE
        /// </summary>
        MavEstimatorTypeNaive = 1,
        /// <summary>
        /// Computer vision based estimate. Might be up to scale.
        /// MAV_ESTIMATOR_TYPE_VISION
        /// </summary>
        MavEstimatorTypeVision = 2,
        /// <summary>
        /// Visual-inertial estimate.
        /// MAV_ESTIMATOR_TYPE_VIO
        /// </summary>
        MavEstimatorTypeVio = 3,
        /// <summary>
        /// Plain GPS estimate.
        /// MAV_ESTIMATOR_TYPE_GPS
        /// </summary>
        MavEstimatorTypeGps = 4,
        /// <summary>
        /// Estimator integrating GPS and inertial sensing.
        /// MAV_ESTIMATOR_TYPE_GPS_INS
        /// </summary>
        MavEstimatorTypeGpsIns = 5,
        /// <summary>
        /// Estimate from external motion capturing system.
        /// MAV_ESTIMATOR_TYPE_MOCAP
        /// </summary>
        MavEstimatorTypeMocap = 6,
        /// <summary>
        /// Estimator based on lidar sensor input.
        /// MAV_ESTIMATOR_TYPE_LIDAR
        /// </summary>
        MavEstimatorTypeLidar = 7,
        /// <summary>
        /// Estimator on autopilot.
        /// MAV_ESTIMATOR_TYPE_AUTOPILOT
        /// </summary>
        MavEstimatorTypeAutopilot = 8,
    }

    /// <summary>
    /// Enumeration of battery types
    ///  MAV_BATTERY_TYPE
    /// </summary>
    public enum MavBatteryType:uint
    {
        /// <summary>
        /// Not specified.
        /// MAV_BATTERY_TYPE_UNKNOWN
        /// </summary>
        MavBatteryTypeUnknown = 0,
        /// <summary>
        /// Lithium polymer battery
        /// MAV_BATTERY_TYPE_LIPO
        /// </summary>
        MavBatteryTypeLipo = 1,
        /// <summary>
        /// Lithium-iron-phosphate battery
        /// MAV_BATTERY_TYPE_LIFE
        /// </summary>
        MavBatteryTypeLife = 2,
        /// <summary>
        /// Lithium-ION battery
        /// MAV_BATTERY_TYPE_LION
        /// </summary>
        MavBatteryTypeLion = 3,
        /// <summary>
        /// Nickel metal hydride battery
        /// MAV_BATTERY_TYPE_NIMH
        /// </summary>
        MavBatteryTypeNimh = 4,
    }

    /// <summary>
    /// Enumeration of battery functions
    ///  MAV_BATTERY_FUNCTION
    /// </summary>
    public enum MavBatteryFunction:uint
    {
        /// <summary>
        /// Battery function is unknown
        /// MAV_BATTERY_FUNCTION_UNKNOWN
        /// </summary>
        MavBatteryFunctionUnknown = 0,
        /// <summary>
        /// Battery supports all flight systems
        /// MAV_BATTERY_FUNCTION_ALL
        /// </summary>
        MavBatteryFunctionAll = 1,
        /// <summary>
        /// Battery for the propulsion system
        /// MAV_BATTERY_FUNCTION_PROPULSION
        /// </summary>
        MavBatteryFunctionPropulsion = 2,
        /// <summary>
        /// Avionics battery
        /// MAV_BATTERY_FUNCTION_AVIONICS
        /// </summary>
        MavBatteryFunctionAvionics = 3,
        /// <summary>
        /// Payload battery
        /// MAV_BATTERY_FUNCTION_PAYLOAD
        /// </summary>
        MavBatteryFunctionPayload = 4,
    }

    /// <summary>
    /// Enumeration for battery charge states.
    ///  MAV_BATTERY_CHARGE_STATE
    /// </summary>
    public enum MavBatteryChargeState:uint
    {
        /// <summary>
        /// Low battery state is not provided
        /// MAV_BATTERY_CHARGE_STATE_UNDEFINED
        /// </summary>
        MavBatteryChargeStateUndefined = 0,
        /// <summary>
        /// Battery is not in low state. Normal operation.
        /// MAV_BATTERY_CHARGE_STATE_OK
        /// </summary>
        MavBatteryChargeStateOk = 1,
        /// <summary>
        /// Battery state is low, warn and monitor close.
        /// MAV_BATTERY_CHARGE_STATE_LOW
        /// </summary>
        MavBatteryChargeStateLow = 2,
        /// <summary>
        /// Battery state is critical, return or abort immediately.
        /// MAV_BATTERY_CHARGE_STATE_CRITICAL
        /// </summary>
        MavBatteryChargeStateCritical = 3,
        /// <summary>
        /// Battery state is too low for ordinary abort sequence. Perform fastest possible emergency stop to prevent damage.
        /// MAV_BATTERY_CHARGE_STATE_EMERGENCY
        /// </summary>
        MavBatteryChargeStateEmergency = 4,
        /// <summary>
        /// Battery failed, damage unavoidable. Possible causes (faults) are listed in MAV_BATTERY_FAULT.
        /// MAV_BATTERY_CHARGE_STATE_FAILED
        /// </summary>
        MavBatteryChargeStateFailed = 5,
        /// <summary>
        /// Battery is diagnosed to be defective or an error occurred, usage is discouraged / prohibited. Possible causes (faults) are listed in MAV_BATTERY_FAULT.
        /// MAV_BATTERY_CHARGE_STATE_UNHEALTHY
        /// </summary>
        MavBatteryChargeStateUnhealthy = 6,
        /// <summary>
        /// Battery is charging.
        /// MAV_BATTERY_CHARGE_STATE_CHARGING
        /// </summary>
        MavBatteryChargeStateCharging = 7,
    }

    /// <summary>
    /// Battery mode. Note, the normal operation mode (i.e. when flying) should be reported as MAV_BATTERY_MODE_UNKNOWN to allow message trimming in normal flight.
    ///  MAV_BATTERY_MODE
    /// </summary>
    public enum MavBatteryMode:uint
    {
        /// <summary>
        /// Battery mode not supported/unknown battery mode/normal operation.
        /// MAV_BATTERY_MODE_UNKNOWN
        /// </summary>
        MavBatteryModeUnknown = 0,
        /// <summary>
        /// Battery is auto discharging (towards storage level).
        /// MAV_BATTERY_MODE_AUTO_DISCHARGING
        /// </summary>
        MavBatteryModeAutoDischarging = 1,
        /// <summary>
        /// Battery in hot-swap mode (current limited to prevent spikes that might damage sensitive electrical circuits).
        /// MAV_BATTERY_MODE_HOT_SWAP
        /// </summary>
        MavBatteryModeHotSwap = 2,
    }

    /// <summary>
    /// Smart battery supply status/fault flags (bitmask) for health indication. The battery must also report either MAV_BATTERY_CHARGE_STATE_FAILED or MAV_BATTERY_CHARGE_STATE_UNHEALTHY if any of these are set.
    ///  MAV_BATTERY_FAULT
    /// </summary>
    public enum MavBatteryFault:uint
    {
        /// <summary>
        /// Battery has deep discharged.
        /// MAV_BATTERY_FAULT_DEEP_DISCHARGE
        /// </summary>
        MavBatteryFaultDeepDischarge = 1,
        /// <summary>
        /// Voltage spikes.
        /// MAV_BATTERY_FAULT_SPIKES
        /// </summary>
        MavBatteryFaultSpikes = 2,
        /// <summary>
        /// One or more cells have failed. Battery should also report MAV_BATTERY_CHARGE_STATE_FAILE (and should not be used).
        /// MAV_BATTERY_FAULT_CELL_FAIL
        /// </summary>
        MavBatteryFaultCellFail = 4,
        /// <summary>
        /// Over-current fault.
        /// MAV_BATTERY_FAULT_OVER_CURRENT
        /// </summary>
        MavBatteryFaultOverCurrent = 8,
        /// <summary>
        /// Over-temperature fault.
        /// MAV_BATTERY_FAULT_OVER_TEMPERATURE
        /// </summary>
        MavBatteryFaultOverTemperature = 16,
        /// <summary>
        /// Under-temperature fault.
        /// MAV_BATTERY_FAULT_UNDER_TEMPERATURE
        /// </summary>
        MavBatteryFaultUnderTemperature = 32,
        /// <summary>
        /// Vehicle voltage is not compatible with this battery (batteries on same power rail should have similar voltage).
        /// MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE
        /// </summary>
        MavBatteryFaultIncompatibleVoltage = 64,
        /// <summary>
        /// Battery firmware is not compatible with current autopilot firmware.
        /// MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE
        /// </summary>
        MavBatteryFaultIncompatibleFirmware = 128,
        /// <summary>
        /// Battery is not compatible due to cell configuration (e.g. 5s1p when vehicle requires 6s).
        /// BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION
        /// </summary>
        BatteryFaultIncompatibleCellsConfiguration = 256,
    }

    /// <summary>
    /// Flags to report status/failure cases for a power generator (used in GENERATOR_STATUS). Note that FAULTS are conditions that cause the generator to fail. Warnings are conditions that require attention before the next use (they indicate the system is not operating properly).
    ///  MAV_GENERATOR_STATUS_FLAG
    /// </summary>
    public enum MavGeneratorStatusFlag:uint
    {
        /// <summary>
        /// Generator is off.
        /// MAV_GENERATOR_STATUS_FLAG_OFF
        /// </summary>
        MavGeneratorStatusFlagOff = 1,
        /// <summary>
        /// Generator is ready to start generating power.
        /// MAV_GENERATOR_STATUS_FLAG_READY
        /// </summary>
        MavGeneratorStatusFlagReady = 2,
        /// <summary>
        /// Generator is generating power.
        /// MAV_GENERATOR_STATUS_FLAG_GENERATING
        /// </summary>
        MavGeneratorStatusFlagGenerating = 4,
        /// <summary>
        /// Generator is charging the batteries (generating enough power to charge and provide the load).
        /// MAV_GENERATOR_STATUS_FLAG_CHARGING
        /// </summary>
        MavGeneratorStatusFlagCharging = 8,
        /// <summary>
        /// Generator is operating at a reduced maximum power.
        /// MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER
        /// </summary>
        MavGeneratorStatusFlagReducedPower = 16,
        /// <summary>
        /// Generator is providing the maximum output.
        /// MAV_GENERATOR_STATUS_FLAG_MAXPOWER
        /// </summary>
        MavGeneratorStatusFlagMaxpower = 32,
        /// <summary>
        /// Generator is near the maximum operating temperature, cooling is insufficient.
        /// MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING
        /// </summary>
        MavGeneratorStatusFlagOvertempWarning = 64,
        /// <summary>
        /// Generator hit the maximum operating temperature and shutdown.
        /// MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT
        /// </summary>
        MavGeneratorStatusFlagOvertempFault = 128,
        /// <summary>
        /// Power electronics are near the maximum operating temperature, cooling is insufficient.
        /// MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING
        /// </summary>
        MavGeneratorStatusFlagElectronicsOvertempWarning = 256,
        /// <summary>
        /// Power electronics hit the maximum operating temperature and shutdown.
        /// MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT
        /// </summary>
        MavGeneratorStatusFlagElectronicsOvertempFault = 512,
        /// <summary>
        /// Power electronics experienced a fault and shutdown.
        /// MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT
        /// </summary>
        MavGeneratorStatusFlagElectronicsFault = 1024,
        /// <summary>
        /// The power source supplying the generator failed e.g. mechanical generator stopped, tether is no longer providing power, solar cell is in shade, hydrogen reaction no longer happening.
        /// MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT
        /// </summary>
        MavGeneratorStatusFlagPowersourceFault = 2048,
        /// <summary>
        /// Generator controller having communication problems.
        /// MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING
        /// </summary>
        MavGeneratorStatusFlagCommunicationWarning = 4096,
        /// <summary>
        /// Power electronic or generator cooling system error.
        /// MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING
        /// </summary>
        MavGeneratorStatusFlagCoolingWarning = 8192,
        /// <summary>
        /// Generator controller power rail experienced a fault.
        /// MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT
        /// </summary>
        MavGeneratorStatusFlagPowerRailFault = 16384,
        /// <summary>
        /// Generator controller exceeded the overcurrent threshold and shutdown to prevent damage.
        /// MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT
        /// </summary>
        MavGeneratorStatusFlagOvercurrentFault = 32768,
        /// <summary>
        /// Generator controller detected a high current going into the batteries and shutdown to prevent battery damage.
        /// MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT
        /// </summary>
        MavGeneratorStatusFlagBatteryOverchargeCurrentFault = 65536,
        /// <summary>
        /// Generator controller exceeded it's overvoltage threshold and shutdown to prevent it exceeding the voltage rating.
        /// MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT
        /// </summary>
        MavGeneratorStatusFlagOvervoltageFault = 131072,
        /// <summary>
        /// Batteries are under voltage (generator will not start).
        /// MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT
        /// </summary>
        MavGeneratorStatusFlagBatteryUndervoltFault = 262144,
        /// <summary>
        /// Generator start is inhibited by e.g. a safety switch.
        /// MAV_GENERATOR_STATUS_FLAG_START_INHIBITED
        /// </summary>
        MavGeneratorStatusFlagStartInhibited = 524288,
        /// <summary>
        /// Generator requires maintenance.
        /// MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED
        /// </summary>
        MavGeneratorStatusFlagMaintenanceRequired = 1048576,
        /// <summary>
        /// Generator is not ready to generate yet.
        /// MAV_GENERATOR_STATUS_FLAG_WARMING_UP
        /// </summary>
        MavGeneratorStatusFlagWarmingUp = 2097152,
        /// <summary>
        /// Generator is idle.
        /// MAV_GENERATOR_STATUS_FLAG_IDLE
        /// </summary>
        MavGeneratorStatusFlagIdle = 4194304,
    }

    /// <summary>
    /// Enumeration of VTOL states
    ///  MAV_VTOL_STATE
    /// </summary>
    public enum MavVtolState:uint
    {
        /// <summary>
        /// MAV is not configured as VTOL
        /// MAV_VTOL_STATE_UNDEFINED
        /// </summary>
        MavVtolStateUndefined = 0,
        /// <summary>
        /// VTOL is in transition from multicopter to fixed-wing
        /// MAV_VTOL_STATE_TRANSITION_TO_FW
        /// </summary>
        MavVtolStateTransitionToFw = 1,
        /// <summary>
        /// VTOL is in transition from fixed-wing to multicopter
        /// MAV_VTOL_STATE_TRANSITION_TO_MC
        /// </summary>
        MavVtolStateTransitionToMc = 2,
        /// <summary>
        /// VTOL is in multicopter state
        /// MAV_VTOL_STATE_MC
        /// </summary>
        MavVtolStateMc = 3,
        /// <summary>
        /// VTOL is in fixed-wing state
        /// MAV_VTOL_STATE_FW
        /// </summary>
        MavVtolStateFw = 4,
    }

    /// <summary>
    /// Enumeration of landed detector states
    ///  MAV_LANDED_STATE
    /// </summary>
    public enum MavLandedState:uint
    {
        /// <summary>
        /// MAV landed state is unknown
        /// MAV_LANDED_STATE_UNDEFINED
        /// </summary>
        MavLandedStateUndefined = 0,
        /// <summary>
        /// MAV is landed (on ground)
        /// MAV_LANDED_STATE_ON_GROUND
        /// </summary>
        MavLandedStateOnGround = 1,
        /// <summary>
        /// MAV is in air
        /// MAV_LANDED_STATE_IN_AIR
        /// </summary>
        MavLandedStateInAir = 2,
        /// <summary>
        /// MAV currently taking off
        /// MAV_LANDED_STATE_TAKEOFF
        /// </summary>
        MavLandedStateTakeoff = 3,
        /// <summary>
        /// MAV currently landing
        /// MAV_LANDED_STATE_LANDING
        /// </summary>
        MavLandedStateLanding = 4,
    }

    /// <summary>
    /// Enumeration of the ADSB altimeter types
    ///  ADSB_ALTITUDE_TYPE
    /// </summary>
    public enum AdsbAltitudeType:uint
    {
        /// <summary>
        /// Altitude reported from a Baro source using QNH reference
        /// ADSB_ALTITUDE_TYPE_PRESSURE_QNH
        /// </summary>
        AdsbAltitudeTypePressureQnh = 0,
        /// <summary>
        /// Altitude reported from a GNSS source
        /// ADSB_ALTITUDE_TYPE_GEOMETRIC
        /// </summary>
        AdsbAltitudeTypeGeometric = 1,
    }

    /// <summary>
    /// ADSB classification for the type of vehicle emitting the transponder signal
    ///  ADSB_EMITTER_TYPE
    /// </summary>
    public enum AdsbEmitterType:uint
    {
        /// <summary>
        /// ADSB_EMITTER_TYPE_NO_INFO
        /// </summary>
        AdsbEmitterTypeNoInfo = 0,
        /// <summary>
        /// ADSB_EMITTER_TYPE_LIGHT
        /// </summary>
        AdsbEmitterTypeLight = 1,
        /// <summary>
        /// ADSB_EMITTER_TYPE_SMALL
        /// </summary>
        AdsbEmitterTypeSmall = 2,
        /// <summary>
        /// ADSB_EMITTER_TYPE_LARGE
        /// </summary>
        AdsbEmitterTypeLarge = 3,
        /// <summary>
        /// ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE
        /// </summary>
        AdsbEmitterTypeHighVortexLarge = 4,
        /// <summary>
        /// ADSB_EMITTER_TYPE_HEAVY
        /// </summary>
        AdsbEmitterTypeHeavy = 5,
        /// <summary>
        /// ADSB_EMITTER_TYPE_HIGHLY_MANUV
        /// </summary>
        AdsbEmitterTypeHighlyManuv = 6,
        /// <summary>
        /// ADSB_EMITTER_TYPE_ROTOCRAFT
        /// </summary>
        AdsbEmitterTypeRotocraft = 7,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UNASSIGNED
        /// </summary>
        AdsbEmitterTypeUnassigned = 8,
        /// <summary>
        /// ADSB_EMITTER_TYPE_GLIDER
        /// </summary>
        AdsbEmitterTypeGlider = 9,
        /// <summary>
        /// ADSB_EMITTER_TYPE_LIGHTER_AIR
        /// </summary>
        AdsbEmitterTypeLighterAir = 10,
        /// <summary>
        /// ADSB_EMITTER_TYPE_PARACHUTE
        /// </summary>
        AdsbEmitterTypeParachute = 11,
        /// <summary>
        /// ADSB_EMITTER_TYPE_ULTRA_LIGHT
        /// </summary>
        AdsbEmitterTypeUltraLight = 12,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UNASSIGNED2
        /// </summary>
        AdsbEmitterTypeUnassigned2 = 13,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UAV
        /// </summary>
        AdsbEmitterTypeUav = 14,
        /// <summary>
        /// ADSB_EMITTER_TYPE_SPACE
        /// </summary>
        AdsbEmitterTypeSpace = 15,
        /// <summary>
        /// ADSB_EMITTER_TYPE_UNASSGINED3
        /// </summary>
        AdsbEmitterTypeUnassgined3 = 16,
        /// <summary>
        /// ADSB_EMITTER_TYPE_EMERGENCY_SURFACE
        /// </summary>
        AdsbEmitterTypeEmergencySurface = 17,
        /// <summary>
        /// ADSB_EMITTER_TYPE_SERVICE_SURFACE
        /// </summary>
        AdsbEmitterTypeServiceSurface = 18,
        /// <summary>
        /// ADSB_EMITTER_TYPE_POINT_OBSTACLE
        /// </summary>
        AdsbEmitterTypePointObstacle = 19,
    }

    /// <summary>
    /// These flags indicate status such as data validity of each data source. Set = data valid
    ///  ADSB_FLAGS
    /// </summary>
    public enum AdsbFlags:uint
    {
        /// <summary>
        /// ADSB_FLAGS_VALID_COORDS
        /// </summary>
        AdsbFlagsValidCoords = 1,
        /// <summary>
        /// ADSB_FLAGS_VALID_ALTITUDE
        /// </summary>
        AdsbFlagsValidAltitude = 2,
        /// <summary>
        /// ADSB_FLAGS_VALID_HEADING
        /// </summary>
        AdsbFlagsValidHeading = 4,
        /// <summary>
        /// ADSB_FLAGS_VALID_VELOCITY
        /// </summary>
        AdsbFlagsValidVelocity = 8,
        /// <summary>
        /// ADSB_FLAGS_VALID_CALLSIGN
        /// </summary>
        AdsbFlagsValidCallsign = 16,
        /// <summary>
        /// ADSB_FLAGS_VALID_SQUAWK
        /// </summary>
        AdsbFlagsValidSquawk = 32,
        /// <summary>
        /// ADSB_FLAGS_SIMULATED
        /// </summary>
        AdsbFlagsSimulated = 64,
        /// <summary>
        /// ADSB_FLAGS_VERTICAL_VELOCITY_VALID
        /// </summary>
        AdsbFlagsVerticalVelocityValid = 128,
        /// <summary>
        /// ADSB_FLAGS_BARO_VALID
        /// </summary>
        AdsbFlagsBaroValid = 256,
        /// <summary>
        /// ADSB_FLAGS_SOURCE_UAT
        /// </summary>
        AdsbFlagsSourceUat = 32768,
    }

    /// <summary>
    /// Bitmap of options for the MAV_CMD_DO_REPOSITION
    ///  MAV_DO_REPOSITION_FLAGS
    /// </summary>
    public enum MavDoRepositionFlags:uint
    {
        /// <summary>
        /// The aircraft should immediately transition into guided. This should not be set for follow me applications
        /// MAV_DO_REPOSITION_FLAGS_CHANGE_MODE
        /// </summary>
        MavDoRepositionFlagsChangeMode = 1,
    }

    /// <summary>
    /// Speed setpoint types used in MAV_CMD_DO_CHANGE_SPEED
    ///  SPEED_TYPE
    /// </summary>
    public enum SpeedType:uint
    {
        /// <summary>
        /// Airspeed
        /// SPEED_TYPE_AIRSPEED
        /// </summary>
        SpeedTypeAirspeed = 0,
        /// <summary>
        /// Groundspeed
        /// SPEED_TYPE_GROUNDSPEED
        /// </summary>
        SpeedTypeGroundspeed = 1,
        /// <summary>
        /// Climb speed
        /// SPEED_TYPE_CLIMB_SPEED
        /// </summary>
        SpeedTypeClimbSpeed = 2,
        /// <summary>
        /// Descent speed
        /// SPEED_TYPE_DESCENT_SPEED
        /// </summary>
        SpeedTypeDescentSpeed = 3,
    }

    /// <summary>
    /// Flags in ESTIMATOR_STATUS message
    ///  ESTIMATOR_STATUS_FLAGS
    /// </summary>
    public enum EstimatorStatusFlags:uint
    {
        /// <summary>
        /// True if the attitude estimate is good
        /// ESTIMATOR_ATTITUDE
        /// </summary>
        EstimatorAttitude = 1,
        /// <summary>
        /// True if the horizontal velocity estimate is good
        /// ESTIMATOR_VELOCITY_HORIZ
        /// </summary>
        EstimatorVelocityHoriz = 2,
        /// <summary>
        /// True if the  vertical velocity estimate is good
        /// ESTIMATOR_VELOCITY_VERT
        /// </summary>
        EstimatorVelocityVert = 4,
        /// <summary>
        /// True if the horizontal position (relative) estimate is good
        /// ESTIMATOR_POS_HORIZ_REL
        /// </summary>
        EstimatorPosHorizRel = 8,
        /// <summary>
        /// True if the horizontal position (absolute) estimate is good
        /// ESTIMATOR_POS_HORIZ_ABS
        /// </summary>
        EstimatorPosHorizAbs = 16,
        /// <summary>
        /// True if the vertical position (absolute) estimate is good
        /// ESTIMATOR_POS_VERT_ABS
        /// </summary>
        EstimatorPosVertAbs = 32,
        /// <summary>
        /// True if the vertical position (above ground) estimate is good
        /// ESTIMATOR_POS_VERT_AGL
        /// </summary>
        EstimatorPosVertAgl = 64,
        /// <summary>
        /// True if the EKF is in a constant position mode and is not using external measurements (eg GPS or optical flow)
        /// ESTIMATOR_CONST_POS_MODE
        /// </summary>
        EstimatorConstPosMode = 128,
        /// <summary>
        /// True if the EKF has sufficient data to enter a mode that will provide a (relative) position estimate
        /// ESTIMATOR_PRED_POS_HORIZ_REL
        /// </summary>
        EstimatorPredPosHorizRel = 256,
        /// <summary>
        /// True if the EKF has sufficient data to enter a mode that will provide a (absolute) position estimate
        /// ESTIMATOR_PRED_POS_HORIZ_ABS
        /// </summary>
        EstimatorPredPosHorizAbs = 512,
        /// <summary>
        /// True if the EKF has detected a GPS glitch
        /// ESTIMATOR_GPS_GLITCH
        /// </summary>
        EstimatorGpsGlitch = 1024,
        /// <summary>
        /// True if the EKF has detected bad accelerometer data
        /// ESTIMATOR_ACCEL_ERROR
        /// </summary>
        EstimatorAccelError = 2048,
    }

    /// <summary>
    /// Sequence that motors are tested when using MAV_CMD_DO_MOTOR_TEST.
    ///  MOTOR_TEST_ORDER
    /// </summary>
    public enum MotorTestOrder:uint
    {
        /// <summary>
        /// Default autopilot motor test method.
        /// MOTOR_TEST_ORDER_DEFAULT
        /// </summary>
        MotorTestOrderDefault = 0,
        /// <summary>
        /// Motor numbers are specified as their index in a predefined vehicle-specific sequence.
        /// MOTOR_TEST_ORDER_SEQUENCE
        /// </summary>
        MotorTestOrderSequence = 1,
        /// <summary>
        /// Motor numbers are specified as the output as labeled on the board.
        /// MOTOR_TEST_ORDER_BOARD
        /// </summary>
        MotorTestOrderBoard = 2,
    }

    /// <summary>
    /// Defines how throttle value is represented in MAV_CMD_DO_MOTOR_TEST.
    ///  MOTOR_TEST_THROTTLE_TYPE
    /// </summary>
    public enum MotorTestThrottleType:uint
    {
        /// <summary>
        /// Throttle as a percentage (0 ~ 100)
        /// MOTOR_TEST_THROTTLE_PERCENT
        /// </summary>
        MotorTestThrottlePercent = 0,
        /// <summary>
        /// Throttle as an absolute PWM value (normally in range of 1000~2000).
        /// MOTOR_TEST_THROTTLE_PWM
        /// </summary>
        MotorTestThrottlePwm = 1,
        /// <summary>
        /// Throttle pass-through from pilot's transmitter.
        /// MOTOR_TEST_THROTTLE_PILOT
        /// </summary>
        MotorTestThrottlePilot = 2,
        /// <summary>
        /// Per-motor compass calibration test.
        /// MOTOR_TEST_COMPASS_CAL
        /// </summary>
        MotorTestCompassCal = 3,
    }

    /// <summary>
    ///  GPS_INPUT_IGNORE_FLAGS
    /// </summary>
    public enum GpsInputIgnoreFlags:uint
    {
        /// <summary>
        /// ignore altitude field
        /// GPS_INPUT_IGNORE_FLAG_ALT
        /// </summary>
        GpsInputIgnoreFlagAlt = 1,
        /// <summary>
        /// ignore hdop field
        /// GPS_INPUT_IGNORE_FLAG_HDOP
        /// </summary>
        GpsInputIgnoreFlagHdop = 2,
        /// <summary>
        /// ignore vdop field
        /// GPS_INPUT_IGNORE_FLAG_VDOP
        /// </summary>
        GpsInputIgnoreFlagVdop = 4,
        /// <summary>
        /// ignore horizontal velocity field (vn and ve)
        /// GPS_INPUT_IGNORE_FLAG_VEL_HORIZ
        /// </summary>
        GpsInputIgnoreFlagVelHoriz = 8,
        /// <summary>
        /// ignore vertical velocity field (vd)
        /// GPS_INPUT_IGNORE_FLAG_VEL_VERT
        /// </summary>
        GpsInputIgnoreFlagVelVert = 16,
        /// <summary>
        /// ignore speed accuracy field
        /// GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY
        /// </summary>
        GpsInputIgnoreFlagSpeedAccuracy = 32,
        /// <summary>
        /// ignore horizontal accuracy field
        /// GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY
        /// </summary>
        GpsInputIgnoreFlagHorizontalAccuracy = 64,
        /// <summary>
        /// ignore vertical accuracy field
        /// GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY
        /// </summary>
        GpsInputIgnoreFlagVerticalAccuracy = 128,
    }

    /// <summary>
    /// Possible actions an aircraft can take to avoid a collision.
    ///  MAV_COLLISION_ACTION
    /// </summary>
    public enum MavCollisionAction:uint
    {
        /// <summary>
        /// Ignore any potential collisions
        /// MAV_COLLISION_ACTION_NONE
        /// </summary>
        MavCollisionActionNone = 0,
        /// <summary>
        /// Report potential collision
        /// MAV_COLLISION_ACTION_REPORT
        /// </summary>
        MavCollisionActionReport = 1,
        /// <summary>
        /// Ascend or Descend to avoid threat
        /// MAV_COLLISION_ACTION_ASCEND_OR_DESCEND
        /// </summary>
        MavCollisionActionAscendOrDescend = 2,
        /// <summary>
        /// Move horizontally to avoid threat
        /// MAV_COLLISION_ACTION_MOVE_HORIZONTALLY
        /// </summary>
        MavCollisionActionMoveHorizontally = 3,
        /// <summary>
        /// Aircraft to move perpendicular to the collision's velocity vector
        /// MAV_COLLISION_ACTION_MOVE_PERPENDICULAR
        /// </summary>
        MavCollisionActionMovePerpendicular = 4,
        /// <summary>
        /// Aircraft to fly directly back to its launch point
        /// MAV_COLLISION_ACTION_RTL
        /// </summary>
        MavCollisionActionRtl = 5,
        /// <summary>
        /// Aircraft to stop in place
        /// MAV_COLLISION_ACTION_HOVER
        /// </summary>
        MavCollisionActionHover = 6,
    }

    /// <summary>
    /// Aircraft-rated danger from this threat.
    ///  MAV_COLLISION_THREAT_LEVEL
    /// </summary>
    public enum MavCollisionThreatLevel:uint
    {
        /// <summary>
        /// Not a threat
        /// MAV_COLLISION_THREAT_LEVEL_NONE
        /// </summary>
        MavCollisionThreatLevelNone = 0,
        /// <summary>
        /// Craft is mildly concerned about this threat
        /// MAV_COLLISION_THREAT_LEVEL_LOW
        /// </summary>
        MavCollisionThreatLevelLow = 1,
        /// <summary>
        /// Craft is panicking, and may take actions to avoid threat
        /// MAV_COLLISION_THREAT_LEVEL_HIGH
        /// </summary>
        MavCollisionThreatLevelHigh = 2,
    }

    /// <summary>
    /// Source of information about this collision.
    ///  MAV_COLLISION_SRC
    /// </summary>
    public enum MavCollisionSrc:uint
    {
        /// <summary>
        /// ID field references ADSB_VEHICLE packets
        /// MAV_COLLISION_SRC_ADSB
        /// </summary>
        MavCollisionSrcAdsb = 0,
        /// <summary>
        /// ID field references MAVLink SRC ID
        /// MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT
        /// </summary>
        MavCollisionSrcMavlinkGpsGlobalInt = 1,
    }

    /// <summary>
    /// Type of GPS fix
    ///  GPS_FIX_TYPE
    /// </summary>
    public enum GpsFixType:uint
    {
        /// <summary>
        /// No GPS connected
        /// GPS_FIX_TYPE_NO_GPS
        /// </summary>
        GpsFixTypeNoGps = 0,
        /// <summary>
        /// No position information, GPS is connected
        /// GPS_FIX_TYPE_NO_FIX
        /// </summary>
        GpsFixTypeNoFix = 1,
        /// <summary>
        /// 2D position
        /// GPS_FIX_TYPE_2D_FIX
        /// </summary>
        GpsFixType2dFix = 2,
        /// <summary>
        /// 3D position
        /// GPS_FIX_TYPE_3D_FIX
        /// </summary>
        GpsFixType3dFix = 3,
        /// <summary>
        /// DGPS/SBAS aided 3D position
        /// GPS_FIX_TYPE_DGPS
        /// </summary>
        GpsFixTypeDgps = 4,
        /// <summary>
        /// RTK float, 3D position
        /// GPS_FIX_TYPE_RTK_FLOAT
        /// </summary>
        GpsFixTypeRtkFloat = 5,
        /// <summary>
        /// RTK Fixed, 3D position
        /// GPS_FIX_TYPE_RTK_FIXED
        /// </summary>
        GpsFixTypeRtkFixed = 6,
        /// <summary>
        /// Static fixed, typically used for base stations
        /// GPS_FIX_TYPE_STATIC
        /// </summary>
        GpsFixTypeStatic = 7,
        /// <summary>
        /// PPP, 3D position.
        /// GPS_FIX_TYPE_PPP
        /// </summary>
        GpsFixTypePpp = 8,
    }

    /// <summary>
    /// RTK GPS baseline coordinate system, used for RTK corrections
    ///  RTK_BASELINE_COORDINATE_SYSTEM
    /// </summary>
    public enum RtkBaselineCoordinateSystem:uint
    {
        /// <summary>
        /// Earth-centered, Earth-fixed
        /// RTK_BASELINE_COORDINATE_SYSTEM_ECEF
        /// </summary>
        RtkBaselineCoordinateSystemEcef = 0,
        /// <summary>
        /// RTK basestation centered, north, east, down
        /// RTK_BASELINE_COORDINATE_SYSTEM_NED
        /// </summary>
        RtkBaselineCoordinateSystemNed = 1,
    }

    /// <summary>
    /// Type of landing target
    ///  LANDING_TARGET_TYPE
    /// </summary>
    public enum LandingTargetType:uint
    {
        /// <summary>
        /// Landing target signaled by light beacon (ex: IR-LOCK)
        /// LANDING_TARGET_TYPE_LIGHT_BEACON
        /// </summary>
        LandingTargetTypeLightBeacon = 0,
        /// <summary>
        /// Landing target signaled by radio beacon (ex: ILS, NDB)
        /// LANDING_TARGET_TYPE_RADIO_BEACON
        /// </summary>
        LandingTargetTypeRadioBeacon = 1,
        /// <summary>
        /// Landing target represented by a fiducial marker (ex: ARTag)
        /// LANDING_TARGET_TYPE_VISION_FIDUCIAL
        /// </summary>
        LandingTargetTypeVisionFiducial = 2,
        /// <summary>
        /// Landing target represented by a pre-defined visual shape/feature (ex: X-marker, H-marker, square)
        /// LANDING_TARGET_TYPE_VISION_OTHER
        /// </summary>
        LandingTargetTypeVisionOther = 3,
    }

    /// <summary>
    /// Direction of VTOL transition
    ///  VTOL_TRANSITION_HEADING
    /// </summary>
    public enum VtolTransitionHeading:uint
    {
        /// <summary>
        /// Respect the heading configuration of the vehicle.
        /// VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT
        /// </summary>
        VtolTransitionHeadingVehicleDefault = 0,
        /// <summary>
        /// Use the heading pointing towards the next waypoint.
        /// VTOL_TRANSITION_HEADING_NEXT_WAYPOINT
        /// </summary>
        VtolTransitionHeadingNextWaypoint = 1,
        /// <summary>
        /// Use the heading on takeoff (while sitting on the ground).
        /// VTOL_TRANSITION_HEADING_TAKEOFF
        /// </summary>
        VtolTransitionHeadingTakeoff = 2,
        /// <summary>
        /// Use the specified heading in parameter 4.
        /// VTOL_TRANSITION_HEADING_SPECIFIED
        /// </summary>
        VtolTransitionHeadingSpecified = 3,
        /// <summary>
        /// Use the current heading when reaching takeoff altitude (potentially facing the wind when weather-vaning is active).
        /// VTOL_TRANSITION_HEADING_ANY
        /// </summary>
        VtolTransitionHeadingAny = 4,
    }

    /// <summary>
    /// Camera capability flags (Bitmap)
    ///  CAMERA_CAP_FLAGS
    /// </summary>
    public enum CameraCapFlags:uint
    {
        /// <summary>
        /// Camera is able to record video
        /// CAMERA_CAP_FLAGS_CAPTURE_VIDEO
        /// </summary>
        CameraCapFlagsCaptureVideo = 1,
        /// <summary>
        /// Camera is able to capture images
        /// CAMERA_CAP_FLAGS_CAPTURE_IMAGE
        /// </summary>
        CameraCapFlagsCaptureImage = 2,
        /// <summary>
        /// Camera has separate Video and Image/Photo modes (MAV_CMD_SET_CAMERA_MODE)
        /// CAMERA_CAP_FLAGS_HAS_MODES
        /// </summary>
        CameraCapFlagsHasModes = 4,
        /// <summary>
        /// Camera can capture images while in video mode
        /// CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE
        /// </summary>
        CameraCapFlagsCanCaptureImageInVideoMode = 8,
        /// <summary>
        /// Camera can capture videos while in Photo/Image mode
        /// CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE
        /// </summary>
        CameraCapFlagsCanCaptureVideoInImageMode = 16,
        /// <summary>
        /// Camera has image survey mode (MAV_CMD_SET_CAMERA_MODE)
        /// CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE
        /// </summary>
        CameraCapFlagsHasImageSurveyMode = 32,
        /// <summary>
        /// Camera has basic zoom control (MAV_CMD_SET_CAMERA_ZOOM)
        /// CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM
        /// </summary>
        CameraCapFlagsHasBasicZoom = 64,
        /// <summary>
        /// Camera has basic focus control (MAV_CMD_SET_CAMERA_FOCUS)
        /// CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS
        /// </summary>
        CameraCapFlagsHasBasicFocus = 128,
        /// <summary>
        /// Camera has video streaming capabilities (request VIDEO_STREAM_INFORMATION with MAV_CMD_REQUEST_MESSAGE for video streaming info)
        /// CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM
        /// </summary>
        CameraCapFlagsHasVideoStream = 256,
        /// <summary>
        /// Camera supports tracking of a point on the camera view.
        /// CAMERA_CAP_FLAGS_HAS_TRACKING_POINT
        /// </summary>
        CameraCapFlagsHasTrackingPoint = 512,
        /// <summary>
        /// Camera supports tracking of a selection rectangle on the camera view.
        /// CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE
        /// </summary>
        CameraCapFlagsHasTrackingRectangle = 1024,
        /// <summary>
        /// Camera supports tracking geo status (CAMERA_TRACKING_GEO_STATUS).
        /// CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS
        /// </summary>
        CameraCapFlagsHasTrackingGeoStatus = 2048,
    }

    /// <summary>
    /// Stream status flags (Bitmap)
    ///  VIDEO_STREAM_STATUS_FLAGS
    /// </summary>
    public enum VideoStreamStatusFlags:uint
    {
        /// <summary>
        /// Stream is active (running)
        /// VIDEO_STREAM_STATUS_FLAGS_RUNNING
        /// </summary>
        VideoStreamStatusFlagsRunning = 1,
        /// <summary>
        /// Stream is thermal imaging
        /// VIDEO_STREAM_STATUS_FLAGS_THERMAL
        /// </summary>
        VideoStreamStatusFlagsThermal = 2,
    }

    /// <summary>
    /// Video stream types
    ///  VIDEO_STREAM_TYPE
    /// </summary>
    public enum VideoStreamType:uint
    {
        /// <summary>
        /// Stream is RTSP
        /// VIDEO_STREAM_TYPE_RTSP
        /// </summary>
        VideoStreamTypeRtsp = 0,
        /// <summary>
        /// Stream is RTP UDP (URI gives the port number)
        /// VIDEO_STREAM_TYPE_RTPUDP
        /// </summary>
        VideoStreamTypeRtpudp = 1,
        /// <summary>
        /// Stream is MPEG on TCP
        /// VIDEO_STREAM_TYPE_TCP_MPEG
        /// </summary>
        VideoStreamTypeTcpMpeg = 2,
        /// <summary>
        /// Stream is h.264 on MPEG TS (URI gives the port number)
        /// VIDEO_STREAM_TYPE_MPEG_TS_H264
        /// </summary>
        VideoStreamTypeMpegTsH264 = 3,
    }

    /// <summary>
    /// Camera tracking status flags
    ///  CAMERA_TRACKING_STATUS_FLAGS
    /// </summary>
    public enum CameraTrackingStatusFlags:uint
    {
        /// <summary>
        /// Camera is not tracking
        /// CAMERA_TRACKING_STATUS_FLAGS_IDLE
        /// </summary>
        CameraTrackingStatusFlagsIdle = 0,
        /// <summary>
        /// Camera is tracking
        /// CAMERA_TRACKING_STATUS_FLAGS_ACTIVE
        /// </summary>
        CameraTrackingStatusFlagsActive = 1,
        /// <summary>
        /// Camera tracking in error state
        /// CAMERA_TRACKING_STATUS_FLAGS_ERROR
        /// </summary>
        CameraTrackingStatusFlagsError = 2,
    }

    /// <summary>
    /// Camera tracking modes
    ///  CAMERA_TRACKING_MODE
    /// </summary>
    public enum CameraTrackingMode:uint
    {
        /// <summary>
        /// Not tracking
        /// CAMERA_TRACKING_MODE_NONE
        /// </summary>
        CameraTrackingModeNone = 0,
        /// <summary>
        /// Target is a point
        /// CAMERA_TRACKING_MODE_POINT
        /// </summary>
        CameraTrackingModePoint = 1,
        /// <summary>
        /// Target is a rectangle
        /// CAMERA_TRACKING_MODE_RECTANGLE
        /// </summary>
        CameraTrackingModeRectangle = 2,
    }

    /// <summary>
    /// Camera tracking target data (shows where tracked target is within image)
    ///  CAMERA_TRACKING_TARGET_DATA
    /// </summary>
    public enum CameraTrackingTargetData:uint
    {
        /// <summary>
        /// No target data
        /// CAMERA_TRACKING_TARGET_DATA_NONE
        /// </summary>
        CameraTrackingTargetDataNone = 0,
        /// <summary>
        /// Target data embedded in image data (proprietary)
        /// CAMERA_TRACKING_TARGET_DATA_EMBEDDED
        /// </summary>
        CameraTrackingTargetDataEmbedded = 1,
        /// <summary>
        /// Target data rendered in image
        /// CAMERA_TRACKING_TARGET_DATA_RENDERED
        /// </summary>
        CameraTrackingTargetDataRendered = 2,
        /// <summary>
        /// Target data within status message (Point or Rectangle)
        /// CAMERA_TRACKING_TARGET_DATA_IN_STATUS
        /// </summary>
        CameraTrackingTargetDataInStatus = 4,
    }

    /// <summary>
    /// Zoom types for MAV_CMD_SET_CAMERA_ZOOM
    ///  CAMERA_ZOOM_TYPE
    /// </summary>
    public enum CameraZoomType:uint
    {
        /// <summary>
        /// Zoom one step increment (-1 for wide, 1 for tele)
        /// ZOOM_TYPE_STEP
        /// </summary>
        ZoomTypeStep = 0,
        /// <summary>
        /// Continuous zoom up/down until stopped (-1 for wide, 1 for tele, 0 to stop zooming)
        /// ZOOM_TYPE_CONTINUOUS
        /// </summary>
        ZoomTypeContinuous = 1,
        /// <summary>
        /// Zoom value as proportion of full camera range (a percentage value between 0.0 and 100.0)
        /// ZOOM_TYPE_RANGE
        /// </summary>
        ZoomTypeRange = 2,
        /// <summary>
        /// Zoom value/variable focal length in millimetres. Note that there is no message to get the valid zoom range of the camera, so this can type can only be used for cameras where the zoom range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera)
        /// ZOOM_TYPE_FOCAL_LENGTH
        /// </summary>
        ZoomTypeFocalLength = 3,
        /// <summary>
        /// Zoom value as horizontal field of view in degrees.
        /// ZOOM_TYPE_HORIZONTAL_FOV
        /// </summary>
        ZoomTypeHorizontalFov = 4,
    }

    /// <summary>
    /// Focus types for MAV_CMD_SET_CAMERA_FOCUS
    ///  SET_FOCUS_TYPE
    /// </summary>
    public enum SetFocusType:uint
    {
        /// <summary>
        /// Focus one step increment (-1 for focusing in, 1 for focusing out towards infinity).
        /// FOCUS_TYPE_STEP
        /// </summary>
        FocusTypeStep = 0,
        /// <summary>
        /// Continuous focus up/down until stopped (-1 for focusing in, 1 for focusing out towards infinity, 0 to stop focusing)
        /// FOCUS_TYPE_CONTINUOUS
        /// </summary>
        FocusTypeContinuous = 1,
        /// <summary>
        /// Focus value as proportion of full camera focus range (a value between 0.0 and 100.0)
        /// FOCUS_TYPE_RANGE
        /// </summary>
        FocusTypeRange = 2,
        /// <summary>
        /// Focus value in metres. Note that there is no message to get the valid focus range of the camera, so this can type can only be used for cameras where the range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera).
        /// FOCUS_TYPE_METERS
        /// </summary>
        FocusTypeMeters = 3,
        /// <summary>
        /// Focus automatically.
        /// FOCUS_TYPE_AUTO
        /// </summary>
        FocusTypeAuto = 4,
        /// <summary>
        /// Single auto focus. Mainly used for still pictures. Usually abbreviated as AF-S.
        /// FOCUS_TYPE_AUTO_SINGLE
        /// </summary>
        FocusTypeAutoSingle = 5,
        /// <summary>
        /// Continuous auto focus. Mainly used for dynamic scenes. Abbreviated as AF-C.
        /// FOCUS_TYPE_AUTO_CONTINUOUS
        /// </summary>
        FocusTypeAutoContinuous = 6,
    }

    /// <summary>
    /// Result from PARAM_EXT_SET message (or a PARAM_SET within a transaction).
    ///  PARAM_ACK
    /// </summary>
    public enum ParamAck:uint
    {
        /// <summary>
        /// Parameter value ACCEPTED and SET
        /// PARAM_ACK_ACCEPTED
        /// </summary>
        ParamAckAccepted = 0,
        /// <summary>
        /// Parameter value UNKNOWN/UNSUPPORTED
        /// PARAM_ACK_VALUE_UNSUPPORTED
        /// </summary>
        ParamAckValueUnsupported = 1,
        /// <summary>
        /// Parameter failed to set
        /// PARAM_ACK_FAILED
        /// </summary>
        ParamAckFailed = 2,
        /// <summary>
        /// Parameter value received but not yet set/accepted. A subsequent PARAM_ACK_TRANSACTION or PARAM_EXT_ACK with the final result will follow once operation is completed. This is returned immediately for parameters that take longer to set, indicating that the the parameter was received and does not need to be resent.
        /// PARAM_ACK_IN_PROGRESS
        /// </summary>
        ParamAckInProgress = 3,
    }

    /// <summary>
    /// Camera Modes.
    ///  CAMERA_MODE
    /// </summary>
    public enum CameraMode:uint
    {
        /// <summary>
        /// Camera is in image/photo capture mode.
        /// CAMERA_MODE_IMAGE
        /// </summary>
        CameraModeImage = 0,
        /// <summary>
        /// Camera is in video capture mode.
        /// CAMERA_MODE_VIDEO
        /// </summary>
        CameraModeVideo = 1,
        /// <summary>
        /// Camera is in image survey capture mode. It allows for camera controller to do specific settings for surveys.
        /// CAMERA_MODE_IMAGE_SURVEY
        /// </summary>
        CameraModeImageSurvey = 2,
    }

    /// <summary>
    ///  MAV_ARM_AUTH_DENIED_REASON
    /// </summary>
    public enum MavArmAuthDeniedReason:uint
    {
        /// <summary>
        /// Not a specific reason
        /// MAV_ARM_AUTH_DENIED_REASON_GENERIC
        /// </summary>
        MavArmAuthDeniedReasonGeneric = 0,
        /// <summary>
        /// Authorizer will send the error as string to GCS
        /// MAV_ARM_AUTH_DENIED_REASON_NONE
        /// </summary>
        MavArmAuthDeniedReasonNone = 1,
        /// <summary>
        /// At least one waypoint have a invalid value
        /// MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT
        /// </summary>
        MavArmAuthDeniedReasonInvalidWaypoint = 2,
        /// <summary>
        /// Timeout in the authorizer process(in case it depends on network)
        /// MAV_ARM_AUTH_DENIED_REASON_TIMEOUT
        /// </summary>
        MavArmAuthDeniedReasonTimeout = 3,
        /// <summary>
        /// Airspace of the mission in use by another vehicle, second result parameter can have the waypoint id that caused it to be denied.
        /// MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE
        /// </summary>
        MavArmAuthDeniedReasonAirspaceInUse = 4,
        /// <summary>
        /// Weather is not good to fly
        /// MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER
        /// </summary>
        MavArmAuthDeniedReasonBadWeather = 5,
    }

    /// <summary>
    /// RC type
    ///  RC_TYPE
    /// </summary>
    public enum RcType:uint
    {
        /// <summary>
        /// Spektrum DSM2
        /// RC_TYPE_SPEKTRUM_DSM2
        /// </summary>
        RcTypeSpektrumDsm2 = 0,
        /// <summary>
        /// Spektrum DSMX
        /// RC_TYPE_SPEKTRUM_DSMX
        /// </summary>
        RcTypeSpektrumDsmx = 1,
    }

    /// <summary>
    /// Bitmap to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 9 is set the floats afx afy afz should be interpreted as force instead of acceleration.
    ///  POSITION_TARGET_TYPEMASK
    /// </summary>
    public enum PositionTargetTypemask:uint
    {
        /// <summary>
        /// Ignore position x
        /// POSITION_TARGET_TYPEMASK_X_IGNORE
        /// </summary>
        PositionTargetTypemaskXIgnore = 1,
        /// <summary>
        /// Ignore position y
        /// POSITION_TARGET_TYPEMASK_Y_IGNORE
        /// </summary>
        PositionTargetTypemaskYIgnore = 2,
        /// <summary>
        /// Ignore position z
        /// POSITION_TARGET_TYPEMASK_Z_IGNORE
        /// </summary>
        PositionTargetTypemaskZIgnore = 4,
        /// <summary>
        /// Ignore velocity x
        /// POSITION_TARGET_TYPEMASK_VX_IGNORE
        /// </summary>
        PositionTargetTypemaskVxIgnore = 8,
        /// <summary>
        /// Ignore velocity y
        /// POSITION_TARGET_TYPEMASK_VY_IGNORE
        /// </summary>
        PositionTargetTypemaskVyIgnore = 16,
        /// <summary>
        /// Ignore velocity z
        /// POSITION_TARGET_TYPEMASK_VZ_IGNORE
        /// </summary>
        PositionTargetTypemaskVzIgnore = 32,
        /// <summary>
        /// Ignore acceleration x
        /// POSITION_TARGET_TYPEMASK_AX_IGNORE
        /// </summary>
        PositionTargetTypemaskAxIgnore = 64,
        /// <summary>
        /// Ignore acceleration y
        /// POSITION_TARGET_TYPEMASK_AY_IGNORE
        /// </summary>
        PositionTargetTypemaskAyIgnore = 128,
        /// <summary>
        /// Ignore acceleration z
        /// POSITION_TARGET_TYPEMASK_AZ_IGNORE
        /// </summary>
        PositionTargetTypemaskAzIgnore = 256,
        /// <summary>
        /// Use force instead of acceleration
        /// POSITION_TARGET_TYPEMASK_FORCE_SET
        /// </summary>
        PositionTargetTypemaskForceSet = 512,
        /// <summary>
        /// Ignore yaw
        /// POSITION_TARGET_TYPEMASK_YAW_IGNORE
        /// </summary>
        PositionTargetTypemaskYawIgnore = 1024,
        /// <summary>
        /// Ignore yaw rate
        /// POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE
        /// </summary>
        PositionTargetTypemaskYawRateIgnore = 2048,
    }

    /// <summary>
    /// Bitmap to indicate which dimensions should be ignored by the vehicle: a value of 0b00000000 indicates that none of the setpoint dimensions should be ignored.
    ///  ATTITUDE_TARGET_TYPEMASK
    /// </summary>
    public enum AttitudeTargetTypemask:uint
    {
        /// <summary>
        /// Ignore body roll rate
        /// ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskBodyRollRateIgnore = 1,
        /// <summary>
        /// Ignore body pitch rate
        /// ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskBodyPitchRateIgnore = 2,
        /// <summary>
        /// Ignore body yaw rate
        /// ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskBodyYawRateIgnore = 4,
        /// <summary>
        /// Use 3D body thrust setpoint instead of throttle
        /// ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET
        /// </summary>
        AttitudeTargetTypemaskThrustBodySet = 32,
        /// <summary>
        /// Ignore throttle
        /// ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskThrottleIgnore = 64,
        /// <summary>
        /// Ignore attitude
        /// ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE
        /// </summary>
        AttitudeTargetTypemaskAttitudeIgnore = 128,
    }

    /// <summary>
    /// Airborne status of UAS.
    ///  UTM_FLIGHT_STATE
    /// </summary>
    public enum UtmFlightState:uint
    {
        /// <summary>
        /// The flight state can't be determined.
        /// UTM_FLIGHT_STATE_UNKNOWN
        /// </summary>
        UtmFlightStateUnknown = 1,
        /// <summary>
        /// UAS on ground.
        /// UTM_FLIGHT_STATE_GROUND
        /// </summary>
        UtmFlightStateGround = 2,
        /// <summary>
        /// UAS airborne.
        /// UTM_FLIGHT_STATE_AIRBORNE
        /// </summary>
        UtmFlightStateAirborne = 3,
        /// <summary>
        /// UAS is in an emergency flight state.
        /// UTM_FLIGHT_STATE_EMERGENCY
        /// </summary>
        UtmFlightStateEmergency = 16,
        /// <summary>
        /// UAS has no active controls.
        /// UTM_FLIGHT_STATE_NOCTRL
        /// </summary>
        UtmFlightStateNoctrl = 32,
    }

    /// <summary>
    /// Flags for the global position report.
    ///  UTM_DATA_AVAIL_FLAGS
    /// </summary>
    public enum UtmDataAvailFlags:uint
    {
        /// <summary>
        /// The field time contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_TIME_VALID
        /// </summary>
        UtmDataAvailFlagsTimeValid = 1,
        /// <summary>
        /// The field uas_id contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsUasIdAvailable = 2,
        /// <summary>
        /// The fields lat, lon and h_acc contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsPositionAvailable = 4,
        /// <summary>
        /// The fields alt and v_acc contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsAltitudeAvailable = 8,
        /// <summary>
        /// The field relative_alt contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsRelativeAltitudeAvailable = 16,
        /// <summary>
        /// The fields vx and vy contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsHorizontalVeloAvailable = 32,
        /// <summary>
        /// The field vz contains valid data.
        /// UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsVerticalVeloAvailable = 64,
        /// <summary>
        /// The fields next_lat, next_lon and next_alt contain valid data.
        /// UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE
        /// </summary>
        UtmDataAvailFlagsNextWaypointAvailable = 128,
    }

    /// <summary>
    /// These flags encode the cellular network status
    ///  CELLULAR_STATUS_FLAG
    /// </summary>
    public enum CellularStatusFlag:uint
    {
        /// <summary>
        /// State unknown or not reportable.
        /// CELLULAR_STATUS_FLAG_UNKNOWN
        /// </summary>
        CellularStatusFlagUnknown = 0,
        /// <summary>
        /// Modem is unusable
        /// CELLULAR_STATUS_FLAG_FAILED
        /// </summary>
        CellularStatusFlagFailed = 1,
        /// <summary>
        /// Modem is being initialized
        /// CELLULAR_STATUS_FLAG_INITIALIZING
        /// </summary>
        CellularStatusFlagInitializing = 2,
        /// <summary>
        /// Modem is locked
        /// CELLULAR_STATUS_FLAG_LOCKED
        /// </summary>
        CellularStatusFlagLocked = 3,
        /// <summary>
        /// Modem is not enabled and is powered down
        /// CELLULAR_STATUS_FLAG_DISABLED
        /// </summary>
        CellularStatusFlagDisabled = 4,
        /// <summary>
        /// Modem is currently transitioning to the CELLULAR_STATUS_FLAG_DISABLED state
        /// CELLULAR_STATUS_FLAG_DISABLING
        /// </summary>
        CellularStatusFlagDisabling = 5,
        /// <summary>
        /// Modem is currently transitioning to the CELLULAR_STATUS_FLAG_ENABLED state
        /// CELLULAR_STATUS_FLAG_ENABLING
        /// </summary>
        CellularStatusFlagEnabling = 6,
        /// <summary>
        /// Modem is enabled and powered on but not registered with a network provider and not available for data connections
        /// CELLULAR_STATUS_FLAG_ENABLED
        /// </summary>
        CellularStatusFlagEnabled = 7,
        /// <summary>
        /// Modem is searching for a network provider to register
        /// CELLULAR_STATUS_FLAG_SEARCHING
        /// </summary>
        CellularStatusFlagSearching = 8,
        /// <summary>
        /// Modem is registered with a network provider, and data connections and messaging may be available for use
        /// CELLULAR_STATUS_FLAG_REGISTERED
        /// </summary>
        CellularStatusFlagRegistered = 9,
        /// <summary>
        /// Modem is disconnecting and deactivating the last active packet data bearer. This state will not be entered if more than one packet data bearer is active and one of the active bearers is deactivated
        /// CELLULAR_STATUS_FLAG_DISCONNECTING
        /// </summary>
        CellularStatusFlagDisconnecting = 10,
        /// <summary>
        /// Modem is activating and connecting the first packet data bearer. Subsequent bearer activations when another bearer is already active do not cause this state to be entered
        /// CELLULAR_STATUS_FLAG_CONNECTING
        /// </summary>
        CellularStatusFlagConnecting = 11,
        /// <summary>
        /// One or more packet data bearers is active and connected
        /// CELLULAR_STATUS_FLAG_CONNECTED
        /// </summary>
        CellularStatusFlagConnected = 12,
    }

    /// <summary>
    /// These flags are used to diagnose the failure state of CELLULAR_STATUS
    ///  CELLULAR_NETWORK_FAILED_REASON
    /// </summary>
    public enum CellularNetworkFailedReason:uint
    {
        /// <summary>
        /// No error
        /// CELLULAR_NETWORK_FAILED_REASON_NONE
        /// </summary>
        CellularNetworkFailedReasonNone = 0,
        /// <summary>
        /// Error state is unknown
        /// CELLULAR_NETWORK_FAILED_REASON_UNKNOWN
        /// </summary>
        CellularNetworkFailedReasonUnknown = 1,
        /// <summary>
        /// SIM is required for the modem but missing
        /// CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING
        /// </summary>
        CellularNetworkFailedReasonSimMissing = 2,
        /// <summary>
        /// SIM is available, but not usable for connection
        /// CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR
        /// </summary>
        CellularNetworkFailedReasonSimError = 3,
    }

    /// <summary>
    /// Cellular network radio type
    ///  CELLULAR_NETWORK_RADIO_TYPE
    /// </summary>
    public enum CellularNetworkRadioType:uint
    {
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_NONE
        /// </summary>
        CellularNetworkRadioTypeNone = 0,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_GSM
        /// </summary>
        CellularNetworkRadioTypeGsm = 1,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_CDMA
        /// </summary>
        CellularNetworkRadioTypeCdma = 2,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_WCDMA
        /// </summary>
        CellularNetworkRadioTypeWcdma = 3,
        /// <summary>
        /// CELLULAR_NETWORK_RADIO_TYPE_LTE
        /// </summary>
        CellularNetworkRadioTypeLte = 4,
    }

    /// <summary>
    /// Precision land modes (used in MAV_CMD_NAV_LAND).
    ///  PRECISION_LAND_MODE
    /// </summary>
    public enum PrecisionLandMode:uint
    {
        /// <summary>
        /// Normal (non-precision) landing.
        /// PRECISION_LAND_MODE_DISABLED
        /// </summary>
        PrecisionLandModeDisabled = 0,
        /// <summary>
        /// Use precision landing if beacon detected when land command accepted, otherwise land normally.
        /// PRECISION_LAND_MODE_OPPORTUNISTIC
        /// </summary>
        PrecisionLandModeOpportunistic = 1,
        /// <summary>
        /// Use precision landing, searching for beacon if not found when land command accepted (land normally if beacon cannot be found).
        /// PRECISION_LAND_MODE_REQUIRED
        /// </summary>
        PrecisionLandModeRequired = 2,
    }

    /// <summary>
    /// Parachute actions. Trigger release and enable/disable auto-release.
    ///  PARACHUTE_ACTION
    /// </summary>
    public enum ParachuteAction:uint
    {
        /// <summary>
        /// Disable auto-release of parachute (i.e. release triggered by crash detectors).
        /// PARACHUTE_DISABLE
        /// </summary>
        ParachuteDisable = 0,
        /// <summary>
        /// Enable auto-release of parachute.
        /// PARACHUTE_ENABLE
        /// </summary>
        ParachuteEnable = 1,
        /// <summary>
        /// Release parachute and kill motors.
        /// PARACHUTE_RELEASE
        /// </summary>
        ParachuteRelease = 2,
    }

    /// <summary>
    ///  MAV_TUNNEL_PAYLOAD_TYPE
    /// </summary>
    public enum MavTunnelPayloadType:uint
    {
        /// <summary>
        /// Encoding of payload unknown.
        /// MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN
        /// </summary>
        MavTunnelPayloadTypeUnknown = 0,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved0 = 200,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved1 = 201,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved2 = 202,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved3 = 203,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved4 = 204,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved5 = 205,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved6 = 206,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved7 = 207,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved8 = 208,
        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9
        /// </summary>
        MavTunnelPayloadTypeStorm32Reserved9 = 209,
    }

    /// <summary>
    ///  MAV_ODID_ID_TYPE
    /// </summary>
    public enum MavOdidIdType:uint
    {
        /// <summary>
        /// No type defined.
        /// MAV_ODID_ID_TYPE_NONE
        /// </summary>
        MavOdidIdTypeNone = 0,
        /// <summary>
        /// Manufacturer Serial Number (ANSI/CTA-2063 format).
        /// MAV_ODID_ID_TYPE_SERIAL_NUMBER
        /// </summary>
        MavOdidIdTypeSerialNumber = 1,
        /// <summary>
        /// CAA (Civil Aviation Authority) registered ID. Format: [ICAO Country Code].[CAA Assigned ID].
        /// MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID
        /// </summary>
        MavOdidIdTypeCaaRegistrationId = 2,
        /// <summary>
        /// UTM (Unmanned Traffic Management) assigned UUID (RFC4122).
        /// MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID
        /// </summary>
        MavOdidIdTypeUtmAssignedUuid = 3,
        /// <summary>
        /// A 20 byte ID for a specific flight/session. The exact ID type is indicated by the first byte of uas_id and these type values are managed by ICAO.
        /// MAV_ODID_ID_TYPE_SPECIFIC_SESSION_ID
        /// </summary>
        MavOdidIdTypeSpecificSessionId = 4,
    }

    /// <summary>
    ///  MAV_ODID_UA_TYPE
    /// </summary>
    public enum MavOdidUaType:uint
    {
        /// <summary>
        /// No UA (Unmanned Aircraft) type defined.
        /// MAV_ODID_UA_TYPE_NONE
        /// </summary>
        MavOdidUaTypeNone = 0,
        /// <summary>
        /// Aeroplane/Airplane. Fixed wing.
        /// MAV_ODID_UA_TYPE_AEROPLANE
        /// </summary>
        MavOdidUaTypeAeroplane = 1,
        /// <summary>
        /// Helicopter or multirotor.
        /// MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR
        /// </summary>
        MavOdidUaTypeHelicopterOrMultirotor = 2,
        /// <summary>
        /// Gyroplane.
        /// MAV_ODID_UA_TYPE_GYROPLANE
        /// </summary>
        MavOdidUaTypeGyroplane = 3,
        /// <summary>
        /// VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that can take off vertically.
        /// MAV_ODID_UA_TYPE_HYBRID_LIFT
        /// </summary>
        MavOdidUaTypeHybridLift = 4,
        /// <summary>
        /// Ornithopter.
        /// MAV_ODID_UA_TYPE_ORNITHOPTER
        /// </summary>
        MavOdidUaTypeOrnithopter = 5,
        /// <summary>
        /// Glider.
        /// MAV_ODID_UA_TYPE_GLIDER
        /// </summary>
        MavOdidUaTypeGlider = 6,
        /// <summary>
        /// Kite.
        /// MAV_ODID_UA_TYPE_KITE
        /// </summary>
        MavOdidUaTypeKite = 7,
        /// <summary>
        /// Free Balloon.
        /// MAV_ODID_UA_TYPE_FREE_BALLOON
        /// </summary>
        MavOdidUaTypeFreeBalloon = 8,
        /// <summary>
        /// Captive Balloon.
        /// MAV_ODID_UA_TYPE_CAPTIVE_BALLOON
        /// </summary>
        MavOdidUaTypeCaptiveBalloon = 9,
        /// <summary>
        /// Airship. E.g. a blimp.
        /// MAV_ODID_UA_TYPE_AIRSHIP
        /// </summary>
        MavOdidUaTypeAirship = 10,
        /// <summary>
        /// Free Fall/Parachute (unpowered).
        /// MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE
        /// </summary>
        MavOdidUaTypeFreeFallParachute = 11,
        /// <summary>
        /// Rocket.
        /// MAV_ODID_UA_TYPE_ROCKET
        /// </summary>
        MavOdidUaTypeRocket = 12,
        /// <summary>
        /// Tethered powered aircraft.
        /// MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT
        /// </summary>
        MavOdidUaTypeTetheredPoweredAircraft = 13,
        /// <summary>
        /// Ground Obstacle.
        /// MAV_ODID_UA_TYPE_GROUND_OBSTACLE
        /// </summary>
        MavOdidUaTypeGroundObstacle = 14,
        /// <summary>
        /// Other type of aircraft not listed earlier.
        /// MAV_ODID_UA_TYPE_OTHER
        /// </summary>
        MavOdidUaTypeOther = 15,
    }

    /// <summary>
    ///  MAV_ODID_STATUS
    /// </summary>
    public enum MavOdidStatus:uint
    {
        /// <summary>
        /// The status of the (UA) Unmanned Aircraft is undefined.
        /// MAV_ODID_STATUS_UNDECLARED
        /// </summary>
        MavOdidStatusUndeclared = 0,
        /// <summary>
        /// The UA is on the ground.
        /// MAV_ODID_STATUS_GROUND
        /// </summary>
        MavOdidStatusGround = 1,
        /// <summary>
        /// The UA is in the air.
        /// MAV_ODID_STATUS_AIRBORNE
        /// </summary>
        MavOdidStatusAirborne = 2,
        /// <summary>
        /// The UA is having an emergency.
        /// MAV_ODID_STATUS_EMERGENCY
        /// </summary>
        MavOdidStatusEmergency = 3,
        /// <summary>
        /// The remote ID system is failing or unreliable in some way.
        /// MAV_ODID_STATUS_REMOTE_ID_SYSTEM_FAILURE
        /// </summary>
        MavOdidStatusRemoteIdSystemFailure = 4,
    }

    /// <summary>
    ///  MAV_ODID_HEIGHT_REF
    /// </summary>
    public enum MavOdidHeightRef:uint
    {
        /// <summary>
        /// The height field is relative to the take-off location.
        /// MAV_ODID_HEIGHT_REF_OVER_TAKEOFF
        /// </summary>
        MavOdidHeightRefOverTakeoff = 0,
        /// <summary>
        /// The height field is relative to ground.
        /// MAV_ODID_HEIGHT_REF_OVER_GROUND
        /// </summary>
        MavOdidHeightRefOverGround = 1,
    }

    /// <summary>
    ///  MAV_ODID_HOR_ACC
    /// </summary>
    public enum MavOdidHorAcc:uint
    {
        /// <summary>
        /// The horizontal accuracy is unknown.
        /// MAV_ODID_HOR_ACC_UNKNOWN
        /// </summary>
        MavOdidHorAccUnknown = 0,
        /// <summary>
        /// The horizontal accuracy is smaller than 10 Nautical Miles. 18.52 km.
        /// MAV_ODID_HOR_ACC_10NM
        /// </summary>
        MavOdidHorAcc10nm = 1,
        /// <summary>
        /// The horizontal accuracy is smaller than 4 Nautical Miles. 7.408 km.
        /// MAV_ODID_HOR_ACC_4NM
        /// </summary>
        MavOdidHorAcc4nm = 2,
        /// <summary>
        /// The horizontal accuracy is smaller than 2 Nautical Miles. 3.704 km.
        /// MAV_ODID_HOR_ACC_2NM
        /// </summary>
        MavOdidHorAcc2nm = 3,
        /// <summary>
        /// The horizontal accuracy is smaller than 1 Nautical Miles. 1.852 km.
        /// MAV_ODID_HOR_ACC_1NM
        /// </summary>
        MavOdidHorAcc1nm = 4,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.5 Nautical Miles. 926 m.
        /// MAV_ODID_HOR_ACC_0_5NM
        /// </summary>
        MavOdidHorAcc05nm = 5,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.3 Nautical Miles. 555.6 m.
        /// MAV_ODID_HOR_ACC_0_3NM
        /// </summary>
        MavOdidHorAcc03nm = 6,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.1 Nautical Miles. 185.2 m.
        /// MAV_ODID_HOR_ACC_0_1NM
        /// </summary>
        MavOdidHorAcc01nm = 7,
        /// <summary>
        /// The horizontal accuracy is smaller than 0.05 Nautical Miles. 92.6 m.
        /// MAV_ODID_HOR_ACC_0_05NM
        /// </summary>
        MavOdidHorAcc005nm = 8,
        /// <summary>
        /// The horizontal accuracy is smaller than 30 meter.
        /// MAV_ODID_HOR_ACC_30_METER
        /// </summary>
        MavOdidHorAcc30Meter = 9,
        /// <summary>
        /// The horizontal accuracy is smaller than 10 meter.
        /// MAV_ODID_HOR_ACC_10_METER
        /// </summary>
        MavOdidHorAcc10Meter = 10,
        /// <summary>
        /// The horizontal accuracy is smaller than 3 meter.
        /// MAV_ODID_HOR_ACC_3_METER
        /// </summary>
        MavOdidHorAcc3Meter = 11,
        /// <summary>
        /// The horizontal accuracy is smaller than 1 meter.
        /// MAV_ODID_HOR_ACC_1_METER
        /// </summary>
        MavOdidHorAcc1Meter = 12,
    }

    /// <summary>
    ///  MAV_ODID_VER_ACC
    /// </summary>
    public enum MavOdidVerAcc:uint
    {
        /// <summary>
        /// The vertical accuracy is unknown.
        /// MAV_ODID_VER_ACC_UNKNOWN
        /// </summary>
        MavOdidVerAccUnknown = 0,
        /// <summary>
        /// The vertical accuracy is smaller than 150 meter.
        /// MAV_ODID_VER_ACC_150_METER
        /// </summary>
        MavOdidVerAcc150Meter = 1,
        /// <summary>
        /// The vertical accuracy is smaller than 45 meter.
        /// MAV_ODID_VER_ACC_45_METER
        /// </summary>
        MavOdidVerAcc45Meter = 2,
        /// <summary>
        /// The vertical accuracy is smaller than 25 meter.
        /// MAV_ODID_VER_ACC_25_METER
        /// </summary>
        MavOdidVerAcc25Meter = 3,
        /// <summary>
        /// The vertical accuracy is smaller than 10 meter.
        /// MAV_ODID_VER_ACC_10_METER
        /// </summary>
        MavOdidVerAcc10Meter = 4,
        /// <summary>
        /// The vertical accuracy is smaller than 3 meter.
        /// MAV_ODID_VER_ACC_3_METER
        /// </summary>
        MavOdidVerAcc3Meter = 5,
        /// <summary>
        /// The vertical accuracy is smaller than 1 meter.
        /// MAV_ODID_VER_ACC_1_METER
        /// </summary>
        MavOdidVerAcc1Meter = 6,
    }

    /// <summary>
    ///  MAV_ODID_SPEED_ACC
    /// </summary>
    public enum MavOdidSpeedAcc:uint
    {
        /// <summary>
        /// The speed accuracy is unknown.
        /// MAV_ODID_SPEED_ACC_UNKNOWN
        /// </summary>
        MavOdidSpeedAccUnknown = 0,
        /// <summary>
        /// The speed accuracy is smaller than 10 meters per second.
        /// MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc10MetersPerSecond = 1,
        /// <summary>
        /// The speed accuracy is smaller than 3 meters per second.
        /// MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc3MetersPerSecond = 2,
        /// <summary>
        /// The speed accuracy is smaller than 1 meters per second.
        /// MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc1MetersPerSecond = 3,
        /// <summary>
        /// The speed accuracy is smaller than 0.3 meters per second.
        /// MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND
        /// </summary>
        MavOdidSpeedAcc03MetersPerSecond = 4,
    }

    /// <summary>
    ///  MAV_ODID_TIME_ACC
    /// </summary>
    public enum MavOdidTimeAcc:uint
    {
        /// <summary>
        /// The timestamp accuracy is unknown.
        /// MAV_ODID_TIME_ACC_UNKNOWN
        /// </summary>
        MavOdidTimeAccUnknown = 0,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.1 second.
        /// MAV_ODID_TIME_ACC_0_1_SECOND
        /// </summary>
        MavOdidTimeAcc01Second = 1,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.2 second.
        /// MAV_ODID_TIME_ACC_0_2_SECOND
        /// </summary>
        MavOdidTimeAcc02Second = 2,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.3 second.
        /// MAV_ODID_TIME_ACC_0_3_SECOND
        /// </summary>
        MavOdidTimeAcc03Second = 3,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.4 second.
        /// MAV_ODID_TIME_ACC_0_4_SECOND
        /// </summary>
        MavOdidTimeAcc04Second = 4,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.5 second.
        /// MAV_ODID_TIME_ACC_0_5_SECOND
        /// </summary>
        MavOdidTimeAcc05Second = 5,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.6 second.
        /// MAV_ODID_TIME_ACC_0_6_SECOND
        /// </summary>
        MavOdidTimeAcc06Second = 6,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.7 second.
        /// MAV_ODID_TIME_ACC_0_7_SECOND
        /// </summary>
        MavOdidTimeAcc07Second = 7,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.8 second.
        /// MAV_ODID_TIME_ACC_0_8_SECOND
        /// </summary>
        MavOdidTimeAcc08Second = 8,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 0.9 second.
        /// MAV_ODID_TIME_ACC_0_9_SECOND
        /// </summary>
        MavOdidTimeAcc09Second = 9,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.0 second.
        /// MAV_ODID_TIME_ACC_1_0_SECOND
        /// </summary>
        MavOdidTimeAcc10Second = 10,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.1 second.
        /// MAV_ODID_TIME_ACC_1_1_SECOND
        /// </summary>
        MavOdidTimeAcc11Second = 11,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.2 second.
        /// MAV_ODID_TIME_ACC_1_2_SECOND
        /// </summary>
        MavOdidTimeAcc12Second = 12,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.3 second.
        /// MAV_ODID_TIME_ACC_1_3_SECOND
        /// </summary>
        MavOdidTimeAcc13Second = 13,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.4 second.
        /// MAV_ODID_TIME_ACC_1_4_SECOND
        /// </summary>
        MavOdidTimeAcc14Second = 14,
        /// <summary>
        /// The timestamp accuracy is smaller than or equal to 1.5 second.
        /// MAV_ODID_TIME_ACC_1_5_SECOND
        /// </summary>
        MavOdidTimeAcc15Second = 15,
    }

    /// <summary>
    ///  MAV_ODID_AUTH_TYPE
    /// </summary>
    public enum MavOdidAuthType:uint
    {
        /// <summary>
        /// No authentication type is specified.
        /// MAV_ODID_AUTH_TYPE_NONE
        /// </summary>
        MavOdidAuthTypeNone = 0,
        /// <summary>
        /// Signature for the UAS (Unmanned Aircraft System) ID.
        /// MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE
        /// </summary>
        MavOdidAuthTypeUasIdSignature = 1,
        /// <summary>
        /// Signature for the Operator ID.
        /// MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE
        /// </summary>
        MavOdidAuthTypeOperatorIdSignature = 2,
        /// <summary>
        /// Signature for the entire message set.
        /// MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE
        /// </summary>
        MavOdidAuthTypeMessageSetSignature = 3,
        /// <summary>
        /// Authentication is provided by Network Remote ID.
        /// MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID
        /// </summary>
        MavOdidAuthTypeNetworkRemoteId = 4,
        /// <summary>
        /// The exact authentication type is indicated by the first byte of authentication_data and these type values are managed by ICAO.
        /// MAV_ODID_AUTH_TYPE_SPECIFIC_AUTHENTICATION
        /// </summary>
        MavOdidAuthTypeSpecificAuthentication = 5,
    }

    /// <summary>
    ///  MAV_ODID_DESC_TYPE
    /// </summary>
    public enum MavOdidDescType:uint
    {
        /// <summary>
        /// Optional free-form text description of the purpose of the flight.
        /// MAV_ODID_DESC_TYPE_TEXT
        /// </summary>
        MavOdidDescTypeText = 0,
        /// <summary>
        /// Optional additional clarification when status == MAV_ODID_STATUS_EMERGENCY.
        /// MAV_ODID_DESC_TYPE_EMERGENCY
        /// </summary>
        MavOdidDescTypeEmergency = 1,
        /// <summary>
        /// Optional additional clarification when status != MAV_ODID_STATUS_EMERGENCY.
        /// MAV_ODID_DESC_TYPE_EXTENDED_STATUS
        /// </summary>
        MavOdidDescTypeExtendedStatus = 2,
    }

    /// <summary>
    ///  MAV_ODID_OPERATOR_LOCATION_TYPE
    /// </summary>
    public enum MavOdidOperatorLocationType:uint
    {
        /// <summary>
        /// The location/altitude of the operator is the same as the take-off location.
        /// MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF
        /// </summary>
        MavOdidOperatorLocationTypeTakeoff = 0,
        /// <summary>
        /// The location/altitude of the operator is dynamic. E.g. based on live GNSS data.
        /// MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS
        /// </summary>
        MavOdidOperatorLocationTypeLiveGnss = 1,
        /// <summary>
        /// The location/altitude of the operator are fixed values.
        /// MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED
        /// </summary>
        MavOdidOperatorLocationTypeFixed = 2,
    }

    /// <summary>
    ///  MAV_ODID_CLASSIFICATION_TYPE
    /// </summary>
    public enum MavOdidClassificationType:uint
    {
        /// <summary>
        /// The classification type for the UA is undeclared.
        /// MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED
        /// </summary>
        MavOdidClassificationTypeUndeclared = 0,
        /// <summary>
        /// The classification type for the UA follows EU (European Union) specifications.
        /// MAV_ODID_CLASSIFICATION_TYPE_EU
        /// </summary>
        MavOdidClassificationTypeEu = 1,
    }

    /// <summary>
    ///  MAV_ODID_CATEGORY_EU
    /// </summary>
    public enum MavOdidCategoryEu:uint
    {
        /// <summary>
        /// The category for the UA, according to the EU specification, is undeclared.
        /// MAV_ODID_CATEGORY_EU_UNDECLARED
        /// </summary>
        MavOdidCategoryEuUndeclared = 0,
        /// <summary>
        /// The category for the UA, according to the EU specification, is the Open category.
        /// MAV_ODID_CATEGORY_EU_OPEN
        /// </summary>
        MavOdidCategoryEuOpen = 1,
        /// <summary>
        /// The category for the UA, according to the EU specification, is the Specific category.
        /// MAV_ODID_CATEGORY_EU_SPECIFIC
        /// </summary>
        MavOdidCategoryEuSpecific = 2,
        /// <summary>
        /// The category for the UA, according to the EU specification, is the Certified category.
        /// MAV_ODID_CATEGORY_EU_CERTIFIED
        /// </summary>
        MavOdidCategoryEuCertified = 3,
    }

    /// <summary>
    ///  MAV_ODID_CLASS_EU
    /// </summary>
    public enum MavOdidClassEu:uint
    {
        /// <summary>
        /// The class for the UA, according to the EU specification, is undeclared.
        /// MAV_ODID_CLASS_EU_UNDECLARED
        /// </summary>
        MavOdidClassEuUndeclared = 0,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 0.
        /// MAV_ODID_CLASS_EU_CLASS_0
        /// </summary>
        MavOdidClassEuClass0 = 1,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 1.
        /// MAV_ODID_CLASS_EU_CLASS_1
        /// </summary>
        MavOdidClassEuClass1 = 2,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 2.
        /// MAV_ODID_CLASS_EU_CLASS_2
        /// </summary>
        MavOdidClassEuClass2 = 3,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 3.
        /// MAV_ODID_CLASS_EU_CLASS_3
        /// </summary>
        MavOdidClassEuClass3 = 4,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 4.
        /// MAV_ODID_CLASS_EU_CLASS_4
        /// </summary>
        MavOdidClassEuClass4 = 5,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 5.
        /// MAV_ODID_CLASS_EU_CLASS_5
        /// </summary>
        MavOdidClassEuClass5 = 6,
        /// <summary>
        /// The class for the UA, according to the EU specification, is Class 6.
        /// MAV_ODID_CLASS_EU_CLASS_6
        /// </summary>
        MavOdidClassEuClass6 = 7,
    }

    /// <summary>
    ///  MAV_ODID_OPERATOR_ID_TYPE
    /// </summary>
    public enum MavOdidOperatorIdType:uint
    {
        /// <summary>
        /// CAA (Civil Aviation Authority) registered operator ID.
        /// MAV_ODID_OPERATOR_ID_TYPE_CAA
        /// </summary>
        MavOdidOperatorIdTypeCaa = 0,
    }

    /// <summary>
    ///  MAV_ODID_ARM_STATUS
    /// </summary>
    public enum MavOdidArmStatus:uint
    {
        /// <summary>
        /// Passing arming checks.
        /// MAV_ODID_ARM_STATUS_GOOD_TO_ARM
        /// </summary>
        MavOdidArmStatusGoodToArm = 0,
        /// <summary>
        /// Generic arming failure, see error string for details.
        /// MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC
        /// </summary>
        MavOdidArmStatusPreArmFailGeneric = 1,
    }

    /// <summary>
    /// Tune formats (used for vehicle buzzer/tone generation).
    ///  TUNE_FORMAT
    /// </summary>
    public enum TuneFormat:uint
    {
        /// <summary>
        /// Format is QBasic 1.1 Play: https://www.qbasic.net/en/reference/qb11/Statement/PLAY-006.htm.
        /// TUNE_FORMAT_QBASIC1_1
        /// </summary>
        TuneFormatQbasic11 = 1,
        /// <summary>
        /// Format is Modern Music Markup Language (MML): https://en.wikipedia.org/wiki/Music_Macro_Language#Modern_MML.
        /// TUNE_FORMAT_MML_MODERN
        /// </summary>
        TuneFormatMmlModern = 2,
    }

    /// <summary>
    /// Type of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
    ///  AIS_TYPE
    /// </summary>
    public enum AisType:uint
    {
        /// <summary>
        /// Not available (default).
        /// AIS_TYPE_UNKNOWN
        /// </summary>
        AisTypeUnknown = 0,
        /// <summary>
        /// AIS_TYPE_RESERVED_1
        /// </summary>
        AisTypeReserved1 = 1,
        /// <summary>
        /// AIS_TYPE_RESERVED_2
        /// </summary>
        AisTypeReserved2 = 2,
        /// <summary>
        /// AIS_TYPE_RESERVED_3
        /// </summary>
        AisTypeReserved3 = 3,
        /// <summary>
        /// AIS_TYPE_RESERVED_4
        /// </summary>
        AisTypeReserved4 = 4,
        /// <summary>
        /// AIS_TYPE_RESERVED_5
        /// </summary>
        AisTypeReserved5 = 5,
        /// <summary>
        /// AIS_TYPE_RESERVED_6
        /// </summary>
        AisTypeReserved6 = 6,
        /// <summary>
        /// AIS_TYPE_RESERVED_7
        /// </summary>
        AisTypeReserved7 = 7,
        /// <summary>
        /// AIS_TYPE_RESERVED_8
        /// </summary>
        AisTypeReserved8 = 8,
        /// <summary>
        /// AIS_TYPE_RESERVED_9
        /// </summary>
        AisTypeReserved9 = 9,
        /// <summary>
        /// AIS_TYPE_RESERVED_10
        /// </summary>
        AisTypeReserved10 = 10,
        /// <summary>
        /// AIS_TYPE_RESERVED_11
        /// </summary>
        AisTypeReserved11 = 11,
        /// <summary>
        /// AIS_TYPE_RESERVED_12
        /// </summary>
        AisTypeReserved12 = 12,
        /// <summary>
        /// AIS_TYPE_RESERVED_13
        /// </summary>
        AisTypeReserved13 = 13,
        /// <summary>
        /// AIS_TYPE_RESERVED_14
        /// </summary>
        AisTypeReserved14 = 14,
        /// <summary>
        /// AIS_TYPE_RESERVED_15
        /// </summary>
        AisTypeReserved15 = 15,
        /// <summary>
        /// AIS_TYPE_RESERVED_16
        /// </summary>
        AisTypeReserved16 = 16,
        /// <summary>
        /// AIS_TYPE_RESERVED_17
        /// </summary>
        AisTypeReserved17 = 17,
        /// <summary>
        /// AIS_TYPE_RESERVED_18
        /// </summary>
        AisTypeReserved18 = 18,
        /// <summary>
        /// AIS_TYPE_RESERVED_19
        /// </summary>
        AisTypeReserved19 = 19,
        /// <summary>
        /// Wing In Ground effect.
        /// AIS_TYPE_WIG
        /// </summary>
        AisTypeWig = 20,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_A
        /// </summary>
        AisTypeWigHazardousA = 21,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_B
        /// </summary>
        AisTypeWigHazardousB = 22,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_C
        /// </summary>
        AisTypeWigHazardousC = 23,
        /// <summary>
        /// AIS_TYPE_WIG_HAZARDOUS_D
        /// </summary>
        AisTypeWigHazardousD = 24,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_1
        /// </summary>
        AisTypeWigReserved1 = 25,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_2
        /// </summary>
        AisTypeWigReserved2 = 26,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_3
        /// </summary>
        AisTypeWigReserved3 = 27,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_4
        /// </summary>
        AisTypeWigReserved4 = 28,
        /// <summary>
        /// AIS_TYPE_WIG_RESERVED_5
        /// </summary>
        AisTypeWigReserved5 = 29,
        /// <summary>
        /// AIS_TYPE_FISHING
        /// </summary>
        AisTypeFishing = 30,
        /// <summary>
        /// AIS_TYPE_TOWING
        /// </summary>
        AisTypeTowing = 31,
        /// <summary>
        /// Towing: length exceeds 200m or breadth exceeds 25m.
        /// AIS_TYPE_TOWING_LARGE
        /// </summary>
        AisTypeTowingLarge = 32,
        /// <summary>
        /// Dredging or other underwater ops.
        /// AIS_TYPE_DREDGING
        /// </summary>
        AisTypeDredging = 33,
        /// <summary>
        /// AIS_TYPE_DIVING
        /// </summary>
        AisTypeDiving = 34,
        /// <summary>
        /// AIS_TYPE_MILITARY
        /// </summary>
        AisTypeMilitary = 35,
        /// <summary>
        /// AIS_TYPE_SAILING
        /// </summary>
        AisTypeSailing = 36,
        /// <summary>
        /// AIS_TYPE_PLEASURE
        /// </summary>
        AisTypePleasure = 37,
        /// <summary>
        /// AIS_TYPE_RESERVED_20
        /// </summary>
        AisTypeReserved20 = 38,
        /// <summary>
        /// AIS_TYPE_RESERVED_21
        /// </summary>
        AisTypeReserved21 = 39,
        /// <summary>
        /// High Speed Craft.
        /// AIS_TYPE_HSC
        /// </summary>
        AisTypeHsc = 40,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_A
        /// </summary>
        AisTypeHscHazardousA = 41,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_B
        /// </summary>
        AisTypeHscHazardousB = 42,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_C
        /// </summary>
        AisTypeHscHazardousC = 43,
        /// <summary>
        /// AIS_TYPE_HSC_HAZARDOUS_D
        /// </summary>
        AisTypeHscHazardousD = 44,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_1
        /// </summary>
        AisTypeHscReserved1 = 45,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_2
        /// </summary>
        AisTypeHscReserved2 = 46,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_3
        /// </summary>
        AisTypeHscReserved3 = 47,
        /// <summary>
        /// AIS_TYPE_HSC_RESERVED_4
        /// </summary>
        AisTypeHscReserved4 = 48,
        /// <summary>
        /// AIS_TYPE_HSC_UNKNOWN
        /// </summary>
        AisTypeHscUnknown = 49,
        /// <summary>
        /// AIS_TYPE_PILOT
        /// </summary>
        AisTypePilot = 50,
        /// <summary>
        /// Search And Rescue vessel.
        /// AIS_TYPE_SAR
        /// </summary>
        AisTypeSar = 51,
        /// <summary>
        /// AIS_TYPE_TUG
        /// </summary>
        AisTypeTug = 52,
        /// <summary>
        /// AIS_TYPE_PORT_TENDER
        /// </summary>
        AisTypePortTender = 53,
        /// <summary>
        /// Anti-pollution equipment.
        /// AIS_TYPE_ANTI_POLLUTION
        /// </summary>
        AisTypeAntiPollution = 54,
        /// <summary>
        /// AIS_TYPE_LAW_ENFORCEMENT
        /// </summary>
        AisTypeLawEnforcement = 55,
        /// <summary>
        /// AIS_TYPE_SPARE_LOCAL_1
        /// </summary>
        AisTypeSpareLocal1 = 56,
        /// <summary>
        /// AIS_TYPE_SPARE_LOCAL_2
        /// </summary>
        AisTypeSpareLocal2 = 57,
        /// <summary>
        /// AIS_TYPE_MEDICAL_TRANSPORT
        /// </summary>
        AisTypeMedicalTransport = 58,
        /// <summary>
        /// Noncombatant ship according to RR Resolution No. 18.
        /// AIS_TYPE_NONECOMBATANT
        /// </summary>
        AisTypeNonecombatant = 59,
        /// <summary>
        /// AIS_TYPE_PASSENGER
        /// </summary>
        AisTypePassenger = 60,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_A
        /// </summary>
        AisTypePassengerHazardousA = 61,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_B
        /// </summary>
        AisTypePassengerHazardousB = 62,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_C
        /// </summary>
        AisTypePassengerHazardousC = 63,
        /// <summary>
        /// AIS_TYPE_PASSENGER_HAZARDOUS_D
        /// </summary>
        AisTypePassengerHazardousD = 64,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_1
        /// </summary>
        AisTypePassengerReserved1 = 65,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_2
        /// </summary>
        AisTypePassengerReserved2 = 66,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_3
        /// </summary>
        AisTypePassengerReserved3 = 67,
        /// <summary>
        /// AIS_TYPE_PASSENGER_RESERVED_4
        /// </summary>
        AisTypePassengerReserved4 = 68,
        /// <summary>
        /// AIS_TYPE_PASSENGER_UNKNOWN
        /// </summary>
        AisTypePassengerUnknown = 69,
        /// <summary>
        /// AIS_TYPE_CARGO
        /// </summary>
        AisTypeCargo = 70,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_A
        /// </summary>
        AisTypeCargoHazardousA = 71,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_B
        /// </summary>
        AisTypeCargoHazardousB = 72,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_C
        /// </summary>
        AisTypeCargoHazardousC = 73,
        /// <summary>
        /// AIS_TYPE_CARGO_HAZARDOUS_D
        /// </summary>
        AisTypeCargoHazardousD = 74,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_1
        /// </summary>
        AisTypeCargoReserved1 = 75,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_2
        /// </summary>
        AisTypeCargoReserved2 = 76,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_3
        /// </summary>
        AisTypeCargoReserved3 = 77,
        /// <summary>
        /// AIS_TYPE_CARGO_RESERVED_4
        /// </summary>
        AisTypeCargoReserved4 = 78,
        /// <summary>
        /// AIS_TYPE_CARGO_UNKNOWN
        /// </summary>
        AisTypeCargoUnknown = 79,
        /// <summary>
        /// AIS_TYPE_TANKER
        /// </summary>
        AisTypeTanker = 80,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_A
        /// </summary>
        AisTypeTankerHazardousA = 81,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_B
        /// </summary>
        AisTypeTankerHazardousB = 82,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_C
        /// </summary>
        AisTypeTankerHazardousC = 83,
        /// <summary>
        /// AIS_TYPE_TANKER_HAZARDOUS_D
        /// </summary>
        AisTypeTankerHazardousD = 84,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_1
        /// </summary>
        AisTypeTankerReserved1 = 85,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_2
        /// </summary>
        AisTypeTankerReserved2 = 86,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_3
        /// </summary>
        AisTypeTankerReserved3 = 87,
        /// <summary>
        /// AIS_TYPE_TANKER_RESERVED_4
        /// </summary>
        AisTypeTankerReserved4 = 88,
        /// <summary>
        /// AIS_TYPE_TANKER_UNKNOWN
        /// </summary>
        AisTypeTankerUnknown = 89,
        /// <summary>
        /// AIS_TYPE_OTHER
        /// </summary>
        AisTypeOther = 90,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_A
        /// </summary>
        AisTypeOtherHazardousA = 91,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_B
        /// </summary>
        AisTypeOtherHazardousB = 92,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_C
        /// </summary>
        AisTypeOtherHazardousC = 93,
        /// <summary>
        /// AIS_TYPE_OTHER_HAZARDOUS_D
        /// </summary>
        AisTypeOtherHazardousD = 94,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_1
        /// </summary>
        AisTypeOtherReserved1 = 95,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_2
        /// </summary>
        AisTypeOtherReserved2 = 96,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_3
        /// </summary>
        AisTypeOtherReserved3 = 97,
        /// <summary>
        /// AIS_TYPE_OTHER_RESERVED_4
        /// </summary>
        AisTypeOtherReserved4 = 98,
        /// <summary>
        /// AIS_TYPE_OTHER_UNKNOWN
        /// </summary>
        AisTypeOtherUnknown = 99,
    }

    /// <summary>
    /// Navigational status of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
    ///  AIS_NAV_STATUS
    /// </summary>
    public enum AisNavStatus:uint
    {
        /// <summary>
        /// Under way using engine.
        /// UNDER_WAY
        /// </summary>
        UnderWay = 0,
        /// <summary>
        /// AIS_NAV_ANCHORED
        /// </summary>
        AisNavAnchored = 1,
        /// <summary>
        /// AIS_NAV_UN_COMMANDED
        /// </summary>
        AisNavUnCommanded = 2,
        /// <summary>
        /// AIS_NAV_RESTRICTED_MANOEUVERABILITY
        /// </summary>
        AisNavRestrictedManoeuverability = 3,
        /// <summary>
        /// AIS_NAV_DRAUGHT_CONSTRAINED
        /// </summary>
        AisNavDraughtConstrained = 4,
        /// <summary>
        /// AIS_NAV_MOORED
        /// </summary>
        AisNavMoored = 5,
        /// <summary>
        /// AIS_NAV_AGROUND
        /// </summary>
        AisNavAground = 6,
        /// <summary>
        /// AIS_NAV_FISHING
        /// </summary>
        AisNavFishing = 7,
        /// <summary>
        /// AIS_NAV_SAILING
        /// </summary>
        AisNavSailing = 8,
        /// <summary>
        /// AIS_NAV_RESERVED_HSC
        /// </summary>
        AisNavReservedHsc = 9,
        /// <summary>
        /// AIS_NAV_RESERVED_WIG
        /// </summary>
        AisNavReservedWig = 10,
        /// <summary>
        /// AIS_NAV_RESERVED_1
        /// </summary>
        AisNavReserved1 = 11,
        /// <summary>
        /// AIS_NAV_RESERVED_2
        /// </summary>
        AisNavReserved2 = 12,
        /// <summary>
        /// AIS_NAV_RESERVED_3
        /// </summary>
        AisNavReserved3 = 13,
        /// <summary>
        /// Search And Rescue Transponder.
        /// AIS_NAV_AIS_SART
        /// </summary>
        AisNavAisSart = 14,
        /// <summary>
        /// Not available (default).
        /// AIS_NAV_UNKNOWN
        /// </summary>
        AisNavUnknown = 15,
    }

    /// <summary>
    /// These flags are used in the AIS_VESSEL.fields bitmask to indicate validity of data in the other message fields. When set, the data is valid.
    ///  AIS_FLAGS
    /// </summary>
    public enum AisFlags:uint
    {
        /// <summary>
        /// 1 = Position accuracy less than 10m, 0 = position accuracy greater than 10m.
        /// AIS_FLAGS_POSITION_ACCURACY
        /// </summary>
        AisFlagsPositionAccuracy = 1,
        /// <summary>
        /// AIS_FLAGS_VALID_COG
        /// </summary>
        AisFlagsValidCog = 2,
        /// <summary>
        /// AIS_FLAGS_VALID_VELOCITY
        /// </summary>
        AisFlagsValidVelocity = 4,
        /// <summary>
        /// 1 = Velocity over 52.5765m/s (102.2 knots)
        /// AIS_FLAGS_HIGH_VELOCITY
        /// </summary>
        AisFlagsHighVelocity = 8,
        /// <summary>
        /// AIS_FLAGS_VALID_TURN_RATE
        /// </summary>
        AisFlagsValidTurnRate = 16,
        /// <summary>
        /// Only the sign of the returned turn rate value is valid, either greater than 5deg/30s or less than -5deg/30s
        /// AIS_FLAGS_TURN_RATE_SIGN_ONLY
        /// </summary>
        AisFlagsTurnRateSignOnly = 32,
        /// <summary>
        /// AIS_FLAGS_VALID_DIMENSIONS
        /// </summary>
        AisFlagsValidDimensions = 64,
        /// <summary>
        /// Distance to bow is larger than 511m
        /// AIS_FLAGS_LARGE_BOW_DIMENSION
        /// </summary>
        AisFlagsLargeBowDimension = 128,
        /// <summary>
        /// Distance to stern is larger than 511m
        /// AIS_FLAGS_LARGE_STERN_DIMENSION
        /// </summary>
        AisFlagsLargeSternDimension = 256,
        /// <summary>
        /// Distance to port side is larger than 63m
        /// AIS_FLAGS_LARGE_PORT_DIMENSION
        /// </summary>
        AisFlagsLargePortDimension = 512,
        /// <summary>
        /// Distance to starboard side is larger than 63m
        /// AIS_FLAGS_LARGE_STARBOARD_DIMENSION
        /// </summary>
        AisFlagsLargeStarboardDimension = 1024,
        /// <summary>
        /// AIS_FLAGS_VALID_CALLSIGN
        /// </summary>
        AisFlagsValidCallsign = 2048,
        /// <summary>
        /// AIS_FLAGS_VALID_NAME
        /// </summary>
        AisFlagsValidName = 4096,
    }

    /// <summary>
    /// List of possible units where failures can be injected.
    ///  FAILURE_UNIT
    /// </summary>
    public enum FailureUnit:uint
    {
        /// <summary>
        /// FAILURE_UNIT_SENSOR_GYRO
        /// </summary>
        FailureUnitSensorGyro = 0,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_ACCEL
        /// </summary>
        FailureUnitSensorAccel = 1,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_MAG
        /// </summary>
        FailureUnitSensorMag = 2,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_BARO
        /// </summary>
        FailureUnitSensorBaro = 3,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_GPS
        /// </summary>
        FailureUnitSensorGps = 4,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_OPTICAL_FLOW
        /// </summary>
        FailureUnitSensorOpticalFlow = 5,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_VIO
        /// </summary>
        FailureUnitSensorVio = 6,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_DISTANCE_SENSOR
        /// </summary>
        FailureUnitSensorDistanceSensor = 7,
        /// <summary>
        /// FAILURE_UNIT_SENSOR_AIRSPEED
        /// </summary>
        FailureUnitSensorAirspeed = 8,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_BATTERY
        /// </summary>
        FailureUnitSystemBattery = 100,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_MOTOR
        /// </summary>
        FailureUnitSystemMotor = 101,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_SERVO
        /// </summary>
        FailureUnitSystemServo = 102,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_AVOIDANCE
        /// </summary>
        FailureUnitSystemAvoidance = 103,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_RC_SIGNAL
        /// </summary>
        FailureUnitSystemRcSignal = 104,
        /// <summary>
        /// FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL
        /// </summary>
        FailureUnitSystemMavlinkSignal = 105,
    }

    /// <summary>
    /// List of possible failure type to inject.
    ///  FAILURE_TYPE
    /// </summary>
    public enum FailureType:uint
    {
        /// <summary>
        /// No failure injected, used to reset a previous failure.
        /// FAILURE_TYPE_OK
        /// </summary>
        FailureTypeOk = 0,
        /// <summary>
        /// Sets unit off, so completely non-responsive.
        /// FAILURE_TYPE_OFF
        /// </summary>
        FailureTypeOff = 1,
        /// <summary>
        /// Unit is stuck e.g. keeps reporting the same value.
        /// FAILURE_TYPE_STUCK
        /// </summary>
        FailureTypeStuck = 2,
        /// <summary>
        /// Unit is reporting complete garbage.
        /// FAILURE_TYPE_GARBAGE
        /// </summary>
        FailureTypeGarbage = 3,
        /// <summary>
        /// Unit is consistently wrong.
        /// FAILURE_TYPE_WRONG
        /// </summary>
        FailureTypeWrong = 4,
        /// <summary>
        /// Unit is slow, so e.g. reporting at slower than expected rate.
        /// FAILURE_TYPE_SLOW
        /// </summary>
        FailureTypeSlow = 5,
        /// <summary>
        /// Data of unit is delayed in time.
        /// FAILURE_TYPE_DELAYED
        /// </summary>
        FailureTypeDelayed = 6,
        /// <summary>
        /// Unit is sometimes working, sometimes not.
        /// FAILURE_TYPE_INTERMITTENT
        /// </summary>
        FailureTypeIntermittent = 7,
    }

    /// <summary>
    ///  NAV_VTOL_LAND_OPTIONS
    /// </summary>
    public enum NavVtolLandOptions:uint
    {
        /// <summary>
        /// Default autopilot landing behaviour.
        /// NAV_VTOL_LAND_OPTIONS_DEFAULT
        /// </summary>
        NavVtolLandOptionsDefault = 0,
        /// <summary>
        /// Descend in fixed wing mode, transitioning to multicopter mode for vertical landing when close to the ground.
        ///           The fixed wing descent pattern is at the discretion of the vehicle (e.g. transition altitude, loiter direction, radius, and speed, etc.).
        ///         
        /// NAV_VTOL_LAND_OPTIONS_FW_DESCENT
        /// </summary>
        NavVtolLandOptionsFwDescent = 1,
        /// <summary>
        /// Land in multicopter mode on reaching the landing coordinates (the whole landing is by "hover descent").
        /// NAV_VTOL_LAND_OPTIONS_HOVER_DESCENT
        /// </summary>
        NavVtolLandOptionsHoverDescent = 2,
    }

    /// <summary>
    /// Winch status flags used in WINCH_STATUS
    ///  MAV_WINCH_STATUS_FLAG
    /// </summary>
    public enum MavWinchStatusFlag:uint
    {
        /// <summary>
        /// Winch is healthy
        /// MAV_WINCH_STATUS_HEALTHY
        /// </summary>
        MavWinchStatusHealthy = 1,
        /// <summary>
        /// Winch line is fully retracted
        /// MAV_WINCH_STATUS_FULLY_RETRACTED
        /// </summary>
        MavWinchStatusFullyRetracted = 2,
        /// <summary>
        /// Winch motor is moving
        /// MAV_WINCH_STATUS_MOVING
        /// </summary>
        MavWinchStatusMoving = 4,
        /// <summary>
        /// Winch clutch is engaged allowing motor to move freely.
        /// MAV_WINCH_STATUS_CLUTCH_ENGAGED
        /// </summary>
        MavWinchStatusClutchEngaged = 8,
        /// <summary>
        /// Winch is locked by locking mechanism.
        /// MAV_WINCH_STATUS_LOCKED
        /// </summary>
        MavWinchStatusLocked = 16,
        /// <summary>
        /// Winch is gravity dropping payload.
        /// MAV_WINCH_STATUS_DROPPING
        /// </summary>
        MavWinchStatusDropping = 32,
        /// <summary>
        /// Winch is arresting payload descent.
        /// MAV_WINCH_STATUS_ARRESTING
        /// </summary>
        MavWinchStatusArresting = 64,
        /// <summary>
        /// Winch is using torque measurements to sense the ground.
        /// MAV_WINCH_STATUS_GROUND_SENSE
        /// </summary>
        MavWinchStatusGroundSense = 128,
        /// <summary>
        /// Winch is returning to the fully retracted position.
        /// MAV_WINCH_STATUS_RETRACTING
        /// </summary>
        MavWinchStatusRetracting = 256,
        /// <summary>
        /// Winch is redelivering the payload. This is a failover state if the line tension goes above a threshold during RETRACTING.
        /// MAV_WINCH_STATUS_REDELIVER
        /// </summary>
        MavWinchStatusRedeliver = 512,
        /// <summary>
        /// Winch is abandoning the line and possibly payload. Winch unspools the entire calculated line length. This is a failover state from REDELIVER if the number of attempts exceeds a threshold.
        /// MAV_WINCH_STATUS_ABANDON_LINE
        /// </summary>
        MavWinchStatusAbandonLine = 1024,
        /// <summary>
        /// Winch is engaging the locking mechanism.
        /// MAV_WINCH_STATUS_LOCKING
        /// </summary>
        MavWinchStatusLocking = 2048,
        /// <summary>
        /// Winch is spooling on line.
        /// MAV_WINCH_STATUS_LOAD_LINE
        /// </summary>
        MavWinchStatusLoadLine = 4096,
        /// <summary>
        /// Winch is loading a payload.
        /// MAV_WINCH_STATUS_LOAD_PAYLOAD
        /// </summary>
        MavWinchStatusLoadPayload = 8192,
    }

    /// <summary>
    ///  MAG_CAL_STATUS
    /// </summary>
    public enum MagCalStatus:uint
    {
        /// <summary>
        /// MAG_CAL_NOT_STARTED
        /// </summary>
        MagCalNotStarted = 0,
        /// <summary>
        /// MAG_CAL_WAITING_TO_START
        /// </summary>
        MagCalWaitingToStart = 1,
        /// <summary>
        /// MAG_CAL_RUNNING_STEP_ONE
        /// </summary>
        MagCalRunningStepOne = 2,
        /// <summary>
        /// MAG_CAL_RUNNING_STEP_TWO
        /// </summary>
        MagCalRunningStepTwo = 3,
        /// <summary>
        /// MAG_CAL_SUCCESS
        /// </summary>
        MagCalSuccess = 4,
        /// <summary>
        /// MAG_CAL_FAILED
        /// </summary>
        MagCalFailed = 5,
        /// <summary>
        /// MAG_CAL_BAD_ORIENTATION
        /// </summary>
        MagCalBadOrientation = 6,
        /// <summary>
        /// MAG_CAL_BAD_RADIUS
        /// </summary>
        MagCalBadRadius = 7,
    }

    /// <summary>
    /// Reason for an event error response.
    ///  MAV_EVENT_ERROR_REASON
    /// </summary>
    public enum MavEventErrorReason:uint
    {
        /// <summary>
        /// The requested event is not available (anymore).
        /// MAV_EVENT_ERROR_REASON_UNAVAILABLE
        /// </summary>
        MavEventErrorReasonUnavailable = 0,
    }

    /// <summary>
    /// Flags for CURRENT_EVENT_SEQUENCE.
    ///  MAV_EVENT_CURRENT_SEQUENCE_FLAGS
    /// </summary>
    public enum MavEventCurrentSequenceFlags:uint
    {
        /// <summary>
        /// A sequence reset has happened (e.g. vehicle reboot).
        /// MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET
        /// </summary>
        MavEventCurrentSequenceFlagsReset = 1,
    }

    /// <summary>
    /// Flags in the HIL_SENSOR message indicate which fields have updated since the last message
    ///  HIL_SENSOR_UPDATED_FLAGS
    /// </summary>
    public enum HilSensorUpdatedFlags:uint
    {
        /// <summary>
        /// None of the fields in HIL_SENSOR have been updated
        /// HIL_SENSOR_UPDATED_NONE
        /// </summary>
        HilSensorUpdatedNone = 0,
        /// <summary>
        /// The value in the xacc field has been updated
        /// HIL_SENSOR_UPDATED_XACC
        /// </summary>
        HilSensorUpdatedXacc = 1,
        /// <summary>
        /// The value in the yacc field has been updated
        /// HIL_SENSOR_UPDATED_YACC
        /// </summary>
        HilSensorUpdatedYacc = 2,
        /// <summary>
        /// The value in the zacc field has been updated
        /// HIL_SENSOR_UPDATED_ZACC
        /// </summary>
        HilSensorUpdatedZacc = 4,
        /// <summary>
        /// The value in the xgyro field has been updated
        /// HIL_SENSOR_UPDATED_XGYRO
        /// </summary>
        HilSensorUpdatedXgyro = 8,
        /// <summary>
        /// The value in the ygyro field has been updated
        /// HIL_SENSOR_UPDATED_YGYRO
        /// </summary>
        HilSensorUpdatedYgyro = 16,
        /// <summary>
        /// The value in the zgyro field has been updated
        /// HIL_SENSOR_UPDATED_ZGYRO
        /// </summary>
        HilSensorUpdatedZgyro = 32,
        /// <summary>
        /// The value in the xmag field has been updated
        /// HIL_SENSOR_UPDATED_XMAG
        /// </summary>
        HilSensorUpdatedXmag = 64,
        /// <summary>
        /// The value in the ymag field has been updated
        /// HIL_SENSOR_UPDATED_YMAG
        /// </summary>
        HilSensorUpdatedYmag = 128,
        /// <summary>
        /// The value in the zmag field has been updated
        /// HIL_SENSOR_UPDATED_ZMAG
        /// </summary>
        HilSensorUpdatedZmag = 256,
        /// <summary>
        /// The value in the abs_pressure field has been updated
        /// HIL_SENSOR_UPDATED_ABS_PRESSURE
        /// </summary>
        HilSensorUpdatedAbsPressure = 512,
        /// <summary>
        /// The value in the diff_pressure field has been updated
        /// HIL_SENSOR_UPDATED_DIFF_PRESSURE
        /// </summary>
        HilSensorUpdatedDiffPressure = 1024,
        /// <summary>
        /// The value in the pressure_alt field has been updated
        /// HIL_SENSOR_UPDATED_PRESSURE_ALT
        /// </summary>
        HilSensorUpdatedPressureAlt = 2048,
        /// <summary>
        /// The value in the temperature field has been updated
        /// HIL_SENSOR_UPDATED_TEMPERATURE
        /// </summary>
        HilSensorUpdatedTemperature = 4096,
        /// <summary>
        /// Full reset of attitude/position/velocities/etc was performed in sim (Bit 31).
        /// HIL_SENSOR_UPDATED_RESET
        /// </summary>
        HilSensorUpdatedReset = 2147483648,
    }

    /// <summary>
    /// Flags in the HIGHRES_IMU message indicate which fields have updated since the last message
    ///  HIGHRES_IMU_UPDATED_FLAGS
    /// </summary>
    public enum HighresImuUpdatedFlags:uint
    {
        /// <summary>
        /// None of the fields in HIGHRES_IMU have been updated
        /// HIGHRES_IMU_UPDATED_NONE
        /// </summary>
        HighresImuUpdatedNone = 0,
        /// <summary>
        /// The value in the xacc field has been updated
        /// HIGHRES_IMU_UPDATED_XACC
        /// </summary>
        HighresImuUpdatedXacc = 1,
        /// <summary>
        /// The value in the yacc field has been updated
        /// HIGHRES_IMU_UPDATED_YACC
        /// </summary>
        HighresImuUpdatedYacc = 2,
        /// <summary>
        /// The value in the zacc field has been updated since
        /// HIGHRES_IMU_UPDATED_ZACC
        /// </summary>
        HighresImuUpdatedZacc = 4,
        /// <summary>
        /// The value in the xgyro field has been updated
        /// HIGHRES_IMU_UPDATED_XGYRO
        /// </summary>
        HighresImuUpdatedXgyro = 8,
        /// <summary>
        /// The value in the ygyro field has been updated
        /// HIGHRES_IMU_UPDATED_YGYRO
        /// </summary>
        HighresImuUpdatedYgyro = 16,
        /// <summary>
        /// The value in the zgyro field has been updated
        /// HIGHRES_IMU_UPDATED_ZGYRO
        /// </summary>
        HighresImuUpdatedZgyro = 32,
        /// <summary>
        /// The value in the xmag field has been updated
        /// HIGHRES_IMU_UPDATED_XMAG
        /// </summary>
        HighresImuUpdatedXmag = 64,
        /// <summary>
        /// The value in the ymag field has been updated
        /// HIGHRES_IMU_UPDATED_YMAG
        /// </summary>
        HighresImuUpdatedYmag = 128,
        /// <summary>
        /// The value in the zmag field has been updated
        /// HIGHRES_IMU_UPDATED_ZMAG
        /// </summary>
        HighresImuUpdatedZmag = 256,
        /// <summary>
        /// The value in the abs_pressure field has been updated
        /// HIGHRES_IMU_UPDATED_ABS_PRESSURE
        /// </summary>
        HighresImuUpdatedAbsPressure = 512,
        /// <summary>
        /// The value in the diff_pressure field has been updated
        /// HIGHRES_IMU_UPDATED_DIFF_PRESSURE
        /// </summary>
        HighresImuUpdatedDiffPressure = 1024,
        /// <summary>
        /// The value in the pressure_alt field has been updated
        /// HIGHRES_IMU_UPDATED_PRESSURE_ALT
        /// </summary>
        HighresImuUpdatedPressureAlt = 2048,
        /// <summary>
        /// The value in the temperature field has been updated
        /// HIGHRES_IMU_UPDATED_TEMPERATURE
        /// </summary>
        HighresImuUpdatedTemperature = 4096,
        /// <summary>
        /// All fields in HIGHRES_IMU have been updated.
        /// HIGHRES_IMU_UPDATED_ALL
        /// </summary>
        HighresImuUpdatedAll = 65535,
    }

    /// <summary>
    ///  CAN_FILTER_OP
    /// </summary>
    public enum CanFilterOp:uint
    {
        /// <summary>
        /// CAN_FILTER_REPLACE
        /// </summary>
        CanFilterReplace = 0,
        /// <summary>
        /// CAN_FILTER_ADD
        /// </summary>
        CanFilterAdd = 1,
        /// <summary>
        /// CAN_FILTER_REMOVE
        /// </summary>
        CanFilterRemove = 2,
    }

    /// <summary>
    /// MAV FTP error codes (https://mavlink.io/en/services/ftp.html)
    ///  MAV_FTP_ERR
    /// </summary>
    public enum MavFtpErr:uint
    {
        /// <summary>
        /// None: No error
        /// MAV_FTP_ERR_NONE
        /// </summary>
        MavFtpErrNone = 0,
        /// <summary>
        /// Fail: Unknown failure
        /// MAV_FTP_ERR_FAIL
        /// </summary>
        MavFtpErrFail = 1,
        /// <summary>
        /// FailErrno: Command failed, Err number sent back in PayloadHeader.data[1].
        /// 		This is a file-system error number understood by the server operating system.
        /// MAV_FTP_ERR_FAILERRNO
        /// </summary>
        MavFtpErrFailerrno = 2,
        /// <summary>
        /// InvalidDataSize: Payload size is invalid
        /// MAV_FTP_ERR_INVALIDDATASIZE
        /// </summary>
        MavFtpErrInvaliddatasize = 3,
        /// <summary>
        /// InvalidSession: Session is not currently open
        /// MAV_FTP_ERR_INVALIDSESSION
        /// </summary>
        MavFtpErrInvalidsession = 4,
        /// <summary>
        /// NoSessionsAvailable: All available sessions are already in use
        /// MAV_FTP_ERR_NOSESSIONSAVAILABLE
        /// </summary>
        MavFtpErrNosessionsavailable = 5,
        /// <summary>
        /// EOF: Offset past end of file for ListDirectory and ReadFile commands
        /// MAV_FTP_ERR_EOF
        /// </summary>
        MavFtpErrEof = 6,
        /// <summary>
        /// UnknownCommand: Unknown command / opcode
        /// MAV_FTP_ERR_UNKNOWNCOMMAND
        /// </summary>
        MavFtpErrUnknowncommand = 7,
        /// <summary>
        /// FileExists: File/directory already exists
        /// MAV_FTP_ERR_FILEEXISTS
        /// </summary>
        MavFtpErrFileexists = 8,
        /// <summary>
        /// FileProtected: File/directory is write protected
        /// MAV_FTP_ERR_FILEPROTECTED
        /// </summary>
        MavFtpErrFileprotected = 9,
        /// <summary>
        /// FileNotFound: File/directory not found
        /// MAV_FTP_ERR_FILENOTFOUND
        /// </summary>
        MavFtpErrFilenotfound = 10,
    }

    /// <summary>
    /// MAV FTP opcodes: https://mavlink.io/en/services/ftp.html
    ///  MAV_FTP_OPCODE
    /// </summary>
    public enum MavFtpOpcode:uint
    {
        /// <summary>
        /// None. Ignored, always ACKed
        /// MAV_FTP_OPCODE_NONE
        /// </summary>
        MavFtpOpcodeNone = 0,
        /// <summary>
        /// TerminateSession: Terminates open Read session
        /// MAV_FTP_OPCODE_TERMINATESESSION
        /// </summary>
        MavFtpOpcodeTerminatesession = 1,
        /// <summary>
        /// ResetSessions: Terminates all open read sessions
        /// MAV_FTP_OPCODE_RESETSESSION
        /// </summary>
        MavFtpOpcodeResetsession = 2,
        /// <summary>
        /// ListDirectory. List files and directories in path from offset
        /// MAV_FTP_OPCODE_LISTDIRECTORY
        /// </summary>
        MavFtpOpcodeListdirectory = 3,
        /// <summary>
        /// OpenFileRO: Opens file at path for reading, returns session
        /// MAV_FTP_OPCODE_OPENFILERO
        /// </summary>
        MavFtpOpcodeOpenfilero = 4,
        /// <summary>
        /// ReadFile: Reads size bytes from offset in session
        /// MAV_FTP_OPCODE_READFILE
        /// </summary>
        MavFtpOpcodeReadfile = 5,
        /// <summary>
        /// CreateFile: Creates file at path for writing, returns session
        /// MAV_FTP_OPCODE_CREATEFILE
        /// </summary>
        MavFtpOpcodeCreatefile = 6,
        /// <summary>
        /// WriteFile: Writes size bytes to offset in session
        /// MAV_FTP_OPCODE_WRITEFILE
        /// </summary>
        MavFtpOpcodeWritefile = 7,
        /// <summary>
        /// RemoveFile: Remove file at path
        /// MAV_FTP_OPCODE_REMOVEFILE
        /// </summary>
        MavFtpOpcodeRemovefile = 8,
        /// <summary>
        /// CreateDirectory: Creates directory at path
        /// MAV_FTP_OPCODE_CREATEDIRECTORY
        /// </summary>
        MavFtpOpcodeCreatedirectory = 9,
        /// <summary>
        /// RemoveDirectory: Removes directory at path. The directory must be empty.
        /// MAV_FTP_OPCODE_REMOVEDIRECTORY
        /// </summary>
        MavFtpOpcodeRemovedirectory = 10,
        /// <summary>
        /// OpenFileWO: Opens file at path for writing, returns session
        /// MAV_FTP_OPCODE_OPENFILEWO
        /// </summary>
        MavFtpOpcodeOpenfilewo = 11,
        /// <summary>
        /// TruncateFile: Truncate file at path to offset length
        /// MAV_FTP_OPCODE_TRUNCATEFILE
        /// </summary>
        MavFtpOpcodeTruncatefile = 12,
        /// <summary>
        /// Rename: Rename path1 to path2
        /// MAV_FTP_OPCODE_RENAME
        /// </summary>
        MavFtpOpcodeRename = 13,
        /// <summary>
        /// CalcFileCRC32: Calculate CRC32 for file at path
        /// MAV_FTP_OPCODE_CALCFILECRC
        /// </summary>
        MavFtpOpcodeCalcfilecrc = 14,
        /// <summary>
        /// BurstReadFile: Burst download session file
        /// MAV_FTP_OPCODE_BURSTREADFILE
        /// </summary>
        MavFtpOpcodeBurstreadfile = 15,
        /// <summary>
        /// ACK: ACK response
        /// MAV_FTP_OPCODE_ACK
        /// </summary>
        MavFtpOpcodeAck = 128,
        /// <summary>
        /// NAK: NAK response
        /// MAV_FTP_OPCODE_NAK
        /// </summary>
        MavFtpOpcodeNak = 129,
    }

    /// <summary>
    /// 
    ///         States of the mission state machine.
    ///         Note that these states are independent of whether the mission is in a mode that can execute mission items or not (is suspended).
    ///         They may not all be relevant on all vehicles.
    ///       
    ///  MISSION_STATE
    /// </summary>
    public enum MissionState:uint
    {
        /// <summary>
        /// The mission status reporting is not supported.
        /// MISSION_STATE_UNKNOWN
        /// </summary>
        MissionStateUnknown = 0,
        /// <summary>
        /// No mission on the vehicle.
        /// MISSION_STATE_NO_MISSION
        /// </summary>
        MissionStateNoMission = 1,
        /// <summary>
        /// Mission has not started. This is the case after a mission has uploaded but not yet started executing.
        /// MISSION_STATE_NOT_STARTED
        /// </summary>
        MissionStateNotStarted = 2,
        /// <summary>
        /// Mission is active, and will execute mission items when in auto mode.
        /// MISSION_STATE_ACTIVE
        /// </summary>
        MissionStateActive = 3,
        /// <summary>
        /// Mission is paused when in auto mode.
        /// MISSION_STATE_PAUSED
        /// </summary>
        MissionStatePaused = 4,
        /// <summary>
        /// Mission has executed all mission items.
        /// MISSION_STATE_COMPLETE
        /// </summary>
        MissionStateComplete = 5,
    }


#endregion

#region Messages

    /// <summary>
    /// The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occurred. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occurred it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
    ///  SYS_STATUS
    /// </summary>
    public class SysStatusPacket: PacketV2<SysStatusPayload>
    {
	    public const int PacketMessageId = 1;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 124;
        public override bool WrapToV2Extension => false;

        public override SysStatusPayload Payload { get; } = new SysStatusPayload();

        public override string Name => "SYS_STATUS";
    }

    /// <summary>
    ///  SYS_STATUS
    /// </summary>
    public class SysStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 4; // OnboardControlSensorsPresent
            sum+= 4; // OnboardControlSensorsEnabled
            sum+= 4; // OnboardControlSensorsHealth
            sum+=2; //Load
            sum+=2; //VoltageBattery
            sum+=2; //CurrentBattery
            sum+=2; //DropRateComm
            sum+=2; //ErrorsComm
            sum+=2; //ErrorsCount1
            sum+=2; //ErrorsCount2
            sum+=2; //ErrorsCount3
            sum+=2; //ErrorsCount4
            sum+=1; //BatteryRemaining
            sum+= 4; // OnboardControlSensorsPresentExtended
            sum+= 4; // OnboardControlSensorsEnabledExtended
            sum+= 4; // OnboardControlSensorsHealthExtended
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            OnboardControlSensorsPresent = (MavSysStatusSensor)BinSerialize.ReadUInt(ref buffer);
            OnboardControlSensorsEnabled = (MavSysStatusSensor)BinSerialize.ReadUInt(ref buffer);
            OnboardControlSensorsHealth = (MavSysStatusSensor)BinSerialize.ReadUInt(ref buffer);
            Load = BinSerialize.ReadUShort(ref buffer);
            VoltageBattery = BinSerialize.ReadUShort(ref buffer);
            CurrentBattery = BinSerialize.ReadShort(ref buffer);
            DropRateComm = BinSerialize.ReadUShort(ref buffer);
            ErrorsComm = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount1 = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount2 = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount3 = BinSerialize.ReadUShort(ref buffer);
            ErrorsCount4 = BinSerialize.ReadUShort(ref buffer);
            BatteryRemaining = (sbyte)BinSerialize.ReadByte(ref buffer);
            // extended field 'OnboardControlSensorsPresentExtended' can be empty
            if (buffer.IsEmpty) return;
            OnboardControlSensorsPresentExtended = (MavSysStatusSensorExtended)BinSerialize.ReadUInt(ref buffer);
            // extended field 'OnboardControlSensorsEnabledExtended' can be empty
            if (buffer.IsEmpty) return;
            OnboardControlSensorsEnabledExtended = (MavSysStatusSensorExtended)BinSerialize.ReadUInt(ref buffer);
            // extended field 'OnboardControlSensorsHealthExtended' can be empty
            if (buffer.IsEmpty) return;
            OnboardControlSensorsHealthExtended = (MavSysStatusSensorExtended)BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsPresent);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsEnabled);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsHealth);
            BinSerialize.WriteUShort(ref buffer,Load);
            BinSerialize.WriteUShort(ref buffer,VoltageBattery);
            BinSerialize.WriteShort(ref buffer,CurrentBattery);
            BinSerialize.WriteUShort(ref buffer,DropRateComm);
            BinSerialize.WriteUShort(ref buffer,ErrorsComm);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount1);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount2);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount3);
            BinSerialize.WriteUShort(ref buffer,ErrorsCount4);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryRemaining);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsPresentExtended);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsEnabledExtended);
            BinSerialize.WriteUInt(ref buffer,(uint)OnboardControlSensorsHealthExtended);
            /* PayloadByteSize = 43 */;
        }
        
        



        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.
        /// OriginName: onboard_control_sensors_present, Units: , IsExtended: false
        /// </summary>
        public MavSysStatusSensor OnboardControlSensorsPresent { get; set; }
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.
        /// OriginName: onboard_control_sensors_enabled, Units: , IsExtended: false
        /// </summary>
        public MavSysStatusSensor OnboardControlSensorsEnabled { get; set; }
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.
        /// OriginName: onboard_control_sensors_health, Units: , IsExtended: false
        /// </summary>
        public MavSysStatusSensor OnboardControlSensorsHealth { get; set; }
        /// <summary>
        /// Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000
        /// OriginName: load, Units: d%, IsExtended: false
        /// </summary>
        public ushort Load { get; set; }
        /// <summary>
        /// Battery voltage, UINT16_MAX: Voltage not sent by autopilot
        /// OriginName: voltage_battery, Units: mV, IsExtended: false
        /// </summary>
        public ushort VoltageBattery { get; set; }
        /// <summary>
        /// Battery current, -1: Current not sent by autopilot
        /// OriginName: current_battery, Units: cA, IsExtended: false
        /// </summary>
        public short CurrentBattery { get; set; }
        /// <summary>
        /// Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
        /// OriginName: drop_rate_comm, Units: c%, IsExtended: false
        /// </summary>
        public ushort DropRateComm { get; set; }
        /// <summary>
        /// Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
        /// OriginName: errors_comm, Units: , IsExtended: false
        /// </summary>
        public ushort ErrorsComm { get; set; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count1, Units: , IsExtended: false
        /// </summary>
        public ushort ErrorsCount1 { get; set; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count2, Units: , IsExtended: false
        /// </summary>
        public ushort ErrorsCount2 { get; set; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count3, Units: , IsExtended: false
        /// </summary>
        public ushort ErrorsCount3 { get; set; }
        /// <summary>
        /// Autopilot-specific errors
        /// OriginName: errors_count4, Units: , IsExtended: false
        /// </summary>
        public ushort ErrorsCount4 { get; set; }
        /// <summary>
        /// Battery energy remaining, -1: Battery remaining energy not sent by autopilot
        /// OriginName: battery_remaining, Units: %, IsExtended: false
        /// </summary>
        public sbyte BatteryRemaining { get; set; }
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.
        /// OriginName: onboard_control_sensors_present_extended, Units: , IsExtended: true
        /// </summary>
        public MavSysStatusSensorExtended OnboardControlSensorsPresentExtended { get; set; }
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.
        /// OriginName: onboard_control_sensors_enabled_extended, Units: , IsExtended: true
        /// </summary>
        public MavSysStatusSensorExtended OnboardControlSensorsEnabledExtended { get; set; }
        /// <summary>
        /// Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.
        /// OriginName: onboard_control_sensors_health_extended, Units: , IsExtended: true
        /// </summary>
        public MavSysStatusSensorExtended OnboardControlSensorsHealthExtended { get; set; }
    }
    /// <summary>
    /// The system time is the time of the master clock, typically the computer clock of the main onboard computer.
    ///  SYSTEM_TIME
    /// </summary>
    public class SystemTimePacket: PacketV2<SystemTimePayload>
    {
	    public const int PacketMessageId = 2;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 137;
        public override bool WrapToV2Extension => false;

        public override SystemTimePayload Payload { get; } = new SystemTimePayload();

        public override string Name => "SYSTEM_TIME";
    }

    /// <summary>
    ///  SYSTEM_TIME
    /// </summary>
    public class SystemTimePayload : IPayload
    {
        public byte GetMaxByteSize() => 12; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 12; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUnixUsec
            sum+=4; //TimeBootMs
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUnixUsec = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUnixUsec);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            /* PayloadByteSize = 12 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX epoch time).
        /// OriginName: time_unix_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUnixUsec { get; set; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
    }
    /// <summary>
    /// A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections. The ping microservice is documented at https://mavlink.io/en/services/ping.html
    ///  PING
    /// </summary>
    public class PingPacket: PacketV2<PingPayload>
    {
	    public const int PacketMessageId = 4;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 237;
        public override bool WrapToV2Extension => false;

        public override PingPayload Payload { get; } = new PingPayload();

        public override string Name => "PING";
    }

    /// <summary>
    ///  PING
    /// </summary>
    public class PingPayload : IPayload
    {
        public byte GetMaxByteSize() => 14; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 14; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Seq
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Seq = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 14 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// PING sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public uint Seq { get; set; }
        /// <summary>
        /// 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Request to control this MAV
    ///  CHANGE_OPERATOR_CONTROL
    /// </summary>
    public class ChangeOperatorControlPacket: PacketV2<ChangeOperatorControlPayload>
    {
	    public const int PacketMessageId = 5;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 217;
        public override bool WrapToV2Extension => false;

        public override ChangeOperatorControlPayload Payload { get; } = new ChangeOperatorControlPayload();

        public override string Name => "CHANGE_OPERATOR_CONTROL";
    }

    /// <summary>
    ///  CHANGE_OPERATOR_CONTROL
    /// </summary>
    public class ChangeOperatorControlPayload : IPayload
    {
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //ControlRequest
            sum+=1; //Version
            sum+=Passkey.Length; //Passkey
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            ControlRequest = (byte)BinSerialize.ReadByte(ref buffer);
            Version = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/25 - Math.Max(0,((/*PayloadByteSize*/28 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Passkey = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Passkey)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Passkey.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)ControlRequest);
            BinSerialize.WriteByte(ref buffer,(byte)Version);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Passkey)
                {
                    Encoding.ASCII.GetBytes(charPointer, Passkey.Length, bytePointer, Passkey.Length);
                }
            }
            buffer = buffer.Slice(Passkey.Length);
            
            /* PayloadByteSize = 28 */;
        }
        
        



        /// <summary>
        /// System the GCS requests control for
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// 0: request control of this MAV, 1: Release control of this MAV
        /// OriginName: control_request, Units: , IsExtended: false
        /// </summary>
        public byte ControlRequest { get; set; }
        /// <summary>
        /// 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.
        /// OriginName: version, Units: rad, IsExtended: false
        /// </summary>
        public byte Version { get; set; }
        /// <summary>
        /// Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"
        /// OriginName: passkey, Units: , IsExtended: false
        /// </summary>
        public const int PasskeyMaxItemsCount = 25;
        public char[] Passkey { get; set; } = new char[25];
        [Obsolete("This method is deprecated. Use GetPasskeyMaxItemsCount instead.")]
        public byte GetPasskeyMaxItemsCount() => 25;
    }
    /// <summary>
    /// Accept / deny control of this MAV
    ///  CHANGE_OPERATOR_CONTROL_ACK
    /// </summary>
    public class ChangeOperatorControlAckPacket: PacketV2<ChangeOperatorControlAckPayload>
    {
	    public const int PacketMessageId = 6;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 104;
        public override bool WrapToV2Extension => false;

        public override ChangeOperatorControlAckPayload Payload { get; } = new ChangeOperatorControlAckPayload();

        public override string Name => "CHANGE_OPERATOR_CONTROL_ACK";
    }

    /// <summary>
    ///  CHANGE_OPERATOR_CONTROL_ACK
    /// </summary>
    public class ChangeOperatorControlAckPayload : IPayload
    {
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //GcsSystemId
            sum+=1; //ControlRequest
            sum+=1; //Ack
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            GcsSystemId = (byte)BinSerialize.ReadByte(ref buffer);
            ControlRequest = (byte)BinSerialize.ReadByte(ref buffer);
            Ack = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)GcsSystemId);
            BinSerialize.WriteByte(ref buffer,(byte)ControlRequest);
            BinSerialize.WriteByte(ref buffer,(byte)Ack);
            /* PayloadByteSize = 3 */;
        }
        
        



        /// <summary>
        /// ID of the GCS this message 
        /// OriginName: gcs_system_id, Units: , IsExtended: false
        /// </summary>
        public byte GcsSystemId { get; set; }
        /// <summary>
        /// 0: request control of this MAV, 1: Release control of this MAV
        /// OriginName: control_request, Units: , IsExtended: false
        /// </summary>
        public byte ControlRequest { get; set; }
        /// <summary>
        /// 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control
        /// OriginName: ack, Units: , IsExtended: false
        /// </summary>
        public byte Ack { get; set; }
    }
    /// <summary>
    /// Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
    ///  AUTH_KEY
    /// </summary>
    public class AuthKeyPacket: PacketV2<AuthKeyPayload>
    {
	    public const int PacketMessageId = 7;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 119;
        public override bool WrapToV2Extension => false;

        public override AuthKeyPayload Payload { get; } = new AuthKeyPayload();

        public override string Name => "AUTH_KEY";
    }

    /// <summary>
    ///  AUTH_KEY
    /// </summary>
    public class AuthKeyPayload : IPayload
    {
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=Key.Length; //Key
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/32 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Key = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Key)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Key.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Key)
                {
                    Encoding.ASCII.GetBytes(charPointer, Key.Length, bytePointer, Key.Length);
                }
            }
            buffer = buffer.Slice(Key.Length);
            
            /* PayloadByteSize = 32 */;
        }
        
        



        /// <summary>
        /// key
        /// OriginName: key, Units: , IsExtended: false
        /// </summary>
        public const int KeyMaxItemsCount = 32;
        public char[] Key { get; set; } = new char[32];
        [Obsolete("This method is deprecated. Use GetKeyMaxItemsCount instead.")]
        public byte GetKeyMaxItemsCount() => 32;
    }
    /// <summary>
    /// Status generated in each node in the communication chain and injected into MAVLink stream.
    ///  LINK_NODE_STATUS
    /// </summary>
    public class LinkNodeStatusPacket: PacketV2<LinkNodeStatusPayload>
    {
	    public const int PacketMessageId = 8;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 117;
        public override bool WrapToV2Extension => false;

        public override LinkNodeStatusPayload Payload { get; } = new LinkNodeStatusPayload();

        public override string Name => "LINK_NODE_STATUS";
    }

    /// <summary>
    ///  LINK_NODE_STATUS
    /// </summary>
    public class LinkNodeStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 36; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 36; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Timestamp
            sum+=4; //TxRate
            sum+=4; //RxRate
            sum+=4; //MessagesSent
            sum+=4; //MessagesReceived
            sum+=4; //MessagesLost
            sum+=2; //RxParseErr
            sum+=2; //TxOverflows
            sum+=2; //RxOverflows
            sum+=1; //TxBuf
            sum+=1; //RxBuf
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Timestamp = BinSerialize.ReadULong(ref buffer);
            TxRate = BinSerialize.ReadUInt(ref buffer);
            RxRate = BinSerialize.ReadUInt(ref buffer);
            MessagesSent = BinSerialize.ReadUInt(ref buffer);
            MessagesReceived = BinSerialize.ReadUInt(ref buffer);
            MessagesLost = BinSerialize.ReadUInt(ref buffer);
            RxParseErr = BinSerialize.ReadUShort(ref buffer);
            TxOverflows = BinSerialize.ReadUShort(ref buffer);
            RxOverflows = BinSerialize.ReadUShort(ref buffer);
            TxBuf = (byte)BinSerialize.ReadByte(ref buffer);
            RxBuf = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Timestamp);
            BinSerialize.WriteUInt(ref buffer,TxRate);
            BinSerialize.WriteUInt(ref buffer,RxRate);
            BinSerialize.WriteUInt(ref buffer,MessagesSent);
            BinSerialize.WriteUInt(ref buffer,MessagesReceived);
            BinSerialize.WriteUInt(ref buffer,MessagesLost);
            BinSerialize.WriteUShort(ref buffer,RxParseErr);
            BinSerialize.WriteUShort(ref buffer,TxOverflows);
            BinSerialize.WriteUShort(ref buffer,RxOverflows);
            BinSerialize.WriteByte(ref buffer,(byte)TxBuf);
            BinSerialize.WriteByte(ref buffer,(byte)RxBuf);
            /* PayloadByteSize = 36 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: timestamp, Units: ms, IsExtended: false
        /// </summary>
        public ulong Timestamp { get; set; }
        /// <summary>
        /// Transmit rate
        /// OriginName: tx_rate, Units: bytes/s, IsExtended: false
        /// </summary>
        public uint TxRate { get; set; }
        /// <summary>
        /// Receive rate
        /// OriginName: rx_rate, Units: bytes/s, IsExtended: false
        /// </summary>
        public uint RxRate { get; set; }
        /// <summary>
        /// Messages sent
        /// OriginName: messages_sent, Units: , IsExtended: false
        /// </summary>
        public uint MessagesSent { get; set; }
        /// <summary>
        /// Messages received (estimated from counting seq)
        /// OriginName: messages_received, Units: , IsExtended: false
        /// </summary>
        public uint MessagesReceived { get; set; }
        /// <summary>
        /// Messages lost (estimated from counting seq)
        /// OriginName: messages_lost, Units: , IsExtended: false
        /// </summary>
        public uint MessagesLost { get; set; }
        /// <summary>
        /// Number of bytes that could not be parsed correctly.
        /// OriginName: rx_parse_err, Units: bytes, IsExtended: false
        /// </summary>
        public ushort RxParseErr { get; set; }
        /// <summary>
        /// Transmit buffer overflows. This number wraps around as it reaches UINT16_MAX
        /// OriginName: tx_overflows, Units: bytes, IsExtended: false
        /// </summary>
        public ushort TxOverflows { get; set; }
        /// <summary>
        /// Receive buffer overflows. This number wraps around as it reaches UINT16_MAX
        /// OriginName: rx_overflows, Units: bytes, IsExtended: false
        /// </summary>
        public ushort RxOverflows { get; set; }
        /// <summary>
        /// Remaining free transmit buffer space
        /// OriginName: tx_buf, Units: %, IsExtended: false
        /// </summary>
        public byte TxBuf { get; set; }
        /// <summary>
        /// Remaining free receive buffer space
        /// OriginName: rx_buf, Units: %, IsExtended: false
        /// </summary>
        public byte RxBuf { get; set; }
    }
    /// <summary>
    /// Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
    ///  SET_MODE
    /// </summary>
    public class SetModePacket: PacketV2<SetModePayload>
    {
	    public const int PacketMessageId = 11;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 89;
        public override bool WrapToV2Extension => false;

        public override SetModePayload Payload { get; } = new SetModePayload();

        public override string Name => "SET_MODE";
    }

    /// <summary>
    ///  SET_MODE
    /// </summary>
    public class SetModePayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //CustomMode
            sum+=1; //TargetSystem
            sum+= 1; // BaseMode
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            CustomMode = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            BaseMode = (MavMode)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,CustomMode);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)BaseMode);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// The new autopilot-specific mode. This field can be ignored by an autopilot.
        /// OriginName: custom_mode, Units: , IsExtended: false
        /// </summary>
        public uint CustomMode { get; set; }
        /// <summary>
        /// The system setting the mode
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// The new base mode.
        /// OriginName: base_mode, Units: , IsExtended: false
        /// </summary>
        public MavMode BaseMode { get; set; }
    }
    /// <summary>
    /// Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/services/parameter.html for a full documentation of QGroundControl and IMU code.
    ///  PARAM_REQUEST_READ
    /// </summary>
    public class ParamRequestReadPacket: PacketV2<ParamRequestReadPayload>
    {
	    public const int PacketMessageId = 20;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 214;
        public override bool WrapToV2Extension => false;

        public override ParamRequestReadPayload Payload { get; } = new ParamRequestReadPayload();

        public override string Name => "PARAM_REQUEST_READ";
    }

    /// <summary>
    ///  PARAM_REQUEST_READ
    /// </summary>
    public class ParamRequestReadPayload : IPayload
    {
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //ParamIndex
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=ParamId.Length; //ParamId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/20 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamId = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,ParamIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            /* PayloadByteSize = 20 */;
        }
        
        



        /// <summary>
        /// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public short ParamIndex { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; set; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
    }
    /// <summary>
    /// Request all parameters of this component. After this request, all parameters are emitted. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    ///  PARAM_REQUEST_LIST
    /// </summary>
    public class ParamRequestListPacket: PacketV2<ParamRequestListPayload>
    {
	    public const int PacketMessageId = 21;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 159;
        public override bool WrapToV2Extension => false;

        public override ParamRequestListPayload Payload { get; } = new ParamRequestListPayload();

        public override string Name => "PARAM_REQUEST_LIST";
    }

    /// <summary>
    ///  PARAM_REQUEST_LIST
    /// </summary>
    public class ParamRequestListPayload : IPayload
    {
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    ///  PARAM_VALUE
    /// </summary>
    public class ParamValuePacket: PacketV2<ParamValuePayload>
    {
	    public const int PacketMessageId = 22;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 220;
        public override bool WrapToV2Extension => false;

        public override ParamValuePayload Payload { get; } = new ParamValuePayload();

        public override string Name => "PARAM_VALUE";
    }

    /// <summary>
    ///  PARAM_VALUE
    /// </summary>
    public class ParamValuePayload : IPayload
    {
        public byte GetMaxByteSize() => 25; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 25; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //ParamValue
            sum+=2; //ParamCount
            sum+=2; //ParamIndex
            sum+=ParamId.Length; //ParamId
            sum+= 1; // ParamType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamValue = BinSerialize.ReadFloat(ref buffer);
            ParamCount = BinSerialize.ReadUShort(ref buffer);
            ParamIndex = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/25 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamId = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            ParamType = (MavParamType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,ParamValue);
            BinSerialize.WriteUShort(ref buffer,ParamCount);
            BinSerialize.WriteUShort(ref buffer,ParamIndex);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 25 */;
        }
        
        



        /// <summary>
        /// Onboard parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public float ParamValue { get; set; }
        /// <summary>
        /// Total number of onboard parameters
        /// OriginName: param_count, Units: , IsExtended: false
        /// </summary>
        public ushort ParamCount { get; set; }
        /// <summary>
        /// Index of this onboard parameter
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public ushort ParamIndex { get; set; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; set; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
        /// <summary>
        /// Onboard parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public MavParamType ParamType { get; set; }
    }
    /// <summary>
    /// Set a parameter value (write new value to permanent storage).
    ///         The receiving component should acknowledge the new parameter value by broadcasting a PARAM_VALUE message (broadcasting ensures that multiple GCS all have an up-to-date list of all parameters). If the sending GCS did not receive a PARAM_VALUE within its timeout time, it should re-send the PARAM_SET message. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html.
    ///         PARAM_SET may also be called within the context of a transaction (started with MAV_CMD_PARAM_TRANSACTION). Within a transaction the receiving component should respond with PARAM_ACK_TRANSACTION to the setter component (instead of broadcasting PARAM_VALUE), and PARAM_SET should be re-sent if this is ACK not received.
    ///  PARAM_SET
    /// </summary>
    public class ParamSetPacket: PacketV2<ParamSetPayload>
    {
	    public const int PacketMessageId = 23;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 168;
        public override bool WrapToV2Extension => false;

        public override ParamSetPayload Payload { get; } = new ParamSetPayload();

        public override string Name => "PARAM_SET";
    }

    /// <summary>
    ///  PARAM_SET
    /// </summary>
    public class ParamSetPayload : IPayload
    {
        public byte GetMaxByteSize() => 23; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 23; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //ParamValue
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=ParamId.Length; //ParamId
            sum+= 1; // ParamType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamValue = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/23 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamId = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            ParamType = (MavParamType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,ParamValue);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 23 */;
        }
        
        



        /// <summary>
        /// Onboard parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public float ParamValue { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; set; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
        /// <summary>
        /// Onboard parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public MavParamType ParamType { get; set; }
    }
    /// <summary>
    /// The global position, as returned by the Global Positioning System (GPS). This is
    ///                 NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION_INT for the global position estimate.
    ///  GPS_RAW_INT
    /// </summary>
    public class GpsRawIntPacket: PacketV2<GpsRawIntPayload>
    {
	    public const int PacketMessageId = 24;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 24;
        public override bool WrapToV2Extension => false;

        public override GpsRawIntPayload Payload { get; } = new GpsRawIntPayload();

        public override string Name => "GPS_RAW_INT";
    }

    /// <summary>
    ///  GPS_RAW_INT
    /// </summary>
    public class GpsRawIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 52; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 52; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=2; //Eph
            sum+=2; //Epv
            sum+=2; //Vel
            sum+=2; //Cog
            sum+= 1; // FixType
            sum+=1; //SatellitesVisible
            sum+=4; //AltEllipsoid
            sum+=4; //HAcc
            sum+=4; //VAcc
            sum+=4; //VelAcc
            sum+=4; //HdgAcc
            sum+=2; //Yaw
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Eph = BinSerialize.ReadUShort(ref buffer);
            Epv = BinSerialize.ReadUShort(ref buffer);
            Vel = BinSerialize.ReadUShort(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            FixType = (GpsFixType)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'AltEllipsoid' can be empty
            if (buffer.IsEmpty) return;
            AltEllipsoid = BinSerialize.ReadInt(ref buffer);
            // extended field 'HAcc' can be empty
            if (buffer.IsEmpty) return;
            HAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VAcc' can be empty
            if (buffer.IsEmpty) return;
            VAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VelAcc' can be empty
            if (buffer.IsEmpty) return;
            VelAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'HdgAcc' can be empty
            if (buffer.IsEmpty) return;
            HdgAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteUShort(ref buffer,Eph);
            BinSerialize.WriteUShort(ref buffer,Epv);
            BinSerialize.WriteUShort(ref buffer,Vel);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteInt(ref buffer,AltEllipsoid);
            BinSerialize.WriteUInt(ref buffer,HAcc);
            BinSerialize.WriteUInt(ref buffer,VAcc);
            BinSerialize.WriteUInt(ref buffer,VelAcc);
            BinSerialize.WriteUInt(ref buffer,HdgAcc);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            /* PayloadByteSize = 52 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Latitude (WGS84, EGM96 ellipsoid)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude (WGS84, EGM96 ellipsoid)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: eph, Units: , IsExtended: false
        /// </summary>
        public ushort Eph { get; set; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: epv, Units: , IsExtended: false
        /// </summary>
        public ushort Epv { get; set; }
        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// OriginName: vel, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort Vel { get; set; }
        /// <summary>
        /// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: cog, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Cog { get; set; }
        /// <summary>
        /// GPS fix type.
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public GpsFixType FixType { get; set; }
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public byte SatellitesVisible { get; set; }
        /// <summary>
        /// Altitude (above WGS84, EGM96 ellipsoid). Positive for up.
        /// OriginName: alt_ellipsoid, Units: mm, IsExtended: true
        /// </summary>
        public int AltEllipsoid { get; set; }
        /// <summary>
        /// Position uncertainty.
        /// OriginName: h_acc, Units: mm, IsExtended: true
        /// </summary>
        public uint HAcc { get; set; }
        /// <summary>
        /// Altitude uncertainty.
        /// OriginName: v_acc, Units: mm, IsExtended: true
        /// </summary>
        public uint VAcc { get; set; }
        /// <summary>
        /// Speed uncertainty.
        /// OriginName: vel_acc, Units: mm, IsExtended: true
        /// </summary>
        public uint VelAcc { get; set; }
        /// <summary>
        /// Heading / track uncertainty
        /// OriginName: hdg_acc, Units: degE5, IsExtended: true
        /// </summary>
        public uint HdgAcc { get; set; }
        /// <summary>
        /// Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public ushort Yaw { get; set; }
    }
    /// <summary>
    /// The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION_INT for the global position estimate. This message can contain information for up to 20 satellites.
    ///  GPS_STATUS
    /// </summary>
    public class GpsStatusPacket: PacketV2<GpsStatusPayload>
    {
	    public const int PacketMessageId = 25;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 23;
        public override bool WrapToV2Extension => false;

        public override GpsStatusPayload Payload { get; } = new GpsStatusPayload();

        public override string Name => "GPS_STATUS";
    }

    /// <summary>
    ///  GPS_STATUS
    /// </summary>
    public class GpsStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 101; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 101; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //SatellitesVisible
            sum+=SatellitePrn.Length; //SatellitePrn
            sum+=SatelliteUsed.Length; //SatelliteUsed
            sum+=SatelliteElevation.Length; //SatelliteElevation
            sum+=SatelliteAzimuth.Length; //SatelliteAzimuth
            sum+=SatelliteSnr.Length; //SatelliteSnr
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/101 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            SatellitePrn = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                SatellitePrn[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteUsed[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteElevation[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteAzimuth[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                SatelliteSnr[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            for(var i=0;i<SatellitePrn.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatellitePrn[i]);
            }
            for(var i=0;i<SatelliteUsed.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteUsed[i]);
            }
            for(var i=0;i<SatelliteElevation.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteElevation[i]);
            }
            for(var i=0;i<SatelliteAzimuth.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteAzimuth[i]);
            }
            for(var i=0;i<SatelliteSnr.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SatelliteSnr[i]);
            }
            /* PayloadByteSize = 101 */;
        }
        
        



        /// <summary>
        /// Number of satellites visible
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public byte SatellitesVisible { get; set; }
        /// <summary>
        /// Global satellite ID
        /// OriginName: satellite_prn, Units: , IsExtended: false
        /// </summary>
        public const int SatellitePrnMaxItemsCount = 20;
        public byte[] SatellitePrn { get; set; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetSatellitePrnMaxItemsCount instead.")]
        public byte GetSatellitePrnMaxItemsCount() => 20;
        /// <summary>
        /// 0: Satellite not used, 1: used for localization
        /// OriginName: satellite_used, Units: , IsExtended: false
        /// </summary>
        public const int SatelliteUsedMaxItemsCount = 20;
        public byte[] SatelliteUsed { get; } = new byte[20];
        /// <summary>
        /// Elevation (0: right on top of receiver, 90: on the horizon) of satellite
        /// OriginName: satellite_elevation, Units: deg, IsExtended: false
        /// </summary>
        public const int SatelliteElevationMaxItemsCount = 20;
        public byte[] SatelliteElevation { get; } = new byte[20];
        /// <summary>
        /// Direction of satellite, 0: 0 deg, 255: 360 deg.
        /// OriginName: satellite_azimuth, Units: deg, IsExtended: false
        /// </summary>
        public const int SatelliteAzimuthMaxItemsCount = 20;
        public byte[] SatelliteAzimuth { get; } = new byte[20];
        /// <summary>
        /// Signal to noise ratio of satellite
        /// OriginName: satellite_snr, Units: dB, IsExtended: false
        /// </summary>
        public const int SatelliteSnrMaxItemsCount = 20;
        public byte[] SatelliteSnr { get; } = new byte[20];
    }
    /// <summary>
    /// The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
    ///  SCALED_IMU
    /// </summary>
    public class ScaledImuPacket: PacketV2<ScaledImuPayload>
    {
	    public const int PacketMessageId = 26;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 170;
        public override bool WrapToV2Extension => false;

        public override ScaledImuPayload Payload { get; } = new ScaledImuPayload();

        public override string Name => "SCALED_IMU";
    }

    /// <summary>
    ///  SCALED_IMU
    /// </summary>
    public class ScaledImuPayload : IPayload
    {
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=2; //Xacc
            sum+=2; //Yacc
            sum+=2; //Zacc
            sum+=2; //Xgyro
            sum+=2; //Ygyro
            sum+=2; //Zgyro
            sum+=2; //Xmag
            sum+=2; //Ymag
            sum+=2; //Zmag
            sum+=2; //Temperature
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 24 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public short Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public short Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public short Zacc { get; set; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Xgyro { get; set; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Ygyro { get; set; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Zgyro { get; set; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Xmag { get; set; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Ymag { get; set; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Zmag { get; set; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public short Temperature { get; set; }
    }
    /// <summary>
    /// The RAW IMU readings for a 9DOF sensor, which is identified by the id (default IMU1). This message should always contain the true raw values without any scaling to allow data capture and system debugging.
    ///  RAW_IMU
    /// </summary>
    public class RawImuPacket: PacketV2<RawImuPayload>
    {
	    public const int PacketMessageId = 27;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 144;
        public override bool WrapToV2Extension => false;

        public override RawImuPayload Payload { get; } = new RawImuPayload();

        public override string Name => "RAW_IMU";
    }

    /// <summary>
    ///  RAW_IMU
    /// </summary>
    public class RawImuPayload : IPayload
    {
        public byte GetMaxByteSize() => 29; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 29; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=2; //Xacc
            sum+=2; //Yacc
            sum+=2; //Zacc
            sum+=2; //Xgyro
            sum+=2; //Ygyro
            sum+=2; //Zgyro
            sum+=2; //Xmag
            sum+=2; //Ymag
            sum+=2; //Zmag
            sum+=1; //Id
            sum+=2; //Temperature
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 29 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X acceleration (raw)
        /// OriginName: xacc, Units: , IsExtended: false
        /// </summary>
        public short Xacc { get; set; }
        /// <summary>
        /// Y acceleration (raw)
        /// OriginName: yacc, Units: , IsExtended: false
        /// </summary>
        public short Yacc { get; set; }
        /// <summary>
        /// Z acceleration (raw)
        /// OriginName: zacc, Units: , IsExtended: false
        /// </summary>
        public short Zacc { get; set; }
        /// <summary>
        /// Angular speed around X axis (raw)
        /// OriginName: xgyro, Units: , IsExtended: false
        /// </summary>
        public short Xgyro { get; set; }
        /// <summary>
        /// Angular speed around Y axis (raw)
        /// OriginName: ygyro, Units: , IsExtended: false
        /// </summary>
        public short Ygyro { get; set; }
        /// <summary>
        /// Angular speed around Z axis (raw)
        /// OriginName: zgyro, Units: , IsExtended: false
        /// </summary>
        public short Zgyro { get; set; }
        /// <summary>
        /// X Magnetic field (raw)
        /// OriginName: xmag, Units: , IsExtended: false
        /// </summary>
        public short Xmag { get; set; }
        /// <summary>
        /// Y Magnetic field (raw)
        /// OriginName: ymag, Units: , IsExtended: false
        /// </summary>
        public short Ymag { get; set; }
        /// <summary>
        /// Z Magnetic field (raw)
        /// OriginName: zmag, Units: , IsExtended: false
        /// </summary>
        public short Zmag { get; set; }
        /// <summary>
        /// Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public byte Id { get; set; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public short Temperature { get; set; }
    }
    /// <summary>
    /// The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
    ///  RAW_PRESSURE
    /// </summary>
    public class RawPressurePacket: PacketV2<RawPressurePayload>
    {
	    public const int PacketMessageId = 28;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 67;
        public override bool WrapToV2Extension => false;

        public override RawPressurePayload Payload { get; } = new RawPressurePayload();

        public override string Name => "RAW_PRESSURE";
    }

    /// <summary>
    ///  RAW_PRESSURE
    /// </summary>
    public class RawPressurePayload : IPayload
    {
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=2; //PressAbs
            sum+=2; //PressDiff1
            sum+=2; //PressDiff2
            sum+=2; //Temperature
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            PressAbs = BinSerialize.ReadShort(ref buffer);
            PressDiff1 = BinSerialize.ReadShort(ref buffer);
            PressDiff2 = BinSerialize.ReadShort(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteShort(ref buffer,PressAbs);
            BinSerialize.WriteShort(ref buffer,PressDiff1);
            BinSerialize.WriteShort(ref buffer,PressDiff2);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 16 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Absolute pressure (raw)
        /// OriginName: press_abs, Units: , IsExtended: false
        /// </summary>
        public short PressAbs { get; set; }
        /// <summary>
        /// Differential pressure 1 (raw, 0 if nonexistent)
        /// OriginName: press_diff1, Units: , IsExtended: false
        /// </summary>
        public short PressDiff1 { get; set; }
        /// <summary>
        /// Differential pressure 2 (raw, 0 if nonexistent)
        /// OriginName: press_diff2, Units: , IsExtended: false
        /// </summary>
        public short PressDiff2 { get; set; }
        /// <summary>
        /// Raw Temperature measurement (raw)
        /// OriginName: temperature, Units: , IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
    }
    /// <summary>
    /// The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
    ///  SCALED_PRESSURE
    /// </summary>
    public class ScaledPressurePacket: PacketV2<ScaledPressurePayload>
    {
	    public const int PacketMessageId = 29;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 115;
        public override bool WrapToV2Extension => false;

        public override ScaledPressurePayload Payload { get; } = new ScaledPressurePayload();

        public override string Name => "SCALED_PRESSURE";
    }

    /// <summary>
    ///  SCALED_PRESSURE
    /// </summary>
    public class ScaledPressurePayload : IPayload
    {
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //PressAbs
            sum+=4; //PressDiff
            sum+=2; //Temperature
            sum+=2; //TemperaturePressDiff
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            PressAbs = BinSerialize.ReadFloat(ref buffer);
            PressDiff = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            // extended field 'TemperaturePressDiff' can be empty
            if (buffer.IsEmpty) return;
            TemperaturePressDiff = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,PressAbs);
            BinSerialize.WriteFloat(ref buffer,PressDiff);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteShort(ref buffer,TemperaturePressDiff);
            /* PayloadByteSize = 16 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: press_abs, Units: hPa, IsExtended: false
        /// </summary>
        public float PressAbs { get; set; }
        /// <summary>
        /// Differential pressure 1
        /// OriginName: press_diff, Units: hPa, IsExtended: false
        /// </summary>
        public float PressDiff { get; set; }
        /// <summary>
        /// Absolute pressure temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
        /// <summary>
        /// Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.
        /// OriginName: temperature_press_diff, Units: cdegC, IsExtended: true
        /// </summary>
        public short TemperaturePressDiff { get; set; }
    }
    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, Y-right, X-front, ZYX, intrinsic).
    ///  ATTITUDE
    /// </summary>
    public class AttitudePacket: PacketV2<AttitudePayload>
    {
	    public const int PacketMessageId = 30;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 39;
        public override bool WrapToV2Extension => false;

        public override AttitudePayload Payload { get; } = new AttitudePayload();

        public override string Name => "ATTITUDE";
    }

    /// <summary>
    ///  ATTITUDE
    /// </summary>
    public class AttitudePayload : IPayload
    {
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=4; //Rollspeed
            sum+=4; //Pitchspeed
            sum+=4; //Yawspeed
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            /* PayloadByteSize = 28 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Roll angle (-pi..+pi)
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Pitch angle (-pi..+pi)
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw angle (-pi..+pi)
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Rollspeed { get; set; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Pitchspeed { get; set; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Yawspeed { get; set; }
    }
    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    ///  ATTITUDE_QUATERNION
    /// </summary>
    public class AttitudeQuaternionPacket: PacketV2<AttitudeQuaternionPayload>
    {
	    public const int PacketMessageId = 31;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 246;
        public override bool WrapToV2Extension => false;

        public override AttitudeQuaternionPayload Payload { get; } = new AttitudeQuaternionPayload();

        public override string Name => "ATTITUDE_QUATERNION";
    }

    /// <summary>
    ///  ATTITUDE_QUATERNION
    /// </summary>
    public class AttitudeQuaternionPayload : IPayload
    {
        public byte GetMaxByteSize() => 48; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 48; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Q1
            sum+=4; //Q2
            sum+=4; //Q3
            sum+=4; //Q4
            sum+=4; //Rollspeed
            sum+=4; //Pitchspeed
            sum+=4; //Yawspeed
            sum+=ReprOffsetQ.Length * 4; //ReprOffsetQ
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Q1 = BinSerialize.ReadFloat(ref buffer);
            Q2 = BinSerialize.ReadFloat(ref buffer);
            Q3 = BinSerialize.ReadFloat(ref buffer);
            Q4 = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            // extended field 'ReprOffsetQ' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                ReprOffsetQ[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Q1);
            BinSerialize.WriteFloat(ref buffer,Q2);
            BinSerialize.WriteFloat(ref buffer,Q3);
            BinSerialize.WriteFloat(ref buffer,Q4);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            for(var i=0;i<ReprOffsetQ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,ReprOffsetQ[i]);
            }
            /* PayloadByteSize = 48 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Quaternion component 1, w (1 in null-rotation)
        /// OriginName: q1, Units: , IsExtended: false
        /// </summary>
        public float Q1 { get; set; }
        /// <summary>
        /// Quaternion component 2, x (0 in null-rotation)
        /// OriginName: q2, Units: , IsExtended: false
        /// </summary>
        public float Q2 { get; set; }
        /// <summary>
        /// Quaternion component 3, y (0 in null-rotation)
        /// OriginName: q3, Units: , IsExtended: false
        /// </summary>
        public float Q3 { get; set; }
        /// <summary>
        /// Quaternion component 4, z (0 in null-rotation)
        /// OriginName: q4, Units: , IsExtended: false
        /// </summary>
        public float Q4 { get; set; }
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Rollspeed { get; set; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Pitchspeed { get; set; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Yawspeed { get; set; }
        /// <summary>
        /// Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode.
        /// OriginName: repr_offset_q, Units: , IsExtended: true
        /// </summary>
        public const int ReprOffsetQMaxItemsCount = 4;
        public float[] ReprOffsetQ { get; } = new float[4];
    }
    /// <summary>
    /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    ///  LOCAL_POSITION_NED
    /// </summary>
    public class LocalPositionNedPacket: PacketV2<LocalPositionNedPayload>
    {
	    public const int PacketMessageId = 32;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 185;
        public override bool WrapToV2Extension => false;

        public override LocalPositionNedPayload Payload { get; } = new LocalPositionNedPayload();

        public override string Name => "LOCAL_POSITION_NED";
    }

    /// <summary>
    ///  LOCAL_POSITION_NED
    /// </summary>
    public class LocalPositionNedPayload : IPayload
    {
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            /* PayloadByteSize = 28 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// X Speed
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y Speed
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z Speed
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
    }
    /// <summary>
    /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
    ///                is designed as scaled integer message since the resolution of float is not sufficient.
    ///  GLOBAL_POSITION_INT
    /// </summary>
    public class GlobalPositionIntPacket: PacketV2<GlobalPositionIntPayload>
    {
	    public const int PacketMessageId = 33;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 104;
        public override bool WrapToV2Extension => false;

        public override GlobalPositionIntPayload Payload { get; } = new GlobalPositionIntPayload();

        public override string Name => "GLOBAL_POSITION_INT";
    }

    /// <summary>
    ///  GLOBAL_POSITION_INT
    /// </summary>
    public class GlobalPositionIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //RelativeAlt
            sum+=2; //Vx
            sum+=2; //Vy
            sum+=2; //Vz
            sum+=2; //Hdg
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            Hdg = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteUShort(ref buffer,Hdg);
            /* PayloadByteSize = 28 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Latitude, expressed
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude, expressed
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public int RelativeAlt { get; set; }
        /// <summary>
        /// Ground X Speed (Latitude, positive north)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vx { get; set; }
        /// <summary>
        /// Ground Y Speed (Longitude, positive east)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vy { get; set; }
        /// <summary>
        /// Ground Z Speed (Altitude, positive down)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vz { get; set; }
        /// <summary>
        /// Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: hdg, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Hdg { get; set; }
    }
    /// <summary>
    /// The scaled values of the RC channels received: (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to INT16_MAX.
    ///  RC_CHANNELS_SCALED
    /// </summary>
    public class RcChannelsScaledPacket: PacketV2<RcChannelsScaledPayload>
    {
	    public const int PacketMessageId = 34;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 237;
        public override bool WrapToV2Extension => false;

        public override RcChannelsScaledPayload Payload { get; } = new RcChannelsScaledPayload();

        public override string Name => "RC_CHANNELS_SCALED";
    }

    /// <summary>
    ///  RC_CHANNELS_SCALED
    /// </summary>
    public class RcChannelsScaledPayload : IPayload
    {
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=2; //Chan1Scaled
            sum+=2; //Chan2Scaled
            sum+=2; //Chan3Scaled
            sum+=2; //Chan4Scaled
            sum+=2; //Chan5Scaled
            sum+=2; //Chan6Scaled
            sum+=2; //Chan7Scaled
            sum+=2; //Chan8Scaled
            sum+=1; //Port
            sum+=1; //Rssi
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Chan1Scaled = BinSerialize.ReadShort(ref buffer);
            Chan2Scaled = BinSerialize.ReadShort(ref buffer);
            Chan3Scaled = BinSerialize.ReadShort(ref buffer);
            Chan4Scaled = BinSerialize.ReadShort(ref buffer);
            Chan5Scaled = BinSerialize.ReadShort(ref buffer);
            Chan6Scaled = BinSerialize.ReadShort(ref buffer);
            Chan7Scaled = BinSerialize.ReadShort(ref buffer);
            Chan8Scaled = BinSerialize.ReadShort(ref buffer);
            Port = (byte)BinSerialize.ReadByte(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Chan1Scaled);
            BinSerialize.WriteShort(ref buffer,Chan2Scaled);
            BinSerialize.WriteShort(ref buffer,Chan3Scaled);
            BinSerialize.WriteShort(ref buffer,Chan4Scaled);
            BinSerialize.WriteShort(ref buffer,Chan5Scaled);
            BinSerialize.WriteShort(ref buffer,Chan6Scaled);
            BinSerialize.WriteShort(ref buffer,Chan7Scaled);
            BinSerialize.WriteShort(ref buffer,Chan8Scaled);
            BinSerialize.WriteByte(ref buffer,(byte)Port);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 22 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// RC channel 1 value scaled.
        /// OriginName: chan1_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan1Scaled { get; set; }
        /// <summary>
        /// RC channel 2 value scaled.
        /// OriginName: chan2_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan2Scaled { get; set; }
        /// <summary>
        /// RC channel 3 value scaled.
        /// OriginName: chan3_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan3Scaled { get; set; }
        /// <summary>
        /// RC channel 4 value scaled.
        /// OriginName: chan4_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan4Scaled { get; set; }
        /// <summary>
        /// RC channel 5 value scaled.
        /// OriginName: chan5_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan5Scaled { get; set; }
        /// <summary>
        /// RC channel 6 value scaled.
        /// OriginName: chan6_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan6Scaled { get; set; }
        /// <summary>
        /// RC channel 7 value scaled.
        /// OriginName: chan7_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan7Scaled { get; set; }
        /// <summary>
        /// RC channel 8 value scaled.
        /// OriginName: chan8_scaled, Units: , IsExtended: false
        /// </summary>
        public short Chan8Scaled { get; set; }
        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// OriginName: port, Units: , IsExtended: false
        /// </summary>
        public byte Port { get; set; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public byte Rssi { get; set; }
    }
    /// <summary>
    /// The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    ///  RC_CHANNELS_RAW
    /// </summary>
    public class RcChannelsRawPacket: PacketV2<RcChannelsRawPayload>
    {
	    public const int PacketMessageId = 35;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 244;
        public override bool WrapToV2Extension => false;

        public override RcChannelsRawPayload Payload { get; } = new RcChannelsRawPayload();

        public override string Name => "RC_CHANNELS_RAW";
    }

    /// <summary>
    ///  RC_CHANNELS_RAW
    /// </summary>
    public class RcChannelsRawPayload : IPayload
    {
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=2; //Chan1Raw
            sum+=2; //Chan2Raw
            sum+=2; //Chan3Raw
            sum+=2; //Chan4Raw
            sum+=2; //Chan5Raw
            sum+=2; //Chan6Raw
            sum+=2; //Chan7Raw
            sum+=2; //Chan8Raw
            sum+=1; //Port
            sum+=1; //Rssi
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            Port = (byte)BinSerialize.ReadByte(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Port);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 22 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// RC channel 1 value.
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan1Raw { get; set; }
        /// <summary>
        /// RC channel 2 value.
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan2Raw { get; set; }
        /// <summary>
        /// RC channel 3 value.
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan3Raw { get; set; }
        /// <summary>
        /// RC channel 4 value.
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan4Raw { get; set; }
        /// <summary>
        /// RC channel 5 value.
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan5Raw { get; set; }
        /// <summary>
        /// RC channel 6 value.
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan6Raw { get; set; }
        /// <summary>
        /// RC channel 7 value.
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan7Raw { get; set; }
        /// <summary>
        /// RC channel 8 value.
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan8Raw { get; set; }
        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// OriginName: port, Units: , IsExtended: false
        /// </summary>
        public byte Port { get; set; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public byte Rssi { get; set; }
    }
    /// <summary>
    /// Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
    ///  SERVO_OUTPUT_RAW
    /// </summary>
    public class ServoOutputRawPacket: PacketV2<ServoOutputRawPayload>
    {
	    public const int PacketMessageId = 36;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 222;
        public override bool WrapToV2Extension => false;

        public override ServoOutputRawPayload Payload { get; } = new ServoOutputRawPayload();

        public override string Name => "SERVO_OUTPUT_RAW";
    }

    /// <summary>
    ///  SERVO_OUTPUT_RAW
    /// </summary>
    public class ServoOutputRawPayload : IPayload
    {
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeUsec
            sum+=2; //Servo1Raw
            sum+=2; //Servo2Raw
            sum+=2; //Servo3Raw
            sum+=2; //Servo4Raw
            sum+=2; //Servo5Raw
            sum+=2; //Servo6Raw
            sum+=2; //Servo7Raw
            sum+=2; //Servo8Raw
            sum+=1; //Port
            sum+=2; //Servo9Raw
            sum+=2; //Servo10Raw
            sum+=2; //Servo11Raw
            sum+=2; //Servo12Raw
            sum+=2; //Servo13Raw
            sum+=2; //Servo14Raw
            sum+=2; //Servo15Raw
            sum+=2; //Servo16Raw
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadUInt(ref buffer);
            Servo1Raw = BinSerialize.ReadUShort(ref buffer);
            Servo2Raw = BinSerialize.ReadUShort(ref buffer);
            Servo3Raw = BinSerialize.ReadUShort(ref buffer);
            Servo4Raw = BinSerialize.ReadUShort(ref buffer);
            Servo5Raw = BinSerialize.ReadUShort(ref buffer);
            Servo6Raw = BinSerialize.ReadUShort(ref buffer);
            Servo7Raw = BinSerialize.ReadUShort(ref buffer);
            Servo8Raw = BinSerialize.ReadUShort(ref buffer);
            Port = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Servo9Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo9Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo10Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo10Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo11Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo11Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo12Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo12Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo13Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo13Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo14Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo14Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo15Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo15Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Servo16Raw' can be empty
            if (buffer.IsEmpty) return;
            Servo16Raw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeUsec);
            BinSerialize.WriteUShort(ref buffer,Servo1Raw);
            BinSerialize.WriteUShort(ref buffer,Servo2Raw);
            BinSerialize.WriteUShort(ref buffer,Servo3Raw);
            BinSerialize.WriteUShort(ref buffer,Servo4Raw);
            BinSerialize.WriteUShort(ref buffer,Servo5Raw);
            BinSerialize.WriteUShort(ref buffer,Servo6Raw);
            BinSerialize.WriteUShort(ref buffer,Servo7Raw);
            BinSerialize.WriteUShort(ref buffer,Servo8Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Port);
            BinSerialize.WriteUShort(ref buffer,Servo9Raw);
            BinSerialize.WriteUShort(ref buffer,Servo10Raw);
            BinSerialize.WriteUShort(ref buffer,Servo11Raw);
            BinSerialize.WriteUShort(ref buffer,Servo12Raw);
            BinSerialize.WriteUShort(ref buffer,Servo13Raw);
            BinSerialize.WriteUShort(ref buffer,Servo14Raw);
            BinSerialize.WriteUShort(ref buffer,Servo15Raw);
            BinSerialize.WriteUShort(ref buffer,Servo16Raw);
            /* PayloadByteSize = 37 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public uint TimeUsec { get; set; }
        /// <summary>
        /// Servo output 1 value
        /// OriginName: servo1_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo1Raw { get; set; }
        /// <summary>
        /// Servo output 2 value
        /// OriginName: servo2_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo2Raw { get; set; }
        /// <summary>
        /// Servo output 3 value
        /// OriginName: servo3_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo3Raw { get; set; }
        /// <summary>
        /// Servo output 4 value
        /// OriginName: servo4_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo4Raw { get; set; }
        /// <summary>
        /// Servo output 5 value
        /// OriginName: servo5_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo5Raw { get; set; }
        /// <summary>
        /// Servo output 6 value
        /// OriginName: servo6_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo6Raw { get; set; }
        /// <summary>
        /// Servo output 7 value
        /// OriginName: servo7_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo7Raw { get; set; }
        /// <summary>
        /// Servo output 8 value
        /// OriginName: servo8_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Servo8Raw { get; set; }
        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// OriginName: port, Units: , IsExtended: false
        /// </summary>
        public byte Port { get; set; }
        /// <summary>
        /// Servo output 9 value
        /// OriginName: servo9_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo9Raw { get; set; }
        /// <summary>
        /// Servo output 10 value
        /// OriginName: servo10_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo10Raw { get; set; }
        /// <summary>
        /// Servo output 11 value
        /// OriginName: servo11_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo11Raw { get; set; }
        /// <summary>
        /// Servo output 12 value
        /// OriginName: servo12_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo12Raw { get; set; }
        /// <summary>
        /// Servo output 13 value
        /// OriginName: servo13_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo13Raw { get; set; }
        /// <summary>
        /// Servo output 14 value
        /// OriginName: servo14_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo14Raw { get; set; }
        /// <summary>
        /// Servo output 15 value
        /// OriginName: servo15_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo15Raw { get; set; }
        /// <summary>
        /// Servo output 16 value
        /// OriginName: servo16_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Servo16Raw { get; set; }
    }
    /// <summary>
    /// Request a partial list of mission items from the system/component. https://mavlink.io/en/services/mission.html. If start and end index are the same, just send one waypoint.
    ///  MISSION_REQUEST_PARTIAL_LIST
    /// </summary>
    public class MissionRequestPartialListPacket: PacketV2<MissionRequestPartialListPayload>
    {
	    public const int PacketMessageId = 37;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 212;
        public override bool WrapToV2Extension => false;

        public override MissionRequestPartialListPayload Payload { get; } = new MissionRequestPartialListPayload();

        public override string Name => "MISSION_REQUEST_PARTIAL_LIST";
    }

    /// <summary>
    ///  MISSION_REQUEST_PARTIAL_LIST
    /// </summary>
    public class MissionRequestPartialListPayload : IPayload
    {
        public byte GetMaxByteSize() => 7; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 7; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //StartIndex
            sum+=2; //EndIndex
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            StartIndex = BinSerialize.ReadShort(ref buffer);
            EndIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,StartIndex);
            BinSerialize.WriteShort(ref buffer,EndIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 7 */;
        }
        
        



        /// <summary>
        /// Start index
        /// OriginName: start_index, Units: , IsExtended: false
        /// </summary>
        public short StartIndex { get; set; }
        /// <summary>
        /// End index, -1 by default (-1: send list to end). Else a valid index of the list
        /// OriginName: end_index, Units: , IsExtended: false
        /// </summary>
        public short EndIndex { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
    ///  MISSION_WRITE_PARTIAL_LIST
    /// </summary>
    public class MissionWritePartialListPacket: PacketV2<MissionWritePartialListPayload>
    {
	    public const int PacketMessageId = 38;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 9;
        public override bool WrapToV2Extension => false;

        public override MissionWritePartialListPayload Payload { get; } = new MissionWritePartialListPayload();

        public override string Name => "MISSION_WRITE_PARTIAL_LIST";
    }

    /// <summary>
    ///  MISSION_WRITE_PARTIAL_LIST
    /// </summary>
    public class MissionWritePartialListPayload : IPayload
    {
        public byte GetMaxByteSize() => 7; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 7; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //StartIndex
            sum+=2; //EndIndex
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            StartIndex = BinSerialize.ReadShort(ref buffer);
            EndIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,StartIndex);
            BinSerialize.WriteShort(ref buffer,EndIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 7 */;
        }
        
        



        /// <summary>
        /// Start index. Must be smaller / equal to the largest index of the current onboard list.
        /// OriginName: start_index, Units: , IsExtended: false
        /// </summary>
        public short StartIndex { get; set; }
        /// <summary>
        /// End index, equal or greater than start index.
        /// OriginName: end_index, Units: , IsExtended: false
        /// </summary>
        public short EndIndex { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// Message encoding a mission item. This message is emitted to announce
    ///                 the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN may be used to indicate an optional/default value (e.g. to use the system's current latitude or yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    ///  MISSION_ITEM
    /// </summary>
    public class MissionItemPacket: PacketV2<MissionItemPayload>
    {
	    public const int PacketMessageId = 39;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 254;
        public override bool WrapToV2Extension => false;

        public override MissionItemPayload Payload { get; } = new MissionItemPayload();

        public override string Name => "MISSION_ITEM";
    }

    /// <summary>
    ///  MISSION_ITEM
    /// </summary>
    public class MissionItemPayload : IPayload
    {
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Param1
            sum+=4; //Param2
            sum+=4; //Param3
            sum+=4; //Param4
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=2; //Seq
            sum+= 2; // Command
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // Frame
            sum+=1; //Current
            sum+=1; //Autocontinue
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Seq = BinSerialize.ReadUShort(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            Current = (byte)BinSerialize.ReadByte(ref buffer);
            Autocontinue = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteByte(ref buffer,(byte)Current);
            BinSerialize.WriteByte(ref buffer,(byte)Autocontinue);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 38 */;
        }
        
        



        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public float Param1 { get; set; }
        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public float Param2 { get; set; }
        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public float Param3 { get; set; }
        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public float Param4 { get; set; }
        /// <summary>
        /// PARAM5 / local: X coordinate, global: latitude
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// PARAM6 / local: Y coordinate, global: longitude
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame).
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public ushort Seq { get; set; }
        /// <summary>
        /// The scheduled action for the waypoint.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public MavCmd Command { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// The coordinate system of the waypoint.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame Frame { get; set; }
        /// <summary>
        /// false:0, true:1
        /// OriginName: current, Units: , IsExtended: false
        /// </summary>
        public byte Current { get; set; }
        /// <summary>
        /// Autocontinue to next waypoint. 0: false, 1: true. Set false to pause mission after the item completes.
        /// OriginName: autocontinue, Units: , IsExtended: false
        /// </summary>
        public byte Autocontinue { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. https://mavlink.io/en/services/mission.html
    ///  MISSION_REQUEST
    /// </summary>
    public class MissionRequestPacket: PacketV2<MissionRequestPayload>
    {
	    public const int PacketMessageId = 40;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 230;
        public override bool WrapToV2Extension => false;

        public override MissionRequestPayload Payload { get; } = new MissionRequestPayload();

        public override string Name => "MISSION_REQUEST";
    }

    /// <summary>
    ///  MISSION_REQUEST
    /// </summary>
    public class MissionRequestPayload : IPayload
    {
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Seq
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 5 */;
        }
        
        



        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public ushort Seq { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// 
    ///         Set the mission item with sequence number seq as the current item and emit MISSION_CURRENT (whether or not the mission number changed).
    ///         If a mission is currently being executed, the system will continue to this new mission item on the shortest path, skipping any intermediate mission items.
    ///         Note that mission jump repeat counters are not reset (see MAV_CMD_DO_JUMP param2).
    /// 
    ///         This message may trigger a mission state-machine change on some systems: for example from MISSION_STATE_NOT_STARTED or MISSION_STATE_PAUSED to MISSION_STATE_ACTIVE.
    ///         If the system is in mission mode, on those systems this command might therefore start, restart or resume the mission.
    ///         If the system is not in mission mode this message must not trigger a switch to mission mode.
    ///       
    ///  MISSION_SET_CURRENT
    /// </summary>
    public class MissionSetCurrentPacket: PacketV2<MissionSetCurrentPayload>
    {
	    public const int PacketMessageId = 41;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 28;
        public override bool WrapToV2Extension => false;

        public override MissionSetCurrentPayload Payload { get; } = new MissionSetCurrentPayload();

        public override string Name => "MISSION_SET_CURRENT";
    }

    /// <summary>
    ///  MISSION_SET_CURRENT
    /// </summary>
    public class MissionSetCurrentPayload : IPayload
    {
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Seq
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 4 */;
        }
        
        



        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public ushort Seq { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// 
    ///         Message that announces the sequence number of the current target mission item (that the system will fly towards/execute when the mission is running).
    ///         This message should be streamed all the time (nominally at 1Hz).
    ///         This message should be emitted following a call to MAV_CMD_DO_SET_MISSION_CURRENT or SET_MISSION_CURRENT.
    ///       
    ///  MISSION_CURRENT
    /// </summary>
    public class MissionCurrentPacket: PacketV2<MissionCurrentPayload>
    {
	    public const int PacketMessageId = 42;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 28;
        public override bool WrapToV2Extension => false;

        public override MissionCurrentPayload Payload { get; } = new MissionCurrentPayload();

        public override string Name => "MISSION_CURRENT";
    }

    /// <summary>
    ///  MISSION_CURRENT
    /// </summary>
    public class MissionCurrentPayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Seq
            sum+=2; //Total
            sum+= 1; // MissionState
            sum+=1; //MissionMode
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Total' can be empty
            if (buffer.IsEmpty) return;
            Total = BinSerialize.ReadUShort(ref buffer);
            // extended field 'MissionState' can be empty
            if (buffer.IsEmpty) return;
            MissionState = (MissionState)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionMode' can be empty
            if (buffer.IsEmpty) return;
            MissionMode = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteUShort(ref buffer,Total);
            BinSerialize.WriteByte(ref buffer,(byte)MissionState);
            BinSerialize.WriteByte(ref buffer,(byte)MissionMode);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public ushort Seq { get; set; }
        /// <summary>
        /// Total number of mission items on vehicle (on last item, sequence == total). If the autopilot stores its home location as part of the mission this will be excluded from the total. 0: Not supported, UINT16_MAX if no mission is present on the vehicle.
        /// OriginName: total, Units: , IsExtended: true
        /// </summary>
        public ushort Total { get; set; }
        /// <summary>
        /// Mission state machine state. MISSION_STATE_UNKNOWN if state reporting not supported.
        /// OriginName: mission_state, Units: , IsExtended: true
        /// </summary>
        public MissionState MissionState { get; set; }
        /// <summary>
        /// Vehicle is in a mode that can execute mission items or suspended. 0: Unknown, 1: In mission mode, 2: Suspended (not in mission mode).
        /// OriginName: mission_mode, Units: , IsExtended: true
        /// </summary>
        public byte MissionMode { get; set; }
    }
    /// <summary>
    /// Request the overall list of mission items from the system/component.
    ///  MISSION_REQUEST_LIST
    /// </summary>
    public class MissionRequestListPacket: PacketV2<MissionRequestListPayload>
    {
	    public const int PacketMessageId = 43;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 132;
        public override bool WrapToV2Extension => false;

        public override MissionRequestListPayload Payload { get; } = new MissionRequestListPayload();

        public override string Name => "MISSION_REQUEST_LIST";
    }

    /// <summary>
    ///  MISSION_REQUEST_LIST
    /// </summary>
    public class MissionRequestListPayload : IPayload
    {
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 3 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of waypoints.
    ///  MISSION_COUNT
    /// </summary>
    public class MissionCountPacket: PacketV2<MissionCountPayload>
    {
	    public const int PacketMessageId = 44;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 221;
        public override bool WrapToV2Extension => false;

        public override MissionCountPayload Payload { get; } = new MissionCountPayload();

        public override string Name => "MISSION_COUNT";
    }

    /// <summary>
    ///  MISSION_COUNT
    /// </summary>
    public class MissionCountPayload : IPayload
    {
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Count
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Count = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Count);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 5 */;
        }
        
        



        /// <summary>
        /// Number of mission items in the sequence
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public ushort Count { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// Delete all mission items at once.
    ///  MISSION_CLEAR_ALL
    /// </summary>
    public class MissionClearAllPacket: PacketV2<MissionClearAllPayload>
    {
	    public const int PacketMessageId = 45;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 232;
        public override bool WrapToV2Extension => false;

        public override MissionClearAllPayload Payload { get; } = new MissionClearAllPayload();

        public override string Name => "MISSION_CLEAR_ALL";
    }

    /// <summary>
    ///  MISSION_CLEAR_ALL
    /// </summary>
    public class MissionClearAllPayload : IPayload
    {
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 3 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.
    ///  MISSION_ITEM_REACHED
    /// </summary>
    public class MissionItemReachedPacket: PacketV2<MissionItemReachedPayload>
    {
	    public const int PacketMessageId = 46;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 11;
        public override bool WrapToV2Extension => false;

        public override MissionItemReachedPayload Payload { get; } = new MissionItemReachedPayload();

        public override string Name => "MISSION_ITEM_REACHED";
    }

    /// <summary>
    ///  MISSION_ITEM_REACHED
    /// </summary>
    public class MissionItemReachedPayload : IPayload
    {
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Seq
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            /* PayloadByteSize = 2 */;
        }
        
        



        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public ushort Seq { get; set; }
    }
    /// <summary>
    /// Acknowledgment message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
    ///  MISSION_ACK
    /// </summary>
    public class MissionAckPacket: PacketV2<MissionAckPayload>
    {
	    public const int PacketMessageId = 47;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 153;
        public override bool WrapToV2Extension => false;

        public override MissionAckPayload Payload { get; } = new MissionAckPayload();

        public override string Name => "MISSION_ACK";
    }

    /// <summary>
    ///  MISSION_ACK
    /// </summary>
    public class MissionAckPayload : IPayload
    {
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // Type
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Type = (MavMissionResult)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 4 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission result.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public MavMissionResult Type { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// Sets the GPS coordinates of the vehicle local origin (0,0,0) position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of whether the origin is changed. This enables transform between the local coordinate frame and the global (GPS) coordinate frame, which may be necessary when (for example) indoor and outdoor settings are connected and the MAV should move from in- to outdoor.
    ///  SET_GPS_GLOBAL_ORIGIN
    /// </summary>
    public class SetGpsGlobalOriginPacket: PacketV2<SetGpsGlobalOriginPayload>
    {
	    public const int PacketMessageId = 48;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 41;
        public override bool WrapToV2Extension => false;

        public override SetGpsGlobalOriginPayload Payload { get; } = new SetGpsGlobalOriginPayload();

        public override string Name => "SET_GPS_GLOBAL_ORIGIN";
    }

    /// <summary>
    ///  SET_GPS_GLOBAL_ORIGIN
    /// </summary>
    public class SetGpsGlobalOriginPayload : IPayload
    {
        public byte GetMaxByteSize() => 21; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 21; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Latitude
            sum+=4; //Longitude
            sum+=4; //Altitude
            sum+=1; //TargetSystem
            sum+=8; //TimeUsec
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 21 */;
        }
        
        



        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Latitude { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Longitude { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public int Altitude { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public ulong TimeUsec { get; set; }
    }
    /// <summary>
    /// Publishes the GPS coordinates of the vehicle local origin (0,0,0) position. Emitted whenever a new GPS-Local position mapping is requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.
    ///  GPS_GLOBAL_ORIGIN
    /// </summary>
    public class GpsGlobalOriginPacket: PacketV2<GpsGlobalOriginPayload>
    {
	    public const int PacketMessageId = 49;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 39;
        public override bool WrapToV2Extension => false;

        public override GpsGlobalOriginPayload Payload { get; } = new GpsGlobalOriginPayload();

        public override string Name => "GPS_GLOBAL_ORIGIN";
    }

    /// <summary>
    ///  GPS_GLOBAL_ORIGIN
    /// </summary>
    public class GpsGlobalOriginPayload : IPayload
    {
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Latitude
            sum+=4; //Longitude
            sum+=4; //Altitude
            sum+=8; //TimeUsec
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 20 */;
        }
        
        



        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Latitude { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Longitude { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public int Altitude { get; set; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public ulong TimeUsec { get; set; }
    }
    /// <summary>
    /// Bind a RC channel to a parameter. The parameter should change according to the RC channel value.
    ///  PARAM_MAP_RC
    /// </summary>
    public class ParamMapRcPacket: PacketV2<ParamMapRcPayload>
    {
	    public const int PacketMessageId = 50;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 78;
        public override bool WrapToV2Extension => false;

        public override ParamMapRcPayload Payload { get; } = new ParamMapRcPayload();

        public override string Name => "PARAM_MAP_RC";
    }

    /// <summary>
    ///  PARAM_MAP_RC
    /// </summary>
    public class ParamMapRcPayload : IPayload
    {
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //ParamValue0
            sum+=4; //Scale
            sum+=4; //ParamValueMin
            sum+=4; //ParamValueMax
            sum+=2; //ParamIndex
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=ParamId.Length; //ParamId
            sum+=1; //ParameterRcChannelIndex
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamValue0 = BinSerialize.ReadFloat(ref buffer);
            Scale = BinSerialize.ReadFloat(ref buffer);
            ParamValueMin = BinSerialize.ReadFloat(ref buffer);
            ParamValueMax = BinSerialize.ReadFloat(ref buffer);
            ParamIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/37 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamId = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            ParameterRcChannelIndex = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,ParamValue0);
            BinSerialize.WriteFloat(ref buffer,Scale);
            BinSerialize.WriteFloat(ref buffer,ParamValueMin);
            BinSerialize.WriteFloat(ref buffer,ParamValueMax);
            BinSerialize.WriteShort(ref buffer,ParamIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParameterRcChannelIndex);
            /* PayloadByteSize = 37 */;
        }
        
        



        /// <summary>
        /// Initial parameter value
        /// OriginName: param_value0, Units: , IsExtended: false
        /// </summary>
        public float ParamValue0 { get; set; }
        /// <summary>
        /// Scale, maps the RC range [-1, 1] to a parameter value
        /// OriginName: scale, Units: , IsExtended: false
        /// </summary>
        public float Scale { get; set; }
        /// <summary>
        /// Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)
        /// OriginName: param_value_min, Units: , IsExtended: false
        /// </summary>
        public float ParamValueMin { get; set; }
        /// <summary>
        /// Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)
        /// OriginName: param_value_max, Units: , IsExtended: false
        /// </summary>
        public float ParamValueMax { get; set; }
        /// <summary>
        /// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public short ParamIndex { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; set; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
        /// <summary>
        /// Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC.
        /// OriginName: parameter_rc_channel_index, Units: , IsExtended: false
        /// </summary>
        public byte ParameterRcChannelIndex { get; set; }
    }
    /// <summary>
    /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html
    ///  MISSION_REQUEST_INT
    /// </summary>
    public class MissionRequestIntPacket: PacketV2<MissionRequestIntPayload>
    {
	    public const int PacketMessageId = 51;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 196;
        public override bool WrapToV2Extension => false;

        public override MissionRequestIntPayload Payload { get; } = new MissionRequestIntPayload();

        public override string Name => "MISSION_REQUEST_INT";
    }

    /// <summary>
    ///  MISSION_REQUEST_INT
    /// </summary>
    public class MissionRequestIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Seq
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Seq = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 5 */;
        }
        
        



        /// <summary>
        /// Sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public ushort Seq { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.
    ///  SAFETY_SET_ALLOWED_AREA
    /// </summary>
    public class SafetySetAllowedAreaPacket: PacketV2<SafetySetAllowedAreaPayload>
    {
	    public const int PacketMessageId = 54;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 15;
        public override bool WrapToV2Extension => false;

        public override SafetySetAllowedAreaPayload Payload { get; } = new SafetySetAllowedAreaPayload();

        public override string Name => "SAFETY_SET_ALLOWED_AREA";
    }

    /// <summary>
    ///  SAFETY_SET_ALLOWED_AREA
    /// </summary>
    public class SafetySetAllowedAreaPayload : IPayload
    {
        public byte GetMaxByteSize() => 27; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 27; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //P1x
            sum+=4; //P1y
            sum+=4; //P1z
            sum+=4; //P2x
            sum+=4; //P2y
            sum+=4; //P2z
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // Frame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            P1x = BinSerialize.ReadFloat(ref buffer);
            P1y = BinSerialize.ReadFloat(ref buffer);
            P1z = BinSerialize.ReadFloat(ref buffer);
            P2x = BinSerialize.ReadFloat(ref buffer);
            P2y = BinSerialize.ReadFloat(ref buffer);
            P2z = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,P1x);
            BinSerialize.WriteFloat(ref buffer,P1y);
            BinSerialize.WriteFloat(ref buffer,P1z);
            BinSerialize.WriteFloat(ref buffer,P2x);
            BinSerialize.WriteFloat(ref buffer,P2y);
            BinSerialize.WriteFloat(ref buffer,P2z);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 27 */;
        }
        
        



        /// <summary>
        /// x position 1 / Latitude 1
        /// OriginName: p1x, Units: m, IsExtended: false
        /// </summary>
        public float P1x { get; set; }
        /// <summary>
        /// y position 1 / Longitude 1
        /// OriginName: p1y, Units: m, IsExtended: false
        /// </summary>
        public float P1y { get; set; }
        /// <summary>
        /// z position 1 / Altitude 1
        /// OriginName: p1z, Units: m, IsExtended: false
        /// </summary>
        public float P1z { get; set; }
        /// <summary>
        /// x position 2 / Latitude 2
        /// OriginName: p2x, Units: m, IsExtended: false
        /// </summary>
        public float P2x { get; set; }
        /// <summary>
        /// y position 2 / Longitude 2
        /// OriginName: p2y, Units: m, IsExtended: false
        /// </summary>
        public float P2y { get; set; }
        /// <summary>
        /// z position 2 / Altitude 2
        /// OriginName: p2z, Units: m, IsExtended: false
        /// </summary>
        public float P2z { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame Frame { get; set; }
    }
    /// <summary>
    /// Read out the safety zone the MAV currently assumes.
    ///  SAFETY_ALLOWED_AREA
    /// </summary>
    public class SafetyAllowedAreaPacket: PacketV2<SafetyAllowedAreaPayload>
    {
	    public const int PacketMessageId = 55;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 3;
        public override bool WrapToV2Extension => false;

        public override SafetyAllowedAreaPayload Payload { get; } = new SafetyAllowedAreaPayload();

        public override string Name => "SAFETY_ALLOWED_AREA";
    }

    /// <summary>
    ///  SAFETY_ALLOWED_AREA
    /// </summary>
    public class SafetyAllowedAreaPayload : IPayload
    {
        public byte GetMaxByteSize() => 25; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 25; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //P1x
            sum+=4; //P1y
            sum+=4; //P1z
            sum+=4; //P2x
            sum+=4; //P2y
            sum+=4; //P2z
            sum+= 1; // Frame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            P1x = BinSerialize.ReadFloat(ref buffer);
            P1y = BinSerialize.ReadFloat(ref buffer);
            P1z = BinSerialize.ReadFloat(ref buffer);
            P2x = BinSerialize.ReadFloat(ref buffer);
            P2y = BinSerialize.ReadFloat(ref buffer);
            P2z = BinSerialize.ReadFloat(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,P1x);
            BinSerialize.WriteFloat(ref buffer,P1y);
            BinSerialize.WriteFloat(ref buffer,P1z);
            BinSerialize.WriteFloat(ref buffer,P2x);
            BinSerialize.WriteFloat(ref buffer,P2y);
            BinSerialize.WriteFloat(ref buffer,P2z);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 25 */;
        }
        
        



        /// <summary>
        /// x position 1 / Latitude 1
        /// OriginName: p1x, Units: m, IsExtended: false
        /// </summary>
        public float P1x { get; set; }
        /// <summary>
        /// y position 1 / Longitude 1
        /// OriginName: p1y, Units: m, IsExtended: false
        /// </summary>
        public float P1y { get; set; }
        /// <summary>
        /// z position 1 / Altitude 1
        /// OriginName: p1z, Units: m, IsExtended: false
        /// </summary>
        public float P1z { get; set; }
        /// <summary>
        /// x position 2 / Latitude 2
        /// OriginName: p2x, Units: m, IsExtended: false
        /// </summary>
        public float P2x { get; set; }
        /// <summary>
        /// y position 2 / Longitude 2
        /// OriginName: p2y, Units: m, IsExtended: false
        /// </summary>
        public float P2y { get; set; }
        /// <summary>
        /// z position 2 / Altitude 2
        /// OriginName: p2z, Units: m, IsExtended: false
        /// </summary>
        public float P2z { get; set; }
        /// <summary>
        /// Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame Frame { get; set; }
    }
    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    ///  ATTITUDE_QUATERNION_COV
    /// </summary>
    public class AttitudeQuaternionCovPacket: PacketV2<AttitudeQuaternionCovPayload>
    {
	    public const int PacketMessageId = 61;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 167;
        public override bool WrapToV2Extension => false;

        public override AttitudeQuaternionCovPayload Payload { get; } = new AttitudeQuaternionCovPayload();

        public override string Name => "ATTITUDE_QUATERNION_COV";
    }

    /// <summary>
    ///  ATTITUDE_QUATERNION_COV
    /// </summary>
    public class AttitudeQuaternionCovPayload : IPayload
    {
        public byte GetMaxByteSize() => 72; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 72; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=Q.Length * 4; //Q
            sum+=4; //Rollspeed
            sum+=4; //Pitchspeed
            sum+=4; //Yawspeed
            sum+=Covariance.Length * 4; //Covariance
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/9 - Math.Max(0,((/*PayloadByteSize*/72 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Covariance = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            /* PayloadByteSize = 72 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Rollspeed { get; set; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Pitchspeed { get; set; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Yawspeed { get; set; }
        /// <summary>
        /// Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: false
        /// </summary>
        public const int CovarianceMaxItemsCount = 9;
        public float[] Covariance { get; set; } = new float[9];
        [Obsolete("This method is deprecated. Use GetCovarianceMaxItemsCount instead.")]
        public byte GetCovarianceMaxItemsCount() => 9;
    }
    /// <summary>
    /// The state of the navigation and position controller.
    ///  NAV_CONTROLLER_OUTPUT
    /// </summary>
    public class NavControllerOutputPacket: PacketV2<NavControllerOutputPayload>
    {
	    public const int PacketMessageId = 62;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 183;
        public override bool WrapToV2Extension => false;

        public override NavControllerOutputPayload Payload { get; } = new NavControllerOutputPayload();

        public override string Name => "NAV_CONTROLLER_OUTPUT";
    }

    /// <summary>
    ///  NAV_CONTROLLER_OUTPUT
    /// </summary>
    public class NavControllerOutputPayload : IPayload
    {
        public byte GetMaxByteSize() => 26; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 26; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //NavRoll
            sum+=4; //NavPitch
            sum+=4; //AltError
            sum+=4; //AspdError
            sum+=4; //XtrackError
            sum+=2; //NavBearing
            sum+=2; //TargetBearing
            sum+=2; //WpDist
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            NavRoll = BinSerialize.ReadFloat(ref buffer);
            NavPitch = BinSerialize.ReadFloat(ref buffer);
            AltError = BinSerialize.ReadFloat(ref buffer);
            AspdError = BinSerialize.ReadFloat(ref buffer);
            XtrackError = BinSerialize.ReadFloat(ref buffer);
            NavBearing = BinSerialize.ReadShort(ref buffer);
            TargetBearing = BinSerialize.ReadShort(ref buffer);
            WpDist = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,NavRoll);
            BinSerialize.WriteFloat(ref buffer,NavPitch);
            BinSerialize.WriteFloat(ref buffer,AltError);
            BinSerialize.WriteFloat(ref buffer,AspdError);
            BinSerialize.WriteFloat(ref buffer,XtrackError);
            BinSerialize.WriteShort(ref buffer,NavBearing);
            BinSerialize.WriteShort(ref buffer,TargetBearing);
            BinSerialize.WriteUShort(ref buffer,WpDist);
            /* PayloadByteSize = 26 */;
        }
        
        



        /// <summary>
        /// Current desired roll
        /// OriginName: nav_roll, Units: deg, IsExtended: false
        /// </summary>
        public float NavRoll { get; set; }
        /// <summary>
        /// Current desired pitch
        /// OriginName: nav_pitch, Units: deg, IsExtended: false
        /// </summary>
        public float NavPitch { get; set; }
        /// <summary>
        /// Current altitude error
        /// OriginName: alt_error, Units: m, IsExtended: false
        /// </summary>
        public float AltError { get; set; }
        /// <summary>
        /// Current airspeed error
        /// OriginName: aspd_error, Units: m/s, IsExtended: false
        /// </summary>
        public float AspdError { get; set; }
        /// <summary>
        /// Current crosstrack error on x-y plane
        /// OriginName: xtrack_error, Units: m, IsExtended: false
        /// </summary>
        public float XtrackError { get; set; }
        /// <summary>
        /// Current desired heading
        /// OriginName: nav_bearing, Units: deg, IsExtended: false
        /// </summary>
        public short NavBearing { get; set; }
        /// <summary>
        /// Bearing to current waypoint/target
        /// OriginName: target_bearing, Units: deg, IsExtended: false
        /// </summary>
        public short TargetBearing { get; set; }
        /// <summary>
        /// Distance to active waypoint
        /// OriginName: wp_dist, Units: m, IsExtended: false
        /// </summary>
        public ushort WpDist { get; set; }
    }
    /// <summary>
    /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.
    ///  GLOBAL_POSITION_INT_COV
    /// </summary>
    public class GlobalPositionIntCovPacket: PacketV2<GlobalPositionIntCovPayload>
    {
	    public const int PacketMessageId = 63;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 119;
        public override bool WrapToV2Extension => false;

        public override GlobalPositionIntCovPayload Payload { get; } = new GlobalPositionIntCovPayload();

        public override string Name => "GLOBAL_POSITION_INT_COV";
    }

    /// <summary>
    ///  GLOBAL_POSITION_INT_COV
    /// </summary>
    public class GlobalPositionIntCovPayload : IPayload
    {
        public byte GetMaxByteSize() => 181; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 181; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //RelativeAlt
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=Covariance.Length * 4; //Covariance
            sum+= 1; // EstimatorType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/36 - Math.Max(0,((/*PayloadByteSize*/181 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Covariance = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            EstimatorType = (MavEstimatorType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)EstimatorType);
            /* PayloadByteSize = 181 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude in meters above MSL
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public int RelativeAlt { get; set; }
        /// <summary>
        /// Ground X Speed (Latitude)
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Ground Y Speed (Longitude)
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Ground Z Speed (Altitude)
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: false
        /// </summary>
        public const int CovarianceMaxItemsCount = 36;
        public float[] Covariance { get; set; } = new float[36];
        [Obsolete("This method is deprecated. Use GetCovarianceMaxItemsCount instead.")]
        public byte GetCovarianceMaxItemsCount() => 36;
        /// <summary>
        /// Class id of the estimator this estimate originated from.
        /// OriginName: estimator_type, Units: , IsExtended: false
        /// </summary>
        public MavEstimatorType EstimatorType { get; set; }
    }
    /// <summary>
    /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    ///  LOCAL_POSITION_NED_COV
    /// </summary>
    public class LocalPositionNedCovPacket: PacketV2<LocalPositionNedCovPayload>
    {
	    public const int PacketMessageId = 64;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 191;
        public override bool WrapToV2Extension => false;

        public override LocalPositionNedCovPayload Payload { get; } = new LocalPositionNedCovPayload();

        public override string Name => "LOCAL_POSITION_NED_COV";
    }

    /// <summary>
    ///  LOCAL_POSITION_NED_COV
    /// </summary>
    public class LocalPositionNedCovPayload : IPayload
    {
        public byte GetMaxByteSize() => 225; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 225; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=4; //Ax
            sum+=4; //Ay
            sum+=4; //Az
            sum+=Covariance.Length * 4; //Covariance
            sum+= 1; // EstimatorType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Ax = BinSerialize.ReadFloat(ref buffer);
            Ay = BinSerialize.ReadFloat(ref buffer);
            Az = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/45 - Math.Max(0,((/*PayloadByteSize*/225 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Covariance = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            EstimatorType = (MavEstimatorType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Ax);
            BinSerialize.WriteFloat(ref buffer,Ay);
            BinSerialize.WriteFloat(ref buffer,Az);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)EstimatorType);
            /* PayloadByteSize = 225 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// X Speed
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y Speed
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z Speed
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// X Acceleration
        /// OriginName: ax, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Ax { get; set; }
        /// <summary>
        /// Y Acceleration
        /// OriginName: ay, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Ay { get; set; }
        /// <summary>
        /// Z Acceleration
        /// OriginName: az, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Az { get; set; }
        /// <summary>
        /// Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: false
        /// </summary>
        public const int CovarianceMaxItemsCount = 45;
        public float[] Covariance { get; set; } = new float[45];
        [Obsolete("This method is deprecated. Use GetCovarianceMaxItemsCount instead.")]
        public byte GetCovarianceMaxItemsCount() => 45;
        /// <summary>
        /// Class id of the estimator this estimate originated from.
        /// OriginName: estimator_type, Units: , IsExtended: false
        /// </summary>
        public MavEstimatorType EstimatorType { get; set; }
    }
    /// <summary>
    /// The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.  A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    ///  RC_CHANNELS
    /// </summary>
    public class RcChannelsPacket: PacketV2<RcChannelsPayload>
    {
	    public const int PacketMessageId = 65;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 118;
        public override bool WrapToV2Extension => false;

        public override RcChannelsPayload Payload { get; } = new RcChannelsPayload();

        public override string Name => "RC_CHANNELS";
    }

    /// <summary>
    ///  RC_CHANNELS
    /// </summary>
    public class RcChannelsPayload : IPayload
    {
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=2; //Chan1Raw
            sum+=2; //Chan2Raw
            sum+=2; //Chan3Raw
            sum+=2; //Chan4Raw
            sum+=2; //Chan5Raw
            sum+=2; //Chan6Raw
            sum+=2; //Chan7Raw
            sum+=2; //Chan8Raw
            sum+=2; //Chan9Raw
            sum+=2; //Chan10Raw
            sum+=2; //Chan11Raw
            sum+=2; //Chan12Raw
            sum+=2; //Chan13Raw
            sum+=2; //Chan14Raw
            sum+=2; //Chan15Raw
            sum+=2; //Chan16Raw
            sum+=2; //Chan17Raw
            sum+=2; //Chan18Raw
            sum+=1; //Chancount
            sum+=1; //Rssi
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            Chan9Raw = BinSerialize.ReadUShort(ref buffer);
            Chan10Raw = BinSerialize.ReadUShort(ref buffer);
            Chan11Raw = BinSerialize.ReadUShort(ref buffer);
            Chan12Raw = BinSerialize.ReadUShort(ref buffer);
            Chan13Raw = BinSerialize.ReadUShort(ref buffer);
            Chan14Raw = BinSerialize.ReadUShort(ref buffer);
            Chan15Raw = BinSerialize.ReadUShort(ref buffer);
            Chan16Raw = BinSerialize.ReadUShort(ref buffer);
            Chan17Raw = BinSerialize.ReadUShort(ref buffer);
            Chan18Raw = BinSerialize.ReadUShort(ref buffer);
            Chancount = (byte)BinSerialize.ReadByte(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteUShort(ref buffer,Chan9Raw);
            BinSerialize.WriteUShort(ref buffer,Chan10Raw);
            BinSerialize.WriteUShort(ref buffer,Chan11Raw);
            BinSerialize.WriteUShort(ref buffer,Chan12Raw);
            BinSerialize.WriteUShort(ref buffer,Chan13Raw);
            BinSerialize.WriteUShort(ref buffer,Chan14Raw);
            BinSerialize.WriteUShort(ref buffer,Chan15Raw);
            BinSerialize.WriteUShort(ref buffer,Chan16Raw);
            BinSerialize.WriteUShort(ref buffer,Chan17Raw);
            BinSerialize.WriteUShort(ref buffer,Chan18Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Chancount);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 42 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// RC channel 1 value.
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan1Raw { get; set; }
        /// <summary>
        /// RC channel 2 value.
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan2Raw { get; set; }
        /// <summary>
        /// RC channel 3 value.
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan3Raw { get; set; }
        /// <summary>
        /// RC channel 4 value.
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan4Raw { get; set; }
        /// <summary>
        /// RC channel 5 value.
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan5Raw { get; set; }
        /// <summary>
        /// RC channel 6 value.
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan6Raw { get; set; }
        /// <summary>
        /// RC channel 7 value.
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan7Raw { get; set; }
        /// <summary>
        /// RC channel 8 value.
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan8Raw { get; set; }
        /// <summary>
        /// RC channel 9 value.
        /// OriginName: chan9_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan9Raw { get; set; }
        /// <summary>
        /// RC channel 10 value.
        /// OriginName: chan10_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan10Raw { get; set; }
        /// <summary>
        /// RC channel 11 value.
        /// OriginName: chan11_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan11Raw { get; set; }
        /// <summary>
        /// RC channel 12 value.
        /// OriginName: chan12_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan12Raw { get; set; }
        /// <summary>
        /// RC channel 13 value.
        /// OriginName: chan13_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan13Raw { get; set; }
        /// <summary>
        /// RC channel 14 value.
        /// OriginName: chan14_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan14Raw { get; set; }
        /// <summary>
        /// RC channel 15 value.
        /// OriginName: chan15_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan15Raw { get; set; }
        /// <summary>
        /// RC channel 16 value.
        /// OriginName: chan16_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan16Raw { get; set; }
        /// <summary>
        /// RC channel 17 value.
        /// OriginName: chan17_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan17Raw { get; set; }
        /// <summary>
        /// RC channel 18 value.
        /// OriginName: chan18_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan18Raw { get; set; }
        /// <summary>
        /// Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.
        /// OriginName: chancount, Units: , IsExtended: false
        /// </summary>
        public byte Chancount { get; set; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public byte Rssi { get; set; }
    }
    /// <summary>
    /// Request a data stream.
    ///  REQUEST_DATA_STREAM
    /// </summary>
    public class RequestDataStreamPacket: PacketV2<RequestDataStreamPayload>
    {
	    public const int PacketMessageId = 66;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 148;
        public override bool WrapToV2Extension => false;

        public override RequestDataStreamPayload Payload { get; } = new RequestDataStreamPayload();

        public override string Name => "REQUEST_DATA_STREAM";
    }

    /// <summary>
    ///  REQUEST_DATA_STREAM
    /// </summary>
    public class RequestDataStreamPayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //ReqMessageRate
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //ReqStreamId
            sum+=1; //StartStop
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            ReqMessageRate = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            ReqStreamId = (byte)BinSerialize.ReadByte(ref buffer);
            StartStop = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,ReqMessageRate);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)ReqStreamId);
            BinSerialize.WriteByte(ref buffer,(byte)StartStop);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// The requested message rate
        /// OriginName: req_message_rate, Units: Hz, IsExtended: false
        /// </summary>
        public ushort ReqMessageRate { get; set; }
        /// <summary>
        /// The target requested to send the message stream.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// The target requested to send the message stream.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// The ID of the requested data stream
        /// OriginName: req_stream_id, Units: , IsExtended: false
        /// </summary>
        public byte ReqStreamId { get; set; }
        /// <summary>
        /// 1 to start sending, 0 to stop sending.
        /// OriginName: start_stop, Units: , IsExtended: false
        /// </summary>
        public byte StartStop { get; set; }
    }
    /// <summary>
    /// Data stream status information.
    ///  DATA_STREAM
    /// </summary>
    public class DataStreamPacket: PacketV2<DataStreamPayload>
    {
	    public const int PacketMessageId = 67;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 21;
        public override bool WrapToV2Extension => false;

        public override DataStreamPayload Payload { get; } = new DataStreamPayload();

        public override string Name => "DATA_STREAM";
    }

    /// <summary>
    ///  DATA_STREAM
    /// </summary>
    public class DataStreamPayload : IPayload
    {
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //MessageRate
            sum+=1; //StreamId
            sum+=1; //OnOff
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            MessageRate = BinSerialize.ReadUShort(ref buffer);
            StreamId = (byte)BinSerialize.ReadByte(ref buffer);
            OnOff = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,MessageRate);
            BinSerialize.WriteByte(ref buffer,(byte)StreamId);
            BinSerialize.WriteByte(ref buffer,(byte)OnOff);
            /* PayloadByteSize = 4 */;
        }
        
        



        /// <summary>
        /// The message rate
        /// OriginName: message_rate, Units: Hz, IsExtended: false
        /// </summary>
        public ushort MessageRate { get; set; }
        /// <summary>
        /// The ID of the requested data stream
        /// OriginName: stream_id, Units: , IsExtended: false
        /// </summary>
        public byte StreamId { get; set; }
        /// <summary>
        /// 1 stream is enabled, 0 stream is stopped.
        /// OriginName: on_off, Units: , IsExtended: false
        /// </summary>
        public byte OnOff { get; set; }
    }
    /// <summary>
    /// This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled and buttons states are transmitted as individual on/off bits of a bitmask
    ///  MANUAL_CONTROL
    /// </summary>
    public class ManualControlPacket: PacketV2<ManualControlPayload>
    {
	    public const int PacketMessageId = 69;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 243;
        public override bool WrapToV2Extension => false;

        public override ManualControlPayload Payload { get; } = new ManualControlPayload();

        public override string Name => "MANUAL_CONTROL";
    }

    /// <summary>
    ///  MANUAL_CONTROL
    /// </summary>
    public class ManualControlPayload : IPayload
    {
        public byte GetMaxByteSize() => 30; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 30; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //X
            sum+=2; //Y
            sum+=2; //Z
            sum+=2; //R
            sum+=2; //Buttons
            sum+=1; //Target
            sum+=2; //Buttons2
            sum+=1; //EnabledExtensions
            sum+=2; //S
            sum+=2; //T
            sum+=2; //Aux1
            sum+=2; //Aux2
            sum+=2; //Aux3
            sum+=2; //Aux4
            sum+=2; //Aux5
            sum+=2; //Aux6
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            X = BinSerialize.ReadShort(ref buffer);
            Y = BinSerialize.ReadShort(ref buffer);
            Z = BinSerialize.ReadShort(ref buffer);
            R = BinSerialize.ReadShort(ref buffer);
            Buttons = BinSerialize.ReadUShort(ref buffer);
            Target = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Buttons2' can be empty
            if (buffer.IsEmpty) return;
            Buttons2 = BinSerialize.ReadUShort(ref buffer);
            // extended field 'EnabledExtensions' can be empty
            if (buffer.IsEmpty) return;
            EnabledExtensions = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'S' can be empty
            if (buffer.IsEmpty) return;
            S = BinSerialize.ReadShort(ref buffer);
            // extended field 'T' can be empty
            if (buffer.IsEmpty) return;
            T = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux1' can be empty
            if (buffer.IsEmpty) return;
            Aux1 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux2' can be empty
            if (buffer.IsEmpty) return;
            Aux2 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux3' can be empty
            if (buffer.IsEmpty) return;
            Aux3 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux4' can be empty
            if (buffer.IsEmpty) return;
            Aux4 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux5' can be empty
            if (buffer.IsEmpty) return;
            Aux5 = BinSerialize.ReadShort(ref buffer);
            // extended field 'Aux6' can be empty
            if (buffer.IsEmpty) return;
            Aux6 = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,X);
            BinSerialize.WriteShort(ref buffer,Y);
            BinSerialize.WriteShort(ref buffer,Z);
            BinSerialize.WriteShort(ref buffer,R);
            BinSerialize.WriteUShort(ref buffer,Buttons);
            BinSerialize.WriteByte(ref buffer,(byte)Target);
            BinSerialize.WriteUShort(ref buffer,Buttons2);
            BinSerialize.WriteByte(ref buffer,(byte)EnabledExtensions);
            BinSerialize.WriteShort(ref buffer,S);
            BinSerialize.WriteShort(ref buffer,T);
            BinSerialize.WriteShort(ref buffer,Aux1);
            BinSerialize.WriteShort(ref buffer,Aux2);
            BinSerialize.WriteShort(ref buffer,Aux3);
            BinSerialize.WriteShort(ref buffer,Aux4);
            BinSerialize.WriteShort(ref buffer,Aux5);
            BinSerialize.WriteShort(ref buffer,Aux6);
            /* PayloadByteSize = 30 */;
        }
        
        



        /// <summary>
        /// X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public short X { get; set; }
        /// <summary>
        /// Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public short Y { get; set; }
        /// <summary>
        /// Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust.
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public short Z { get; set; }
        /// <summary>
        /// R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.
        /// OriginName: r, Units: , IsExtended: false
        /// </summary>
        public short R { get; set; }
        /// <summary>
        /// A bitfield corresponding to the joystick buttons' 0-15 current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.
        /// OriginName: buttons, Units: , IsExtended: false
        /// </summary>
        public ushort Buttons { get; set; }
        /// <summary>
        /// The system to be controlled.
        /// OriginName: target, Units: , IsExtended: false
        /// </summary>
        public byte Target { get; set; }
        /// <summary>
        /// A bitfield corresponding to the joystick buttons' 16-31 current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 16.
        /// OriginName: buttons2, Units: , IsExtended: true
        /// </summary>
        public ushort Buttons2 { get; set; }
        /// <summary>
        /// Set bits to 1 to indicate which of the following extension fields contain valid data: bit 0: pitch, bit 1: roll, bit 2: aux1, bit 3: aux2, bit 4: aux3, bit 5: aux4, bit 6: aux5, bit 7: aux6
        /// OriginName: enabled_extensions, Units: , IsExtended: true
        /// </summary>
        public byte EnabledExtensions { get; set; }
        /// <summary>
        /// Pitch-only-axis, normalized to the range [-1000,1000]. Generally corresponds to pitch on vehicles with additional degrees of freedom. Valid if bit 0 of enabled_extensions field is set. Set to 0 if invalid.
        /// OriginName: s, Units: , IsExtended: true
        /// </summary>
        public short S { get; set; }
        /// <summary>
        /// Roll-only-axis, normalized to the range [-1000,1000]. Generally corresponds to roll on vehicles with additional degrees of freedom. Valid if bit 1 of enabled_extensions field is set. Set to 0 if invalid.
        /// OriginName: t, Units: , IsExtended: true
        /// </summary>
        public short T { get; set; }
        /// <summary>
        /// Aux continuous input field 1. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 2 of enabled_extensions field is set. 0 if bit 2 is unset.
        /// OriginName: aux1, Units: , IsExtended: true
        /// </summary>
        public short Aux1 { get; set; }
        /// <summary>
        /// Aux continuous input field 2. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 3 of enabled_extensions field is set. 0 if bit 3 is unset.
        /// OriginName: aux2, Units: , IsExtended: true
        /// </summary>
        public short Aux2 { get; set; }
        /// <summary>
        /// Aux continuous input field 3. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 4 of enabled_extensions field is set. 0 if bit 4 is unset.
        /// OriginName: aux3, Units: , IsExtended: true
        /// </summary>
        public short Aux3 { get; set; }
        /// <summary>
        /// Aux continuous input field 4. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 5 of enabled_extensions field is set. 0 if bit 5 is unset.
        /// OriginName: aux4, Units: , IsExtended: true
        /// </summary>
        public short Aux4 { get; set; }
        /// <summary>
        /// Aux continuous input field 5. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 6 of enabled_extensions field is set. 0 if bit 6 is unset.
        /// OriginName: aux5, Units: , IsExtended: true
        /// </summary>
        public short Aux5 { get; set; }
        /// <summary>
        /// Aux continuous input field 6. Normalized in the range [-1000,1000]. Purpose defined by recipient. Valid data if bit 7 of enabled_extensions field is set. 0 if bit 7 is unset.
        /// OriginName: aux6, Units: , IsExtended: true
        /// </summary>
        public short Aux6 { get; set; }
    }
    /// <summary>
    /// The RAW values of the RC channels sent to the MAV to override info received from the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.  Note carefully the semantic differences between the first 8 channels and the subsequent channels
    ///  RC_CHANNELS_OVERRIDE
    /// </summary>
    public class RcChannelsOverridePacket: PacketV2<RcChannelsOverridePayload>
    {
	    public const int PacketMessageId = 70;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 124;
        public override bool WrapToV2Extension => false;

        public override RcChannelsOverridePayload Payload { get; } = new RcChannelsOverridePayload();

        public override string Name => "RC_CHANNELS_OVERRIDE";
    }

    /// <summary>
    ///  RC_CHANNELS_OVERRIDE
    /// </summary>
    public class RcChannelsOverridePayload : IPayload
    {
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Chan1Raw
            sum+=2; //Chan2Raw
            sum+=2; //Chan3Raw
            sum+=2; //Chan4Raw
            sum+=2; //Chan5Raw
            sum+=2; //Chan6Raw
            sum+=2; //Chan7Raw
            sum+=2; //Chan8Raw
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=2; //Chan9Raw
            sum+=2; //Chan10Raw
            sum+=2; //Chan11Raw
            sum+=2; //Chan12Raw
            sum+=2; //Chan13Raw
            sum+=2; //Chan14Raw
            sum+=2; //Chan15Raw
            sum+=2; //Chan16Raw
            sum+=2; //Chan17Raw
            sum+=2; //Chan18Raw
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Chan9Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan9Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan10Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan10Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan11Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan11Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan12Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan12Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan13Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan13Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan14Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan14Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan15Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan15Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan16Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan16Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan17Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan17Raw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'Chan18Raw' can be empty
            if (buffer.IsEmpty) return;
            Chan18Raw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteUShort(ref buffer,Chan9Raw);
            BinSerialize.WriteUShort(ref buffer,Chan10Raw);
            BinSerialize.WriteUShort(ref buffer,Chan11Raw);
            BinSerialize.WriteUShort(ref buffer,Chan12Raw);
            BinSerialize.WriteUShort(ref buffer,Chan13Raw);
            BinSerialize.WriteUShort(ref buffer,Chan14Raw);
            BinSerialize.WriteUShort(ref buffer,Chan15Raw);
            BinSerialize.WriteUShort(ref buffer,Chan16Raw);
            BinSerialize.WriteUShort(ref buffer,Chan17Raw);
            BinSerialize.WriteUShort(ref buffer,Chan18Raw);
            /* PayloadByteSize = 38 */;
        }
        
        



        /// <summary>
        /// RC channel 1 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan1Raw { get; set; }
        /// <summary>
        /// RC channel 2 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan2Raw { get; set; }
        /// <summary>
        /// RC channel 3 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan3Raw { get; set; }
        /// <summary>
        /// RC channel 4 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan4Raw { get; set; }
        /// <summary>
        /// RC channel 5 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan5Raw { get; set; }
        /// <summary>
        /// RC channel 6 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan6Raw { get; set; }
        /// <summary>
        /// RC channel 7 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan7Raw { get; set; }
        /// <summary>
        /// RC channel 8 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio.
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan8Raw { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan9_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan9Raw { get; set; }
        /// <summary>
        /// RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan10_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan10Raw { get; set; }
        /// <summary>
        /// RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan11_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan11Raw { get; set; }
        /// <summary>
        /// RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan12_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan12Raw { get; set; }
        /// <summary>
        /// RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan13_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan13Raw { get; set; }
        /// <summary>
        /// RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan14_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan14Raw { get; set; }
        /// <summary>
        /// RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan15_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan15Raw { get; set; }
        /// <summary>
        /// RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan16_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan16Raw { get; set; }
        /// <summary>
        /// RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan17_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan17Raw { get; set; }
        /// <summary>
        /// RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio.
        /// OriginName: chan18_raw, Units: us, IsExtended: true
        /// </summary>
        public ushort Chan18Raw { get; set; }
    }
    /// <summary>
    /// Message encoding a mission item. This message is emitted to announce
    ///                 the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    ///  MISSION_ITEM_INT
    /// </summary>
    public class MissionItemIntPacket: PacketV2<MissionItemIntPayload>
    {
	    public const int PacketMessageId = 73;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 38;
        public override bool WrapToV2Extension => false;

        public override MissionItemIntPayload Payload { get; } = new MissionItemIntPayload();

        public override string Name => "MISSION_ITEM_INT";
    }

    /// <summary>
    ///  MISSION_ITEM_INT
    /// </summary>
    public class MissionItemIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Param1
            sum+=4; //Param2
            sum+=4; //Param3
            sum+=4; //Param4
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=2; //Seq
            sum+= 2; // Command
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // Frame
            sum+=1; //Current
            sum+=1; //Autocontinue
            sum+= 1; // MissionType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadInt(ref buffer);
            Y = BinSerialize.ReadInt(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Seq = BinSerialize.ReadUShort(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            Current = (byte)BinSerialize.ReadByte(ref buffer);
            Autocontinue = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'MissionType' can be empty
            if (buffer.IsEmpty) return;
            MissionType = (MavMissionType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteInt(ref buffer,X);
            BinSerialize.WriteInt(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteUShort(ref buffer,Seq);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteByte(ref buffer,(byte)Current);
            BinSerialize.WriteByte(ref buffer,(byte)Autocontinue);
            BinSerialize.WriteByte(ref buffer,(byte)MissionType);
            /* PayloadByteSize = 38 */;
        }
        
        



        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public float Param1 { get; set; }
        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public float Param2 { get; set; }
        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public float Param3 { get; set; }
        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public float Param4 { get; set; }
        /// <summary>
        /// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public int X { get; set; }
        /// <summary>
        /// PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public int Y { get; set; }
        /// <summary>
        /// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public ushort Seq { get; set; }
        /// <summary>
        /// The scheduled action for the waypoint.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public MavCmd Command { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// The coordinate system of the waypoint.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame Frame { get; set; }
        /// <summary>
        /// false:0, true:1
        /// OriginName: current, Units: , IsExtended: false
        /// </summary>
        public byte Current { get; set; }
        /// <summary>
        /// Autocontinue to next waypoint. 0: false, 1: true. Set false to pause mission after the item completes.
        /// OriginName: autocontinue, Units: , IsExtended: false
        /// </summary>
        public byte Autocontinue { get; set; }
        /// <summary>
        /// Mission type.
        /// OriginName: mission_type, Units: , IsExtended: true
        /// </summary>
        public MavMissionType MissionType { get; set; }
    }
    /// <summary>
    /// Metrics typically displayed on a HUD for fixed wing aircraft.
    ///  VFR_HUD
    /// </summary>
    public class VfrHudPacket: PacketV2<VfrHudPayload>
    {
	    public const int PacketMessageId = 74;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 20;
        public override bool WrapToV2Extension => false;

        public override VfrHudPayload Payload { get; } = new VfrHudPayload();

        public override string Name => "VFR_HUD";
    }

    /// <summary>
    ///  VFR_HUD
    /// </summary>
    public class VfrHudPayload : IPayload
    {
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Airspeed
            sum+=4; //Groundspeed
            sum+=4; //Alt
            sum+=4; //Climb
            sum+=2; //Heading
            sum+=2; //Throttle
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Airspeed = BinSerialize.ReadFloat(ref buffer);
            Groundspeed = BinSerialize.ReadFloat(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Climb = BinSerialize.ReadFloat(ref buffer);
            Heading = BinSerialize.ReadShort(ref buffer);
            Throttle = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Airspeed);
            BinSerialize.WriteFloat(ref buffer,Groundspeed);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Climb);
            BinSerialize.WriteShort(ref buffer,Heading);
            BinSerialize.WriteUShort(ref buffer,Throttle);
            /* PayloadByteSize = 20 */;
        }
        
        



        /// <summary>
        /// Vehicle speed in form appropriate for vehicle type. For standard aircraft this is typically calibrated airspeed (CAS) or indicated airspeed (IAS) - either of which can be used by a pilot to estimate stall speed.
        /// OriginName: airspeed, Units: m/s, IsExtended: false
        /// </summary>
        public float Airspeed { get; set; }
        /// <summary>
        /// Current ground speed.
        /// OriginName: groundspeed, Units: m/s, IsExtended: false
        /// </summary>
        public float Groundspeed { get; set; }
        /// <summary>
        /// Current altitude (MSL).
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public float Alt { get; set; }
        /// <summary>
        /// Current climb rate.
        /// OriginName: climb, Units: m/s, IsExtended: false
        /// </summary>
        public float Climb { get; set; }
        /// <summary>
        /// Current heading in compass units (0-360, 0=north).
        /// OriginName: heading, Units: deg, IsExtended: false
        /// </summary>
        public short Heading { get; set; }
        /// <summary>
        /// Current throttle setting (0 to 100).
        /// OriginName: throttle, Units: %, IsExtended: false
        /// </summary>
        public ushort Throttle { get; set; }
    }
    /// <summary>
    /// Send a command with up to seven parameters to the MAV, where params 5 and 6 are integers and the other values are floats. This is preferred over COMMAND_LONG as it allows the MAV_FRAME to be specified for interpreting positional information, such as altitude. COMMAND_INT is also preferred when sending latitude and longitude data in params 5 and 6, as it allows for greater precision. Param 5 and 6 encode positional data as scaled integers, where the scaling depends on the actual command value. NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_INT
    /// </summary>
    public class CommandIntPacket: PacketV2<CommandIntPayload>
    {
	    public const int PacketMessageId = 75;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 158;
        public override bool WrapToV2Extension => false;

        public override CommandIntPayload Payload { get; } = new CommandIntPayload();

        public override string Name => "COMMAND_INT";
    }

    /// <summary>
    ///  COMMAND_INT
    /// </summary>
    public class CommandIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Param1
            sum+=4; //Param2
            sum+=4; //Param3
            sum+=4; //Param4
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+= 2; // Command
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // Frame
            sum+=1; //Current
            sum+=1; //Autocontinue
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadInt(ref buffer);
            Y = BinSerialize.ReadInt(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            Current = (byte)BinSerialize.ReadByte(ref buffer);
            Autocontinue = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteInt(ref buffer,X);
            BinSerialize.WriteInt(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteByte(ref buffer,(byte)Current);
            BinSerialize.WriteByte(ref buffer,(byte)Autocontinue);
            /* PayloadByteSize = 35 */;
        }
        
        



        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public float Param1 { get; set; }
        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public float Param2 { get; set; }
        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public float Param3 { get; set; }
        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public float Param4 { get; set; }
        /// <summary>
        /// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public int X { get; set; }
        /// <summary>
        /// PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public int Y { get; set; }
        /// <summary>
        /// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame).
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// The scheduled action for the mission item.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public MavCmd Command { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// The coordinate system of the COMMAND.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame Frame { get; set; }
        /// <summary>
        /// Not used.
        /// OriginName: current, Units: , IsExtended: false
        /// </summary>
        public byte Current { get; set; }
        /// <summary>
        /// Not used (set 0).
        /// OriginName: autocontinue, Units: , IsExtended: false
        /// </summary>
        public byte Autocontinue { get; set; }
    }
    /// <summary>
    /// Send a command with up to seven parameters to the MAV. COMMAND_INT is generally preferred when sending MAV_CMD commands that include positional information; it offers higher precision and allows the MAV_FRAME to be specified (which may otherwise be ambiguous, particularly for altitude). The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_LONG
    /// </summary>
    public class CommandLongPacket: PacketV2<CommandLongPayload>
    {
	    public const int PacketMessageId = 76;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 152;
        public override bool WrapToV2Extension => false;

        public override CommandLongPayload Payload { get; } = new CommandLongPayload();

        public override string Name => "COMMAND_LONG";
    }

    /// <summary>
    ///  COMMAND_LONG
    /// </summary>
    public class CommandLongPayload : IPayload
    {
        public byte GetMaxByteSize() => 33; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 33; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Param1
            sum+=4; //Param2
            sum+=4; //Param3
            sum+=4; //Param4
            sum+=4; //Param5
            sum+=4; //Param6
            sum+=4; //Param7
            sum+= 2; // Command
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //Confirmation
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Param1 = BinSerialize.ReadFloat(ref buffer);
            Param2 = BinSerialize.ReadFloat(ref buffer);
            Param3 = BinSerialize.ReadFloat(ref buffer);
            Param4 = BinSerialize.ReadFloat(ref buffer);
            Param5 = BinSerialize.ReadFloat(ref buffer);
            Param6 = BinSerialize.ReadFloat(ref buffer);
            Param7 = BinSerialize.ReadFloat(ref buffer);
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Confirmation = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Param1);
            BinSerialize.WriteFloat(ref buffer,Param2);
            BinSerialize.WriteFloat(ref buffer,Param3);
            BinSerialize.WriteFloat(ref buffer,Param4);
            BinSerialize.WriteFloat(ref buffer,Param5);
            BinSerialize.WriteFloat(ref buffer,Param6);
            BinSerialize.WriteFloat(ref buffer,Param7);
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Confirmation);
            /* PayloadByteSize = 33 */;
        }
        
        



        /// <summary>
        /// Parameter 1 (for the specific command).
        /// OriginName: param1, Units: , IsExtended: false
        /// </summary>
        public float Param1 { get; set; }
        /// <summary>
        /// Parameter 2 (for the specific command).
        /// OriginName: param2, Units: , IsExtended: false
        /// </summary>
        public float Param2 { get; set; }
        /// <summary>
        /// Parameter 3 (for the specific command).
        /// OriginName: param3, Units: , IsExtended: false
        /// </summary>
        public float Param3 { get; set; }
        /// <summary>
        /// Parameter 4 (for the specific command).
        /// OriginName: param4, Units: , IsExtended: false
        /// </summary>
        public float Param4 { get; set; }
        /// <summary>
        /// Parameter 5 (for the specific command).
        /// OriginName: param5, Units: , IsExtended: false
        /// </summary>
        public float Param5 { get; set; }
        /// <summary>
        /// Parameter 6 (for the specific command).
        /// OriginName: param6, Units: , IsExtended: false
        /// </summary>
        public float Param6 { get; set; }
        /// <summary>
        /// Parameter 7 (for the specific command).
        /// OriginName: param7, Units: , IsExtended: false
        /// </summary>
        public float Param7 { get; set; }
        /// <summary>
        /// Command ID (of command to send).
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public MavCmd Command { get; set; }
        /// <summary>
        /// System which should execute the command
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component which should execute the command, 0 for all components
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
        /// OriginName: confirmation, Units: , IsExtended: false
        /// </summary>
        public byte Confirmation { get; set; }
    }
    /// <summary>
    /// Report status of a command. Includes feedback whether the command was executed. The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_ACK
    /// </summary>
    public class CommandAckPacket: PacketV2<CommandAckPayload>
    {
	    public const int PacketMessageId = 77;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 143;
        public override bool WrapToV2Extension => false;

        public override CommandAckPayload Payload { get; } = new CommandAckPayload();

        public override string Name => "COMMAND_ACK";
    }

    /// <summary>
    ///  COMMAND_ACK
    /// </summary>
    public class CommandAckPayload : IPayload
    {
        public byte GetMaxByteSize() => 10; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 10; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 2; // Command
            sum+= 1; // Result
            sum+=1; //Progress
            sum+=4; //ResultParam2
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            Result = (MavResult)BinSerialize.ReadByte(ref buffer);
            // extended field 'Progress' can be empty
            if (buffer.IsEmpty) return;
            Progress = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'ResultParam2' can be empty
            if (buffer.IsEmpty) return;
            ResultParam2 = BinSerialize.ReadInt(ref buffer);
            // extended field 'TargetSystem' can be empty
            if (buffer.IsEmpty) return;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TargetComponent' can be empty
            if (buffer.IsEmpty) return;
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)Result);
            BinSerialize.WriteByte(ref buffer,(byte)Progress);
            BinSerialize.WriteInt(ref buffer,ResultParam2);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 10 */;
        }
        
        



        /// <summary>
        /// Command ID (of acknowledged command).
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public MavCmd Command { get; set; }
        /// <summary>
        /// Result of command.
        /// OriginName: result, Units: , IsExtended: false
        /// </summary>
        public MavResult Result { get; set; }
        /// <summary>
        /// The progress percentage when result is MAV_RESULT_IN_PROGRESS. Values: [0-100], or UINT8_MAX if the progress is unknown.
        /// OriginName: progress, Units: %, IsExtended: true
        /// </summary>
        public byte Progress { get; set; }
        /// <summary>
        /// Additional result information. Can be set with a command-specific enum containing command-specific error reasons for why the command might be denied. If used, the associated enum must be documented in the corresponding MAV_CMD (this enum should have a 0 value to indicate "unused" or "unknown").
        /// OriginName: result_param2, Units: , IsExtended: true
        /// </summary>
        public int ResultParam2 { get; set; }
        /// <summary>
        /// System ID of the target recipient. This is the ID of the system that sent the command for which this COMMAND_ACK is an acknowledgement.
        /// OriginName: target_system, Units: , IsExtended: true
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID of the target recipient. This is the ID of the system that sent the command for which this COMMAND_ACK is an acknowledgement.
        /// OriginName: target_component, Units: , IsExtended: true
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Cancel a long running command. The target system should respond with a COMMAND_ACK to the original command with result=MAV_RESULT_CANCELLED if the long running process was cancelled. If it has already completed, the cancel action can be ignored. The cancel action can be retried until some sort of acknowledgement to the original command has been received. The command microservice is documented at https://mavlink.io/en/services/command.html
    ///  COMMAND_CANCEL
    /// </summary>
    public class CommandCancelPacket: PacketV2<CommandCancelPayload>
    {
	    public const int PacketMessageId = 80;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 14;
        public override bool WrapToV2Extension => false;

        public override CommandCancelPayload Payload { get; } = new CommandCancelPayload();

        public override string Name => "COMMAND_CANCEL";
    }

    /// <summary>
    ///  COMMAND_CANCEL
    /// </summary>
    public class CommandCancelPayload : IPayload
    {
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 2; // Command
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Command = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,(ushort)Command);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 4 */;
        }
        
        



        /// <summary>
        /// Command ID (of command to cancel).
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public MavCmd Command { get; set; }
        /// <summary>
        /// System executing long running command. Should not be broadcast (0).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component executing long running command.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Setpoint in roll, pitch, yaw and thrust from the operator
    ///  MANUAL_SETPOINT
    /// </summary>
    public class ManualSetpointPacket: PacketV2<ManualSetpointPayload>
    {
	    public const int PacketMessageId = 81;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 106;
        public override bool WrapToV2Extension => false;

        public override ManualSetpointPayload Payload { get; } = new ManualSetpointPayload();

        public override string Name => "MANUAL_SETPOINT";
    }

    /// <summary>
    ///  MANUAL_SETPOINT
    /// </summary>
    public class ManualSetpointPayload : IPayload
    {
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=4; //Thrust
            sum+=1; //ModeSwitch
            sum+=1; //ManualOverrideSwitch
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Thrust = BinSerialize.ReadFloat(ref buffer);
            ModeSwitch = (byte)BinSerialize.ReadByte(ref buffer);
            ManualOverrideSwitch = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Thrust);
            BinSerialize.WriteByte(ref buffer,(byte)ModeSwitch);
            BinSerialize.WriteByte(ref buffer,(byte)ManualOverrideSwitch);
            /* PayloadByteSize = 22 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Desired roll rate
        /// OriginName: roll, Units: rad/s, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Desired pitch rate
        /// OriginName: pitch, Units: rad/s, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Desired yaw rate
        /// OriginName: yaw, Units: rad/s, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1
        /// OriginName: thrust, Units: , IsExtended: false
        /// </summary>
        public float Thrust { get; set; }
        /// <summary>
        /// Flight mode switch position, 0.. 255
        /// OriginName: mode_switch, Units: , IsExtended: false
        /// </summary>
        public byte ModeSwitch { get; set; }
        /// <summary>
        /// Override mode switch position, 0.. 255
        /// OriginName: manual_override_switch, Units: , IsExtended: false
        /// </summary>
        public byte ManualOverrideSwitch { get; set; }
    }
    /// <summary>
    /// Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).
    ///  SET_ATTITUDE_TARGET
    /// </summary>
    public class SetAttitudeTargetPacket: PacketV2<SetAttitudeTargetPayload>
    {
	    public const int PacketMessageId = 82;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 49;
        public override bool WrapToV2Extension => false;

        public override SetAttitudeTargetPayload Payload { get; } = new SetAttitudeTargetPayload();

        public override string Name => "SET_ATTITUDE_TARGET";
    }

    /// <summary>
    ///  SET_ATTITUDE_TARGET
    /// </summary>
    public class SetAttitudeTargetPayload : IPayload
    {
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=Q.Length * 4; //Q
            sum+=4; //BodyRollRate
            sum+=4; //BodyPitchRate
            sum+=4; //BodyYawRate
            sum+=4; //Thrust
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // TypeMask
            sum+=ThrustBody.Length * 4; //ThrustBody
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/51 - payloadSize - /*ExtendedFieldsLength*/12)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            BodyRollRate = BinSerialize.ReadFloat(ref buffer);
            BodyPitchRate = BinSerialize.ReadFloat(ref buffer);
            BodyYawRate = BinSerialize.ReadFloat(ref buffer);
            Thrust = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            TypeMask = (AttitudeTargetTypemask)BinSerialize.ReadByte(ref buffer);
            // extended field 'ThrustBody' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                ThrustBody[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,BodyRollRate);
            BinSerialize.WriteFloat(ref buffer,BodyPitchRate);
            BinSerialize.WriteFloat(ref buffer,BodyYawRate);
            BinSerialize.WriteFloat(ref buffer,Thrust);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)TypeMask);
            for(var i=0;i<ThrustBody.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,ThrustBody[i]);
            }
            /* PayloadByteSize = 51 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) from MAV_FRAME_LOCAL_NED to MAV_FRAME_BODY_FRD
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Body roll rate
        /// OriginName: body_roll_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float BodyRollRate { get; set; }
        /// <summary>
        /// Body pitch rate
        /// OriginName: body_pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float BodyPitchRate { get; set; }
        /// <summary>
        /// Body yaw rate
        /// OriginName: body_yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float BodyYawRate { get; set; }
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// OriginName: thrust, Units: , IsExtended: false
        /// </summary>
        public float Thrust { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public AttitudeTargetTypemask TypeMask { get; set; }
        /// <summary>
        /// 3D thrust setpoint in the body NED frame, normalized to -1 .. 1
        /// OriginName: thrust_body, Units: , IsExtended: true
        /// </summary>
        public const int ThrustBodyMaxItemsCount = 3;
        public float[] ThrustBody { get; } = new float[3];
    }
    /// <summary>
    /// Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
    ///  ATTITUDE_TARGET
    /// </summary>
    public class AttitudeTargetPacket: PacketV2<AttitudeTargetPayload>
    {
	    public const int PacketMessageId = 83;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 22;
        public override bool WrapToV2Extension => false;

        public override AttitudeTargetPayload Payload { get; } = new AttitudeTargetPayload();

        public override string Name => "ATTITUDE_TARGET";
    }

    /// <summary>
    ///  ATTITUDE_TARGET
    /// </summary>
    public class AttitudeTargetPayload : IPayload
    {
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=Q.Length * 4; //Q
            sum+=4; //BodyRollRate
            sum+=4; //BodyPitchRate
            sum+=4; //BodyYawRate
            sum+=4; //Thrust
            sum+= 1; // TypeMask
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/37 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            BodyRollRate = BinSerialize.ReadFloat(ref buffer);
            BodyPitchRate = BinSerialize.ReadFloat(ref buffer);
            BodyYawRate = BinSerialize.ReadFloat(ref buffer);
            Thrust = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (AttitudeTargetTypemask)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,BodyRollRate);
            BinSerialize.WriteFloat(ref buffer,BodyPitchRate);
            BinSerialize.WriteFloat(ref buffer,BodyYawRate);
            BinSerialize.WriteFloat(ref buffer,Thrust);
            BinSerialize.WriteByte(ref buffer,(byte)TypeMask);
            /* PayloadByteSize = 37 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Body roll rate
        /// OriginName: body_roll_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float BodyRollRate { get; set; }
        /// <summary>
        /// Body pitch rate
        /// OriginName: body_pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float BodyPitchRate { get; set; }
        /// <summary>
        /// Body yaw rate
        /// OriginName: body_yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float BodyYawRate { get; set; }
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// OriginName: thrust, Units: , IsExtended: false
        /// </summary>
        public float Thrust { get; set; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public AttitudeTargetTypemask TypeMask { get; set; }
    }
    /// <summary>
    /// Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).
    ///  SET_POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class SetPositionTargetLocalNedPacket: PacketV2<SetPositionTargetLocalNedPayload>
    {
	    public const int PacketMessageId = 84;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 143;
        public override bool WrapToV2Extension => false;

        public override SetPositionTargetLocalNedPayload Payload { get; } = new SetPositionTargetLocalNedPayload();

        public override string Name => "SET_POSITION_TARGET_LOCAL_NED";
    }

    /// <summary>
    ///  SET_POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class SetPositionTargetLocalNedPayload : IPayload
    {
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=4; //Afx
            sum+=4; //Afy
            sum+=4; //Afz
            sum+=4; //Yaw
            sum+=4; //YawRate
            sum+= 2; // TypeMask
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // CoordinateFrame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 53 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X Position in NED frame
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y Position in NED frame
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z Position in NED frame (note, altitude is negative in NED)
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afx { get; set; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afy { get; set; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afz { get; set; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float YawRate { get; set; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public PositionTargetTypemask TypeMask { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame CoordinateFrame { get; set; }
    }
    /// <summary>
    /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.
    ///  POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class PositionTargetLocalNedPacket: PacketV2<PositionTargetLocalNedPayload>
    {
	    public const int PacketMessageId = 85;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 140;
        public override bool WrapToV2Extension => false;

        public override PositionTargetLocalNedPayload Payload { get; } = new PositionTargetLocalNedPayload();

        public override string Name => "POSITION_TARGET_LOCAL_NED";
    }

    /// <summary>
    ///  POSITION_TARGET_LOCAL_NED
    /// </summary>
    public class PositionTargetLocalNedPayload : IPayload
    {
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=4; //Afx
            sum+=4; //Afy
            sum+=4; //Afz
            sum+=4; //Yaw
            sum+=4; //YawRate
            sum+= 2; // TypeMask
            sum+= 1; // CoordinateFrame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 51 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X Position in NED frame
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y Position in NED frame
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z Position in NED frame (note, altitude is negative in NED)
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afx { get; set; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afy { get; set; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afz { get; set; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float YawRate { get; set; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public PositionTargetTypemask TypeMask { get; set; }
        /// <summary>
        /// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame CoordinateFrame { get; set; }
    }
    /// <summary>
    /// Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).
    ///  SET_POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class SetPositionTargetGlobalIntPacket: PacketV2<SetPositionTargetGlobalIntPayload>
    {
	    public const int PacketMessageId = 86;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 5;
        public override bool WrapToV2Extension => false;

        public override SetPositionTargetGlobalIntPayload Payload { get; } = new SetPositionTargetGlobalIntPayload();

        public override string Name => "SET_POSITION_TARGET_GLOBAL_INT";
    }

    /// <summary>
    ///  SET_POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class SetPositionTargetGlobalIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //LatInt
            sum+=4; //LonInt
            sum+=4; //Alt
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=4; //Afx
            sum+=4; //Afy
            sum+=4; //Afz
            sum+=4; //Yaw
            sum+=4; //YawRate
            sum+= 2; // TypeMask
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // CoordinateFrame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LatInt = BinSerialize.ReadInt(ref buffer);
            LonInt = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,LatInt);
            BinSerialize.WriteInt(ref buffer,LonInt);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 53 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X Position in WGS84 frame
        /// OriginName: lat_int, Units: degE7, IsExtended: false
        /// </summary>
        public int LatInt { get; set; }
        /// <summary>
        /// Y Position in WGS84 frame
        /// OriginName: lon_int, Units: degE7, IsExtended: false
        /// </summary>
        public int LonInt { get; set; }
        /// <summary>
        /// Altitude (MSL, Relative to home, or AGL - depending on frame)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public float Alt { get; set; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afx { get; set; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afy { get; set; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afz { get; set; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float YawRate { get; set; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public PositionTargetTypemask TypeMask { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame CoordinateFrame { get; set; }
    }
    /// <summary>
    /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.
    ///  POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class PositionTargetGlobalIntPacket: PacketV2<PositionTargetGlobalIntPayload>
    {
	    public const int PacketMessageId = 87;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 150;
        public override bool WrapToV2Extension => false;

        public override PositionTargetGlobalIntPayload Payload { get; } = new PositionTargetGlobalIntPayload();

        public override string Name => "POSITION_TARGET_GLOBAL_INT";
    }

    /// <summary>
    ///  POSITION_TARGET_GLOBAL_INT
    /// </summary>
    public class PositionTargetGlobalIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //LatInt
            sum+=4; //LonInt
            sum+=4; //Alt
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=4; //Afx
            sum+=4; //Afy
            sum+=4; //Afz
            sum+=4; //Yaw
            sum+=4; //YawRate
            sum+= 2; // TypeMask
            sum+= 1; // CoordinateFrame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LatInt = BinSerialize.ReadInt(ref buffer);
            LonInt = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Afx = BinSerialize.ReadFloat(ref buffer);
            Afy = BinSerialize.ReadFloat(ref buffer);
            Afz = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TypeMask = (PositionTargetTypemask)BinSerialize.ReadUShort(ref buffer);
            CoordinateFrame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,LatInt);
            BinSerialize.WriteInt(ref buffer,LonInt);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Afx);
            BinSerialize.WriteFloat(ref buffer,Afy);
            BinSerialize.WriteFloat(ref buffer,Afz);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteUShort(ref buffer,(ushort)TypeMask);
            BinSerialize.WriteByte(ref buffer,(byte)CoordinateFrame);
            /* PayloadByteSize = 51 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X Position in WGS84 frame
        /// OriginName: lat_int, Units: degE7, IsExtended: false
        /// </summary>
        public int LatInt { get; set; }
        /// <summary>
        /// Y Position in WGS84 frame
        /// OriginName: lon_int, Units: degE7, IsExtended: false
        /// </summary>
        public int LonInt { get; set; }
        /// <summary>
        /// Altitude (MSL, AGL or relative to home altitude, depending on frame)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public float Alt { get; set; }
        /// <summary>
        /// X velocity in NED frame
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y velocity in NED frame
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z velocity in NED frame
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afx, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afx { get; set; }
        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afy, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afy { get; set; }
        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// OriginName: afz, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Afz { get; set; }
        /// <summary>
        /// yaw setpoint
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// yaw rate setpoint
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float YawRate { get; set; }
        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// OriginName: type_mask, Units: , IsExtended: false
        /// </summary>
        public PositionTargetTypemask TypeMask { get; set; }
        /// <summary>
        /// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
        /// OriginName: coordinate_frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame CoordinateFrame { get; set; }
    }
    /// <summary>
    /// The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    ///  LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
    /// </summary>
    public class LocalPositionNedSystemGlobalOffsetPacket: PacketV2<LocalPositionNedSystemGlobalOffsetPayload>
    {
	    public const int PacketMessageId = 89;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 231;
        public override bool WrapToV2Extension => false;

        public override LocalPositionNedSystemGlobalOffsetPayload Payload { get; } = new LocalPositionNedSystemGlobalOffsetPayload();

        public override string Name => "LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET";
    }

    /// <summary>
    ///  LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
    /// </summary>
    public class LocalPositionNedSystemGlobalOffsetPayload : IPayload
    {
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            /* PayloadByteSize = 28 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Roll
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Pitch
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
    }
    /// <summary>
    /// Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
    ///  HIL_STATE
    /// </summary>
    public class HilStatePacket: PacketV2<HilStatePayload>
    {
	    public const int PacketMessageId = 90;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 183;
        public override bool WrapToV2Extension => false;

        public override HilStatePayload Payload { get; } = new HilStatePayload();

        public override string Name => "HIL_STATE";
    }

    /// <summary>
    ///  HIL_STATE
    /// </summary>
    public class HilStatePayload : IPayload
    {
        public byte GetMaxByteSize() => 56; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 56; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=4; //Rollspeed
            sum+=4; //Pitchspeed
            sum+=4; //Yawspeed
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=2; //Vx
            sum+=2; //Vy
            sum+=2; //Vz
            sum+=2; //Xacc
            sum+=2; //Yacc
            sum+=2; //Zacc
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            /* PayloadByteSize = 56 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Body frame roll / phi angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Rollspeed { get; set; }
        /// <summary>
        /// Body frame pitch / theta angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Pitchspeed { get; set; }
        /// <summary>
        /// Body frame yaw / psi angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Yawspeed { get; set; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// Ground X Speed (Latitude)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vx { get; set; }
        /// <summary>
        /// Ground Y Speed (Longitude)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vy { get; set; }
        /// <summary>
        /// Ground Z Speed (Altitude)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vz { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public short Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public short Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public short Zacc { get; set; }
    }
    /// <summary>
    /// Sent from autopilot to simulation. Hardware in the loop control outputs
    ///  HIL_CONTROLS
    /// </summary>
    public class HilControlsPacket: PacketV2<HilControlsPayload>
    {
	    public const int PacketMessageId = 91;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 63;
        public override bool WrapToV2Extension => false;

        public override HilControlsPayload Payload { get; } = new HilControlsPayload();

        public override string Name => "HIL_CONTROLS";
    }

    /// <summary>
    ///  HIL_CONTROLS
    /// </summary>
    public class HilControlsPayload : IPayload
    {
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //RollAilerons
            sum+=4; //PitchElevator
            sum+=4; //YawRudder
            sum+=4; //Throttle
            sum+=4; //Aux1
            sum+=4; //Aux2
            sum+=4; //Aux3
            sum+=4; //Aux4
            sum+= 1; // Mode
            sum+=1; //NavMode
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            RollAilerons = BinSerialize.ReadFloat(ref buffer);
            PitchElevator = BinSerialize.ReadFloat(ref buffer);
            YawRudder = BinSerialize.ReadFloat(ref buffer);
            Throttle = BinSerialize.ReadFloat(ref buffer);
            Aux1 = BinSerialize.ReadFloat(ref buffer);
            Aux2 = BinSerialize.ReadFloat(ref buffer);
            Aux3 = BinSerialize.ReadFloat(ref buffer);
            Aux4 = BinSerialize.ReadFloat(ref buffer);
            Mode = (MavMode)BinSerialize.ReadByte(ref buffer);
            NavMode = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,RollAilerons);
            BinSerialize.WriteFloat(ref buffer,PitchElevator);
            BinSerialize.WriteFloat(ref buffer,YawRudder);
            BinSerialize.WriteFloat(ref buffer,Throttle);
            BinSerialize.WriteFloat(ref buffer,Aux1);
            BinSerialize.WriteFloat(ref buffer,Aux2);
            BinSerialize.WriteFloat(ref buffer,Aux3);
            BinSerialize.WriteFloat(ref buffer,Aux4);
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteByte(ref buffer,(byte)NavMode);
            /* PayloadByteSize = 42 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Control output -1 .. 1
        /// OriginName: roll_ailerons, Units: , IsExtended: false
        /// </summary>
        public float RollAilerons { get; set; }
        /// <summary>
        /// Control output -1 .. 1
        /// OriginName: pitch_elevator, Units: , IsExtended: false
        /// </summary>
        public float PitchElevator { get; set; }
        /// <summary>
        /// Control output -1 .. 1
        /// OriginName: yaw_rudder, Units: , IsExtended: false
        /// </summary>
        public float YawRudder { get; set; }
        /// <summary>
        /// Throttle 0 .. 1
        /// OriginName: throttle, Units: , IsExtended: false
        /// </summary>
        public float Throttle { get; set; }
        /// <summary>
        /// Aux 1, -1 .. 1
        /// OriginName: aux1, Units: , IsExtended: false
        /// </summary>
        public float Aux1 { get; set; }
        /// <summary>
        /// Aux 2, -1 .. 1
        /// OriginName: aux2, Units: , IsExtended: false
        /// </summary>
        public float Aux2 { get; set; }
        /// <summary>
        /// Aux 3, -1 .. 1
        /// OriginName: aux3, Units: , IsExtended: false
        /// </summary>
        public float Aux3 { get; set; }
        /// <summary>
        /// Aux 4, -1 .. 1
        /// OriginName: aux4, Units: , IsExtended: false
        /// </summary>
        public float Aux4 { get; set; }
        /// <summary>
        /// System mode.
        /// OriginName: mode, Units: , IsExtended: false
        /// </summary>
        public MavMode Mode { get; set; }
        /// <summary>
        /// Navigation mode (MAV_NAV_MODE)
        /// OriginName: nav_mode, Units: , IsExtended: false
        /// </summary>
        public byte NavMode { get; set; }
    }
    /// <summary>
    /// Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
    ///  HIL_RC_INPUTS_RAW
    /// </summary>
    public class HilRcInputsRawPacket: PacketV2<HilRcInputsRawPayload>
    {
	    public const int PacketMessageId = 92;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 54;
        public override bool WrapToV2Extension => false;

        public override HilRcInputsRawPayload Payload { get; } = new HilRcInputsRawPayload();

        public override string Name => "HIL_RC_INPUTS_RAW";
    }

    /// <summary>
    ///  HIL_RC_INPUTS_RAW
    /// </summary>
    public class HilRcInputsRawPayload : IPayload
    {
        public byte GetMaxByteSize() => 33; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 33; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=2; //Chan1Raw
            sum+=2; //Chan2Raw
            sum+=2; //Chan3Raw
            sum+=2; //Chan4Raw
            sum+=2; //Chan5Raw
            sum+=2; //Chan6Raw
            sum+=2; //Chan7Raw
            sum+=2; //Chan8Raw
            sum+=2; //Chan9Raw
            sum+=2; //Chan10Raw
            sum+=2; //Chan11Raw
            sum+=2; //Chan12Raw
            sum+=1; //Rssi
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Chan1Raw = BinSerialize.ReadUShort(ref buffer);
            Chan2Raw = BinSerialize.ReadUShort(ref buffer);
            Chan3Raw = BinSerialize.ReadUShort(ref buffer);
            Chan4Raw = BinSerialize.ReadUShort(ref buffer);
            Chan5Raw = BinSerialize.ReadUShort(ref buffer);
            Chan6Raw = BinSerialize.ReadUShort(ref buffer);
            Chan7Raw = BinSerialize.ReadUShort(ref buffer);
            Chan8Raw = BinSerialize.ReadUShort(ref buffer);
            Chan9Raw = BinSerialize.ReadUShort(ref buffer);
            Chan10Raw = BinSerialize.ReadUShort(ref buffer);
            Chan11Raw = BinSerialize.ReadUShort(ref buffer);
            Chan12Raw = BinSerialize.ReadUShort(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUShort(ref buffer,Chan1Raw);
            BinSerialize.WriteUShort(ref buffer,Chan2Raw);
            BinSerialize.WriteUShort(ref buffer,Chan3Raw);
            BinSerialize.WriteUShort(ref buffer,Chan4Raw);
            BinSerialize.WriteUShort(ref buffer,Chan5Raw);
            BinSerialize.WriteUShort(ref buffer,Chan6Raw);
            BinSerialize.WriteUShort(ref buffer,Chan7Raw);
            BinSerialize.WriteUShort(ref buffer,Chan8Raw);
            BinSerialize.WriteUShort(ref buffer,Chan9Raw);
            BinSerialize.WriteUShort(ref buffer,Chan10Raw);
            BinSerialize.WriteUShort(ref buffer,Chan11Raw);
            BinSerialize.WriteUShort(ref buffer,Chan12Raw);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            /* PayloadByteSize = 33 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// RC channel 1 value
        /// OriginName: chan1_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan1Raw { get; set; }
        /// <summary>
        /// RC channel 2 value
        /// OriginName: chan2_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan2Raw { get; set; }
        /// <summary>
        /// RC channel 3 value
        /// OriginName: chan3_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan3Raw { get; set; }
        /// <summary>
        /// RC channel 4 value
        /// OriginName: chan4_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan4Raw { get; set; }
        /// <summary>
        /// RC channel 5 value
        /// OriginName: chan5_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan5Raw { get; set; }
        /// <summary>
        /// RC channel 6 value
        /// OriginName: chan6_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan6Raw { get; set; }
        /// <summary>
        /// RC channel 7 value
        /// OriginName: chan7_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan7Raw { get; set; }
        /// <summary>
        /// RC channel 8 value
        /// OriginName: chan8_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan8Raw { get; set; }
        /// <summary>
        /// RC channel 9 value
        /// OriginName: chan9_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan9Raw { get; set; }
        /// <summary>
        /// RC channel 10 value
        /// OriginName: chan10_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan10Raw { get; set; }
        /// <summary>
        /// RC channel 11 value
        /// OriginName: chan11_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan11Raw { get; set; }
        /// <summary>
        /// RC channel 12 value
        /// OriginName: chan12_raw, Units: us, IsExtended: false
        /// </summary>
        public ushort Chan12Raw { get; set; }
        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public byte Rssi { get; set; }
    }
    /// <summary>
    /// Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)
    ///  HIL_ACTUATOR_CONTROLS
    /// </summary>
    public class HilActuatorControlsPacket: PacketV2<HilActuatorControlsPayload>
    {
	    public const int PacketMessageId = 93;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 47;
        public override bool WrapToV2Extension => false;

        public override HilActuatorControlsPayload Payload { get; } = new HilActuatorControlsPayload();

        public override string Name => "HIL_ACTUATOR_CONTROLS";
    }

    /// <summary>
    ///  HIL_ACTUATOR_CONTROLS
    /// </summary>
    public class HilActuatorControlsPayload : IPayload
    {
        public byte GetMaxByteSize() => 81; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 81; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=8; //Flags
            sum+=Controls.Length * 4; //Controls
            sum+= 1; // Mode
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Flags = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/81 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Controls = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Controls[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Mode = (MavModeFlag)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteULong(ref buffer,Flags);
            for(var i=0;i<Controls.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Controls[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            /* PayloadByteSize = 81 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Flags as bitfield, 1: indicate simulation using lockstep.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public ulong Flags { get; set; }
        /// <summary>
        /// Control outputs -1 .. 1. Channel assignment depends on the simulated hardware.
        /// OriginName: controls, Units: , IsExtended: false
        /// </summary>
        public const int ControlsMaxItemsCount = 16;
        public float[] Controls { get; set; } = new float[16];
        [Obsolete("This method is deprecated. Use GetControlsMaxItemsCount instead.")]
        public byte GetControlsMaxItemsCount() => 16;
        /// <summary>
        /// System mode. Includes arming state.
        /// OriginName: mode, Units: , IsExtended: false
        /// </summary>
        public MavModeFlag Mode { get; set; }
    }
    /// <summary>
    /// Optical flow from a flow sensor (e.g. optical mouse sensor)
    ///  OPTICAL_FLOW
    /// </summary>
    public class OpticalFlowPacket: PacketV2<OpticalFlowPayload>
    {
	    public const int PacketMessageId = 100;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 175;
        public override bool WrapToV2Extension => false;

        public override OpticalFlowPayload Payload { get; } = new OpticalFlowPayload();

        public override string Name => "OPTICAL_FLOW";
    }

    /// <summary>
    ///  OPTICAL_FLOW
    /// </summary>
    public class OpticalFlowPayload : IPayload
    {
        public byte GetMaxByteSize() => 34; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 34; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //FlowCompMX
            sum+=4; //FlowCompMY
            sum+=4; //GroundDistance
            sum+=2; //FlowX
            sum+=2; //FlowY
            sum+=1; //SensorId
            sum+=1; //Quality
            sum+=4; //FlowRateX
            sum+=4; //FlowRateY
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            FlowCompMX = BinSerialize.ReadFloat(ref buffer);
            FlowCompMY = BinSerialize.ReadFloat(ref buffer);
            GroundDistance = BinSerialize.ReadFloat(ref buffer);
            FlowX = BinSerialize.ReadShort(ref buffer);
            FlowY = BinSerialize.ReadShort(ref buffer);
            SensorId = (byte)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'FlowRateX' can be empty
            if (buffer.IsEmpty) return;
            FlowRateX = BinSerialize.ReadFloat(ref buffer);
            // extended field 'FlowRateY' can be empty
            if (buffer.IsEmpty) return;
            FlowRateY = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,FlowCompMX);
            BinSerialize.WriteFloat(ref buffer,FlowCompMY);
            BinSerialize.WriteFloat(ref buffer,GroundDistance);
            BinSerialize.WriteShort(ref buffer,FlowX);
            BinSerialize.WriteShort(ref buffer,FlowY);
            BinSerialize.WriteByte(ref buffer,(byte)SensorId);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            BinSerialize.WriteFloat(ref buffer,FlowRateX);
            BinSerialize.WriteFloat(ref buffer,FlowRateY);
            /* PayloadByteSize = 34 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Flow in x-sensor direction, angular-speed compensated
        /// OriginName: flow_comp_m_x, Units: m/s, IsExtended: false
        /// </summary>
        public float FlowCompMX { get; set; }
        /// <summary>
        /// Flow in y-sensor direction, angular-speed compensated
        /// OriginName: flow_comp_m_y, Units: m/s, IsExtended: false
        /// </summary>
        public float FlowCompMY { get; set; }
        /// <summary>
        /// Ground distance. Positive value: distance known. Negative value: Unknown distance
        /// OriginName: ground_distance, Units: m, IsExtended: false
        /// </summary>
        public float GroundDistance { get; set; }
        /// <summary>
        /// Flow in x-sensor direction
        /// OriginName: flow_x, Units: dpix, IsExtended: false
        /// </summary>
        public short FlowX { get; set; }
        /// <summary>
        /// Flow in y-sensor direction
        /// OriginName: flow_y, Units: dpix, IsExtended: false
        /// </summary>
        public short FlowY { get; set; }
        /// <summary>
        /// Sensor ID
        /// OriginName: sensor_id, Units: , IsExtended: false
        /// </summary>
        public byte SensorId { get; set; }
        /// <summary>
        /// Optical flow quality / confidence. 0: bad, 255: maximum quality
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public byte Quality { get; set; }
        /// <summary>
        /// Flow rate about X axis
        /// OriginName: flow_rate_x, Units: rad/s, IsExtended: true
        /// </summary>
        public float FlowRateX { get; set; }
        /// <summary>
        /// Flow rate about Y axis
        /// OriginName: flow_rate_y, Units: rad/s, IsExtended: true
        /// </summary>
        public float FlowRateY { get; set; }
    }
    /// <summary>
    /// Global position/attitude estimate from a vision source.
    ///  GLOBAL_VISION_POSITION_ESTIMATE
    /// </summary>
    public class GlobalVisionPositionEstimatePacket: PacketV2<GlobalVisionPositionEstimatePayload>
    {
	    public const int PacketMessageId = 101;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 102;
        public override bool WrapToV2Extension => false;

        public override GlobalVisionPositionEstimatePayload Payload { get; } = new GlobalVisionPositionEstimatePayload();

        public override string Name => "GLOBAL_VISION_POSITION_ESTIMATE";
    }

    /// <summary>
    ///  GLOBAL_VISION_POSITION_ESTIMATE
    /// </summary>
    public class GlobalVisionPositionEstimatePayload : IPayload
    {
        public byte GetMaxByteSize() => 117; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 117; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Usec
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=Covariance.Length * 4; //Covariance
            sum+=1; //ResetCounter
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            /* PayloadByteSize = 117 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX time or since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public ulong Usec { get; set; }
        /// <summary>
        /// Global X position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Global Y position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Global Z position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public byte ResetCounter { get; set; }
    }
    /// <summary>
    /// Local position/attitude estimate from a vision source.
    ///  VISION_POSITION_ESTIMATE
    /// </summary>
    public class VisionPositionEstimatePacket: PacketV2<VisionPositionEstimatePayload>
    {
	    public const int PacketMessageId = 102;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 158;
        public override bool WrapToV2Extension => false;

        public override VisionPositionEstimatePayload Payload { get; } = new VisionPositionEstimatePayload();

        public override string Name => "VISION_POSITION_ESTIMATE";
    }

    /// <summary>
    ///  VISION_POSITION_ESTIMATE
    /// </summary>
    public class VisionPositionEstimatePayload : IPayload
    {
        public byte GetMaxByteSize() => 117; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 117; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Usec
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=Covariance.Length * 4; //Covariance
            sum+=1; //ResetCounter
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            /* PayloadByteSize = 117 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public ulong Usec { get; set; }
        /// <summary>
        /// Local X position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Local Y position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Local Z position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public byte ResetCounter { get; set; }
    }
    /// <summary>
    /// Speed estimate from a vision source.
    ///  VISION_SPEED_ESTIMATE
    /// </summary>
    public class VisionSpeedEstimatePacket: PacketV2<VisionSpeedEstimatePayload>
    {
	    public const int PacketMessageId = 103;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 208;
        public override bool WrapToV2Extension => false;

        public override VisionSpeedEstimatePayload Payload { get; } = new VisionSpeedEstimatePayload();

        public override string Name => "VISION_SPEED_ESTIMATE";
    }

    /// <summary>
    ///  VISION_SPEED_ESTIMATE
    /// </summary>
    public class VisionSpeedEstimatePayload : IPayload
    {
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Usec
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=Covariance.Length * 4; //Covariance
            sum+=1; //ResetCounter
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 9;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            /* PayloadByteSize = 57 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public ulong Usec { get; set; }
        /// <summary>
        /// Global X speed
        /// OriginName: x, Units: m/s, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Global Y speed
        /// OriginName: y, Units: m/s, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Global Z speed
        /// OriginName: z, Units: m/s, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public const int CovarianceMaxItemsCount = 9;
        public float[] Covariance { get; } = new float[9];
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public byte ResetCounter { get; set; }
    }
    /// <summary>
    /// Global position estimate from a Vicon motion system source.
    ///  VICON_POSITION_ESTIMATE
    /// </summary>
    public class ViconPositionEstimatePacket: PacketV2<ViconPositionEstimatePayload>
    {
	    public const int PacketMessageId = 104;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 56;
        public override bool WrapToV2Extension => false;

        public override ViconPositionEstimatePayload Payload { get; } = new ViconPositionEstimatePayload();

        public override string Name => "VICON_POSITION_ESTIMATE";
    }

    /// <summary>
    ///  VICON_POSITION_ESTIMATE
    /// </summary>
    public class ViconPositionEstimatePayload : IPayload
    {
        public byte GetMaxByteSize() => 116; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 116; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Usec
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=Covariance.Length * 4; //Covariance
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Usec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Usec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            /* PayloadByteSize = 116 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// OriginName: usec, Units: us, IsExtended: false
        /// </summary>
        public ulong Usec { get; set; }
        /// <summary>
        /// Global X position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Global Y position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Global Z position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Roll angle
        /// OriginName: roll, Units: rad, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Pitch angle
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw angle
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
    }
    /// <summary>
    /// The IMU readings in SI units in NED body frame
    ///  HIGHRES_IMU
    /// </summary>
    public class HighresImuPacket: PacketV2<HighresImuPayload>
    {
	    public const int PacketMessageId = 105;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 93;
        public override bool WrapToV2Extension => false;

        public override HighresImuPayload Payload { get; } = new HighresImuPayload();

        public override string Name => "HIGHRES_IMU";
    }

    /// <summary>
    ///  HIGHRES_IMU
    /// </summary>
    public class HighresImuPayload : IPayload
    {
        public byte GetMaxByteSize() => 63; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 63; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Xacc
            sum+=4; //Yacc
            sum+=4; //Zacc
            sum+=4; //Xgyro
            sum+=4; //Ygyro
            sum+=4; //Zgyro
            sum+=4; //Xmag
            sum+=4; //Ymag
            sum+=4; //Zmag
            sum+=4; //AbsPressure
            sum+=4; //DiffPressure
            sum+=4; //PressureAlt
            sum+=4; //Temperature
            sum+= 2; // FieldsUpdated
            sum+=1; //Id
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Xacc = BinSerialize.ReadFloat(ref buffer);
            Yacc = BinSerialize.ReadFloat(ref buffer);
            Zacc = BinSerialize.ReadFloat(ref buffer);
            Xgyro = BinSerialize.ReadFloat(ref buffer);
            Ygyro = BinSerialize.ReadFloat(ref buffer);
            Zgyro = BinSerialize.ReadFloat(ref buffer);
            Xmag = BinSerialize.ReadFloat(ref buffer);
            Ymag = BinSerialize.ReadFloat(ref buffer);
            Zmag = BinSerialize.ReadFloat(ref buffer);
            AbsPressure = BinSerialize.ReadFloat(ref buffer);
            DiffPressure = BinSerialize.ReadFloat(ref buffer);
            PressureAlt = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadFloat(ref buffer);
            FieldsUpdated = (HighresImuUpdatedFlags)BinSerialize.ReadUShort(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Xacc);
            BinSerialize.WriteFloat(ref buffer,Yacc);
            BinSerialize.WriteFloat(ref buffer,Zacc);
            BinSerialize.WriteFloat(ref buffer,Xgyro);
            BinSerialize.WriteFloat(ref buffer,Ygyro);
            BinSerialize.WriteFloat(ref buffer,Zgyro);
            BinSerialize.WriteFloat(ref buffer,Xmag);
            BinSerialize.WriteFloat(ref buffer,Ymag);
            BinSerialize.WriteFloat(ref buffer,Zmag);
            BinSerialize.WriteFloat(ref buffer,AbsPressure);
            BinSerialize.WriteFloat(ref buffer,DiffPressure);
            BinSerialize.WriteFloat(ref buffer,PressureAlt);
            BinSerialize.WriteFloat(ref buffer,Temperature);
            BinSerialize.WriteUShort(ref buffer,(ushort)FieldsUpdated);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            /* PayloadByteSize = 63 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Zacc { get; set; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Xgyro { get; set; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Ygyro { get; set; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Zgyro { get; set; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: gauss, IsExtended: false
        /// </summary>
        public float Xmag { get; set; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: gauss, IsExtended: false
        /// </summary>
        public float Ymag { get; set; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: gauss, IsExtended: false
        /// </summary>
        public float Zmag { get; set; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: abs_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public float AbsPressure { get; set; }
        /// <summary>
        /// Differential pressure
        /// OriginName: diff_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public float DiffPressure { get; set; }
        /// <summary>
        /// Altitude calculated from pressure
        /// OriginName: pressure_alt, Units: , IsExtended: false
        /// </summary>
        public float PressureAlt { get; set; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public float Temperature { get; set; }
        /// <summary>
        /// Bitmap for fields that have updated since last message
        /// OriginName: fields_updated, Units: , IsExtended: false
        /// </summary>
        public HighresImuUpdatedFlags FieldsUpdated { get; set; }
        /// <summary>
        /// Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public byte Id { get; set; }
    }
    /// <summary>
    /// Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)
    ///  OPTICAL_FLOW_RAD
    /// </summary>
    public class OpticalFlowRadPacket: PacketV2<OpticalFlowRadPayload>
    {
	    public const int PacketMessageId = 106;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 138;
        public override bool WrapToV2Extension => false;

        public override OpticalFlowRadPayload Payload { get; } = new OpticalFlowRadPayload();

        public override string Name => "OPTICAL_FLOW_RAD";
    }

    /// <summary>
    ///  OPTICAL_FLOW_RAD
    /// </summary>
    public class OpticalFlowRadPayload : IPayload
    {
        public byte GetMaxByteSize() => 44; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 44; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //IntegrationTimeUs
            sum+=4; //IntegratedX
            sum+=4; //IntegratedY
            sum+=4; //IntegratedXgyro
            sum+=4; //IntegratedYgyro
            sum+=4; //IntegratedZgyro
            sum+=4; //TimeDeltaDistanceUs
            sum+=4; //Distance
            sum+=2; //Temperature
            sum+=1; //SensorId
            sum+=1; //Quality
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            IntegrationTimeUs = BinSerialize.ReadUInt(ref buffer);
            IntegratedX = BinSerialize.ReadFloat(ref buffer);
            IntegratedY = BinSerialize.ReadFloat(ref buffer);
            IntegratedXgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedYgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedZgyro = BinSerialize.ReadFloat(ref buffer);
            TimeDeltaDistanceUs = BinSerialize.ReadUInt(ref buffer);
            Distance = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            SensorId = (byte)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,IntegrationTimeUs);
            BinSerialize.WriteFloat(ref buffer,IntegratedX);
            BinSerialize.WriteFloat(ref buffer,IntegratedY);
            BinSerialize.WriteFloat(ref buffer,IntegratedXgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedYgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedZgyro);
            BinSerialize.WriteUInt(ref buffer,TimeDeltaDistanceUs);
            BinSerialize.WriteFloat(ref buffer,Distance);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteByte(ref buffer,(byte)SensorId);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 44 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
        /// OriginName: integration_time_us, Units: us, IsExtended: false
        /// </summary>
        public uint IntegrationTimeUs { get; set; }
        /// <summary>
        /// Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
        /// OriginName: integrated_x, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedX { get; set; }
        /// <summary>
        /// Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
        /// OriginName: integrated_y, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedY { get; set; }
        /// <summary>
        /// RH rotation around X axis
        /// OriginName: integrated_xgyro, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedXgyro { get; set; }
        /// <summary>
        /// RH rotation around Y axis
        /// OriginName: integrated_ygyro, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedYgyro { get; set; }
        /// <summary>
        /// RH rotation around Z axis
        /// OriginName: integrated_zgyro, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedZgyro { get; set; }
        /// <summary>
        /// Time since the distance was sampled.
        /// OriginName: time_delta_distance_us, Units: us, IsExtended: false
        /// </summary>
        public uint TimeDeltaDistanceUs { get; set; }
        /// <summary>
        /// Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public float Distance { get; set; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
        /// <summary>
        /// Sensor ID
        /// OriginName: sensor_id, Units: , IsExtended: false
        /// </summary>
        public byte SensorId { get; set; }
        /// <summary>
        /// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public byte Quality { get; set; }
    }
    /// <summary>
    /// The IMU readings in SI units in NED body frame
    ///  HIL_SENSOR
    /// </summary>
    public class HilSensorPacket: PacketV2<HilSensorPayload>
    {
	    public const int PacketMessageId = 107;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 108;
        public override bool WrapToV2Extension => false;

        public override HilSensorPayload Payload { get; } = new HilSensorPayload();

        public override string Name => "HIL_SENSOR";
    }

    /// <summary>
    ///  HIL_SENSOR
    /// </summary>
    public class HilSensorPayload : IPayload
    {
        public byte GetMaxByteSize() => 65; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 65; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Xacc
            sum+=4; //Yacc
            sum+=4; //Zacc
            sum+=4; //Xgyro
            sum+=4; //Ygyro
            sum+=4; //Zgyro
            sum+=4; //Xmag
            sum+=4; //Ymag
            sum+=4; //Zmag
            sum+=4; //AbsPressure
            sum+=4; //DiffPressure
            sum+=4; //PressureAlt
            sum+=4; //Temperature
            sum+= 4; // FieldsUpdated
            sum+=1; //Id
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Xacc = BinSerialize.ReadFloat(ref buffer);
            Yacc = BinSerialize.ReadFloat(ref buffer);
            Zacc = BinSerialize.ReadFloat(ref buffer);
            Xgyro = BinSerialize.ReadFloat(ref buffer);
            Ygyro = BinSerialize.ReadFloat(ref buffer);
            Zgyro = BinSerialize.ReadFloat(ref buffer);
            Xmag = BinSerialize.ReadFloat(ref buffer);
            Ymag = BinSerialize.ReadFloat(ref buffer);
            Zmag = BinSerialize.ReadFloat(ref buffer);
            AbsPressure = BinSerialize.ReadFloat(ref buffer);
            DiffPressure = BinSerialize.ReadFloat(ref buffer);
            PressureAlt = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadFloat(ref buffer);
            FieldsUpdated = (HilSensorUpdatedFlags)BinSerialize.ReadUInt(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Xacc);
            BinSerialize.WriteFloat(ref buffer,Yacc);
            BinSerialize.WriteFloat(ref buffer,Zacc);
            BinSerialize.WriteFloat(ref buffer,Xgyro);
            BinSerialize.WriteFloat(ref buffer,Ygyro);
            BinSerialize.WriteFloat(ref buffer,Zgyro);
            BinSerialize.WriteFloat(ref buffer,Xmag);
            BinSerialize.WriteFloat(ref buffer,Ymag);
            BinSerialize.WriteFloat(ref buffer,Zmag);
            BinSerialize.WriteFloat(ref buffer,AbsPressure);
            BinSerialize.WriteFloat(ref buffer,DiffPressure);
            BinSerialize.WriteFloat(ref buffer,PressureAlt);
            BinSerialize.WriteFloat(ref buffer,Temperature);
            BinSerialize.WriteUInt(ref buffer,(uint)FieldsUpdated);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            /* PayloadByteSize = 65 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Zacc { get; set; }
        /// <summary>
        /// Angular speed around X axis in body frame
        /// OriginName: xgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Xgyro { get; set; }
        /// <summary>
        /// Angular speed around Y axis in body frame
        /// OriginName: ygyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Ygyro { get; set; }
        /// <summary>
        /// Angular speed around Z axis in body frame
        /// OriginName: zgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Zgyro { get; set; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: gauss, IsExtended: false
        /// </summary>
        public float Xmag { get; set; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: gauss, IsExtended: false
        /// </summary>
        public float Ymag { get; set; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: gauss, IsExtended: false
        /// </summary>
        public float Zmag { get; set; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: abs_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public float AbsPressure { get; set; }
        /// <summary>
        /// Differential pressure (airspeed)
        /// OriginName: diff_pressure, Units: hPa, IsExtended: false
        /// </summary>
        public float DiffPressure { get; set; }
        /// <summary>
        /// Altitude calculated from pressure
        /// OriginName: pressure_alt, Units: , IsExtended: false
        /// </summary>
        public float PressureAlt { get; set; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public float Temperature { get; set; }
        /// <summary>
        /// Bitmap for fields that have updated since last message
        /// OriginName: fields_updated, Units: , IsExtended: false
        /// </summary>
        public HilSensorUpdatedFlags FieldsUpdated { get; set; }
        /// <summary>
        /// Sensor ID (zero indexed). Used for multiple sensor inputs
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public byte Id { get; set; }
    }
    /// <summary>
    /// Status of simulation environment, if used
    ///  SIM_STATE
    /// </summary>
    public class SimStatePacket: PacketV2<SimStatePayload>
    {
	    public const int PacketMessageId = 108;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 32;
        public override bool WrapToV2Extension => false;

        public override SimStatePayload Payload { get; } = new SimStatePayload();

        public override string Name => "SIM_STATE";
    }

    /// <summary>
    ///  SIM_STATE
    /// </summary>
    public class SimStatePayload : IPayload
    {
        public byte GetMaxByteSize() => 92; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 92; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Q1
            sum+=4; //Q2
            sum+=4; //Q3
            sum+=4; //Q4
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=4; //Xacc
            sum+=4; //Yacc
            sum+=4; //Zacc
            sum+=4; //Xgyro
            sum+=4; //Ygyro
            sum+=4; //Zgyro
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //StdDevHorz
            sum+=4; //StdDevVert
            sum+=4; //Vn
            sum+=4; //Ve
            sum+=4; //Vd
            sum+=4; //LatInt
            sum+=4; //LonInt
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Q1 = BinSerialize.ReadFloat(ref buffer);
            Q2 = BinSerialize.ReadFloat(ref buffer);
            Q3 = BinSerialize.ReadFloat(ref buffer);
            Q4 = BinSerialize.ReadFloat(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            Xacc = BinSerialize.ReadFloat(ref buffer);
            Yacc = BinSerialize.ReadFloat(ref buffer);
            Zacc = BinSerialize.ReadFloat(ref buffer);
            Xgyro = BinSerialize.ReadFloat(ref buffer);
            Ygyro = BinSerialize.ReadFloat(ref buffer);
            Zgyro = BinSerialize.ReadFloat(ref buffer);
            Lat = BinSerialize.ReadFloat(ref buffer);
            Lon = BinSerialize.ReadFloat(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            StdDevHorz = BinSerialize.ReadFloat(ref buffer);
            StdDevVert = BinSerialize.ReadFloat(ref buffer);
            Vn = BinSerialize.ReadFloat(ref buffer);
            Ve = BinSerialize.ReadFloat(ref buffer);
            Vd = BinSerialize.ReadFloat(ref buffer);
            // extended field 'LatInt' can be empty
            if (buffer.IsEmpty) return;
            LatInt = BinSerialize.ReadInt(ref buffer);
            // extended field 'LonInt' can be empty
            if (buffer.IsEmpty) return;
            LonInt = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Q1);
            BinSerialize.WriteFloat(ref buffer,Q2);
            BinSerialize.WriteFloat(ref buffer,Q3);
            BinSerialize.WriteFloat(ref buffer,Q4);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,Xacc);
            BinSerialize.WriteFloat(ref buffer,Yacc);
            BinSerialize.WriteFloat(ref buffer,Zacc);
            BinSerialize.WriteFloat(ref buffer,Xgyro);
            BinSerialize.WriteFloat(ref buffer,Ygyro);
            BinSerialize.WriteFloat(ref buffer,Zgyro);
            BinSerialize.WriteFloat(ref buffer,Lat);
            BinSerialize.WriteFloat(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,StdDevHorz);
            BinSerialize.WriteFloat(ref buffer,StdDevVert);
            BinSerialize.WriteFloat(ref buffer,Vn);
            BinSerialize.WriteFloat(ref buffer,Ve);
            BinSerialize.WriteFloat(ref buffer,Vd);
            BinSerialize.WriteInt(ref buffer,LatInt);
            BinSerialize.WriteInt(ref buffer,LonInt);
            /* PayloadByteSize = 92 */;
        }
        
        



        /// <summary>
        /// True attitude quaternion component 1, w (1 in null-rotation)
        /// OriginName: q1, Units: , IsExtended: false
        /// </summary>
        public float Q1 { get; set; }
        /// <summary>
        /// True attitude quaternion component 2, x (0 in null-rotation)
        /// OriginName: q2, Units: , IsExtended: false
        /// </summary>
        public float Q2 { get; set; }
        /// <summary>
        /// True attitude quaternion component 3, y (0 in null-rotation)
        /// OriginName: q3, Units: , IsExtended: false
        /// </summary>
        public float Q3 { get; set; }
        /// <summary>
        /// True attitude quaternion component 4, z (0 in null-rotation)
        /// OriginName: q4, Units: , IsExtended: false
        /// </summary>
        public float Q4 { get; set; }
        /// <summary>
        /// Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
        /// OriginName: roll, Units: , IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
        /// OriginName: pitch, Units: , IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
        /// OriginName: yaw, Units: , IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float Zacc { get; set; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Xgyro { get; set; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Ygyro { get; set; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: rad/s, IsExtended: false
        /// </summary>
        public float Zgyro { get; set; }
        /// <summary>
        /// Latitude (lower precision). Both this and the lat_int field should be set.
        /// OriginName: lat, Units: deg, IsExtended: false
        /// </summary>
        public float Lat { get; set; }
        /// <summary>
        /// Longitude (lower precision). Both this and the lon_int field should be set.
        /// OriginName: lon, Units: deg, IsExtended: false
        /// </summary>
        public float Lon { get; set; }
        /// <summary>
        /// Altitude
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public float Alt { get; set; }
        /// <summary>
        /// Horizontal position standard deviation
        /// OriginName: std_dev_horz, Units: , IsExtended: false
        /// </summary>
        public float StdDevHorz { get; set; }
        /// <summary>
        /// Vertical position standard deviation
        /// OriginName: std_dev_vert, Units: , IsExtended: false
        /// </summary>
        public float StdDevVert { get; set; }
        /// <summary>
        /// True velocity in north direction in earth-fixed NED frame
        /// OriginName: vn, Units: m/s, IsExtended: false
        /// </summary>
        public float Vn { get; set; }
        /// <summary>
        /// True velocity in east direction in earth-fixed NED frame
        /// OriginName: ve, Units: m/s, IsExtended: false
        /// </summary>
        public float Ve { get; set; }
        /// <summary>
        /// True velocity in down direction in earth-fixed NED frame
        /// OriginName: vd, Units: m/s, IsExtended: false
        /// </summary>
        public float Vd { get; set; }
        /// <summary>
        /// Latitude (higher precision). If 0, recipients should use the lat field value (otherwise this field is preferred).
        /// OriginName: lat_int, Units: degE7, IsExtended: true
        /// </summary>
        public int LatInt { get; set; }
        /// <summary>
        /// Longitude (higher precision). If 0, recipients should use the lon field value (otherwise this field is preferred).
        /// OriginName: lon_int, Units: degE7, IsExtended: true
        /// </summary>
        public int LonInt { get; set; }
    }
    /// <summary>
    /// Status generated by radio and injected into MAVLink stream.
    ///  RADIO_STATUS
    /// </summary>
    public class RadioStatusPacket: PacketV2<RadioStatusPayload>
    {
	    public const int PacketMessageId = 109;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 185;
        public override bool WrapToV2Extension => false;

        public override RadioStatusPayload Payload { get; } = new RadioStatusPayload();

        public override string Name => "RADIO_STATUS";
    }

    /// <summary>
    ///  RADIO_STATUS
    /// </summary>
    public class RadioStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Rxerrors
            sum+=2; //Fixed
            sum+=1; //Rssi
            sum+=1; //Remrssi
            sum+=1; //Txbuf
            sum+=1; //Noise
            sum+=1; //Remnoise
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Rxerrors = BinSerialize.ReadUShort(ref buffer);
            Fixed = BinSerialize.ReadUShort(ref buffer);
            Rssi = (byte)BinSerialize.ReadByte(ref buffer);
            Remrssi = (byte)BinSerialize.ReadByte(ref buffer);
            Txbuf = (byte)BinSerialize.ReadByte(ref buffer);
            Noise = (byte)BinSerialize.ReadByte(ref buffer);
            Remnoise = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Rxerrors);
            BinSerialize.WriteUShort(ref buffer,Fixed);
            BinSerialize.WriteByte(ref buffer,(byte)Rssi);
            BinSerialize.WriteByte(ref buffer,(byte)Remrssi);
            BinSerialize.WriteByte(ref buffer,(byte)Txbuf);
            BinSerialize.WriteByte(ref buffer,(byte)Noise);
            BinSerialize.WriteByte(ref buffer,(byte)Remnoise);
            /* PayloadByteSize = 9 */;
        }
        
        



        /// <summary>
        /// Count of radio packet receive errors (since boot).
        /// OriginName: rxerrors, Units: , IsExtended: false
        /// </summary>
        public ushort Rxerrors { get; set; }
        /// <summary>
        /// Count of error corrected radio packets (since boot).
        /// OriginName: fixed, Units: , IsExtended: false
        /// </summary>
        public ushort Fixed { get; set; }
        /// <summary>
        /// Local (message sender) received signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: rssi, Units: , IsExtended: false
        /// </summary>
        public byte Rssi { get; set; }
        /// <summary>
        /// Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: remrssi, Units: , IsExtended: false
        /// </summary>
        public byte Remrssi { get; set; }
        /// <summary>
        /// Remaining free transmitter buffer space.
        /// OriginName: txbuf, Units: %, IsExtended: false
        /// </summary>
        public byte Txbuf { get; set; }
        /// <summary>
        /// Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: noise, Units: , IsExtended: false
        /// </summary>
        public byte Noise { get; set; }
        /// <summary>
        /// Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
        /// OriginName: remnoise, Units: , IsExtended: false
        /// </summary>
        public byte Remnoise { get; set; }
    }
    /// <summary>
    /// File transfer protocol message: https://mavlink.io/en/services/ftp.html.
    ///  FILE_TRANSFER_PROTOCOL
    /// </summary>
    public class FileTransferProtocolPacket: PacketV2<FileTransferProtocolPayload>
    {
	    public const int PacketMessageId = 110;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 84;
        public override bool WrapToV2Extension => false;

        public override FileTransferProtocolPayload Payload { get; } = new FileTransferProtocolPayload();

        public override string Name => "FILE_TRANSFER_PROTOCOL";
    }

    /// <summary>
    ///  FILE_TRANSFER_PROTOCOL
    /// </summary>
    public class FileTransferProtocolPayload : IPayload
    {
        public byte GetMaxByteSize() => 254; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 254; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetNetwork
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=Payload.Length; //Payload
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetNetwork = (byte)BinSerialize.ReadByte(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/251 - Math.Max(0,((/*PayloadByteSize*/254 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Payload = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Payload[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetNetwork);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<Payload.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Payload[i]);
            }
            /* PayloadByteSize = 254 */;
        }
        
        



        /// <summary>
        /// Network ID (0 for broadcast)
        /// OriginName: target_network, Units: , IsExtended: false
        /// </summary>
        public byte TargetNetwork { get; set; }
        /// <summary>
        /// System ID (0 for broadcast)
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast)
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields. The content/format of this block is defined in https://mavlink.io/en/services/ftp.html.
        /// OriginName: payload, Units: , IsExtended: false
        /// </summary>
        public const int PayloadMaxItemsCount = 251;
        public byte[] Payload { get; set; } = new byte[251];
        [Obsolete("This method is deprecated. Use GetPayloadMaxItemsCount instead.")]
        public byte GetPayloadMaxItemsCount() => 251;
    }
    /// <summary>
    /// 
    ///         Time synchronization message.
    ///         The message is used for both timesync requests and responses.
    ///         The request is sent with `ts1=syncing component timestamp` and `tc1=0`, and may be broadcast or targeted to a specific system/component.
    ///         The response is sent with `ts1=syncing component timestamp` (mirror back unchanged), and `tc1=responding component timestamp`, with the `target_system` and `target_component` set to ids of the original request.
    ///         Systems can determine if they are receiving a request or response based on the value of `tc`.
    ///         If the response has `target_system==target_component==0` the remote system has not been updated to use the component IDs and cannot reliably timesync; the requestor may report an error.
    ///         Timestamps are UNIX Epoch time or time since system boot in nanoseconds (the timestamp format can be inferred by checking for the magnitude of the number; generally it doesn't matter as only the offset is used).
    ///         The message sequence is repeated numerous times with results being filtered/averaged to estimate the offset.
    ///       
    ///  TIMESYNC
    /// </summary>
    public class TimesyncPacket: PacketV2<TimesyncPayload>
    {
	    public const int PacketMessageId = 111;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 34;
        public override bool WrapToV2Extension => false;

        public override TimesyncPayload Payload { get; } = new TimesyncPayload();

        public override string Name => "TIMESYNC";
    }

    /// <summary>
    ///  TIMESYNC
    /// </summary>
    public class TimesyncPayload : IPayload
    {
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Tc1
            sum+=8; //Ts1
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Tc1 = BinSerialize.ReadLong(ref buffer);
            Ts1 = BinSerialize.ReadLong(ref buffer);
            // extended field 'TargetSystem' can be empty
            if (buffer.IsEmpty) return;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TargetComponent' can be empty
            if (buffer.IsEmpty) return;
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteLong(ref buffer,Tc1);
            BinSerialize.WriteLong(ref buffer,Ts1);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 18 */;
        }
        
        



        /// <summary>
        /// Time sync timestamp 1. Syncing: 0. Responding: Timestamp of responding component.
        /// OriginName: tc1, Units: ns, IsExtended: false
        /// </summary>
        public long Tc1 { get; set; }
        /// <summary>
        /// Time sync timestamp 2. Timestamp of syncing component (mirrored in response).
        /// OriginName: ts1, Units: ns, IsExtended: false
        /// </summary>
        public long Ts1 { get; set; }
        /// <summary>
        /// Target system id. Request: 0 (broadcast) or id of specific system. Response must contain system id of the requesting component.
        /// OriginName: target_system, Units: , IsExtended: true
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Target component id. Request: 0 (broadcast) or id of specific component. Response must contain component id of the requesting component.
        /// OriginName: target_component, Units: , IsExtended: true
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Camera-IMU triggering and synchronisation message.
    ///  CAMERA_TRIGGER
    /// </summary>
    public class CameraTriggerPacket: PacketV2<CameraTriggerPayload>
    {
	    public const int PacketMessageId = 112;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 174;
        public override bool WrapToV2Extension => false;

        public override CameraTriggerPayload Payload { get; } = new CameraTriggerPayload();

        public override string Name => "CAMERA_TRIGGER";
    }

    /// <summary>
    ///  CAMERA_TRIGGER
    /// </summary>
    public class CameraTriggerPayload : IPayload
    {
        public byte GetMaxByteSize() => 12; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 12; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Seq
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Seq = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Seq);
            /* PayloadByteSize = 12 */;
        }
        
        



        /// <summary>
        /// Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Image frame sequence
        /// OriginName: seq, Units: , IsExtended: false
        /// </summary>
        public uint Seq { get; set; }
    }
    /// <summary>
    /// The global position, as returned by the Global Positioning System (GPS). This is
    ///                  NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION_INT for the global position estimate.
    ///  HIL_GPS
    /// </summary>
    public class HilGpsPacket: PacketV2<HilGpsPayload>
    {
	    public const int PacketMessageId = 113;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 124;
        public override bool WrapToV2Extension => false;

        public override HilGpsPayload Payload { get; } = new HilGpsPayload();

        public override string Name => "HIL_GPS";
    }

    /// <summary>
    ///  HIL_GPS
    /// </summary>
    public class HilGpsPayload : IPayload
    {
        public byte GetMaxByteSize() => 39; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 39; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=2; //Eph
            sum+=2; //Epv
            sum+=2; //Vel
            sum+=2; //Vn
            sum+=2; //Ve
            sum+=2; //Vd
            sum+=2; //Cog
            sum+=1; //FixType
            sum+=1; //SatellitesVisible
            sum+=1; //Id
            sum+=2; //Yaw
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Eph = BinSerialize.ReadUShort(ref buffer);
            Epv = BinSerialize.ReadUShort(ref buffer);
            Vel = BinSerialize.ReadUShort(ref buffer);
            Vn = BinSerialize.ReadShort(ref buffer);
            Ve = BinSerialize.ReadShort(ref buffer);
            Vd = BinSerialize.ReadShort(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            FixType = (byte)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteUShort(ref buffer,Eph);
            BinSerialize.WriteUShort(ref buffer,Epv);
            BinSerialize.WriteUShort(ref buffer,Vel);
            BinSerialize.WriteShort(ref buffer,Vn);
            BinSerialize.WriteShort(ref buffer,Ve);
            BinSerialize.WriteShort(ref buffer,Vd);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            /* PayloadByteSize = 39 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: eph, Units: , IsExtended: false
        /// </summary>
        public ushort Eph { get; set; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: epv, Units: , IsExtended: false
        /// </summary>
        public ushort Epv { get; set; }
        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// OriginName: vel, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort Vel { get; set; }
        /// <summary>
        /// GPS velocity in north direction in earth-fixed NED frame
        /// OriginName: vn, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vn { get; set; }
        /// <summary>
        /// GPS velocity in east direction in earth-fixed NED frame
        /// OriginName: ve, Units: cm/s, IsExtended: false
        /// </summary>
        public short Ve { get; set; }
        /// <summary>
        /// GPS velocity in down direction in earth-fixed NED frame
        /// OriginName: vd, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vd { get; set; }
        /// <summary>
        /// Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: cog, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Cog { get; set; }
        /// <summary>
        /// 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public byte FixType { get; set; }
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public byte SatellitesVisible { get; set; }
        /// <summary>
        /// GPS ID (zero indexed). Used for multiple GPS inputs
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public byte Id { get; set; }
        /// <summary>
        /// Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public ushort Yaw { get; set; }
    }
    /// <summary>
    /// Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)
    ///  HIL_OPTICAL_FLOW
    /// </summary>
    public class HilOpticalFlowPacket: PacketV2<HilOpticalFlowPayload>
    {
	    public const int PacketMessageId = 114;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 237;
        public override bool WrapToV2Extension => false;

        public override HilOpticalFlowPayload Payload { get; } = new HilOpticalFlowPayload();

        public override string Name => "HIL_OPTICAL_FLOW";
    }

    /// <summary>
    ///  HIL_OPTICAL_FLOW
    /// </summary>
    public class HilOpticalFlowPayload : IPayload
    {
        public byte GetMaxByteSize() => 44; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 44; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //IntegrationTimeUs
            sum+=4; //IntegratedX
            sum+=4; //IntegratedY
            sum+=4; //IntegratedXgyro
            sum+=4; //IntegratedYgyro
            sum+=4; //IntegratedZgyro
            sum+=4; //TimeDeltaDistanceUs
            sum+=4; //Distance
            sum+=2; //Temperature
            sum+=1; //SensorId
            sum+=1; //Quality
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            IntegrationTimeUs = BinSerialize.ReadUInt(ref buffer);
            IntegratedX = BinSerialize.ReadFloat(ref buffer);
            IntegratedY = BinSerialize.ReadFloat(ref buffer);
            IntegratedXgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedYgyro = BinSerialize.ReadFloat(ref buffer);
            IntegratedZgyro = BinSerialize.ReadFloat(ref buffer);
            TimeDeltaDistanceUs = BinSerialize.ReadUInt(ref buffer);
            Distance = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            SensorId = (byte)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,IntegrationTimeUs);
            BinSerialize.WriteFloat(ref buffer,IntegratedX);
            BinSerialize.WriteFloat(ref buffer,IntegratedY);
            BinSerialize.WriteFloat(ref buffer,IntegratedXgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedYgyro);
            BinSerialize.WriteFloat(ref buffer,IntegratedZgyro);
            BinSerialize.WriteUInt(ref buffer,TimeDeltaDistanceUs);
            BinSerialize.WriteFloat(ref buffer,Distance);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteByte(ref buffer,(byte)SensorId);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 44 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
        /// OriginName: integration_time_us, Units: us, IsExtended: false
        /// </summary>
        public uint IntegrationTimeUs { get; set; }
        /// <summary>
        /// Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
        /// OriginName: integrated_x, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedX { get; set; }
        /// <summary>
        /// Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
        /// OriginName: integrated_y, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedY { get; set; }
        /// <summary>
        /// RH rotation around X axis
        /// OriginName: integrated_xgyro, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedXgyro { get; set; }
        /// <summary>
        /// RH rotation around Y axis
        /// OriginName: integrated_ygyro, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedYgyro { get; set; }
        /// <summary>
        /// RH rotation around Z axis
        /// OriginName: integrated_zgyro, Units: rad, IsExtended: false
        /// </summary>
        public float IntegratedZgyro { get; set; }
        /// <summary>
        /// Time since the distance was sampled.
        /// OriginName: time_delta_distance_us, Units: us, IsExtended: false
        /// </summary>
        public uint TimeDeltaDistanceUs { get; set; }
        /// <summary>
        /// Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public float Distance { get; set; }
        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
        /// <summary>
        /// Sensor ID
        /// OriginName: sensor_id, Units: , IsExtended: false
        /// </summary>
        public byte SensorId { get; set; }
        /// <summary>
        /// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public byte Quality { get; set; }
    }
    /// <summary>
    /// Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
    ///  HIL_STATE_QUATERNION
    /// </summary>
    public class HilStateQuaternionPacket: PacketV2<HilStateQuaternionPayload>
    {
	    public const int PacketMessageId = 115;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 4;
        public override bool WrapToV2Extension => false;

        public override HilStateQuaternionPayload Payload { get; } = new HilStateQuaternionPayload();

        public override string Name => "HIL_STATE_QUATERNION";
    }

    /// <summary>
    ///  HIL_STATE_QUATERNION
    /// </summary>
    public class HilStateQuaternionPayload : IPayload
    {
        public byte GetMaxByteSize() => 64; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 64; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=AttitudeQuaternion.Length * 4; //AttitudeQuaternion
            sum+=4; //Rollspeed
            sum+=4; //Pitchspeed
            sum+=4; //Yawspeed
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=2; //Vx
            sum+=2; //Vy
            sum+=2; //Vz
            sum+=2; //IndAirspeed
            sum+=2; //TrueAirspeed
            sum+=2; //Xacc
            sum+=2; //Yacc
            sum+=2; //Zacc
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/64 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            AttitudeQuaternion = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                AttitudeQuaternion[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            IndAirspeed = BinSerialize.ReadUShort(ref buffer);
            TrueAirspeed = BinSerialize.ReadUShort(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<AttitudeQuaternion.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AttitudeQuaternion[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteUShort(ref buffer,IndAirspeed);
            BinSerialize.WriteUShort(ref buffer,TrueAirspeed);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            /* PayloadByteSize = 64 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)
        /// OriginName: attitude_quaternion, Units: , IsExtended: false
        /// </summary>
        public const int AttitudeQuaternionMaxItemsCount = 4;
        public float[] AttitudeQuaternion { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetAttitudeQuaternionMaxItemsCount instead.")]
        public byte GetAttitudeQuaternionMaxItemsCount() => 4;
        /// <summary>
        /// Body frame roll / phi angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Rollspeed { get; set; }
        /// <summary>
        /// Body frame pitch / theta angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Pitchspeed { get; set; }
        /// <summary>
        /// Body frame yaw / psi angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Yawspeed { get; set; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// Ground X Speed (Latitude)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vx { get; set; }
        /// <summary>
        /// Ground Y Speed (Longitude)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vy { get; set; }
        /// <summary>
        /// Ground Z Speed (Altitude)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vz { get; set; }
        /// <summary>
        /// Indicated airspeed
        /// OriginName: ind_airspeed, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort IndAirspeed { get; set; }
        /// <summary>
        /// True airspeed
        /// OriginName: true_airspeed, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort TrueAirspeed { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public short Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public short Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public short Zacc { get; set; }
    }
    /// <summary>
    /// The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
    ///  SCALED_IMU2
    /// </summary>
    public class ScaledImu2Packet: PacketV2<ScaledImu2Payload>
    {
	    public const int PacketMessageId = 116;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 76;
        public override bool WrapToV2Extension => false;

        public override ScaledImu2Payload Payload { get; } = new ScaledImu2Payload();

        public override string Name => "SCALED_IMU2";
    }

    /// <summary>
    ///  SCALED_IMU2
    /// </summary>
    public class ScaledImu2Payload : IPayload
    {
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=2; //Xacc
            sum+=2; //Yacc
            sum+=2; //Zacc
            sum+=2; //Xgyro
            sum+=2; //Ygyro
            sum+=2; //Zgyro
            sum+=2; //Xmag
            sum+=2; //Ymag
            sum+=2; //Zmag
            sum+=2; //Temperature
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 24 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public short Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public short Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public short Zacc { get; set; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Xgyro { get; set; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Ygyro { get; set; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Zgyro { get; set; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Xmag { get; set; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Ymag { get; set; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Zmag { get; set; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public short Temperature { get; set; }
    }
    /// <summary>
    /// Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called. If there are no log files available this request shall be answered with one LOG_ENTRY message with id = 0 and num_logs = 0.
    ///  LOG_REQUEST_LIST
    /// </summary>
    public class LogRequestListPacket: PacketV2<LogRequestListPayload>
    {
	    public const int PacketMessageId = 117;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 128;
        public override bool WrapToV2Extension => false;

        public override LogRequestListPayload Payload { get; } = new LogRequestListPayload();

        public override string Name => "LOG_REQUEST_LIST";
    }

    /// <summary>
    ///  LOG_REQUEST_LIST
    /// </summary>
    public class LogRequestListPayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Start
            sum+=2; //End
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Start = BinSerialize.ReadUShort(ref buffer);
            End = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Start);
            BinSerialize.WriteUShort(ref buffer,End);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// First log id (0 for first available)
        /// OriginName: start, Units: , IsExtended: false
        /// </summary>
        public ushort Start { get; set; }
        /// <summary>
        /// Last log id (0xffff for last available)
        /// OriginName: end, Units: , IsExtended: false
        /// </summary>
        public ushort End { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Reply to LOG_REQUEST_LIST
    ///  LOG_ENTRY
    /// </summary>
    public class LogEntryPacket: PacketV2<LogEntryPayload>
    {
	    public const int PacketMessageId = 118;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 56;
        public override bool WrapToV2Extension => false;

        public override LogEntryPayload Payload { get; } = new LogEntryPayload();

        public override string Name => "LOG_ENTRY";
    }

    /// <summary>
    ///  LOG_ENTRY
    /// </summary>
    public class LogEntryPayload : IPayload
    {
        public byte GetMaxByteSize() => 14; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 14; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeUtc
            sum+=4; //Size
            sum+=2; //Id
            sum+=2; //NumLogs
            sum+=2; //LastLogNum
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUtc = BinSerialize.ReadUInt(ref buffer);
            Size = BinSerialize.ReadUInt(ref buffer);
            Id = BinSerialize.ReadUShort(ref buffer);
            NumLogs = BinSerialize.ReadUShort(ref buffer);
            LastLogNum = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeUtc);
            BinSerialize.WriteUInt(ref buffer,Size);
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteUShort(ref buffer,NumLogs);
            BinSerialize.WriteUShort(ref buffer,LastLogNum);
            /* PayloadByteSize = 14 */;
        }
        
        



        /// <summary>
        /// UTC timestamp of log since 1970, or 0 if not available
        /// OriginName: time_utc, Units: s, IsExtended: false
        /// </summary>
        public uint TimeUtc { get; set; }
        /// <summary>
        /// Size of the log (may be approximate)
        /// OriginName: size, Units: bytes, IsExtended: false
        /// </summary>
        public uint Size { get; set; }
        /// <summary>
        /// Log id
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public ushort Id { get; set; }
        /// <summary>
        /// Total number of logs
        /// OriginName: num_logs, Units: , IsExtended: false
        /// </summary>
        public ushort NumLogs { get; set; }
        /// <summary>
        /// High log number
        /// OriginName: last_log_num, Units: , IsExtended: false
        /// </summary>
        public ushort LastLogNum { get; set; }
    }
    /// <summary>
    /// Request a chunk of a log
    ///  LOG_REQUEST_DATA
    /// </summary>
    public class LogRequestDataPacket: PacketV2<LogRequestDataPayload>
    {
	    public const int PacketMessageId = 119;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 116;
        public override bool WrapToV2Extension => false;

        public override LogRequestDataPayload Payload { get; } = new LogRequestDataPayload();

        public override string Name => "LOG_REQUEST_DATA";
    }

    /// <summary>
    ///  LOG_REQUEST_DATA
    /// </summary>
    public class LogRequestDataPayload : IPayload
    {
        public byte GetMaxByteSize() => 12; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 12; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Ofs
            sum+=4; //Count
            sum+=2; //Id
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Ofs = BinSerialize.ReadUInt(ref buffer);
            Count = BinSerialize.ReadUInt(ref buffer);
            Id = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Ofs);
            BinSerialize.WriteUInt(ref buffer,Count);
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 12 */;
        }
        
        



        /// <summary>
        /// Offset into the log
        /// OriginName: ofs, Units: , IsExtended: false
        /// </summary>
        public uint Ofs { get; set; }
        /// <summary>
        /// Number of bytes
        /// OriginName: count, Units: bytes, IsExtended: false
        /// </summary>
        public uint Count { get; set; }
        /// <summary>
        /// Log id (from LOG_ENTRY reply)
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public ushort Id { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Reply to LOG_REQUEST_DATA
    ///  LOG_DATA
    /// </summary>
    public class LogDataPacket: PacketV2<LogDataPayload>
    {
	    public const int PacketMessageId = 120;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 134;
        public override bool WrapToV2Extension => false;

        public override LogDataPayload Payload { get; } = new LogDataPayload();

        public override string Name => "LOG_DATA";
    }

    /// <summary>
    ///  LOG_DATA
    /// </summary>
    public class LogDataPayload : IPayload
    {
        public byte GetMaxByteSize() => 97; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 97; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Ofs
            sum+=2; //Id
            sum+=1; //Count
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Ofs = BinSerialize.ReadUInt(ref buffer);
            Id = BinSerialize.ReadUShort(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/90 - Math.Max(0,((/*PayloadByteSize*/97 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Ofs);
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 97 */;
        }
        
        



        /// <summary>
        /// Offset into the log
        /// OriginName: ofs, Units: , IsExtended: false
        /// </summary>
        public uint Ofs { get; set; }
        /// <summary>
        /// Log id (from LOG_ENTRY reply)
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public ushort Id { get; set; }
        /// <summary>
        /// Number of bytes (zero for end of log)
        /// OriginName: count, Units: bytes, IsExtended: false
        /// </summary>
        public byte Count { get; set; }
        /// <summary>
        /// log data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 90;
        public byte[] Data { get; set; } = new byte[90];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 90;
    }
    /// <summary>
    /// Erase all logs
    ///  LOG_ERASE
    /// </summary>
    public class LogErasePacket: PacketV2<LogErasePayload>
    {
	    public const int PacketMessageId = 121;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 237;
        public override bool WrapToV2Extension => false;

        public override LogErasePayload Payload { get; } = new LogErasePayload();

        public override string Name => "LOG_ERASE";
    }

    /// <summary>
    ///  LOG_ERASE
    /// </summary>
    public class LogErasePayload : IPayload
    {
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Stop log transfer and resume normal logging
    ///  LOG_REQUEST_END
    /// </summary>
    public class LogRequestEndPacket: PacketV2<LogRequestEndPayload>
    {
	    public const int PacketMessageId = 122;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 203;
        public override bool WrapToV2Extension => false;

        public override LogRequestEndPayload Payload { get; } = new LogRequestEndPayload();

        public override string Name => "LOG_REQUEST_END";
    }

    /// <summary>
    ///  LOG_REQUEST_END
    /// </summary>
    public class LogRequestEndPayload : IPayload
    {
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Data for injecting into the onboard GPS (used for DGPS)
    ///  GPS_INJECT_DATA
    /// </summary>
    public class GpsInjectDataPacket: PacketV2<GpsInjectDataPayload>
    {
	    public const int PacketMessageId = 123;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 250;
        public override bool WrapToV2Extension => false;

        public override GpsInjectDataPayload Payload { get; } = new GpsInjectDataPayload();

        public override string Name => "GPS_INJECT_DATA";
    }

    /// <summary>
    ///  GPS_INJECT_DATA
    /// </summary>
    public class GpsInjectDataPayload : IPayload
    {
        public byte GetMaxByteSize() => 113; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 113; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //Len
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/110 - Math.Max(0,((/*PayloadByteSize*/113 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 113 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Data length
        /// OriginName: len, Units: bytes, IsExtended: false
        /// </summary>
        public byte Len { get; set; }
        /// <summary>
        /// Raw data (110 is enough for 12 satellites of RTCMv2)
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 110;
        public byte[] Data { get; set; } = new byte[110];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 110;
    }
    /// <summary>
    /// Second GPS data.
    ///  GPS2_RAW
    /// </summary>
    public class Gps2RawPacket: PacketV2<Gps2RawPayload>
    {
	    public const int PacketMessageId = 124;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 87;
        public override bool WrapToV2Extension => false;

        public override Gps2RawPayload Payload { get; } = new Gps2RawPayload();

        public override string Name => "GPS2_RAW";
    }

    /// <summary>
    ///  GPS2_RAW
    /// </summary>
    public class Gps2RawPayload : IPayload
    {
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //DgpsAge
            sum+=2; //Eph
            sum+=2; //Epv
            sum+=2; //Vel
            sum+=2; //Cog
            sum+= 1; // FixType
            sum+=1; //SatellitesVisible
            sum+=1; //DgpsNumch
            sum+=2; //Yaw
            sum+=4; //AltEllipsoid
            sum+=4; //HAcc
            sum+=4; //VAcc
            sum+=4; //VelAcc
            sum+=4; //HdgAcc
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            DgpsAge = BinSerialize.ReadUInt(ref buffer);
            Eph = BinSerialize.ReadUShort(ref buffer);
            Epv = BinSerialize.ReadUShort(ref buffer);
            Vel = BinSerialize.ReadUShort(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            FixType = (GpsFixType)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            DgpsNumch = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);
            // extended field 'AltEllipsoid' can be empty
            if (buffer.IsEmpty) return;
            AltEllipsoid = BinSerialize.ReadInt(ref buffer);
            // extended field 'HAcc' can be empty
            if (buffer.IsEmpty) return;
            HAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VAcc' can be empty
            if (buffer.IsEmpty) return;
            VAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'VelAcc' can be empty
            if (buffer.IsEmpty) return;
            VelAcc = BinSerialize.ReadUInt(ref buffer);
            // extended field 'HdgAcc' can be empty
            if (buffer.IsEmpty) return;
            HdgAcc = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteUInt(ref buffer,DgpsAge);
            BinSerialize.WriteUShort(ref buffer,Eph);
            BinSerialize.WriteUShort(ref buffer,Epv);
            BinSerialize.WriteUShort(ref buffer,Vel);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteByte(ref buffer,(byte)DgpsNumch);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            BinSerialize.WriteInt(ref buffer,AltEllipsoid);
            BinSerialize.WriteUInt(ref buffer,HAcc);
            BinSerialize.WriteUInt(ref buffer,VAcc);
            BinSerialize.WriteUInt(ref buffer,VelAcc);
            BinSerialize.WriteUInt(ref buffer,HdgAcc);
            /* PayloadByteSize = 57 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// Age of DGPS info
        /// OriginName: dgps_age, Units: ms, IsExtended: false
        /// </summary>
        public uint DgpsAge { get; set; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: eph, Units: , IsExtended: false
        /// </summary>
        public ushort Eph { get; set; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX
        /// OriginName: epv, Units: , IsExtended: false
        /// </summary>
        public ushort Epv { get; set; }
        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// OriginName: vel, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort Vel { get; set; }
        /// <summary>
        /// Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// OriginName: cog, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Cog { get; set; }
        /// <summary>
        /// GPS fix type.
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public GpsFixType FixType { get; set; }
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public byte SatellitesVisible { get; set; }
        /// <summary>
        /// Number of DGPS satellites
        /// OriginName: dgps_numch, Units: , IsExtended: false
        /// </summary>
        public byte DgpsNumch { get; set; }
        /// <summary>
        /// Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public ushort Yaw { get; set; }
        /// <summary>
        /// Altitude (above WGS84, EGM96 ellipsoid). Positive for up.
        /// OriginName: alt_ellipsoid, Units: mm, IsExtended: true
        /// </summary>
        public int AltEllipsoid { get; set; }
        /// <summary>
        /// Position uncertainty.
        /// OriginName: h_acc, Units: mm, IsExtended: true
        /// </summary>
        public uint HAcc { get; set; }
        /// <summary>
        /// Altitude uncertainty.
        /// OriginName: v_acc, Units: mm, IsExtended: true
        /// </summary>
        public uint VAcc { get; set; }
        /// <summary>
        /// Speed uncertainty.
        /// OriginName: vel_acc, Units: mm, IsExtended: true
        /// </summary>
        public uint VelAcc { get; set; }
        /// <summary>
        /// Heading / track uncertainty
        /// OriginName: hdg_acc, Units: degE5, IsExtended: true
        /// </summary>
        public uint HdgAcc { get; set; }
    }
    /// <summary>
    /// Power supply status
    ///  POWER_STATUS
    /// </summary>
    public class PowerStatusPacket: PacketV2<PowerStatusPayload>
    {
	    public const int PacketMessageId = 125;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 203;
        public override bool WrapToV2Extension => false;

        public override PowerStatusPayload Payload { get; } = new PowerStatusPayload();

        public override string Name => "POWER_STATUS";
    }

    /// <summary>
    ///  POWER_STATUS
    /// </summary>
    public class PowerStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Vcc
            sum+=2; //Vservo
            sum+= 2; // Flags
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Vcc = BinSerialize.ReadUShort(ref buffer);
            Vservo = BinSerialize.ReadUShort(ref buffer);
            Flags = (MavPowerStatus)BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Vcc);
            BinSerialize.WriteUShort(ref buffer,Vservo);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// 5V rail voltage.
        /// OriginName: Vcc, Units: mV, IsExtended: false
        /// </summary>
        public ushort Vcc { get; set; }
        /// <summary>
        /// Servo rail voltage.
        /// OriginName: Vservo, Units: mV, IsExtended: false
        /// </summary>
        public ushort Vservo { get; set; }
        /// <summary>
        /// Bitmap of power supply status flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public MavPowerStatus Flags { get; set; }
    }
    /// <summary>
    /// Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.
    ///  SERIAL_CONTROL
    /// </summary>
    public class SerialControlPacket: PacketV2<SerialControlPayload>
    {
	    public const int PacketMessageId = 126;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 220;
        public override bool WrapToV2Extension => false;

        public override SerialControlPayload Payload { get; } = new SerialControlPayload();

        public override string Name => "SERIAL_CONTROL";
    }

    /// <summary>
    ///  SERIAL_CONTROL
    /// </summary>
    public class SerialControlPayload : IPayload
    {
        public byte GetMaxByteSize() => 81; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 81; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Baudrate
            sum+=2; //Timeout
            sum+= 1; // Device
            sum+= 1; // Flags
            sum+=1; //Count
            sum+=Data.Length; //Data
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Baudrate = BinSerialize.ReadUInt(ref buffer);
            Timeout = BinSerialize.ReadUShort(ref buffer);
            Device = (SerialControlDev)BinSerialize.ReadByte(ref buffer);
            Flags = (SerialControlFlag)BinSerialize.ReadByte(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/70 - Math.Max(0,((/*PayloadByteSize*/81 - payloadSize - /*ExtendedFieldsLength*/2)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            // extended field 'TargetSystem' can be empty
            if (buffer.IsEmpty) return;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TargetComponent' can be empty
            if (buffer.IsEmpty) return;
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Baudrate);
            BinSerialize.WriteUShort(ref buffer,Timeout);
            BinSerialize.WriteByte(ref buffer,(byte)Device);
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 81 */;
        }
        
        



        /// <summary>
        /// Baudrate of transfer. Zero means no change.
        /// OriginName: baudrate, Units: bits/s, IsExtended: false
        /// </summary>
        public uint Baudrate { get; set; }
        /// <summary>
        /// Timeout for reply data
        /// OriginName: timeout, Units: ms, IsExtended: false
        /// </summary>
        public ushort Timeout { get; set; }
        /// <summary>
        /// Serial control device type.
        /// OriginName: device, Units: , IsExtended: false
        /// </summary>
        public SerialControlDev Device { get; set; }
        /// <summary>
        /// Bitmap of serial control flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public SerialControlFlag Flags { get; set; }
        /// <summary>
        /// how many bytes in this transfer
        /// OriginName: count, Units: bytes, IsExtended: false
        /// </summary>
        public byte Count { get; set; }
        /// <summary>
        /// serial data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 70;
        public byte[] Data { get; set; } = new byte[70];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 70;
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: true
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: true
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    ///  GPS_RTK
    /// </summary>
    public class GpsRtkPacket: PacketV2<GpsRtkPayload>
    {
	    public const int PacketMessageId = 127;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 25;
        public override bool WrapToV2Extension => false;

        public override GpsRtkPayload Payload { get; } = new GpsRtkPayload();

        public override string Name => "GPS_RTK";
    }

    /// <summary>
    ///  GPS_RTK
    /// </summary>
    public class GpsRtkPayload : IPayload
    {
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeLastBaselineMs
            sum+=4; //Tow
            sum+=4; //BaselineAMm
            sum+=4; //BaselineBMm
            sum+=4; //BaselineCMm
            sum+=4; //Accuracy
            sum+=4; //IarNumHypotheses
            sum+=2; //Wn
            sum+=1; //RtkReceiverId
            sum+=1; //RtkHealth
            sum+=1; //RtkRate
            sum+=1; //Nsats
            sum+= 1; // BaselineCoordsType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeLastBaselineMs = BinSerialize.ReadUInt(ref buffer);
            Tow = BinSerialize.ReadUInt(ref buffer);
            BaselineAMm = BinSerialize.ReadInt(ref buffer);
            BaselineBMm = BinSerialize.ReadInt(ref buffer);
            BaselineCMm = BinSerialize.ReadInt(ref buffer);
            Accuracy = BinSerialize.ReadUInt(ref buffer);
            IarNumHypotheses = BinSerialize.ReadInt(ref buffer);
            Wn = BinSerialize.ReadUShort(ref buffer);
            RtkReceiverId = (byte)BinSerialize.ReadByte(ref buffer);
            RtkHealth = (byte)BinSerialize.ReadByte(ref buffer);
            RtkRate = (byte)BinSerialize.ReadByte(ref buffer);
            Nsats = (byte)BinSerialize.ReadByte(ref buffer);
            BaselineCoordsType = (RtkBaselineCoordinateSystem)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeLastBaselineMs);
            BinSerialize.WriteUInt(ref buffer,Tow);
            BinSerialize.WriteInt(ref buffer,BaselineAMm);
            BinSerialize.WriteInt(ref buffer,BaselineBMm);
            BinSerialize.WriteInt(ref buffer,BaselineCMm);
            BinSerialize.WriteUInt(ref buffer,Accuracy);
            BinSerialize.WriteInt(ref buffer,IarNumHypotheses);
            BinSerialize.WriteUShort(ref buffer,Wn);
            BinSerialize.WriteByte(ref buffer,(byte)RtkReceiverId);
            BinSerialize.WriteByte(ref buffer,(byte)RtkHealth);
            BinSerialize.WriteByte(ref buffer,(byte)RtkRate);
            BinSerialize.WriteByte(ref buffer,(byte)Nsats);
            BinSerialize.WriteByte(ref buffer,(byte)BaselineCoordsType);
            /* PayloadByteSize = 35 */;
        }
        
        



        /// <summary>
        /// Time since boot of last baseline message received.
        /// OriginName: time_last_baseline_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeLastBaselineMs { get; set; }
        /// <summary>
        /// GPS Time of Week of last baseline
        /// OriginName: tow, Units: ms, IsExtended: false
        /// </summary>
        public uint Tow { get; set; }
        /// <summary>
        /// Current baseline in ECEF x or NED north component.
        /// OriginName: baseline_a_mm, Units: mm, IsExtended: false
        /// </summary>
        public int BaselineAMm { get; set; }
        /// <summary>
        /// Current baseline in ECEF y or NED east component.
        /// OriginName: baseline_b_mm, Units: mm, IsExtended: false
        /// </summary>
        public int BaselineBMm { get; set; }
        /// <summary>
        /// Current baseline in ECEF z or NED down component.
        /// OriginName: baseline_c_mm, Units: mm, IsExtended: false
        /// </summary>
        public int BaselineCMm { get; set; }
        /// <summary>
        /// Current estimate of baseline accuracy.
        /// OriginName: accuracy, Units: , IsExtended: false
        /// </summary>
        public uint Accuracy { get; set; }
        /// <summary>
        /// Current number of integer ambiguity hypotheses.
        /// OriginName: iar_num_hypotheses, Units: , IsExtended: false
        /// </summary>
        public int IarNumHypotheses { get; set; }
        /// <summary>
        /// GPS Week Number of last baseline
        /// OriginName: wn, Units: , IsExtended: false
        /// </summary>
        public ushort Wn { get; set; }
        /// <summary>
        /// Identification of connected RTK receiver.
        /// OriginName: rtk_receiver_id, Units: , IsExtended: false
        /// </summary>
        public byte RtkReceiverId { get; set; }
        /// <summary>
        /// GPS-specific health report for RTK data.
        /// OriginName: rtk_health, Units: , IsExtended: false
        /// </summary>
        public byte RtkHealth { get; set; }
        /// <summary>
        /// Rate of baseline messages being received by GPS
        /// OriginName: rtk_rate, Units: Hz, IsExtended: false
        /// </summary>
        public byte RtkRate { get; set; }
        /// <summary>
        /// Current number of sats used for RTK calculation.
        /// OriginName: nsats, Units: , IsExtended: false
        /// </summary>
        public byte Nsats { get; set; }
        /// <summary>
        /// Coordinate system of baseline
        /// OriginName: baseline_coords_type, Units: , IsExtended: false
        /// </summary>
        public RtkBaselineCoordinateSystem BaselineCoordsType { get; set; }
    }
    /// <summary>
    /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    ///  GPS2_RTK
    /// </summary>
    public class Gps2RtkPacket: PacketV2<Gps2RtkPayload>
    {
	    public const int PacketMessageId = 128;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 226;
        public override bool WrapToV2Extension => false;

        public override Gps2RtkPayload Payload { get; } = new Gps2RtkPayload();

        public override string Name => "GPS2_RTK";
    }

    /// <summary>
    ///  GPS2_RTK
    /// </summary>
    public class Gps2RtkPayload : IPayload
    {
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeLastBaselineMs
            sum+=4; //Tow
            sum+=4; //BaselineAMm
            sum+=4; //BaselineBMm
            sum+=4; //BaselineCMm
            sum+=4; //Accuracy
            sum+=4; //IarNumHypotheses
            sum+=2; //Wn
            sum+=1; //RtkReceiverId
            sum+=1; //RtkHealth
            sum+=1; //RtkRate
            sum+=1; //Nsats
            sum+= 1; // BaselineCoordsType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeLastBaselineMs = BinSerialize.ReadUInt(ref buffer);
            Tow = BinSerialize.ReadUInt(ref buffer);
            BaselineAMm = BinSerialize.ReadInt(ref buffer);
            BaselineBMm = BinSerialize.ReadInt(ref buffer);
            BaselineCMm = BinSerialize.ReadInt(ref buffer);
            Accuracy = BinSerialize.ReadUInt(ref buffer);
            IarNumHypotheses = BinSerialize.ReadInt(ref buffer);
            Wn = BinSerialize.ReadUShort(ref buffer);
            RtkReceiverId = (byte)BinSerialize.ReadByte(ref buffer);
            RtkHealth = (byte)BinSerialize.ReadByte(ref buffer);
            RtkRate = (byte)BinSerialize.ReadByte(ref buffer);
            Nsats = (byte)BinSerialize.ReadByte(ref buffer);
            BaselineCoordsType = (RtkBaselineCoordinateSystem)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeLastBaselineMs);
            BinSerialize.WriteUInt(ref buffer,Tow);
            BinSerialize.WriteInt(ref buffer,BaselineAMm);
            BinSerialize.WriteInt(ref buffer,BaselineBMm);
            BinSerialize.WriteInt(ref buffer,BaselineCMm);
            BinSerialize.WriteUInt(ref buffer,Accuracy);
            BinSerialize.WriteInt(ref buffer,IarNumHypotheses);
            BinSerialize.WriteUShort(ref buffer,Wn);
            BinSerialize.WriteByte(ref buffer,(byte)RtkReceiverId);
            BinSerialize.WriteByte(ref buffer,(byte)RtkHealth);
            BinSerialize.WriteByte(ref buffer,(byte)RtkRate);
            BinSerialize.WriteByte(ref buffer,(byte)Nsats);
            BinSerialize.WriteByte(ref buffer,(byte)BaselineCoordsType);
            /* PayloadByteSize = 35 */;
        }
        
        



        /// <summary>
        /// Time since boot of last baseline message received.
        /// OriginName: time_last_baseline_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeLastBaselineMs { get; set; }
        /// <summary>
        /// GPS Time of Week of last baseline
        /// OriginName: tow, Units: ms, IsExtended: false
        /// </summary>
        public uint Tow { get; set; }
        /// <summary>
        /// Current baseline in ECEF x or NED north component.
        /// OriginName: baseline_a_mm, Units: mm, IsExtended: false
        /// </summary>
        public int BaselineAMm { get; set; }
        /// <summary>
        /// Current baseline in ECEF y or NED east component.
        /// OriginName: baseline_b_mm, Units: mm, IsExtended: false
        /// </summary>
        public int BaselineBMm { get; set; }
        /// <summary>
        /// Current baseline in ECEF z or NED down component.
        /// OriginName: baseline_c_mm, Units: mm, IsExtended: false
        /// </summary>
        public int BaselineCMm { get; set; }
        /// <summary>
        /// Current estimate of baseline accuracy.
        /// OriginName: accuracy, Units: , IsExtended: false
        /// </summary>
        public uint Accuracy { get; set; }
        /// <summary>
        /// Current number of integer ambiguity hypotheses.
        /// OriginName: iar_num_hypotheses, Units: , IsExtended: false
        /// </summary>
        public int IarNumHypotheses { get; set; }
        /// <summary>
        /// GPS Week Number of last baseline
        /// OriginName: wn, Units: , IsExtended: false
        /// </summary>
        public ushort Wn { get; set; }
        /// <summary>
        /// Identification of connected RTK receiver.
        /// OriginName: rtk_receiver_id, Units: , IsExtended: false
        /// </summary>
        public byte RtkReceiverId { get; set; }
        /// <summary>
        /// GPS-specific health report for RTK data.
        /// OriginName: rtk_health, Units: , IsExtended: false
        /// </summary>
        public byte RtkHealth { get; set; }
        /// <summary>
        /// Rate of baseline messages being received by GPS
        /// OriginName: rtk_rate, Units: Hz, IsExtended: false
        /// </summary>
        public byte RtkRate { get; set; }
        /// <summary>
        /// Current number of sats used for RTK calculation.
        /// OriginName: nsats, Units: , IsExtended: false
        /// </summary>
        public byte Nsats { get; set; }
        /// <summary>
        /// Coordinate system of baseline
        /// OriginName: baseline_coords_type, Units: , IsExtended: false
        /// </summary>
        public RtkBaselineCoordinateSystem BaselineCoordsType { get; set; }
    }
    /// <summary>
    /// The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units
    ///  SCALED_IMU3
    /// </summary>
    public class ScaledImu3Packet: PacketV2<ScaledImu3Payload>
    {
	    public const int PacketMessageId = 129;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 46;
        public override bool WrapToV2Extension => false;

        public override ScaledImu3Payload Payload { get; } = new ScaledImu3Payload();

        public override string Name => "SCALED_IMU3";
    }

    /// <summary>
    ///  SCALED_IMU3
    /// </summary>
    public class ScaledImu3Payload : IPayload
    {
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=2; //Xacc
            sum+=2; //Yacc
            sum+=2; //Zacc
            sum+=2; //Xgyro
            sum+=2; //Ygyro
            sum+=2; //Zgyro
            sum+=2; //Xmag
            sum+=2; //Ymag
            sum+=2; //Zmag
            sum+=2; //Temperature
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Xacc = BinSerialize.ReadShort(ref buffer);
            Yacc = BinSerialize.ReadShort(ref buffer);
            Zacc = BinSerialize.ReadShort(ref buffer);
            Xgyro = BinSerialize.ReadShort(ref buffer);
            Ygyro = BinSerialize.ReadShort(ref buffer);
            Zgyro = BinSerialize.ReadShort(ref buffer);
            Xmag = BinSerialize.ReadShort(ref buffer);
            Ymag = BinSerialize.ReadShort(ref buffer);
            Zmag = BinSerialize.ReadShort(ref buffer);
            // extended field 'Temperature' can be empty
            if (buffer.IsEmpty) return;
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteShort(ref buffer,Xacc);
            BinSerialize.WriteShort(ref buffer,Yacc);
            BinSerialize.WriteShort(ref buffer,Zacc);
            BinSerialize.WriteShort(ref buffer,Xgyro);
            BinSerialize.WriteShort(ref buffer,Ygyro);
            BinSerialize.WriteShort(ref buffer,Zgyro);
            BinSerialize.WriteShort(ref buffer,Xmag);
            BinSerialize.WriteShort(ref buffer,Ymag);
            BinSerialize.WriteShort(ref buffer,Zmag);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 24 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// X acceleration
        /// OriginName: xacc, Units: mG, IsExtended: false
        /// </summary>
        public short Xacc { get; set; }
        /// <summary>
        /// Y acceleration
        /// OriginName: yacc, Units: mG, IsExtended: false
        /// </summary>
        public short Yacc { get; set; }
        /// <summary>
        /// Z acceleration
        /// OriginName: zacc, Units: mG, IsExtended: false
        /// </summary>
        public short Zacc { get; set; }
        /// <summary>
        /// Angular speed around X axis
        /// OriginName: xgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Xgyro { get; set; }
        /// <summary>
        /// Angular speed around Y axis
        /// OriginName: ygyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Ygyro { get; set; }
        /// <summary>
        /// Angular speed around Z axis
        /// OriginName: zgyro, Units: mrad/s, IsExtended: false
        /// </summary>
        public short Zgyro { get; set; }
        /// <summary>
        /// X Magnetic field
        /// OriginName: xmag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Xmag { get; set; }
        /// <summary>
        /// Y Magnetic field
        /// OriginName: ymag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Ymag { get; set; }
        /// <summary>
        /// Z Magnetic field
        /// OriginName: zmag, Units: mgauss, IsExtended: false
        /// </summary>
        public short Zmag { get; set; }
        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// OriginName: temperature, Units: cdegC, IsExtended: true
        /// </summary>
        public short Temperature { get; set; }
    }
    /// <summary>
    /// Handshake message to initiate, control and stop image streaming when using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    ///  DATA_TRANSMISSION_HANDSHAKE
    /// </summary>
    public class DataTransmissionHandshakePacket: PacketV2<DataTransmissionHandshakePayload>
    {
	    public const int PacketMessageId = 130;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 29;
        public override bool WrapToV2Extension => false;

        public override DataTransmissionHandshakePayload Payload { get; } = new DataTransmissionHandshakePayload();

        public override string Name => "DATA_TRANSMISSION_HANDSHAKE";
    }

    /// <summary>
    ///  DATA_TRANSMISSION_HANDSHAKE
    /// </summary>
    public class DataTransmissionHandshakePayload : IPayload
    {
        public byte GetMaxByteSize() => 13; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 13; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Size
            sum+=2; //Width
            sum+=2; //Height
            sum+=2; //Packets
            sum+= 1; // Type
            sum+=1; //Payload
            sum+=1; //JpgQuality
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Size = BinSerialize.ReadUInt(ref buffer);
            Width = BinSerialize.ReadUShort(ref buffer);
            Height = BinSerialize.ReadUShort(ref buffer);
            Packets = BinSerialize.ReadUShort(ref buffer);
            Type = (MavlinkDataStreamType)BinSerialize.ReadByte(ref buffer);
            Payload = (byte)BinSerialize.ReadByte(ref buffer);
            JpgQuality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Size);
            BinSerialize.WriteUShort(ref buffer,Width);
            BinSerialize.WriteUShort(ref buffer,Height);
            BinSerialize.WriteUShort(ref buffer,Packets);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Payload);
            BinSerialize.WriteByte(ref buffer,(byte)JpgQuality);
            /* PayloadByteSize = 13 */;
        }
        
        



        /// <summary>
        /// total data size (set on ACK only).
        /// OriginName: size, Units: bytes, IsExtended: false
        /// </summary>
        public uint Size { get; set; }
        /// <summary>
        /// Width of a matrix or image.
        /// OriginName: width, Units: , IsExtended: false
        /// </summary>
        public ushort Width { get; set; }
        /// <summary>
        /// Height of a matrix or image.
        /// OriginName: height, Units: , IsExtended: false
        /// </summary>
        public ushort Height { get; set; }
        /// <summary>
        /// Number of packets being sent (set on ACK only).
        /// OriginName: packets, Units: , IsExtended: false
        /// </summary>
        public ushort Packets { get; set; }
        /// <summary>
        /// Type of requested/acknowledged data.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public MavlinkDataStreamType Type { get; set; }
        /// <summary>
        /// Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only).
        /// OriginName: payload, Units: bytes, IsExtended: false
        /// </summary>
        public byte Payload { get; set; }
        /// <summary>
        /// JPEG quality. Values: [1-100].
        /// OriginName: jpg_quality, Units: %, IsExtended: false
        /// </summary>
        public byte JpgQuality { get; set; }
    }
    /// <summary>
    /// Data packet for images sent using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    ///  ENCAPSULATED_DATA
    /// </summary>
    public class EncapsulatedDataPacket: PacketV2<EncapsulatedDataPayload>
    {
	    public const int PacketMessageId = 131;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 223;
        public override bool WrapToV2Extension => false;

        public override EncapsulatedDataPayload Payload { get; } = new EncapsulatedDataPayload();

        public override string Name => "ENCAPSULATED_DATA";
    }

    /// <summary>
    ///  ENCAPSULATED_DATA
    /// </summary>
    public class EncapsulatedDataPayload : IPayload
    {
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Seqnr
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Seqnr = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/253 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Seqnr);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 255 */;
        }
        
        



        /// <summary>
        /// sequence number (starting with 0 on every transmission)
        /// OriginName: seqnr, Units: , IsExtended: false
        /// </summary>
        public ushort Seqnr { get; set; }
        /// <summary>
        /// image data bytes
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 253;
        public byte[] Data { get; set; } = new byte[253];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 253;
    }
    /// <summary>
    /// Distance sensor information for an onboard rangefinder.
    ///  DISTANCE_SENSOR
    /// </summary>
    public class DistanceSensorPacket: PacketV2<DistanceSensorPayload>
    {
	    public const int PacketMessageId = 132;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 85;
        public override bool WrapToV2Extension => false;

        public override DistanceSensorPayload Payload { get; } = new DistanceSensorPayload();

        public override string Name => "DISTANCE_SENSOR";
    }

    /// <summary>
    ///  DISTANCE_SENSOR
    /// </summary>
    public class DistanceSensorPayload : IPayload
    {
        public byte GetMaxByteSize() => 39; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 39; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=2; //MinDistance
            sum+=2; //MaxDistance
            sum+=2; //CurrentDistance
            sum+= 1; // Type
            sum+=1; //Id
            sum+= 1; // Orientation
            sum+=1; //Covariance
            sum+=4; //HorizontalFov
            sum+=4; //VerticalFov
            sum+=Quaternion.Length * 4; //Quaternion
            sum+=1; //SignalQuality
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            MinDistance = BinSerialize.ReadUShort(ref buffer);
            MaxDistance = BinSerialize.ReadUShort(ref buffer);
            CurrentDistance = BinSerialize.ReadUShort(ref buffer);
            Type = (MavDistanceSensor)BinSerialize.ReadByte(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            Orientation = (MavSensorOrientation)BinSerialize.ReadByte(ref buffer);
            Covariance = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'HorizontalFov' can be empty
            if (buffer.IsEmpty) return;
            HorizontalFov = BinSerialize.ReadFloat(ref buffer);
            // extended field 'VerticalFov' can be empty
            if (buffer.IsEmpty) return;
            VerticalFov = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Quaternion' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Quaternion[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'SignalQuality' can be empty
            if (buffer.IsEmpty) return;
            SignalQuality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUShort(ref buffer,MinDistance);
            BinSerialize.WriteUShort(ref buffer,MaxDistance);
            BinSerialize.WriteUShort(ref buffer,CurrentDistance);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteByte(ref buffer,(byte)Orientation);
            BinSerialize.WriteByte(ref buffer,(byte)Covariance);
            BinSerialize.WriteFloat(ref buffer,HorizontalFov);
            BinSerialize.WriteFloat(ref buffer,VerticalFov);
            for(var i=0;i<Quaternion.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Quaternion[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)SignalQuality);
            /* PayloadByteSize = 39 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Minimum distance the sensor can measure
        /// OriginName: min_distance, Units: cm, IsExtended: false
        /// </summary>
        public ushort MinDistance { get; set; }
        /// <summary>
        /// Maximum distance the sensor can measure
        /// OriginName: max_distance, Units: cm, IsExtended: false
        /// </summary>
        public ushort MaxDistance { get; set; }
        /// <summary>
        /// Current distance reading
        /// OriginName: current_distance, Units: cm, IsExtended: false
        /// </summary>
        public ushort CurrentDistance { get; set; }
        /// <summary>
        /// Type of distance sensor.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public MavDistanceSensor Type { get; set; }
        /// <summary>
        /// Onboard ID of the sensor
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public byte Id { get; set; }
        /// <summary>
        /// Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270
        /// OriginName: orientation, Units: , IsExtended: false
        /// </summary>
        public MavSensorOrientation Orientation { get; set; }
        /// <summary>
        /// Measurement variance. Max standard deviation is 6cm. UINT8_MAX if unknown.
        /// OriginName: covariance, Units: cm^2, IsExtended: false
        /// </summary>
        public byte Covariance { get; set; }
        /// <summary>
        /// Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
        /// OriginName: horizontal_fov, Units: rad, IsExtended: true
        /// </summary>
        public float HorizontalFov { get; set; }
        /// <summary>
        /// Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
        /// OriginName: vertical_fov, Units: rad, IsExtended: true
        /// </summary>
        public float VerticalFov { get; set; }
        /// <summary>
        /// Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid."
        /// OriginName: quaternion, Units: , IsExtended: true
        /// </summary>
        public const int QuaternionMaxItemsCount = 4;
        public float[] Quaternion { get; } = new float[4];
        /// <summary>
        /// Signal quality of the sensor. Specific to each sensor type, representing the relation of the signal strength with the target reflectivity, distance, size or aspect, but normalised as a percentage. 0 = unknown/unset signal quality, 1 = invalid signal, 100 = perfect signal.
        /// OriginName: signal_quality, Units: %, IsExtended: true
        /// </summary>
        public byte SignalQuality { get; set; }
    }
    /// <summary>
    /// Request for terrain data and terrain status. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    ///  TERRAIN_REQUEST
    /// </summary>
    public class TerrainRequestPacket: PacketV2<TerrainRequestPayload>
    {
	    public const int PacketMessageId = 133;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 6;
        public override bool WrapToV2Extension => false;

        public override TerrainRequestPayload Payload { get; } = new TerrainRequestPayload();

        public override string Name => "TERRAIN_REQUEST";
    }

    /// <summary>
    ///  TERRAIN_REQUEST
    /// </summary>
    public class TerrainRequestPayload : IPayload
    {
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Mask
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=2; //GridSpacing
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Mask = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            GridSpacing = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Mask);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteUShort(ref buffer,GridSpacing);
            /* PayloadByteSize = 18 */;
        }
        
        



        /// <summary>
        /// Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)
        /// OriginName: mask, Units: , IsExtended: false
        /// </summary>
        public ulong Mask { get; set; }
        /// <summary>
        /// Latitude of SW corner of first grid
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude of SW corner of first grid
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Grid spacing
        /// OriginName: grid_spacing, Units: m, IsExtended: false
        /// </summary>
        public ushort GridSpacing { get; set; }
    }
    /// <summary>
    /// Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    ///  TERRAIN_DATA
    /// </summary>
    public class TerrainDataPacket: PacketV2<TerrainDataPayload>
    {
	    public const int PacketMessageId = 134;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 229;
        public override bool WrapToV2Extension => false;

        public override TerrainDataPayload Payload { get; } = new TerrainDataPayload();

        public override string Name => "TERRAIN_DATA";
    }

    /// <summary>
    ///  TERRAIN_DATA
    /// </summary>
    public class TerrainDataPayload : IPayload
    {
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=2; //GridSpacing
            sum+=Data.Length * 2; //Data
            sum+=1; //Gridbit
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            GridSpacing = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/43 - payloadSize - /*ExtendedFieldsLength*/0)/2 /*FieldTypeByteSize*/));
            Data = new short[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = BinSerialize.ReadShort(ref buffer);
            }
            Gridbit = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteUShort(ref buffer,GridSpacing);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteShort(ref buffer,Data[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Gridbit);
            /* PayloadByteSize = 43 */;
        }
        
        



        /// <summary>
        /// Latitude of SW corner of first grid
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude of SW corner of first grid
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Grid spacing
        /// OriginName: grid_spacing, Units: m, IsExtended: false
        /// </summary>
        public ushort GridSpacing { get; set; }
        /// <summary>
        /// Terrain data MSL
        /// OriginName: data, Units: m, IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 16;
        public short[] Data { get; set; } = new short[16];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 16;
        /// <summary>
        /// bit within the terrain request mask
        /// OriginName: gridbit, Units: , IsExtended: false
        /// </summary>
        public byte Gridbit { get; set; }
    }
    /// <summary>
    /// Request that the vehicle report terrain height at the given location (expected response is a TERRAIN_REPORT). Used by GCS to check if vehicle has all terrain data needed for a mission.
    ///  TERRAIN_CHECK
    /// </summary>
    public class TerrainCheckPacket: PacketV2<TerrainCheckPayload>
    {
	    public const int PacketMessageId = 135;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 203;
        public override bool WrapToV2Extension => false;

        public override TerrainCheckPayload Payload { get; } = new TerrainCheckPayload();

        public override string Name => "TERRAIN_CHECK";
    }

    /// <summary>
    ///  TERRAIN_CHECK
    /// </summary>
    public class TerrainCheckPayload : IPayload
    {
        public byte GetMaxByteSize() => 8; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 8; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Lat
            sum+=4; //Lon
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            /* PayloadByteSize = 8 */;
        }
        
        



        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
    }
    /// <summary>
    /// Streamed from drone to report progress of terrain map download (initiated by TERRAIN_REQUEST), or sent as a response to a TERRAIN_CHECK request. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    ///  TERRAIN_REPORT
    /// </summary>
    public class TerrainReportPacket: PacketV2<TerrainReportPayload>
    {
	    public const int PacketMessageId = 136;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 1;
        public override bool WrapToV2Extension => false;

        public override TerrainReportPayload Payload { get; } = new TerrainReportPayload();

        public override string Name => "TERRAIN_REPORT";
    }

    /// <summary>
    ///  TERRAIN_REPORT
    /// </summary>
    public class TerrainReportPayload : IPayload
    {
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //TerrainHeight
            sum+=4; //CurrentHeight
            sum+=2; //Spacing
            sum+=2; //Pending
            sum+=2; //Loaded
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            TerrainHeight = BinSerialize.ReadFloat(ref buffer);
            CurrentHeight = BinSerialize.ReadFloat(ref buffer);
            Spacing = BinSerialize.ReadUShort(ref buffer);
            Pending = BinSerialize.ReadUShort(ref buffer);
            Loaded = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,TerrainHeight);
            BinSerialize.WriteFloat(ref buffer,CurrentHeight);
            BinSerialize.WriteUShort(ref buffer,Spacing);
            BinSerialize.WriteUShort(ref buffer,Pending);
            BinSerialize.WriteUShort(ref buffer,Loaded);
            /* PayloadByteSize = 22 */;
        }
        
        



        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Terrain height MSL
        /// OriginName: terrain_height, Units: m, IsExtended: false
        /// </summary>
        public float TerrainHeight { get; set; }
        /// <summary>
        /// Current vehicle height above lat/lon terrain height
        /// OriginName: current_height, Units: m, IsExtended: false
        /// </summary>
        public float CurrentHeight { get; set; }
        /// <summary>
        /// grid spacing (zero if terrain at this location unavailable)
        /// OriginName: spacing, Units: , IsExtended: false
        /// </summary>
        public ushort Spacing { get; set; }
        /// <summary>
        /// Number of 4x4 terrain blocks waiting to be received or read from disk
        /// OriginName: pending, Units: , IsExtended: false
        /// </summary>
        public ushort Pending { get; set; }
        /// <summary>
        /// Number of 4x4 terrain blocks in memory
        /// OriginName: loaded, Units: , IsExtended: false
        /// </summary>
        public ushort Loaded { get; set; }
    }
    /// <summary>
    /// Barometer readings for 2nd barometer
    ///  SCALED_PRESSURE2
    /// </summary>
    public class ScaledPressure2Packet: PacketV2<ScaledPressure2Payload>
    {
	    public const int PacketMessageId = 137;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 195;
        public override bool WrapToV2Extension => false;

        public override ScaledPressure2Payload Payload { get; } = new ScaledPressure2Payload();

        public override string Name => "SCALED_PRESSURE2";
    }

    /// <summary>
    ///  SCALED_PRESSURE2
    /// </summary>
    public class ScaledPressure2Payload : IPayload
    {
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //PressAbs
            sum+=4; //PressDiff
            sum+=2; //Temperature
            sum+=2; //TemperaturePressDiff
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            PressAbs = BinSerialize.ReadFloat(ref buffer);
            PressDiff = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            // extended field 'TemperaturePressDiff' can be empty
            if (buffer.IsEmpty) return;
            TemperaturePressDiff = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,PressAbs);
            BinSerialize.WriteFloat(ref buffer,PressDiff);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteShort(ref buffer,TemperaturePressDiff);
            /* PayloadByteSize = 16 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: press_abs, Units: hPa, IsExtended: false
        /// </summary>
        public float PressAbs { get; set; }
        /// <summary>
        /// Differential pressure
        /// OriginName: press_diff, Units: hPa, IsExtended: false
        /// </summary>
        public float PressDiff { get; set; }
        /// <summary>
        /// Absolute pressure temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
        /// <summary>
        /// Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.
        /// OriginName: temperature_press_diff, Units: cdegC, IsExtended: true
        /// </summary>
        public short TemperaturePressDiff { get; set; }
    }
    /// <summary>
    /// Motion capture attitude and position
    ///  ATT_POS_MOCAP
    /// </summary>
    public class AttPosMocapPacket: PacketV2<AttPosMocapPayload>
    {
	    public const int PacketMessageId = 138;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 109;
        public override bool WrapToV2Extension => false;

        public override AttPosMocapPayload Payload { get; } = new AttPosMocapPayload();

        public override string Name => "ATT_POS_MOCAP";
    }

    /// <summary>
    ///  ATT_POS_MOCAP
    /// </summary>
    public class AttPosMocapPayload : IPayload
    {
        public byte GetMaxByteSize() => 120; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 120; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=Q.Length * 4; //Q
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=Covariance.Length * 4; //Covariance
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/120 - payloadSize - /*ExtendedFieldsLength*/84)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Covariance' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                Covariance[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Covariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Covariance[i]);
            }
            /* PayloadByteSize = 120 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X position (NED)
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y position (NED)
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z position (NED)
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: covariance, Units: , IsExtended: true
        /// </summary>
        public const int CovarianceMaxItemsCount = 21;
        public float[] Covariance { get; } = new float[21];
    }
    /// <summary>
    /// Set the vehicle attitude and body angular rates.
    ///  SET_ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class SetActuatorControlTargetPacket: PacketV2<SetActuatorControlTargetPayload>
    {
	    public const int PacketMessageId = 139;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 168;
        public override bool WrapToV2Extension => false;

        public override SetActuatorControlTargetPayload Payload { get; } = new SetActuatorControlTargetPayload();

        public override string Name => "SET_ACTUATOR_CONTROL_TARGET";
    }

    /// <summary>
    ///  SET_ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class SetActuatorControlTargetPayload : IPayload
    {
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=Controls.Length * 4; //Controls
            sum+=1; //GroupMlx
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/43 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Controls = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Controls[i] = BinSerialize.ReadFloat(ref buffer);
            }
            GroupMlx = (byte)BinSerialize.ReadByte(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Controls.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Controls[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)GroupMlx);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 43 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// OriginName: controls, Units: , IsExtended: false
        /// </summary>
        public const int ControlsMaxItemsCount = 8;
        public float[] Controls { get; set; } = new float[8];
        [Obsolete("This method is deprecated. Use GetControlsMaxItemsCount instead.")]
        public byte GetControlsMaxItemsCount() => 8;
        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// OriginName: group_mlx, Units: , IsExtended: false
        /// </summary>
        public byte GroupMlx { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Set the vehicle attitude and body angular rates.
    ///  ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class ActuatorControlTargetPacket: PacketV2<ActuatorControlTargetPayload>
    {
	    public const int PacketMessageId = 140;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 181;
        public override bool WrapToV2Extension => false;

        public override ActuatorControlTargetPayload Payload { get; } = new ActuatorControlTargetPayload();

        public override string Name => "ACTUATOR_CONTROL_TARGET";
    }

    /// <summary>
    ///  ACTUATOR_CONTROL_TARGET
    /// </summary>
    public class ActuatorControlTargetPayload : IPayload
    {
        public byte GetMaxByteSize() => 41; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 41; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=Controls.Length * 4; //Controls
            sum+=1; //GroupMlx
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/41 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Controls = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Controls[i] = BinSerialize.ReadFloat(ref buffer);
            }
            GroupMlx = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Controls.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Controls[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)GroupMlx);
            /* PayloadByteSize = 41 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// OriginName: controls, Units: , IsExtended: false
        /// </summary>
        public const int ControlsMaxItemsCount = 8;
        public float[] Controls { get; set; } = new float[8];
        [Obsolete("This method is deprecated. Use GetControlsMaxItemsCount instead.")]
        public byte GetControlsMaxItemsCount() => 8;
        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// OriginName: group_mlx, Units: , IsExtended: false
        /// </summary>
        public byte GroupMlx { get; set; }
    }
    /// <summary>
    /// The current system altitude.
    ///  ALTITUDE
    /// </summary>
    public class AltitudePacket: PacketV2<AltitudePayload>
    {
	    public const int PacketMessageId = 141;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 47;
        public override bool WrapToV2Extension => false;

        public override AltitudePayload Payload { get; } = new AltitudePayload();

        public override string Name => "ALTITUDE";
    }

    /// <summary>
    ///  ALTITUDE
    /// </summary>
    public class AltitudePayload : IPayload
    {
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //AltitudeMonotonic
            sum+=4; //AltitudeAmsl
            sum+=4; //AltitudeLocal
            sum+=4; //AltitudeRelative
            sum+=4; //AltitudeTerrain
            sum+=4; //BottomClearance
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            AltitudeMonotonic = BinSerialize.ReadFloat(ref buffer);
            AltitudeAmsl = BinSerialize.ReadFloat(ref buffer);
            AltitudeLocal = BinSerialize.ReadFloat(ref buffer);
            AltitudeRelative = BinSerialize.ReadFloat(ref buffer);
            AltitudeTerrain = BinSerialize.ReadFloat(ref buffer);
            BottomClearance = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,AltitudeMonotonic);
            BinSerialize.WriteFloat(ref buffer,AltitudeAmsl);
            BinSerialize.WriteFloat(ref buffer,AltitudeLocal);
            BinSerialize.WriteFloat(ref buffer,AltitudeRelative);
            BinSerialize.WriteFloat(ref buffer,AltitudeTerrain);
            BinSerialize.WriteFloat(ref buffer,BottomClearance);
            /* PayloadByteSize = 32 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.
        /// OriginName: altitude_monotonic, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeMonotonic { get; set; }
        /// <summary>
        /// This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.
        /// OriginName: altitude_amsl, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeAmsl { get; set; }
        /// <summary>
        /// This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.
        /// OriginName: altitude_local, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeLocal { get; set; }
        /// <summary>
        /// This is the altitude above the home position. It resets on each change of the current home position.
        /// OriginName: altitude_relative, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeRelative { get; set; }
        /// <summary>
        /// This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.
        /// OriginName: altitude_terrain, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeTerrain { get; set; }
        /// <summary>
        /// This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.
        /// OriginName: bottom_clearance, Units: m, IsExtended: false
        /// </summary>
        public float BottomClearance { get; set; }
    }
    /// <summary>
    /// The autopilot is requesting a resource (file, binary, other type of data)
    ///  RESOURCE_REQUEST
    /// </summary>
    public class ResourceRequestPacket: PacketV2<ResourceRequestPayload>
    {
	    public const int PacketMessageId = 142;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 72;
        public override bool WrapToV2Extension => false;

        public override ResourceRequestPayload Payload { get; } = new ResourceRequestPayload();

        public override string Name => "RESOURCE_REQUEST";
    }

    /// <summary>
    ///  RESOURCE_REQUEST
    /// </summary>
    public class ResourceRequestPayload : IPayload
    {
        public byte GetMaxByteSize() => 243; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 243; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //RequestId
            sum+=1; //UriType
            sum+=Uri.Length; //Uri
            sum+=1; //TransferType
            sum+=Storage.Length; //Storage
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            RequestId = (byte)BinSerialize.ReadByte(ref buffer);
            UriType = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/120 - Math.Max(0,((/*PayloadByteSize*/243 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Uri = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Uri[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            TransferType = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 120;
            for(var i=0;i<arraySize;i++)
            {
                Storage[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)RequestId);
            BinSerialize.WriteByte(ref buffer,(byte)UriType);
            for(var i=0;i<Uri.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Uri[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TransferType);
            for(var i=0;i<Storage.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Storage[i]);
            }
            /* PayloadByteSize = 243 */;
        }
        
        



        /// <summary>
        /// Request ID. This ID should be re-used when sending back URI contents
        /// OriginName: request_id, Units: , IsExtended: false
        /// </summary>
        public byte RequestId { get; set; }
        /// <summary>
        /// The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary
        /// OriginName: uri_type, Units: , IsExtended: false
        /// </summary>
        public byte UriType { get; set; }
        /// <summary>
        /// The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)
        /// OriginName: uri, Units: , IsExtended: false
        /// </summary>
        public const int UriMaxItemsCount = 120;
        public byte[] Uri { get; set; } = new byte[120];
        [Obsolete("This method is deprecated. Use GetUriMaxItemsCount instead.")]
        public byte GetUriMaxItemsCount() => 120;
        /// <summary>
        /// The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.
        /// OriginName: transfer_type, Units: , IsExtended: false
        /// </summary>
        public byte TransferType { get; set; }
        /// <summary>
        /// The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).
        /// OriginName: storage, Units: , IsExtended: false
        /// </summary>
        public const int StorageMaxItemsCount = 120;
        public byte[] Storage { get; } = new byte[120];
    }
    /// <summary>
    /// Barometer readings for 3rd barometer
    ///  SCALED_PRESSURE3
    /// </summary>
    public class ScaledPressure3Packet: PacketV2<ScaledPressure3Payload>
    {
	    public const int PacketMessageId = 143;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 131;
        public override bool WrapToV2Extension => false;

        public override ScaledPressure3Payload Payload { get; } = new ScaledPressure3Payload();

        public override string Name => "SCALED_PRESSURE3";
    }

    /// <summary>
    ///  SCALED_PRESSURE3
    /// </summary>
    public class ScaledPressure3Payload : IPayload
    {
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //PressAbs
            sum+=4; //PressDiff
            sum+=2; //Temperature
            sum+=2; //TemperaturePressDiff
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            PressAbs = BinSerialize.ReadFloat(ref buffer);
            PressDiff = BinSerialize.ReadFloat(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            // extended field 'TemperaturePressDiff' can be empty
            if (buffer.IsEmpty) return;
            TemperaturePressDiff = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,PressAbs);
            BinSerialize.WriteFloat(ref buffer,PressDiff);
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteShort(ref buffer,TemperaturePressDiff);
            /* PayloadByteSize = 16 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Absolute pressure
        /// OriginName: press_abs, Units: hPa, IsExtended: false
        /// </summary>
        public float PressAbs { get; set; }
        /// <summary>
        /// Differential pressure
        /// OriginName: press_diff, Units: hPa, IsExtended: false
        /// </summary>
        public float PressDiff { get; set; }
        /// <summary>
        /// Absolute pressure temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
        /// <summary>
        /// Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC.
        /// OriginName: temperature_press_diff, Units: cdegC, IsExtended: true
        /// </summary>
        public short TemperaturePressDiff { get; set; }
    }
    /// <summary>
    /// Current motion information from a designated system
    ///  FOLLOW_TARGET
    /// </summary>
    public class FollowTargetPacket: PacketV2<FollowTargetPayload>
    {
	    public const int PacketMessageId = 144;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 127;
        public override bool WrapToV2Extension => false;

        public override FollowTargetPayload Payload { get; } = new FollowTargetPayload();

        public override string Name => "FOLLOW_TARGET";
    }

    /// <summary>
    ///  FOLLOW_TARGET
    /// </summary>
    public class FollowTargetPayload : IPayload
    {
        public byte GetMaxByteSize() => 93; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 93; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Timestamp
            sum+=8; //CustomState
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=Vel.Length * 4; //Vel
            sum+=Acc.Length * 4; //Acc
            sum+=AttitudeQ.Length * 4; //AttitudeQ
            sum+=Rates.Length * 4; //Rates
            sum+=PositionCov.Length * 4; //PositionCov
            sum+=1; //EstCapabilities
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Timestamp = BinSerialize.ReadULong(ref buffer);
            CustomState = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                Vel[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                Acc[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/93 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            AttitudeQ = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                AttitudeQ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                Rates[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                PositionCov[i] = BinSerialize.ReadFloat(ref buffer);
            }
            EstCapabilities = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Timestamp);
            BinSerialize.WriteULong(ref buffer,CustomState);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            for(var i=0;i<Vel.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Vel[i]);
            }
            for(var i=0;i<Acc.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Acc[i]);
            }
            for(var i=0;i<AttitudeQ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AttitudeQ[i]);
            }
            for(var i=0;i<Rates.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Rates[i]);
            }
            for(var i=0;i<PositionCov.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PositionCov[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)EstCapabilities);
            /* PayloadByteSize = 93 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: timestamp, Units: ms, IsExtended: false
        /// </summary>
        public ulong Timestamp { get; set; }
        /// <summary>
        /// button states or switches of a tracker device
        /// OriginName: custom_state, Units: , IsExtended: false
        /// </summary>
        public ulong CustomState { get; set; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (MSL)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public float Alt { get; set; }
        /// <summary>
        /// target velocity (0,0,0) for unknown
        /// OriginName: vel, Units: m/s, IsExtended: false
        /// </summary>
        public const int VelMaxItemsCount = 3;
        public float[] Vel { get; } = new float[3];
        /// <summary>
        /// linear target acceleration (0,0,0) for unknown
        /// OriginName: acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public const int AccMaxItemsCount = 3;
        public float[] Acc { get; } = new float[3];
        /// <summary>
        /// (0 0 0 0 for unknown)
        /// OriginName: attitude_q, Units: , IsExtended: false
        /// </summary>
        public const int AttitudeQMaxItemsCount = 4;
        public float[] AttitudeQ { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetAttitudeQMaxItemsCount instead.")]
        public byte GetAttitudeQMaxItemsCount() => 4;
        /// <summary>
        /// (0 0 0 for unknown)
        /// OriginName: rates, Units: , IsExtended: false
        /// </summary>
        public const int RatesMaxItemsCount = 3;
        public float[] Rates { get; } = new float[3];
        /// <summary>
        /// eph epv
        /// OriginName: position_cov, Units: , IsExtended: false
        /// </summary>
        public const int PositionCovMaxItemsCount = 3;
        public float[] PositionCov { get; } = new float[3];
        /// <summary>
        /// bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)
        /// OriginName: est_capabilities, Units: , IsExtended: false
        /// </summary>
        public byte EstCapabilities { get; set; }
    }
    /// <summary>
    /// The smoothed, monotonic system state used to feed the control loops of the system.
    ///  CONTROL_SYSTEM_STATE
    /// </summary>
    public class ControlSystemStatePacket: PacketV2<ControlSystemStatePayload>
    {
	    public const int PacketMessageId = 146;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 103;
        public override bool WrapToV2Extension => false;

        public override ControlSystemStatePayload Payload { get; } = new ControlSystemStatePayload();

        public override string Name => "CONTROL_SYSTEM_STATE";
    }

    /// <summary>
    ///  CONTROL_SYSTEM_STATE
    /// </summary>
    public class ControlSystemStatePayload : IPayload
    {
        public byte GetMaxByteSize() => 100; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 100; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //XAcc
            sum+=4; //YAcc
            sum+=4; //ZAcc
            sum+=4; //XVel
            sum+=4; //YVel
            sum+=4; //ZVel
            sum+=4; //XPos
            sum+=4; //YPos
            sum+=4; //ZPos
            sum+=4; //Airspeed
            sum+=VelVariance.Length * 4; //VelVariance
            sum+=PosVariance.Length * 4; //PosVariance
            sum+=Q.Length * 4; //Q
            sum+=4; //RollRate
            sum+=4; //PitchRate
            sum+=4; //YawRate
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            XAcc = BinSerialize.ReadFloat(ref buffer);
            YAcc = BinSerialize.ReadFloat(ref buffer);
            ZAcc = BinSerialize.ReadFloat(ref buffer);
            XVel = BinSerialize.ReadFloat(ref buffer);
            YVel = BinSerialize.ReadFloat(ref buffer);
            ZVel = BinSerialize.ReadFloat(ref buffer);
            XPos = BinSerialize.ReadFloat(ref buffer);
            YPos = BinSerialize.ReadFloat(ref buffer);
            ZPos = BinSerialize.ReadFloat(ref buffer);
            Airspeed = BinSerialize.ReadFloat(ref buffer);
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                VelVariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 3;
            for(var i=0;i<arraySize;i++)
            {
                PosVariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/100 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            RollRate = BinSerialize.ReadFloat(ref buffer);
            PitchRate = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,XAcc);
            BinSerialize.WriteFloat(ref buffer,YAcc);
            BinSerialize.WriteFloat(ref buffer,ZAcc);
            BinSerialize.WriteFloat(ref buffer,XVel);
            BinSerialize.WriteFloat(ref buffer,YVel);
            BinSerialize.WriteFloat(ref buffer,ZVel);
            BinSerialize.WriteFloat(ref buffer,XPos);
            BinSerialize.WriteFloat(ref buffer,YPos);
            BinSerialize.WriteFloat(ref buffer,ZPos);
            BinSerialize.WriteFloat(ref buffer,Airspeed);
            for(var i=0;i<VelVariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelVariance[i]);
            }
            for(var i=0;i<PosVariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosVariance[i]);
            }
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,RollRate);
            BinSerialize.WriteFloat(ref buffer,PitchRate);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            /* PayloadByteSize = 100 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X acceleration in body frame
        /// OriginName: x_acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float XAcc { get; set; }
        /// <summary>
        /// Y acceleration in body frame
        /// OriginName: y_acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float YAcc { get; set; }
        /// <summary>
        /// Z acceleration in body frame
        /// OriginName: z_acc, Units: m/s/s, IsExtended: false
        /// </summary>
        public float ZAcc { get; set; }
        /// <summary>
        /// X velocity in body frame
        /// OriginName: x_vel, Units: m/s, IsExtended: false
        /// </summary>
        public float XVel { get; set; }
        /// <summary>
        /// Y velocity in body frame
        /// OriginName: y_vel, Units: m/s, IsExtended: false
        /// </summary>
        public float YVel { get; set; }
        /// <summary>
        /// Z velocity in body frame
        /// OriginName: z_vel, Units: m/s, IsExtended: false
        /// </summary>
        public float ZVel { get; set; }
        /// <summary>
        /// X position in local frame
        /// OriginName: x_pos, Units: m, IsExtended: false
        /// </summary>
        public float XPos { get; set; }
        /// <summary>
        /// Y position in local frame
        /// OriginName: y_pos, Units: m, IsExtended: false
        /// </summary>
        public float YPos { get; set; }
        /// <summary>
        /// Z position in local frame
        /// OriginName: z_pos, Units: m, IsExtended: false
        /// </summary>
        public float ZPos { get; set; }
        /// <summary>
        /// Airspeed, set to -1 if unknown
        /// OriginName: airspeed, Units: m/s, IsExtended: false
        /// </summary>
        public float Airspeed { get; set; }
        /// <summary>
        /// Variance of body velocity estimate
        /// OriginName: vel_variance, Units: , IsExtended: false
        /// </summary>
        public const int VelVarianceMaxItemsCount = 3;
        public float[] VelVariance { get; } = new float[3];
        /// <summary>
        /// Variance in local position
        /// OriginName: pos_variance, Units: , IsExtended: false
        /// </summary>
        public const int PosVarianceMaxItemsCount = 3;
        public float[] PosVariance { get; } = new float[3];
        /// <summary>
        /// The attitude, represented as Quaternion
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Angular rate in roll axis
        /// OriginName: roll_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float RollRate { get; set; }
        /// <summary>
        /// Angular rate in pitch axis
        /// OriginName: pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float PitchRate { get; set; }
        /// <summary>
        /// Angular rate in yaw axis
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float YawRate { get; set; }
    }
    /// <summary>
    /// Battery information. Updates GCS with flight controller battery status. Smart batteries also use this message, but may additionally send SMART_BATTERY_INFO.
    ///  BATTERY_STATUS
    /// </summary>
    public class BatteryStatusPacket: PacketV2<BatteryStatusPayload>
    {
	    public const int PacketMessageId = 147;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 154;
        public override bool WrapToV2Extension => false;

        public override BatteryStatusPayload Payload { get; } = new BatteryStatusPayload();

        public override string Name => "BATTERY_STATUS";
    }

    /// <summary>
    ///  BATTERY_STATUS
    /// </summary>
    public class BatteryStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //CurrentConsumed
            sum+=4; //EnergyConsumed
            sum+=2; //Temperature
            sum+=Voltages.Length * 2; //Voltages
            sum+=2; //CurrentBattery
            sum+=1; //Id
            sum+= 1; // BatteryFunction
            sum+= 1; // Type
            sum+=1; //BatteryRemaining
            sum+=4; //TimeRemaining
            sum+= 1; // ChargeState
            sum+=VoltagesExt.Length * 2; //VoltagesExt
            sum+= 1; // Mode
            sum+= 4; // FaultBitmask
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            CurrentConsumed = BinSerialize.ReadInt(ref buffer);
            EnergyConsumed = BinSerialize.ReadInt(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/54 - payloadSize - /*ExtendedFieldsLength*/18)/2 /*FieldTypeByteSize*/));
            Voltages = new ushort[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Voltages[i] = BinSerialize.ReadUShort(ref buffer);
            }
            CurrentBattery = BinSerialize.ReadShort(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            BatteryFunction = (MavBatteryFunction)BinSerialize.ReadByte(ref buffer);
            Type = (MavBatteryType)BinSerialize.ReadByte(ref buffer);
            BatteryRemaining = (sbyte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TimeRemaining' can be empty
            if (buffer.IsEmpty) return;
            TimeRemaining = BinSerialize.ReadInt(ref buffer);
            // extended field 'ChargeState' can be empty
            if (buffer.IsEmpty) return;
            ChargeState = (MavBatteryChargeState)BinSerialize.ReadByte(ref buffer);
            // extended field 'VoltagesExt' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                VoltagesExt[i] = BinSerialize.ReadUShort(ref buffer);
            }
            // extended field 'Mode' can be empty
            if (buffer.IsEmpty) return;
            Mode = (MavBatteryMode)BinSerialize.ReadByte(ref buffer);
            // extended field 'FaultBitmask' can be empty
            if (buffer.IsEmpty) return;
            FaultBitmask = (MavBatteryFault)BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,CurrentConsumed);
            BinSerialize.WriteInt(ref buffer,EnergyConsumed);
            BinSerialize.WriteShort(ref buffer,Temperature);
            for(var i=0;i<Voltages.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,Voltages[i]);
            }
            BinSerialize.WriteShort(ref buffer,CurrentBattery);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryFunction);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryRemaining);
            BinSerialize.WriteInt(ref buffer,TimeRemaining);
            BinSerialize.WriteByte(ref buffer,(byte)ChargeState);
            for(var i=0;i<VoltagesExt.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,VoltagesExt[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteUInt(ref buffer,(uint)FaultBitmask);
            /* PayloadByteSize = 54 */;
        }
        
        



        /// <summary>
        /// Consumed charge, -1: autopilot does not provide consumption estimate
        /// OriginName: current_consumed, Units: mAh, IsExtended: false
        /// </summary>
        public int CurrentConsumed { get; set; }
        /// <summary>
        /// Consumed energy, -1: autopilot does not provide energy consumption estimate
        /// OriginName: energy_consumed, Units: hJ, IsExtended: false
        /// </summary>
        public int EnergyConsumed { get; set; }
        /// <summary>
        /// Temperature of the battery. INT16_MAX for unknown temperature.
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
        /// <summary>
        /// Battery voltage of cells 1 to 10 (see voltages_ext for cells 11-14). Cells in this field above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1).
        /// OriginName: voltages, Units: mV, IsExtended: false
        /// </summary>
        public const int VoltagesMaxItemsCount = 10;
        public ushort[] Voltages { get; set; } = new ushort[10];
        [Obsolete("This method is deprecated. Use GetVoltagesMaxItemsCount instead.")]
        public byte GetVoltagesMaxItemsCount() => 10;
        /// <summary>
        /// Battery current, -1: autopilot does not measure the current
        /// OriginName: current_battery, Units: cA, IsExtended: false
        /// </summary>
        public short CurrentBattery { get; set; }
        /// <summary>
        /// Battery ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public byte Id { get; set; }
        /// <summary>
        /// Function of the battery
        /// OriginName: battery_function, Units: , IsExtended: false
        /// </summary>
        public MavBatteryFunction BatteryFunction { get; set; }
        /// <summary>
        /// Type (chemistry) of the battery
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public MavBatteryType Type { get; set; }
        /// <summary>
        /// Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery.
        /// OriginName: battery_remaining, Units: %, IsExtended: false
        /// </summary>
        public sbyte BatteryRemaining { get; set; }
        /// <summary>
        /// Remaining battery time, 0: autopilot does not provide remaining battery time estimate
        /// OriginName: time_remaining, Units: s, IsExtended: true
        /// </summary>
        public int TimeRemaining { get; set; }
        /// <summary>
        /// State for extent of discharge, provided by autopilot for warning or external reactions
        /// OriginName: charge_state, Units: , IsExtended: true
        /// </summary>
        public MavBatteryChargeState ChargeState { get; set; }
        /// <summary>
        /// Battery voltages for cells 11 to 14. Cells above the valid cell count for this battery should have a value of 0, where zero indicates not supported (note, this is different than for the voltages field and allows empty byte truncation). If the measured value is 0 then 1 should be sent instead.
        /// OriginName: voltages_ext, Units: mV, IsExtended: true
        /// </summary>
        public const int VoltagesExtMaxItemsCount = 4;
        public ushort[] VoltagesExt { get; } = new ushort[4];
        /// <summary>
        /// Battery mode. Default (0) is that battery mode reporting is not supported or battery is in normal-use mode.
        /// OriginName: mode, Units: , IsExtended: true
        /// </summary>
        public MavBatteryMode Mode { get; set; }
        /// <summary>
        /// Fault/health indications. These should be set when charge_state is MAV_BATTERY_CHARGE_STATE_FAILED or MAV_BATTERY_CHARGE_STATE_UNHEALTHY (if not, fault reporting is not supported).
        /// OriginName: fault_bitmask, Units: , IsExtended: true
        /// </summary>
        public MavBatteryFault FaultBitmask { get; set; }
    }
    /// <summary>
    /// Version and capability of autopilot software. This should be emitted in response to a request with MAV_CMD_REQUEST_MESSAGE.
    ///  AUTOPILOT_VERSION
    /// </summary>
    public class AutopilotVersionPacket: PacketV2<AutopilotVersionPayload>
    {
	    public const int PacketMessageId = 148;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 178;
        public override bool WrapToV2Extension => false;

        public override AutopilotVersionPayload Payload { get; } = new AutopilotVersionPayload();

        public override string Name => "AUTOPILOT_VERSION";
    }

    /// <summary>
    ///  AUTOPILOT_VERSION
    /// </summary>
    public class AutopilotVersionPayload : IPayload
    {
        public byte GetMaxByteSize() => 78; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 78; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 8; // Capabilities
            sum+=8; //Uid
            sum+=4; //FlightSwVersion
            sum+=4; //MiddlewareSwVersion
            sum+=4; //OsSwVersion
            sum+=4; //BoardVersion
            sum+=2; //VendorId
            sum+=2; //ProductId
            sum+=FlightCustomVersion.Length; //FlightCustomVersion
            sum+=MiddlewareCustomVersion.Length; //MiddlewareCustomVersion
            sum+=OsCustomVersion.Length; //OsCustomVersion
            sum+=Uid2.Length; //Uid2
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Capabilities = (MavProtocolCapability)BinSerialize.ReadULong(ref buffer);
            Uid = BinSerialize.ReadULong(ref buffer);
            FlightSwVersion = BinSerialize.ReadUInt(ref buffer);
            MiddlewareSwVersion = BinSerialize.ReadUInt(ref buffer);
            OsSwVersion = BinSerialize.ReadUInt(ref buffer);
            BoardVersion = BinSerialize.ReadUInt(ref buffer);
            VendorId = BinSerialize.ReadUShort(ref buffer);
            ProductId = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/78 - payloadSize - /*ExtendedFieldsLength*/18)/1 /*FieldTypeByteSize*/));
            FlightCustomVersion = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                FlightCustomVersion[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                MiddlewareCustomVersion[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                OsCustomVersion[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            // extended field 'Uid2' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 18;
            for(var i=0;i<arraySize;i++)
            {
                Uid2[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,(ulong)Capabilities);
            BinSerialize.WriteULong(ref buffer,Uid);
            BinSerialize.WriteUInt(ref buffer,FlightSwVersion);
            BinSerialize.WriteUInt(ref buffer,MiddlewareSwVersion);
            BinSerialize.WriteUInt(ref buffer,OsSwVersion);
            BinSerialize.WriteUInt(ref buffer,BoardVersion);
            BinSerialize.WriteUShort(ref buffer,VendorId);
            BinSerialize.WriteUShort(ref buffer,ProductId);
            for(var i=0;i<FlightCustomVersion.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)FlightCustomVersion[i]);
            }
            for(var i=0;i<MiddlewareCustomVersion.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)MiddlewareCustomVersion[i]);
            }
            for(var i=0;i<OsCustomVersion.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)OsCustomVersion[i]);
            }
            for(var i=0;i<Uid2.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Uid2[i]);
            }
            /* PayloadByteSize = 78 */;
        }
        
        



        /// <summary>
        /// Bitmap of capabilities
        /// OriginName: capabilities, Units: , IsExtended: false
        /// </summary>
        public MavProtocolCapability Capabilities { get; set; }
        /// <summary>
        /// UID if provided by hardware (see uid2)
        /// OriginName: uid, Units: , IsExtended: false
        /// </summary>
        public ulong Uid { get; set; }
        /// <summary>
        /// Firmware version number
        /// OriginName: flight_sw_version, Units: , IsExtended: false
        /// </summary>
        public uint FlightSwVersion { get; set; }
        /// <summary>
        /// Middleware version number
        /// OriginName: middleware_sw_version, Units: , IsExtended: false
        /// </summary>
        public uint MiddlewareSwVersion { get; set; }
        /// <summary>
        /// Operating system version number
        /// OriginName: os_sw_version, Units: , IsExtended: false
        /// </summary>
        public uint OsSwVersion { get; set; }
        /// <summary>
        /// HW / board version (last 8 bits should be silicon ID, if any). The first 16 bits of this field specify https://github.com/PX4/PX4-Bootloader/blob/master/board_types.txt
        /// OriginName: board_version, Units: , IsExtended: false
        /// </summary>
        public uint BoardVersion { get; set; }
        /// <summary>
        /// ID of the board vendor
        /// OriginName: vendor_id, Units: , IsExtended: false
        /// </summary>
        public ushort VendorId { get; set; }
        /// <summary>
        /// ID of the product
        /// OriginName: product_id, Units: , IsExtended: false
        /// </summary>
        public ushort ProductId { get; set; }
        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// OriginName: flight_custom_version, Units: , IsExtended: false
        /// </summary>
        public const int FlightCustomVersionMaxItemsCount = 8;
        public byte[] FlightCustomVersion { get; set; } = new byte[8];
        [Obsolete("This method is deprecated. Use GetFlightCustomVersionMaxItemsCount instead.")]
        public byte GetFlightCustomVersionMaxItemsCount() => 8;
        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// OriginName: middleware_custom_version, Units: , IsExtended: false
        /// </summary>
        public const int MiddlewareCustomVersionMaxItemsCount = 8;
        public byte[] MiddlewareCustomVersion { get; } = new byte[8];
        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// OriginName: os_custom_version, Units: , IsExtended: false
        /// </summary>
        public const int OsCustomVersionMaxItemsCount = 8;
        public byte[] OsCustomVersion { get; } = new byte[8];
        /// <summary>
        /// UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid)
        /// OriginName: uid2, Units: , IsExtended: true
        /// </summary>
        public const int Uid2MaxItemsCount = 18;
        public byte[] Uid2 { get; } = new byte[18];
    }
    /// <summary>
    /// The location of a landing target. See: https://mavlink.io/en/services/landing_target.html
    ///  LANDING_TARGET
    /// </summary>
    public class LandingTargetPacket: PacketV2<LandingTargetPayload>
    {
	    public const int PacketMessageId = 149;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 200;
        public override bool WrapToV2Extension => false;

        public override LandingTargetPayload Payload { get; } = new LandingTargetPayload();

        public override string Name => "LANDING_TARGET";
    }

    /// <summary>
    ///  LANDING_TARGET
    /// </summary>
    public class LandingTargetPayload : IPayload
    {
        public byte GetMaxByteSize() => 60; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 60; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //AngleX
            sum+=4; //AngleY
            sum+=4; //Distance
            sum+=4; //SizeX
            sum+=4; //SizeY
            sum+=1; //TargetNum
            sum+= 1; // Frame
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=Q.Length * 4; //Q
            sum+= 1; // Type
            sum+=1; //PositionValid
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            AngleX = BinSerialize.ReadFloat(ref buffer);
            AngleY = BinSerialize.ReadFloat(ref buffer);
            Distance = BinSerialize.ReadFloat(ref buffer);
            SizeX = BinSerialize.ReadFloat(ref buffer);
            SizeY = BinSerialize.ReadFloat(ref buffer);
            TargetNum = (byte)BinSerialize.ReadByte(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);
            // extended field 'X' can be empty
            if (buffer.IsEmpty) return;
            X = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Y' can be empty
            if (buffer.IsEmpty) return;
            Y = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Z' can be empty
            if (buffer.IsEmpty) return;
            Z = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Q' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            // extended field 'Type' can be empty
            if (buffer.IsEmpty) return;
            Type = (LandingTargetType)BinSerialize.ReadByte(ref buffer);
            // extended field 'PositionValid' can be empty
            if (buffer.IsEmpty) return;
            PositionValid = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,AngleX);
            BinSerialize.WriteFloat(ref buffer,AngleY);
            BinSerialize.WriteFloat(ref buffer,Distance);
            BinSerialize.WriteFloat(ref buffer,SizeX);
            BinSerialize.WriteFloat(ref buffer,SizeY);
            BinSerialize.WriteByte(ref buffer,(byte)TargetNum);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)PositionValid);
            /* PayloadByteSize = 60 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X-axis angular offset of the target from the center of the image
        /// OriginName: angle_x, Units: rad, IsExtended: false
        /// </summary>
        public float AngleX { get; set; }
        /// <summary>
        /// Y-axis angular offset of the target from the center of the image
        /// OriginName: angle_y, Units: rad, IsExtended: false
        /// </summary>
        public float AngleY { get; set; }
        /// <summary>
        /// Distance to the target from the vehicle
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public float Distance { get; set; }
        /// <summary>
        /// Size of target along x-axis
        /// OriginName: size_x, Units: rad, IsExtended: false
        /// </summary>
        public float SizeX { get; set; }
        /// <summary>
        /// Size of target along y-axis
        /// OriginName: size_y, Units: rad, IsExtended: false
        /// </summary>
        public float SizeY { get; set; }
        /// <summary>
        /// The ID of the target if multiple targets are present
        /// OriginName: target_num, Units: , IsExtended: false
        /// </summary>
        public byte TargetNum { get; set; }
        /// <summary>
        /// Coordinate frame used for following fields.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame Frame { get; set; }
        /// <summary>
        /// X Position of the landing target in MAV_FRAME
        /// OriginName: x, Units: m, IsExtended: true
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y Position of the landing target in MAV_FRAME
        /// OriginName: y, Units: m, IsExtended: true
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z Position of the landing target in MAV_FRAME
        /// OriginName: z, Units: m, IsExtended: true
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: true
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// Type of landing target
        /// OriginName: type, Units: , IsExtended: true
        /// </summary>
        public LandingTargetType Type { get; set; }
        /// <summary>
        /// Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid).
        /// OriginName: position_valid, Units: , IsExtended: true
        /// </summary>
        public byte PositionValid { get; set; }
    }
    /// <summary>
    /// Status of geo-fencing. Sent in extended status stream when fencing enabled.
    ///  FENCE_STATUS
    /// </summary>
    public class FenceStatusPacket: PacketV2<FenceStatusPayload>
    {
	    public const int PacketMessageId = 162;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 189;
        public override bool WrapToV2Extension => false;

        public override FenceStatusPayload Payload { get; } = new FenceStatusPayload();

        public override string Name => "FENCE_STATUS";
    }

    /// <summary>
    ///  FENCE_STATUS
    /// </summary>
    public class FenceStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //BreachTime
            sum+=2; //BreachCount
            sum+=1; //BreachStatus
            sum+= 1; // BreachType
            sum+= 1; // BreachMitigation
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            BreachTime = BinSerialize.ReadUInt(ref buffer);
            BreachCount = BinSerialize.ReadUShort(ref buffer);
            BreachStatus = (byte)BinSerialize.ReadByte(ref buffer);
            BreachType = (FenceBreach)BinSerialize.ReadByte(ref buffer);
            // extended field 'BreachMitigation' can be empty
            if (buffer.IsEmpty) return;
            BreachMitigation = (FenceMitigate)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,BreachTime);
            BinSerialize.WriteUShort(ref buffer,BreachCount);
            BinSerialize.WriteByte(ref buffer,(byte)BreachStatus);
            BinSerialize.WriteByte(ref buffer,(byte)BreachType);
            BinSerialize.WriteByte(ref buffer,(byte)BreachMitigation);
            /* PayloadByteSize = 9 */;
        }
        
        



        /// <summary>
        /// Time (since boot) of last breach.
        /// OriginName: breach_time, Units: ms, IsExtended: false
        /// </summary>
        public uint BreachTime { get; set; }
        /// <summary>
        /// Number of fence breaches.
        /// OriginName: breach_count, Units: , IsExtended: false
        /// </summary>
        public ushort BreachCount { get; set; }
        /// <summary>
        /// Breach status (0 if currently inside fence, 1 if outside).
        /// OriginName: breach_status, Units: , IsExtended: false
        /// </summary>
        public byte BreachStatus { get; set; }
        /// <summary>
        /// Last breach type.
        /// OriginName: breach_type, Units: , IsExtended: false
        /// </summary>
        public FenceBreach BreachType { get; set; }
        /// <summary>
        /// Active action to prevent fence breach
        /// OriginName: breach_mitigation, Units: , IsExtended: true
        /// </summary>
        public FenceMitigate BreachMitigation { get; set; }
    }
    /// <summary>
    /// Reports results of completed compass calibration. Sent until MAG_CAL_ACK received.
    ///  MAG_CAL_REPORT
    /// </summary>
    public class MagCalReportPacket: PacketV2<MagCalReportPayload>
    {
	    public const int PacketMessageId = 192;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 36;
        public override bool WrapToV2Extension => false;

        public override MagCalReportPayload Payload { get; } = new MagCalReportPayload();

        public override string Name => "MAG_CAL_REPORT";
    }

    /// <summary>
    ///  MAG_CAL_REPORT
    /// </summary>
    public class MagCalReportPayload : IPayload
    {
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Fitness
            sum+=4; //OfsX
            sum+=4; //OfsY
            sum+=4; //OfsZ
            sum+=4; //DiagX
            sum+=4; //DiagY
            sum+=4; //DiagZ
            sum+=4; //OffdiagX
            sum+=4; //OffdiagY
            sum+=4; //OffdiagZ
            sum+=1; //CompassId
            sum+=1; //CalMask
            sum+= 1; // CalStatus
            sum+=1; //Autosaved
            sum+=4; //OrientationConfidence
            sum+= 1; // OldOrientation
            sum+= 1; // NewOrientation
            sum+=4; //ScaleFactor
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Fitness = BinSerialize.ReadFloat(ref buffer);
            OfsX = BinSerialize.ReadFloat(ref buffer);
            OfsY = BinSerialize.ReadFloat(ref buffer);
            OfsZ = BinSerialize.ReadFloat(ref buffer);
            DiagX = BinSerialize.ReadFloat(ref buffer);
            DiagY = BinSerialize.ReadFloat(ref buffer);
            DiagZ = BinSerialize.ReadFloat(ref buffer);
            OffdiagX = BinSerialize.ReadFloat(ref buffer);
            OffdiagY = BinSerialize.ReadFloat(ref buffer);
            OffdiagZ = BinSerialize.ReadFloat(ref buffer);
            CompassId = (byte)BinSerialize.ReadByte(ref buffer);
            CalMask = (byte)BinSerialize.ReadByte(ref buffer);
            CalStatus = (MagCalStatus)BinSerialize.ReadByte(ref buffer);
            Autosaved = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'OrientationConfidence' can be empty
            if (buffer.IsEmpty) return;
            OrientationConfidence = BinSerialize.ReadFloat(ref buffer);
            // extended field 'OldOrientation' can be empty
            if (buffer.IsEmpty) return;
            OldOrientation = (MavSensorOrientation)BinSerialize.ReadByte(ref buffer);
            // extended field 'NewOrientation' can be empty
            if (buffer.IsEmpty) return;
            NewOrientation = (MavSensorOrientation)BinSerialize.ReadByte(ref buffer);
            // extended field 'ScaleFactor' can be empty
            if (buffer.IsEmpty) return;
            ScaleFactor = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Fitness);
            BinSerialize.WriteFloat(ref buffer,OfsX);
            BinSerialize.WriteFloat(ref buffer,OfsY);
            BinSerialize.WriteFloat(ref buffer,OfsZ);
            BinSerialize.WriteFloat(ref buffer,DiagX);
            BinSerialize.WriteFloat(ref buffer,DiagY);
            BinSerialize.WriteFloat(ref buffer,DiagZ);
            BinSerialize.WriteFloat(ref buffer,OffdiagX);
            BinSerialize.WriteFloat(ref buffer,OffdiagY);
            BinSerialize.WriteFloat(ref buffer,OffdiagZ);
            BinSerialize.WriteByte(ref buffer,(byte)CompassId);
            BinSerialize.WriteByte(ref buffer,(byte)CalMask);
            BinSerialize.WriteByte(ref buffer,(byte)CalStatus);
            BinSerialize.WriteByte(ref buffer,(byte)Autosaved);
            BinSerialize.WriteFloat(ref buffer,OrientationConfidence);
            BinSerialize.WriteByte(ref buffer,(byte)OldOrientation);
            BinSerialize.WriteByte(ref buffer,(byte)NewOrientation);
            BinSerialize.WriteFloat(ref buffer,ScaleFactor);
            /* PayloadByteSize = 54 */;
        }
        
        



        /// <summary>
        /// RMS milligauss residuals.
        /// OriginName: fitness, Units: mgauss, IsExtended: false
        /// </summary>
        public float Fitness { get; set; }
        /// <summary>
        /// X offset.
        /// OriginName: ofs_x, Units: , IsExtended: false
        /// </summary>
        public float OfsX { get; set; }
        /// <summary>
        /// Y offset.
        /// OriginName: ofs_y, Units: , IsExtended: false
        /// </summary>
        public float OfsY { get; set; }
        /// <summary>
        /// Z offset.
        /// OriginName: ofs_z, Units: , IsExtended: false
        /// </summary>
        public float OfsZ { get; set; }
        /// <summary>
        /// X diagonal (matrix 11).
        /// OriginName: diag_x, Units: , IsExtended: false
        /// </summary>
        public float DiagX { get; set; }
        /// <summary>
        /// Y diagonal (matrix 22).
        /// OriginName: diag_y, Units: , IsExtended: false
        /// </summary>
        public float DiagY { get; set; }
        /// <summary>
        /// Z diagonal (matrix 33).
        /// OriginName: diag_z, Units: , IsExtended: false
        /// </summary>
        public float DiagZ { get; set; }
        /// <summary>
        /// X off-diagonal (matrix 12 and 21).
        /// OriginName: offdiag_x, Units: , IsExtended: false
        /// </summary>
        public float OffdiagX { get; set; }
        /// <summary>
        /// Y off-diagonal (matrix 13 and 31).
        /// OriginName: offdiag_y, Units: , IsExtended: false
        /// </summary>
        public float OffdiagY { get; set; }
        /// <summary>
        /// Z off-diagonal (matrix 32 and 23).
        /// OriginName: offdiag_z, Units: , IsExtended: false
        /// </summary>
        public float OffdiagZ { get; set; }
        /// <summary>
        /// Compass being calibrated.
        /// OriginName: compass_id, Units: , IsExtended: false
        /// </summary>
        public byte CompassId { get; set; }
        /// <summary>
        /// Bitmask of compasses being calibrated.
        /// OriginName: cal_mask, Units: , IsExtended: false
        /// </summary>
        public byte CalMask { get; set; }
        /// <summary>
        /// Calibration Status.
        /// OriginName: cal_status, Units: , IsExtended: false
        /// </summary>
        public MagCalStatus CalStatus { get; set; }
        /// <summary>
        /// 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters.
        /// OriginName: autosaved, Units: , IsExtended: false
        /// </summary>
        public byte Autosaved { get; set; }
        /// <summary>
        /// Confidence in orientation (higher is better).
        /// OriginName: orientation_confidence, Units: , IsExtended: true
        /// </summary>
        public float OrientationConfidence { get; set; }
        /// <summary>
        /// orientation before calibration.
        /// OriginName: old_orientation, Units: , IsExtended: true
        /// </summary>
        public MavSensorOrientation OldOrientation { get; set; }
        /// <summary>
        /// orientation after calibration.
        /// OriginName: new_orientation, Units: , IsExtended: true
        /// </summary>
        public MavSensorOrientation NewOrientation { get; set; }
        /// <summary>
        /// field radius correction factor
        /// OriginName: scale_factor, Units: , IsExtended: true
        /// </summary>
        public float ScaleFactor { get; set; }
    }
    /// <summary>
    /// EFI status output
    ///  EFI_STATUS
    /// </summary>
    public class EfiStatusPacket: PacketV2<EfiStatusPayload>
    {
	    public const int PacketMessageId = 225;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 208;
        public override bool WrapToV2Extension => false;

        public override EfiStatusPayload Payload { get; } = new EfiStatusPayload();

        public override string Name => "EFI_STATUS";
    }

    /// <summary>
    ///  EFI_STATUS
    /// </summary>
    public class EfiStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 73; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 73; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //EcuIndex
            sum+=4; //Rpm
            sum+=4; //FuelConsumed
            sum+=4; //FuelFlow
            sum+=4; //EngineLoad
            sum+=4; //ThrottlePosition
            sum+=4; //SparkDwellTime
            sum+=4; //BarometricPressure
            sum+=4; //IntakeManifoldPressure
            sum+=4; //IntakeManifoldTemperature
            sum+=4; //CylinderHeadTemperature
            sum+=4; //IgnitionTiming
            sum+=4; //InjectionTime
            sum+=4; //ExhaustGasTemperature
            sum+=4; //ThrottleOut
            sum+=4; //PtCompensation
            sum+=1; //Health
            sum+=4; //IgnitionVoltage
            sum+=4; //FuelPressure
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            EcuIndex = BinSerialize.ReadFloat(ref buffer);
            Rpm = BinSerialize.ReadFloat(ref buffer);
            FuelConsumed = BinSerialize.ReadFloat(ref buffer);
            FuelFlow = BinSerialize.ReadFloat(ref buffer);
            EngineLoad = BinSerialize.ReadFloat(ref buffer);
            ThrottlePosition = BinSerialize.ReadFloat(ref buffer);
            SparkDwellTime = BinSerialize.ReadFloat(ref buffer);
            BarometricPressure = BinSerialize.ReadFloat(ref buffer);
            IntakeManifoldPressure = BinSerialize.ReadFloat(ref buffer);
            IntakeManifoldTemperature = BinSerialize.ReadFloat(ref buffer);
            CylinderHeadTemperature = BinSerialize.ReadFloat(ref buffer);
            IgnitionTiming = BinSerialize.ReadFloat(ref buffer);
            InjectionTime = BinSerialize.ReadFloat(ref buffer);
            ExhaustGasTemperature = BinSerialize.ReadFloat(ref buffer);
            ThrottleOut = BinSerialize.ReadFloat(ref buffer);
            PtCompensation = BinSerialize.ReadFloat(ref buffer);
            Health = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'IgnitionVoltage' can be empty
            if (buffer.IsEmpty) return;
            IgnitionVoltage = BinSerialize.ReadFloat(ref buffer);
            // extended field 'FuelPressure' can be empty
            if (buffer.IsEmpty) return;
            FuelPressure = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,EcuIndex);
            BinSerialize.WriteFloat(ref buffer,Rpm);
            BinSerialize.WriteFloat(ref buffer,FuelConsumed);
            BinSerialize.WriteFloat(ref buffer,FuelFlow);
            BinSerialize.WriteFloat(ref buffer,EngineLoad);
            BinSerialize.WriteFloat(ref buffer,ThrottlePosition);
            BinSerialize.WriteFloat(ref buffer,SparkDwellTime);
            BinSerialize.WriteFloat(ref buffer,BarometricPressure);
            BinSerialize.WriteFloat(ref buffer,IntakeManifoldPressure);
            BinSerialize.WriteFloat(ref buffer,IntakeManifoldTemperature);
            BinSerialize.WriteFloat(ref buffer,CylinderHeadTemperature);
            BinSerialize.WriteFloat(ref buffer,IgnitionTiming);
            BinSerialize.WriteFloat(ref buffer,InjectionTime);
            BinSerialize.WriteFloat(ref buffer,ExhaustGasTemperature);
            BinSerialize.WriteFloat(ref buffer,ThrottleOut);
            BinSerialize.WriteFloat(ref buffer,PtCompensation);
            BinSerialize.WriteByte(ref buffer,(byte)Health);
            BinSerialize.WriteFloat(ref buffer,IgnitionVoltage);
            BinSerialize.WriteFloat(ref buffer,FuelPressure);
            /* PayloadByteSize = 73 */;
        }
        
        



        /// <summary>
        /// ECU index
        /// OriginName: ecu_index, Units: , IsExtended: false
        /// </summary>
        public float EcuIndex { get; set; }
        /// <summary>
        /// RPM
        /// OriginName: rpm, Units: , IsExtended: false
        /// </summary>
        public float Rpm { get; set; }
        /// <summary>
        /// Fuel consumed
        /// OriginName: fuel_consumed, Units: cm^3, IsExtended: false
        /// </summary>
        public float FuelConsumed { get; set; }
        /// <summary>
        /// Fuel flow rate
        /// OriginName: fuel_flow, Units: cm^3/min, IsExtended: false
        /// </summary>
        public float FuelFlow { get; set; }
        /// <summary>
        /// Engine load
        /// OriginName: engine_load, Units: %, IsExtended: false
        /// </summary>
        public float EngineLoad { get; set; }
        /// <summary>
        /// Throttle position
        /// OriginName: throttle_position, Units: %, IsExtended: false
        /// </summary>
        public float ThrottlePosition { get; set; }
        /// <summary>
        /// Spark dwell time
        /// OriginName: spark_dwell_time, Units: ms, IsExtended: false
        /// </summary>
        public float SparkDwellTime { get; set; }
        /// <summary>
        /// Barometric pressure
        /// OriginName: barometric_pressure, Units: kPa, IsExtended: false
        /// </summary>
        public float BarometricPressure { get; set; }
        /// <summary>
        /// Intake manifold pressure(
        /// OriginName: intake_manifold_pressure, Units: kPa, IsExtended: false
        /// </summary>
        public float IntakeManifoldPressure { get; set; }
        /// <summary>
        /// Intake manifold temperature
        /// OriginName: intake_manifold_temperature, Units: degC, IsExtended: false
        /// </summary>
        public float IntakeManifoldTemperature { get; set; }
        /// <summary>
        /// Cylinder head temperature
        /// OriginName: cylinder_head_temperature, Units: degC, IsExtended: false
        /// </summary>
        public float CylinderHeadTemperature { get; set; }
        /// <summary>
        /// Ignition timing (Crank angle degrees)
        /// OriginName: ignition_timing, Units: deg, IsExtended: false
        /// </summary>
        public float IgnitionTiming { get; set; }
        /// <summary>
        /// Injection time
        /// OriginName: injection_time, Units: ms, IsExtended: false
        /// </summary>
        public float InjectionTime { get; set; }
        /// <summary>
        /// Exhaust gas temperature
        /// OriginName: exhaust_gas_temperature, Units: degC, IsExtended: false
        /// </summary>
        public float ExhaustGasTemperature { get; set; }
        /// <summary>
        /// Output throttle
        /// OriginName: throttle_out, Units: %, IsExtended: false
        /// </summary>
        public float ThrottleOut { get; set; }
        /// <summary>
        /// Pressure/temperature compensation
        /// OriginName: pt_compensation, Units: , IsExtended: false
        /// </summary>
        public float PtCompensation { get; set; }
        /// <summary>
        /// EFI health status
        /// OriginName: health, Units: , IsExtended: false
        /// </summary>
        public byte Health { get; set; }
        /// <summary>
        /// Supply voltage to EFI sparking system.  Zero in this value means "unknown", so if the supply voltage really is zero volts use 0.0001 instead.
        /// OriginName: ignition_voltage, Units: V, IsExtended: true
        /// </summary>
        public float IgnitionVoltage { get; set; }
        /// <summary>
        /// Fuel pressure. Zero in this value means "unknown", so if the fuel pressure really is zero kPa use 0.0001 instead.
        /// OriginName: fuel_pressure, Units: kPa, IsExtended: true
        /// </summary>
        public float FuelPressure { get; set; }
    }
    /// <summary>
    /// Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovation test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovation test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.
    ///  ESTIMATOR_STATUS
    /// </summary>
    public class EstimatorStatusPacket: PacketV2<EstimatorStatusPayload>
    {
	    public const int PacketMessageId = 230;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 163;
        public override bool WrapToV2Extension => false;

        public override EstimatorStatusPayload Payload { get; } = new EstimatorStatusPayload();

        public override string Name => "ESTIMATOR_STATUS";
    }

    /// <summary>
    ///  ESTIMATOR_STATUS
    /// </summary>
    public class EstimatorStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //VelRatio
            sum+=4; //PosHorizRatio
            sum+=4; //PosVertRatio
            sum+=4; //MagRatio
            sum+=4; //HaglRatio
            sum+=4; //TasRatio
            sum+=4; //PosHorizAccuracy
            sum+=4; //PosVertAccuracy
            sum+= 2; // Flags
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            VelRatio = BinSerialize.ReadFloat(ref buffer);
            PosHorizRatio = BinSerialize.ReadFloat(ref buffer);
            PosVertRatio = BinSerialize.ReadFloat(ref buffer);
            MagRatio = BinSerialize.ReadFloat(ref buffer);
            HaglRatio = BinSerialize.ReadFloat(ref buffer);
            TasRatio = BinSerialize.ReadFloat(ref buffer);
            PosHorizAccuracy = BinSerialize.ReadFloat(ref buffer);
            PosVertAccuracy = BinSerialize.ReadFloat(ref buffer);
            Flags = (EstimatorStatusFlags)BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,VelRatio);
            BinSerialize.WriteFloat(ref buffer,PosHorizRatio);
            BinSerialize.WriteFloat(ref buffer,PosVertRatio);
            BinSerialize.WriteFloat(ref buffer,MagRatio);
            BinSerialize.WriteFloat(ref buffer,HaglRatio);
            BinSerialize.WriteFloat(ref buffer,TasRatio);
            BinSerialize.WriteFloat(ref buffer,PosHorizAccuracy);
            BinSerialize.WriteFloat(ref buffer,PosVertAccuracy);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            /* PayloadByteSize = 42 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Velocity innovation test ratio
        /// OriginName: vel_ratio, Units: , IsExtended: false
        /// </summary>
        public float VelRatio { get; set; }
        /// <summary>
        /// Horizontal position innovation test ratio
        /// OriginName: pos_horiz_ratio, Units: , IsExtended: false
        /// </summary>
        public float PosHorizRatio { get; set; }
        /// <summary>
        /// Vertical position innovation test ratio
        /// OriginName: pos_vert_ratio, Units: , IsExtended: false
        /// </summary>
        public float PosVertRatio { get; set; }
        /// <summary>
        /// Magnetometer innovation test ratio
        /// OriginName: mag_ratio, Units: , IsExtended: false
        /// </summary>
        public float MagRatio { get; set; }
        /// <summary>
        /// Height above terrain innovation test ratio
        /// OriginName: hagl_ratio, Units: , IsExtended: false
        /// </summary>
        public float HaglRatio { get; set; }
        /// <summary>
        /// True airspeed innovation test ratio
        /// OriginName: tas_ratio, Units: , IsExtended: false
        /// </summary>
        public float TasRatio { get; set; }
        /// <summary>
        /// Horizontal position 1-STD accuracy relative to the EKF local origin
        /// OriginName: pos_horiz_accuracy, Units: m, IsExtended: false
        /// </summary>
        public float PosHorizAccuracy { get; set; }
        /// <summary>
        /// Vertical position 1-STD accuracy relative to the EKF local origin
        /// OriginName: pos_vert_accuracy, Units: m, IsExtended: false
        /// </summary>
        public float PosVertAccuracy { get; set; }
        /// <summary>
        /// Bitmap indicating which EKF outputs are valid.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public EstimatorStatusFlags Flags { get; set; }
    }
    /// <summary>
    /// Wind estimate from vehicle. Note that despite the name, this message does not actually contain any covariances but instead variability and accuracy fields in terms of standard deviation (1-STD).
    ///  WIND_COV
    /// </summary>
    public class WindCovPacket: PacketV2<WindCovPayload>
    {
	    public const int PacketMessageId = 231;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 105;
        public override bool WrapToV2Extension => false;

        public override WindCovPayload Payload { get; } = new WindCovPayload();

        public override string Name => "WIND_COV";
    }

    /// <summary>
    ///  WIND_COV
    /// </summary>
    public class WindCovPayload : IPayload
    {
        public byte GetMaxByteSize() => 40; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 40; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //WindX
            sum+=4; //WindY
            sum+=4; //WindZ
            sum+=4; //VarHoriz
            sum+=4; //VarVert
            sum+=4; //WindAlt
            sum+=4; //HorizAccuracy
            sum+=4; //VertAccuracy
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            WindX = BinSerialize.ReadFloat(ref buffer);
            WindY = BinSerialize.ReadFloat(ref buffer);
            WindZ = BinSerialize.ReadFloat(ref buffer);
            VarHoriz = BinSerialize.ReadFloat(ref buffer);
            VarVert = BinSerialize.ReadFloat(ref buffer);
            WindAlt = BinSerialize.ReadFloat(ref buffer);
            HorizAccuracy = BinSerialize.ReadFloat(ref buffer);
            VertAccuracy = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,WindX);
            BinSerialize.WriteFloat(ref buffer,WindY);
            BinSerialize.WriteFloat(ref buffer,WindZ);
            BinSerialize.WriteFloat(ref buffer,VarHoriz);
            BinSerialize.WriteFloat(ref buffer,VarVert);
            BinSerialize.WriteFloat(ref buffer,WindAlt);
            BinSerialize.WriteFloat(ref buffer,HorizAccuracy);
            BinSerialize.WriteFloat(ref buffer,VertAccuracy);
            /* PayloadByteSize = 40 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Wind in North (NED) direction (NAN if unknown)
        /// OriginName: wind_x, Units: m/s, IsExtended: false
        /// </summary>
        public float WindX { get; set; }
        /// <summary>
        /// Wind in East (NED) direction (NAN if unknown)
        /// OriginName: wind_y, Units: m/s, IsExtended: false
        /// </summary>
        public float WindY { get; set; }
        /// <summary>
        /// Wind in down (NED) direction (NAN if unknown)
        /// OriginName: wind_z, Units: m/s, IsExtended: false
        /// </summary>
        public float WindZ { get; set; }
        /// <summary>
        /// Variability of wind in XY, 1-STD estimated from a 1 Hz lowpassed wind estimate (NAN if unknown)
        /// OriginName: var_horiz, Units: m/s, IsExtended: false
        /// </summary>
        public float VarHoriz { get; set; }
        /// <summary>
        /// Variability of wind in Z, 1-STD estimated from a 1 Hz lowpassed wind estimate (NAN if unknown)
        /// OriginName: var_vert, Units: m/s, IsExtended: false
        /// </summary>
        public float VarVert { get; set; }
        /// <summary>
        /// Altitude (MSL) that this measurement was taken at (NAN if unknown)
        /// OriginName: wind_alt, Units: m, IsExtended: false
        /// </summary>
        public float WindAlt { get; set; }
        /// <summary>
        /// Horizontal speed 1-STD accuracy (0 if unknown)
        /// OriginName: horiz_accuracy, Units: m/s, IsExtended: false
        /// </summary>
        public float HorizAccuracy { get; set; }
        /// <summary>
        /// Vertical speed 1-STD accuracy (0 if unknown)
        /// OriginName: vert_accuracy, Units: m/s, IsExtended: false
        /// </summary>
        public float VertAccuracy { get; set; }
    }
    /// <summary>
    /// GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the system.
    ///  GPS_INPUT
    /// </summary>
    public class GpsInputPacket: PacketV2<GpsInputPayload>
    {
	    public const int PacketMessageId = 232;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 151;
        public override bool WrapToV2Extension => false;

        public override GpsInputPayload Payload { get; } = new GpsInputPayload();

        public override string Name => "GPS_INPUT";
    }

    /// <summary>
    ///  GPS_INPUT
    /// </summary>
    public class GpsInputPayload : IPayload
    {
        public byte GetMaxByteSize() => 65; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 65; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //TimeWeekMs
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //Hdop
            sum+=4; //Vdop
            sum+=4; //Vn
            sum+=4; //Ve
            sum+=4; //Vd
            sum+=4; //SpeedAccuracy
            sum+=4; //HorizAccuracy
            sum+=4; //VertAccuracy
            sum+= 2; // IgnoreFlags
            sum+=2; //TimeWeek
            sum+=1; //GpsId
            sum+=1; //FixType
            sum+=1; //SatellitesVisible
            sum+=2; //Yaw
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            TimeWeekMs = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            Hdop = BinSerialize.ReadFloat(ref buffer);
            Vdop = BinSerialize.ReadFloat(ref buffer);
            Vn = BinSerialize.ReadFloat(ref buffer);
            Ve = BinSerialize.ReadFloat(ref buffer);
            Vd = BinSerialize.ReadFloat(ref buffer);
            SpeedAccuracy = BinSerialize.ReadFloat(ref buffer);
            HorizAccuracy = BinSerialize.ReadFloat(ref buffer);
            VertAccuracy = BinSerialize.ReadFloat(ref buffer);
            IgnoreFlags = (GpsInputIgnoreFlags)BinSerialize.ReadUShort(ref buffer);
            TimeWeek = BinSerialize.ReadUShort(ref buffer);
            GpsId = (byte)BinSerialize.ReadByte(ref buffer);
            FixType = (byte)BinSerialize.ReadByte(ref buffer);
            SatellitesVisible = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'Yaw' can be empty
            if (buffer.IsEmpty) return;
            Yaw = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,TimeWeekMs);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,Hdop);
            BinSerialize.WriteFloat(ref buffer,Vdop);
            BinSerialize.WriteFloat(ref buffer,Vn);
            BinSerialize.WriteFloat(ref buffer,Ve);
            BinSerialize.WriteFloat(ref buffer,Vd);
            BinSerialize.WriteFloat(ref buffer,SpeedAccuracy);
            BinSerialize.WriteFloat(ref buffer,HorizAccuracy);
            BinSerialize.WriteFloat(ref buffer,VertAccuracy);
            BinSerialize.WriteUShort(ref buffer,(ushort)IgnoreFlags);
            BinSerialize.WriteUShort(ref buffer,TimeWeek);
            BinSerialize.WriteByte(ref buffer,(byte)GpsId);
            BinSerialize.WriteByte(ref buffer,(byte)FixType);
            BinSerialize.WriteByte(ref buffer,(byte)SatellitesVisible);
            BinSerialize.WriteUShort(ref buffer,Yaw);
            /* PayloadByteSize = 65 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// GPS time (from start of GPS week)
        /// OriginName: time_week_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeWeekMs { get; set; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public float Alt { get; set; }
        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
        /// OriginName: hdop, Units: , IsExtended: false
        /// </summary>
        public float Hdop { get; set; }
        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
        /// OriginName: vdop, Units: , IsExtended: false
        /// </summary>
        public float Vdop { get; set; }
        /// <summary>
        /// GPS velocity in north direction in earth-fixed NED frame
        /// OriginName: vn, Units: m/s, IsExtended: false
        /// </summary>
        public float Vn { get; set; }
        /// <summary>
        /// GPS velocity in east direction in earth-fixed NED frame
        /// OriginName: ve, Units: m/s, IsExtended: false
        /// </summary>
        public float Ve { get; set; }
        /// <summary>
        /// GPS velocity in down direction in earth-fixed NED frame
        /// OriginName: vd, Units: m/s, IsExtended: false
        /// </summary>
        public float Vd { get; set; }
        /// <summary>
        /// GPS speed accuracy
        /// OriginName: speed_accuracy, Units: m/s, IsExtended: false
        /// </summary>
        public float SpeedAccuracy { get; set; }
        /// <summary>
        /// GPS horizontal accuracy
        /// OriginName: horiz_accuracy, Units: m, IsExtended: false
        /// </summary>
        public float HorizAccuracy { get; set; }
        /// <summary>
        /// GPS vertical accuracy
        /// OriginName: vert_accuracy, Units: m, IsExtended: false
        /// </summary>
        public float VertAccuracy { get; set; }
        /// <summary>
        /// Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided.
        /// OriginName: ignore_flags, Units: , IsExtended: false
        /// </summary>
        public GpsInputIgnoreFlags IgnoreFlags { get; set; }
        /// <summary>
        /// GPS week number
        /// OriginName: time_week, Units: , IsExtended: false
        /// </summary>
        public ushort TimeWeek { get; set; }
        /// <summary>
        /// ID of the GPS for multiple GPS inputs
        /// OriginName: gps_id, Units: , IsExtended: false
        /// </summary>
        public byte GpsId { get; set; }
        /// <summary>
        /// 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK
        /// OriginName: fix_type, Units: , IsExtended: false
        /// </summary>
        public byte FixType { get; set; }
        /// <summary>
        /// Number of satellites visible.
        /// OriginName: satellites_visible, Units: , IsExtended: false
        /// </summary>
        public byte SatellitesVisible { get; set; }
        /// <summary>
        /// Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north
        /// OriginName: yaw, Units: cdeg, IsExtended: true
        /// </summary>
        public ushort Yaw { get; set; }
    }
    /// <summary>
    /// RTCM message for injecting into the onboard GPS (used for DGPS)
    ///  GPS_RTCM_DATA
    /// </summary>
    public class GpsRtcmDataPacket: PacketV2<GpsRtcmDataPayload>
    {
	    public const int PacketMessageId = 233;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 35;
        public override bool WrapToV2Extension => false;

        public override GpsRtcmDataPayload Payload { get; } = new GpsRtcmDataPayload();

        public override string Name => "GPS_RTCM_DATA";
    }

    /// <summary>
    ///  GPS_RTCM_DATA
    /// </summary>
    public class GpsRtcmDataPayload : IPayload
    {
        public byte GetMaxByteSize() => 182; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 182; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //Flags
            sum+=1; //Len
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Flags = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/180 - Math.Max(0,((/*PayloadByteSize*/182 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 182 */;
        }
        
        



        /// <summary>
        /// LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public byte Flags { get; set; }
        /// <summary>
        /// data length
        /// OriginName: len, Units: bytes, IsExtended: false
        /// </summary>
        public byte Len { get; set; }
        /// <summary>
        /// RTCM message (may be fragmented)
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 180;
        public byte[] Data { get; set; } = new byte[180];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 180;
    }
    /// <summary>
    /// Message appropriate for high latency connections like Iridium
    ///  HIGH_LATENCY
    /// </summary>
    public class HighLatencyPacket: PacketV2<HighLatencyPayload>
    {
	    public const int PacketMessageId = 234;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 150;
        public override bool WrapToV2Extension => false;

        public override HighLatencyPayload Payload { get; } = new HighLatencyPayload();

        public override string Name => "HIGH_LATENCY";
    }

    /// <summary>
    ///  HIGH_LATENCY
    /// </summary>
    public class HighLatencyPayload : IPayload
    {
        public byte GetMaxByteSize() => 40; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 40; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //CustomMode
            sum+=4; //Latitude
            sum+=4; //Longitude
            sum+=2; //Roll
            sum+=2; //Pitch
            sum+=2; //Heading
            sum+=2; //HeadingSp
            sum+=2; //AltitudeAmsl
            sum+=2; //AltitudeSp
            sum+=2; //WpDistance
            sum+= 1; // BaseMode
            sum+= 1; // LandedState
            sum+=1; //Throttle
            sum+=1; //Airspeed
            sum+=1; //AirspeedSp
            sum+=1; //Groundspeed
            sum+=1; //ClimbRate
            sum+=1; //GpsNsat
            sum+= 1; // GpsFixType
            sum+=1; //BatteryRemaining
            sum+=1; //Temperature
            sum+=1; //TemperatureAir
            sum+=1; //Failsafe
            sum+=1; //WpNum
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            CustomMode = BinSerialize.ReadUInt(ref buffer);
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Roll = BinSerialize.ReadShort(ref buffer);
            Pitch = BinSerialize.ReadShort(ref buffer);
            Heading = BinSerialize.ReadUShort(ref buffer);
            HeadingSp = BinSerialize.ReadShort(ref buffer);
            AltitudeAmsl = BinSerialize.ReadShort(ref buffer);
            AltitudeSp = BinSerialize.ReadShort(ref buffer);
            WpDistance = BinSerialize.ReadUShort(ref buffer);
            BaseMode = (MavModeFlag)BinSerialize.ReadByte(ref buffer);
            LandedState = (MavLandedState)BinSerialize.ReadByte(ref buffer);
            Throttle = (sbyte)BinSerialize.ReadByte(ref buffer);
            Airspeed = (byte)BinSerialize.ReadByte(ref buffer);
            AirspeedSp = (byte)BinSerialize.ReadByte(ref buffer);
            Groundspeed = (byte)BinSerialize.ReadByte(ref buffer);
            ClimbRate = (sbyte)BinSerialize.ReadByte(ref buffer);
            GpsNsat = (byte)BinSerialize.ReadByte(ref buffer);
            GpsFixType = (GpsFixType)BinSerialize.ReadByte(ref buffer);
            BatteryRemaining = (byte)BinSerialize.ReadByte(ref buffer);
            Temperature = (sbyte)BinSerialize.ReadByte(ref buffer);
            TemperatureAir = (sbyte)BinSerialize.ReadByte(ref buffer);
            Failsafe = (byte)BinSerialize.ReadByte(ref buffer);
            WpNum = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,CustomMode);
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteShort(ref buffer,Roll);
            BinSerialize.WriteShort(ref buffer,Pitch);
            BinSerialize.WriteUShort(ref buffer,Heading);
            BinSerialize.WriteShort(ref buffer,HeadingSp);
            BinSerialize.WriteShort(ref buffer,AltitudeAmsl);
            BinSerialize.WriteShort(ref buffer,AltitudeSp);
            BinSerialize.WriteUShort(ref buffer,WpDistance);
            BinSerialize.WriteByte(ref buffer,(byte)BaseMode);
            BinSerialize.WriteByte(ref buffer,(byte)LandedState);
            BinSerialize.WriteByte(ref buffer,(byte)Throttle);
            BinSerialize.WriteByte(ref buffer,(byte)Airspeed);
            BinSerialize.WriteByte(ref buffer,(byte)AirspeedSp);
            BinSerialize.WriteByte(ref buffer,(byte)Groundspeed);
            BinSerialize.WriteByte(ref buffer,(byte)ClimbRate);
            BinSerialize.WriteByte(ref buffer,(byte)GpsNsat);
            BinSerialize.WriteByte(ref buffer,(byte)GpsFixType);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryRemaining);
            BinSerialize.WriteByte(ref buffer,(byte)Temperature);
            BinSerialize.WriteByte(ref buffer,(byte)TemperatureAir);
            BinSerialize.WriteByte(ref buffer,(byte)Failsafe);
            BinSerialize.WriteByte(ref buffer,(byte)WpNum);
            /* PayloadByteSize = 40 */;
        }
        
        



        /// <summary>
        /// A bitfield for use for autopilot-specific flags.
        /// OriginName: custom_mode, Units: , IsExtended: false
        /// </summary>
        public uint CustomMode { get; set; }
        /// <summary>
        /// Latitude
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Latitude { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Longitude { get; set; }
        /// <summary>
        /// roll
        /// OriginName: roll, Units: cdeg, IsExtended: false
        /// </summary>
        public short Roll { get; set; }
        /// <summary>
        /// pitch
        /// OriginName: pitch, Units: cdeg, IsExtended: false
        /// </summary>
        public short Pitch { get; set; }
        /// <summary>
        /// heading
        /// OriginName: heading, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Heading { get; set; }
        /// <summary>
        /// heading setpoint
        /// OriginName: heading_sp, Units: cdeg, IsExtended: false
        /// </summary>
        public short HeadingSp { get; set; }
        /// <summary>
        /// Altitude above mean sea level
        /// OriginName: altitude_amsl, Units: m, IsExtended: false
        /// </summary>
        public short AltitudeAmsl { get; set; }
        /// <summary>
        /// Altitude setpoint relative to the home position
        /// OriginName: altitude_sp, Units: m, IsExtended: false
        /// </summary>
        public short AltitudeSp { get; set; }
        /// <summary>
        /// distance to target
        /// OriginName: wp_distance, Units: m, IsExtended: false
        /// </summary>
        public ushort WpDistance { get; set; }
        /// <summary>
        /// Bitmap of enabled system modes.
        /// OriginName: base_mode, Units: , IsExtended: false
        /// </summary>
        public MavModeFlag BaseMode { get; set; }
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// OriginName: landed_state, Units: , IsExtended: false
        /// </summary>
        public MavLandedState LandedState { get; set; }
        /// <summary>
        /// throttle (percentage)
        /// OriginName: throttle, Units: %, IsExtended: false
        /// </summary>
        public sbyte Throttle { get; set; }
        /// <summary>
        /// airspeed
        /// OriginName: airspeed, Units: m/s, IsExtended: false
        /// </summary>
        public byte Airspeed { get; set; }
        /// <summary>
        /// airspeed setpoint
        /// OriginName: airspeed_sp, Units: m/s, IsExtended: false
        /// </summary>
        public byte AirspeedSp { get; set; }
        /// <summary>
        /// groundspeed
        /// OriginName: groundspeed, Units: m/s, IsExtended: false
        /// </summary>
        public byte Groundspeed { get; set; }
        /// <summary>
        /// climb rate
        /// OriginName: climb_rate, Units: m/s, IsExtended: false
        /// </summary>
        public sbyte ClimbRate { get; set; }
        /// <summary>
        /// Number of satellites visible. If unknown, set to UINT8_MAX
        /// OriginName: gps_nsat, Units: , IsExtended: false
        /// </summary>
        public byte GpsNsat { get; set; }
        /// <summary>
        /// GPS Fix type.
        /// OriginName: gps_fix_type, Units: , IsExtended: false
        /// </summary>
        public GpsFixType GpsFixType { get; set; }
        /// <summary>
        /// Remaining battery (percentage)
        /// OriginName: battery_remaining, Units: %, IsExtended: false
        /// </summary>
        public byte BatteryRemaining { get; set; }
        /// <summary>
        /// Autopilot temperature (degrees C)
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public sbyte Temperature { get; set; }
        /// <summary>
        /// Air temperature (degrees C) from airspeed sensor
        /// OriginName: temperature_air, Units: degC, IsExtended: false
        /// </summary>
        public sbyte TemperatureAir { get; set; }
        /// <summary>
        /// failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
        /// OriginName: failsafe, Units: , IsExtended: false
        /// </summary>
        public byte Failsafe { get; set; }
        /// <summary>
        /// current waypoint number
        /// OriginName: wp_num, Units: , IsExtended: false
        /// </summary>
        public byte WpNum { get; set; }
    }
    /// <summary>
    /// Message appropriate for high latency connections like Iridium (version 2)
    ///  HIGH_LATENCY2
    /// </summary>
    public class HighLatency2Packet: PacketV2<HighLatency2Payload>
    {
	    public const int PacketMessageId = 235;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 179;
        public override bool WrapToV2Extension => false;

        public override HighLatency2Payload Payload { get; } = new HighLatency2Payload();

        public override string Name => "HIGH_LATENCY2";
    }

    /// <summary>
    ///  HIGH_LATENCY2
    /// </summary>
    public class HighLatency2Payload : IPayload
    {
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Timestamp
            sum+=4; //Latitude
            sum+=4; //Longitude
            sum+=2; //CustomMode
            sum+=2; //Altitude
            sum+=2; //TargetAltitude
            sum+=2; //TargetDistance
            sum+=2; //WpNum
            sum+= 2; // FailureFlags
            sum+= 1; // Type
            sum+= 1; // Autopilot
            sum+=1; //Heading
            sum+=1; //TargetHeading
            sum+=1; //Throttle
            sum+=1; //Airspeed
            sum+=1; //AirspeedSp
            sum+=1; //Groundspeed
            sum+=1; //Windspeed
            sum+=1; //WindHeading
            sum+=1; //Eph
            sum+=1; //Epv
            sum+=1; //TemperatureAir
            sum+=1; //ClimbRate
            sum+=1; //Battery
            sum+=1; //Custom0
            sum+=1; //Custom1
            sum+=1; //Custom2
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            CustomMode = BinSerialize.ReadUShort(ref buffer);
            Altitude = BinSerialize.ReadShort(ref buffer);
            TargetAltitude = BinSerialize.ReadShort(ref buffer);
            TargetDistance = BinSerialize.ReadUShort(ref buffer);
            WpNum = BinSerialize.ReadUShort(ref buffer);
            FailureFlags = (HlFailureFlag)BinSerialize.ReadUShort(ref buffer);
            Type = (MavType)BinSerialize.ReadByte(ref buffer);
            Autopilot = (MavAutopilot)BinSerialize.ReadByte(ref buffer);
            Heading = (byte)BinSerialize.ReadByte(ref buffer);
            TargetHeading = (byte)BinSerialize.ReadByte(ref buffer);
            Throttle = (byte)BinSerialize.ReadByte(ref buffer);
            Airspeed = (byte)BinSerialize.ReadByte(ref buffer);
            AirspeedSp = (byte)BinSerialize.ReadByte(ref buffer);
            Groundspeed = (byte)BinSerialize.ReadByte(ref buffer);
            Windspeed = (byte)BinSerialize.ReadByte(ref buffer);
            WindHeading = (byte)BinSerialize.ReadByte(ref buffer);
            Eph = (byte)BinSerialize.ReadByte(ref buffer);
            Epv = (byte)BinSerialize.ReadByte(ref buffer);
            TemperatureAir = (sbyte)BinSerialize.ReadByte(ref buffer);
            ClimbRate = (sbyte)BinSerialize.ReadByte(ref buffer);
            Battery = (sbyte)BinSerialize.ReadByte(ref buffer);
            Custom0 = (sbyte)BinSerialize.ReadByte(ref buffer);
            Custom1 = (sbyte)BinSerialize.ReadByte(ref buffer);
            Custom2 = (sbyte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteUShort(ref buffer,CustomMode);
            BinSerialize.WriteShort(ref buffer,Altitude);
            BinSerialize.WriteShort(ref buffer,TargetAltitude);
            BinSerialize.WriteUShort(ref buffer,TargetDistance);
            BinSerialize.WriteUShort(ref buffer,WpNum);
            BinSerialize.WriteUShort(ref buffer,(ushort)FailureFlags);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Autopilot);
            BinSerialize.WriteByte(ref buffer,(byte)Heading);
            BinSerialize.WriteByte(ref buffer,(byte)TargetHeading);
            BinSerialize.WriteByte(ref buffer,(byte)Throttle);
            BinSerialize.WriteByte(ref buffer,(byte)Airspeed);
            BinSerialize.WriteByte(ref buffer,(byte)AirspeedSp);
            BinSerialize.WriteByte(ref buffer,(byte)Groundspeed);
            BinSerialize.WriteByte(ref buffer,(byte)Windspeed);
            BinSerialize.WriteByte(ref buffer,(byte)WindHeading);
            BinSerialize.WriteByte(ref buffer,(byte)Eph);
            BinSerialize.WriteByte(ref buffer,(byte)Epv);
            BinSerialize.WriteByte(ref buffer,(byte)TemperatureAir);
            BinSerialize.WriteByte(ref buffer,(byte)ClimbRate);
            BinSerialize.WriteByte(ref buffer,(byte)Battery);
            BinSerialize.WriteByte(ref buffer,(byte)Custom0);
            BinSerialize.WriteByte(ref buffer,(byte)Custom1);
            BinSerialize.WriteByte(ref buffer,(byte)Custom2);
            /* PayloadByteSize = 42 */;
        }
        
        



        /// <summary>
        /// Timestamp (milliseconds since boot or Unix epoch)
        /// OriginName: timestamp, Units: ms, IsExtended: false
        /// </summary>
        public uint Timestamp { get; set; }
        /// <summary>
        /// Latitude
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Latitude { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Longitude { get; set; }
        /// <summary>
        /// A bitfield for use for autopilot-specific flags (2 byte version).
        /// OriginName: custom_mode, Units: , IsExtended: false
        /// </summary>
        public ushort CustomMode { get; set; }
        /// <summary>
        /// Altitude above mean sea level
        /// OriginName: altitude, Units: m, IsExtended: false
        /// </summary>
        public short Altitude { get; set; }
        /// <summary>
        /// Altitude setpoint
        /// OriginName: target_altitude, Units: m, IsExtended: false
        /// </summary>
        public short TargetAltitude { get; set; }
        /// <summary>
        /// Distance to target waypoint or position
        /// OriginName: target_distance, Units: dam, IsExtended: false
        /// </summary>
        public ushort TargetDistance { get; set; }
        /// <summary>
        /// Current waypoint number
        /// OriginName: wp_num, Units: , IsExtended: false
        /// </summary>
        public ushort WpNum { get; set; }
        /// <summary>
        /// Bitmap of failure flags.
        /// OriginName: failure_flags, Units: , IsExtended: false
        /// </summary>
        public HlFailureFlag FailureFlags { get; set; }
        /// <summary>
        /// Type of the MAV (quadrotor, helicopter, etc.)
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public MavType Type { get; set; }
        /// <summary>
        /// Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
        /// OriginName: autopilot, Units: , IsExtended: false
        /// </summary>
        public MavAutopilot Autopilot { get; set; }
        /// <summary>
        /// Heading
        /// OriginName: heading, Units: deg/2, IsExtended: false
        /// </summary>
        public byte Heading { get; set; }
        /// <summary>
        /// Heading setpoint
        /// OriginName: target_heading, Units: deg/2, IsExtended: false
        /// </summary>
        public byte TargetHeading { get; set; }
        /// <summary>
        /// Throttle
        /// OriginName: throttle, Units: %, IsExtended: false
        /// </summary>
        public byte Throttle { get; set; }
        /// <summary>
        /// Airspeed
        /// OriginName: airspeed, Units: m/s*5, IsExtended: false
        /// </summary>
        public byte Airspeed { get; set; }
        /// <summary>
        /// Airspeed setpoint
        /// OriginName: airspeed_sp, Units: m/s*5, IsExtended: false
        /// </summary>
        public byte AirspeedSp { get; set; }
        /// <summary>
        /// Groundspeed
        /// OriginName: groundspeed, Units: m/s*5, IsExtended: false
        /// </summary>
        public byte Groundspeed { get; set; }
        /// <summary>
        /// Windspeed
        /// OriginName: windspeed, Units: m/s*5, IsExtended: false
        /// </summary>
        public byte Windspeed { get; set; }
        /// <summary>
        /// Wind heading
        /// OriginName: wind_heading, Units: deg/2, IsExtended: false
        /// </summary>
        public byte WindHeading { get; set; }
        /// <summary>
        /// Maximum error horizontal position since last message
        /// OriginName: eph, Units: dm, IsExtended: false
        /// </summary>
        public byte Eph { get; set; }
        /// <summary>
        /// Maximum error vertical position since last message
        /// OriginName: epv, Units: dm, IsExtended: false
        /// </summary>
        public byte Epv { get; set; }
        /// <summary>
        /// Air temperature from airspeed sensor
        /// OriginName: temperature_air, Units: degC, IsExtended: false
        /// </summary>
        public sbyte TemperatureAir { get; set; }
        /// <summary>
        /// Maximum climb rate magnitude since last message
        /// OriginName: climb_rate, Units: dm/s, IsExtended: false
        /// </summary>
        public sbyte ClimbRate { get; set; }
        /// <summary>
        /// Battery level (-1 if field not provided).
        /// OriginName: battery, Units: %, IsExtended: false
        /// </summary>
        public sbyte Battery { get; set; }
        /// <summary>
        /// Field for custom payload.
        /// OriginName: custom0, Units: , IsExtended: false
        /// </summary>
        public sbyte Custom0 { get; set; }
        /// <summary>
        /// Field for custom payload.
        /// OriginName: custom1, Units: , IsExtended: false
        /// </summary>
        public sbyte Custom1 { get; set; }
        /// <summary>
        /// Field for custom payload.
        /// OriginName: custom2, Units: , IsExtended: false
        /// </summary>
        public sbyte Custom2 { get; set; }
    }
    /// <summary>
    /// Vibration levels and accelerometer clipping
    ///  VIBRATION
    /// </summary>
    public class VibrationPacket: PacketV2<VibrationPayload>
    {
	    public const int PacketMessageId = 241;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 90;
        public override bool WrapToV2Extension => false;

        public override VibrationPayload Payload { get; } = new VibrationPayload();

        public override string Name => "VIBRATION";
    }

    /// <summary>
    ///  VIBRATION
    /// </summary>
    public class VibrationPayload : IPayload
    {
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //VibrationX
            sum+=4; //VibrationY
            sum+=4; //VibrationZ
            sum+=4; //Clipping0
            sum+=4; //Clipping1
            sum+=4; //Clipping2
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            VibrationX = BinSerialize.ReadFloat(ref buffer);
            VibrationY = BinSerialize.ReadFloat(ref buffer);
            VibrationZ = BinSerialize.ReadFloat(ref buffer);
            Clipping0 = BinSerialize.ReadUInt(ref buffer);
            Clipping1 = BinSerialize.ReadUInt(ref buffer);
            Clipping2 = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,VibrationX);
            BinSerialize.WriteFloat(ref buffer,VibrationY);
            BinSerialize.WriteFloat(ref buffer,VibrationZ);
            BinSerialize.WriteUInt(ref buffer,Clipping0);
            BinSerialize.WriteUInt(ref buffer,Clipping1);
            BinSerialize.WriteUInt(ref buffer,Clipping2);
            /* PayloadByteSize = 32 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Vibration levels on X-axis
        /// OriginName: vibration_x, Units: , IsExtended: false
        /// </summary>
        public float VibrationX { get; set; }
        /// <summary>
        /// Vibration levels on Y-axis
        /// OriginName: vibration_y, Units: , IsExtended: false
        /// </summary>
        public float VibrationY { get; set; }
        /// <summary>
        /// Vibration levels on Z-axis
        /// OriginName: vibration_z, Units: , IsExtended: false
        /// </summary>
        public float VibrationZ { get; set; }
        /// <summary>
        /// first accelerometer clipping count
        /// OriginName: clipping_0, Units: , IsExtended: false
        /// </summary>
        public uint Clipping0 { get; set; }
        /// <summary>
        /// second accelerometer clipping count
        /// OriginName: clipping_1, Units: , IsExtended: false
        /// </summary>
        public uint Clipping1 { get; set; }
        /// <summary>
        /// third accelerometer clipping count
        /// OriginName: clipping_2, Units: , IsExtended: false
        /// </summary>
        public uint Clipping2 { get; set; }
    }
    /// <summary>
    /// 
    /// 	Contains the home position.
    /// 	The home position is the default position that the system will return to and land on.
    /// 	The position must be set automatically by the system during the takeoff, and may also be explicitly set using MAV_CMD_DO_SET_HOME.
    /// 	The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface.
    /// 	Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach.
    /// 	The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    ///         Note: this message can be requested by sending the MAV_CMD_REQUEST_MESSAGE with param1=242 (or the deprecated MAV_CMD_GET_HOME_POSITION command).
    ///       
    ///  HOME_POSITION
    /// </summary>
    public class HomePositionPacket: PacketV2<HomePositionPayload>
    {
	    public const int PacketMessageId = 242;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 104;
        public override bool WrapToV2Extension => false;

        public override HomePositionPayload Payload { get; } = new HomePositionPayload();

        public override string Name => "HOME_POSITION";
    }

    /// <summary>
    ///  HOME_POSITION
    /// </summary>
    public class HomePositionPayload : IPayload
    {
        public byte GetMaxByteSize() => 60; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 60; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Latitude
            sum+=4; //Longitude
            sum+=4; //Altitude
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=Q.Length * 4; //Q
            sum+=4; //ApproachX
            sum+=4; //ApproachY
            sum+=4; //ApproachZ
            sum+=8; //TimeUsec
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/60 - payloadSize - /*ExtendedFieldsLength*/8)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ApproachX = BinSerialize.ReadFloat(ref buffer);
            ApproachY = BinSerialize.ReadFloat(ref buffer);
            ApproachZ = BinSerialize.ReadFloat(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,ApproachX);
            BinSerialize.WriteFloat(ref buffer,ApproachY);
            BinSerialize.WriteFloat(ref buffer,ApproachZ);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 60 */;
        }
        
        



        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Latitude { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Longitude { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public int Altitude { get; set; }
        /// <summary>
        /// Local X position of this position in the local coordinate frame (NED)
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Local Y position of this position in the local coordinate frame (NED)
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Local Z position of this position in the local coordinate frame (NED: positive "down")
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// 
        ///         Quaternion indicating world-to-surface-normal and heading transformation of the takeoff position.
        ///         Used to indicate the heading and slope of the ground.
        ///         All fields should be set to NaN if an accurate quaternion for both heading and surface slope cannot be supplied.
        ///       
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_x, Units: m, IsExtended: false
        /// </summary>
        public float ApproachX { get; set; }
        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_y, Units: m, IsExtended: false
        /// </summary>
        public float ApproachY { get; set; }
        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_z, Units: m, IsExtended: false
        /// </summary>
        public float ApproachZ { get; set; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public ulong TimeUsec { get; set; }
    }
    /// <summary>
    /// 
    ///         Sets the home position.
    /// 	The home position is the default position that the system will return to and land on.
    ///         The position is set automatically by the system during the takeoff (and may also be set using this message).
    ///         The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface.
    ///         Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach.
    ///         The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    ///         Note: the current home position may be emitted in a HOME_POSITION message on request (using MAV_CMD_REQUEST_MESSAGE with param1=242).
    ///       
    ///  SET_HOME_POSITION
    /// </summary>
    public class SetHomePositionPacket: PacketV2<SetHomePositionPayload>
    {
	    public const int PacketMessageId = 243;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 85;
        public override bool WrapToV2Extension => false;

        public override SetHomePositionPayload Payload { get; } = new SetHomePositionPayload();

        public override string Name => "SET_HOME_POSITION";
    }

    /// <summary>
    ///  SET_HOME_POSITION
    /// </summary>
    public class SetHomePositionPayload : IPayload
    {
        public byte GetMaxByteSize() => 61; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 61; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Latitude
            sum+=4; //Longitude
            sum+=4; //Altitude
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=Q.Length * 4; //Q
            sum+=4; //ApproachX
            sum+=4; //ApproachY
            sum+=4; //ApproachZ
            sum+=1; //TargetSystem
            sum+=8; //TimeUsec
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/61 - payloadSize - /*ExtendedFieldsLength*/8)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ApproachX = BinSerialize.ReadFloat(ref buffer);
            ApproachY = BinSerialize.ReadFloat(ref buffer);
            ApproachZ = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'TimeUsec' can be empty
            if (buffer.IsEmpty) return;
            TimeUsec = BinSerialize.ReadULong(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,ApproachX);
            BinSerialize.WriteFloat(ref buffer,ApproachY);
            BinSerialize.WriteFloat(ref buffer,ApproachZ);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            /* PayloadByteSize = 61 */;
        }
        
        



        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Latitude { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Longitude { get; set; }
        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public int Altitude { get; set; }
        /// <summary>
        /// Local X position of this position in the local coordinate frame (NED)
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Local Y position of this position in the local coordinate frame (NED)
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Local Z position of this position in the local coordinate frame (NED: positive "down")
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_x, Units: m, IsExtended: false
        /// </summary>
        public float ApproachX { get; set; }
        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_y, Units: m, IsExtended: false
        /// </summary>
        public float ApproachY { get; set; }
        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// OriginName: approach_z, Units: m, IsExtended: false
        /// </summary>
        public float ApproachZ { get; set; }
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: true
        /// </summary>
        public ulong TimeUsec { get; set; }
    }
    /// <summary>
    /// 
    ///         The interval between messages for a particular MAVLink message ID.
    ///         This message is sent in response to the MAV_CMD_REQUEST_MESSAGE command with param1=244 (this message) and param2=message_id (the id of the message for which the interval is required).
    /// 	It may also be sent in response to MAV_CMD_GET_MESSAGE_INTERVAL.
    /// 	This interface replaces DATA_STREAM.
    ///  MESSAGE_INTERVAL
    /// </summary>
    public class MessageIntervalPacket: PacketV2<MessageIntervalPayload>
    {
	    public const int PacketMessageId = 244;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 95;
        public override bool WrapToV2Extension => false;

        public override MessageIntervalPayload Payload { get; } = new MessageIntervalPayload();

        public override string Name => "MESSAGE_INTERVAL";
    }

    /// <summary>
    ///  MESSAGE_INTERVAL
    /// </summary>
    public class MessageIntervalPayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //IntervalUs
            sum+=2; //MessageId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            IntervalUs = BinSerialize.ReadInt(ref buffer);
            MessageId = BinSerialize.ReadUShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,IntervalUs);
            BinSerialize.WriteUShort(ref buffer,MessageId);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent.
        /// OriginName: interval_us, Units: us, IsExtended: false
        /// </summary>
        public int IntervalUs { get; set; }
        /// <summary>
        /// The ID of the requested MAVLink message. v1.0 is limited to 254 messages.
        /// OriginName: message_id, Units: , IsExtended: false
        /// </summary>
        public ushort MessageId { get; set; }
    }
    /// <summary>
    /// Provides state for additional features
    ///  EXTENDED_SYS_STATE
    /// </summary>
    public class ExtendedSysStatePacket: PacketV2<ExtendedSysStatePayload>
    {
	    public const int PacketMessageId = 245;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 130;
        public override bool WrapToV2Extension => false;

        public override ExtendedSysStatePayload Payload { get; } = new ExtendedSysStatePayload();

        public override string Name => "EXTENDED_SYS_STATE";
    }

    /// <summary>
    ///  EXTENDED_SYS_STATE
    /// </summary>
    public class ExtendedSysStatePayload : IPayload
    {
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 1; // VtolState
            sum+= 1; // LandedState
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            VtolState = (MavVtolState)BinSerialize.ReadByte(ref buffer);
            LandedState = (MavLandedState)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)VtolState);
            BinSerialize.WriteByte(ref buffer,(byte)LandedState);
            /* PayloadByteSize = 2 */;
        }
        
        



        /// <summary>
        /// The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration.
        /// OriginName: vtol_state, Units: , IsExtended: false
        /// </summary>
        public MavVtolState VtolState { get; set; }
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// OriginName: landed_state, Units: , IsExtended: false
        /// </summary>
        public MavLandedState LandedState { get; set; }
    }
    /// <summary>
    /// The location and information of an ADSB vehicle
    ///  ADSB_VEHICLE
    /// </summary>
    public class AdsbVehiclePacket: PacketV2<AdsbVehiclePayload>
    {
	    public const int PacketMessageId = 246;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 184;
        public override bool WrapToV2Extension => false;

        public override AdsbVehiclePayload Payload { get; } = new AdsbVehiclePayload();

        public override string Name => "ADSB_VEHICLE";
    }

    /// <summary>
    ///  ADSB_VEHICLE
    /// </summary>
    public class AdsbVehiclePayload : IPayload
    {
        public byte GetMaxByteSize() => 38; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 38; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //IcaoAddress
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Altitude
            sum+=2; //Heading
            sum+=2; //HorVelocity
            sum+=2; //VerVelocity
            sum+= 2; // Flags
            sum+=2; //Squawk
            sum+= 1; // AltitudeType
            sum+=Callsign.Length; //Callsign
            sum+= 1; // EmitterType
            sum+=1; //Tslc
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            IcaoAddress = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Altitude = BinSerialize.ReadInt(ref buffer);
            Heading = BinSerialize.ReadUShort(ref buffer);
            HorVelocity = BinSerialize.ReadUShort(ref buffer);
            VerVelocity = BinSerialize.ReadShort(ref buffer);
            Flags = (AdsbFlags)BinSerialize.ReadUShort(ref buffer);
            Squawk = BinSerialize.ReadUShort(ref buffer);
            AltitudeType = (AdsbAltitudeType)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/9 - Math.Max(0,((/*PayloadByteSize*/38 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Callsign = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Callsign.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            EmitterType = (AdsbEmitterType)BinSerialize.ReadByte(ref buffer);
            Tslc = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,IcaoAddress);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Altitude);
            BinSerialize.WriteUShort(ref buffer,Heading);
            BinSerialize.WriteUShort(ref buffer,HorVelocity);
            BinSerialize.WriteShort(ref buffer,VerVelocity);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteUShort(ref buffer,Squawk);
            BinSerialize.WriteByte(ref buffer,(byte)AltitudeType);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetBytes(charPointer, Callsign.Length, bytePointer, Callsign.Length);
                }
            }
            buffer = buffer.Slice(Callsign.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)EmitterType);
            BinSerialize.WriteByte(ref buffer,(byte)Tslc);
            /* PayloadByteSize = 38 */;
        }
        
        



        /// <summary>
        /// ICAO address
        /// OriginName: ICAO_address, Units: , IsExtended: false
        /// </summary>
        public uint IcaoAddress { get; set; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude(ASL)
        /// OriginName: altitude, Units: mm, IsExtended: false
        /// </summary>
        public int Altitude { get; set; }
        /// <summary>
        /// Course over ground
        /// OriginName: heading, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Heading { get; set; }
        /// <summary>
        /// The horizontal velocity
        /// OriginName: hor_velocity, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort HorVelocity { get; set; }
        /// <summary>
        /// The vertical velocity. Positive is up
        /// OriginName: ver_velocity, Units: cm/s, IsExtended: false
        /// </summary>
        public short VerVelocity { get; set; }
        /// <summary>
        /// Bitmap to indicate various statuses including valid data fields
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public AdsbFlags Flags { get; set; }
        /// <summary>
        /// Squawk code
        /// OriginName: squawk, Units: , IsExtended: false
        /// </summary>
        public ushort Squawk { get; set; }
        /// <summary>
        /// ADSB altitude type.
        /// OriginName: altitude_type, Units: , IsExtended: false
        /// </summary>
        public AdsbAltitudeType AltitudeType { get; set; }
        /// <summary>
        /// The callsign, 8+null
        /// OriginName: callsign, Units: , IsExtended: false
        /// </summary>
        public const int CallsignMaxItemsCount = 9;
        public char[] Callsign { get; set; } = new char[9];
        [Obsolete("This method is deprecated. Use GetCallsignMaxItemsCount instead.")]
        public byte GetCallsignMaxItemsCount() => 9;
        /// <summary>
        /// ADSB emitter type.
        /// OriginName: emitter_type, Units: , IsExtended: false
        /// </summary>
        public AdsbEmitterType EmitterType { get; set; }
        /// <summary>
        /// Time since last communication in seconds
        /// OriginName: tslc, Units: s, IsExtended: false
        /// </summary>
        public byte Tslc { get; set; }
    }
    /// <summary>
    /// Information about a potential collision
    ///  COLLISION
    /// </summary>
    public class CollisionPacket: PacketV2<CollisionPayload>
    {
	    public const int PacketMessageId = 247;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 81;
        public override bool WrapToV2Extension => false;

        public override CollisionPayload Payload { get; } = new CollisionPayload();

        public override string Name => "COLLISION";
    }

    /// <summary>
    ///  COLLISION
    /// </summary>
    public class CollisionPayload : IPayload
    {
        public byte GetMaxByteSize() => 19; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 19; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Id
            sum+=4; //TimeToMinimumDelta
            sum+=4; //AltitudeMinimumDelta
            sum+=4; //HorizontalMinimumDelta
            sum+= 1; // Src
            sum+= 1; // Action
            sum+= 1; // ThreatLevel
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Id = BinSerialize.ReadUInt(ref buffer);
            TimeToMinimumDelta = BinSerialize.ReadFloat(ref buffer);
            AltitudeMinimumDelta = BinSerialize.ReadFloat(ref buffer);
            HorizontalMinimumDelta = BinSerialize.ReadFloat(ref buffer);
            Src = (MavCollisionSrc)BinSerialize.ReadByte(ref buffer);
            Action = (MavCollisionAction)BinSerialize.ReadByte(ref buffer);
            ThreatLevel = (MavCollisionThreatLevel)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteFloat(ref buffer,TimeToMinimumDelta);
            BinSerialize.WriteFloat(ref buffer,AltitudeMinimumDelta);
            BinSerialize.WriteFloat(ref buffer,HorizontalMinimumDelta);
            BinSerialize.WriteByte(ref buffer,(byte)Src);
            BinSerialize.WriteByte(ref buffer,(byte)Action);
            BinSerialize.WriteByte(ref buffer,(byte)ThreatLevel);
            /* PayloadByteSize = 19 */;
        }
        
        



        /// <summary>
        /// Unique identifier, domain based on src field
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public uint Id { get; set; }
        /// <summary>
        /// Estimated time until collision occurs
        /// OriginName: time_to_minimum_delta, Units: s, IsExtended: false
        /// </summary>
        public float TimeToMinimumDelta { get; set; }
        /// <summary>
        /// Closest vertical distance between vehicle and object
        /// OriginName: altitude_minimum_delta, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeMinimumDelta { get; set; }
        /// <summary>
        /// Closest horizontal distance between vehicle and object
        /// OriginName: horizontal_minimum_delta, Units: m, IsExtended: false
        /// </summary>
        public float HorizontalMinimumDelta { get; set; }
        /// <summary>
        /// Collision data source
        /// OriginName: src, Units: , IsExtended: false
        /// </summary>
        public MavCollisionSrc Src { get; set; }
        /// <summary>
        /// Action that is being taken to avoid this collision
        /// OriginName: action, Units: , IsExtended: false
        /// </summary>
        public MavCollisionAction Action { get; set; }
        /// <summary>
        /// How concerned the aircraft is about this collision
        /// OriginName: threat_level, Units: , IsExtended: false
        /// </summary>
        public MavCollisionThreatLevel ThreatLevel { get; set; }
    }
    /// <summary>
    /// Message implementing parts of the V2 payload specs in V1 frames for transitional support.
    ///  V2_EXTENSION
    /// </summary>
    public class V2ExtensionPacket: PacketV2<V2ExtensionPayload>
    {
	    public const int PacketMessageId = 248;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 8;
        public override bool WrapToV2Extension => false;

        public override V2ExtensionPayload Payload { get; } = new V2ExtensionPayload();

        public override string Name => "V2_EXTENSION";
    }

    /// <summary>
    ///  V2_EXTENSION
    /// </summary>
    public class V2ExtensionPayload : IPayload
    {
        public byte GetMaxByteSize() => 254; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 254; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //MessageType
            sum+=1; //TargetNetwork
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=Payload.Length; //Payload
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            MessageType = BinSerialize.ReadUShort(ref buffer);
            TargetNetwork = (byte)BinSerialize.ReadByte(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/249 - Math.Max(0,((/*PayloadByteSize*/254 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Payload = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Payload[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,MessageType);
            BinSerialize.WriteByte(ref buffer,(byte)TargetNetwork);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<Payload.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Payload[i]);
            }
            /* PayloadByteSize = 254 */;
        }
        
        



        /// <summary>
        /// A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// OriginName: message_type, Units: , IsExtended: false
        /// </summary>
        public ushort MessageType { get; set; }
        /// <summary>
        /// Network ID (0 for broadcast)
        /// OriginName: target_network, Units: , IsExtended: false
        /// </summary>
        public byte TargetNetwork { get; set; }
        /// <summary>
        /// System ID (0 for broadcast)
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast)
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification.
        /// OriginName: payload, Units: , IsExtended: false
        /// </summary>
        public const int PayloadMaxItemsCount = 249;
        public byte[] Payload { get; set; } = new byte[249];
        [Obsolete("This method is deprecated. Use GetPayloadMaxItemsCount instead.")]
        public byte GetPayloadMaxItemsCount() => 249;
    }
    /// <summary>
    /// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    ///  MEMORY_VECT
    /// </summary>
    public class MemoryVectPacket: PacketV2<MemoryVectPayload>
    {
	    public const int PacketMessageId = 249;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 204;
        public override bool WrapToV2Extension => false;

        public override MemoryVectPayload Payload { get; } = new MemoryVectPayload();

        public override string Name => "MEMORY_VECT";
    }

    /// <summary>
    ///  MEMORY_VECT
    /// </summary>
    public class MemoryVectPayload : IPayload
    {
        public byte GetMaxByteSize() => 36; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 36; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Address
            sum+=1; //Ver
            sum+=1; //Type
            sum+=Value.Length; //Value
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Address = BinSerialize.ReadUShort(ref buffer);
            Ver = (byte)BinSerialize.ReadByte(ref buffer);
            Type = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/36 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Value = new sbyte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Value[i] = (sbyte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Address);
            BinSerialize.WriteByte(ref buffer,(byte)Ver);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            for(var i=0;i<Value.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Value[i]);
            }
            /* PayloadByteSize = 36 */;
        }
        
        



        /// <summary>
        /// Starting address of the debug variables
        /// OriginName: address, Units: , IsExtended: false
        /// </summary>
        public ushort Address { get; set; }
        /// <summary>
        /// Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
        /// OriginName: ver, Units: , IsExtended: false
        /// </summary>
        public byte Ver { get; set; }
        /// <summary>
        /// Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public byte Type { get; set; }
        /// <summary>
        /// Memory contents at specified address
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public const int ValueMaxItemsCount = 32;
        public sbyte[] Value { get; set; } = new sbyte[32];
        [Obsolete("This method is deprecated. Use GetValueMaxItemsCount instead.")]
        public byte GetValueMaxItemsCount() => 32;
    }
    /// <summary>
    /// To debug something using a named 3D vector.
    ///  DEBUG_VECT
    /// </summary>
    public class DebugVectPacket: PacketV2<DebugVectPayload>
    {
	    public const int PacketMessageId = 250;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 49;
        public override bool WrapToV2Extension => false;

        public override DebugVectPayload Payload { get; } = new DebugVectPayload();

        public override string Name => "DEBUG_VECT";
    }

    /// <summary>
    ///  DEBUG_VECT
    /// </summary>
    public class DebugVectPayload : IPayload
    {
        public byte GetMaxByteSize() => 30; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 30; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=Name.Length; //Name
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/30 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Name = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 30 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// x
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// y
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// z
        /// OriginName: z, Units: , IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Name
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; set; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
    }
    /// <summary>
    /// Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    ///  NAMED_VALUE_FLOAT
    /// </summary>
    public class NamedValueFloatPacket: PacketV2<NamedValueFloatPayload>
    {
	    public const int PacketMessageId = 251;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 170;
        public override bool WrapToV2Extension => false;

        public override NamedValueFloatPayload Payload { get; } = new NamedValueFloatPayload();

        public override string Name => "NAMED_VALUE_FLOAT";
    }

    /// <summary>
    ///  NAMED_VALUE_FLOAT
    /// </summary>
    public class NamedValueFloatPayload : IPayload
    {
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Value
            sum+=Name.Length; //Name
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Value = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/18 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Name = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Value);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 18 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Floating point value
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public float Value { get; set; }
        /// <summary>
        /// Name of the debug variable
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; set; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
    }
    /// <summary>
    /// Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    ///  NAMED_VALUE_INT
    /// </summary>
    public class NamedValueIntPacket: PacketV2<NamedValueIntPayload>
    {
	    public const int PacketMessageId = 252;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 44;
        public override bool WrapToV2Extension => false;

        public override NamedValueIntPayload Payload { get; } = new NamedValueIntPayload();

        public override string Name => "NAMED_VALUE_INT";
    }

    /// <summary>
    ///  NAMED_VALUE_INT
    /// </summary>
    public class NamedValueIntPayload : IPayload
    {
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Value
            sum+=Name.Length; //Name
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Value = BinSerialize.ReadInt(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/18 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Name = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,Value);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 18 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Signed integer value
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public int Value { get; set; }
        /// <summary>
        /// Name of the debug variable
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; set; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
    }
    /// <summary>
    /// Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
    ///  STATUSTEXT
    /// </summary>
    public class StatustextPacket: PacketV2<StatustextPayload>
    {
	    public const int PacketMessageId = 253;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 83;
        public override bool WrapToV2Extension => false;

        public override StatustextPayload Payload { get; } = new StatustextPayload();

        public override string Name => "STATUSTEXT";
    }

    /// <summary>
    ///  STATUSTEXT
    /// </summary>
    public class StatustextPayload : IPayload
    {
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 1; // Severity
            sum+=Text.Length; //Text
            sum+=2; //Id
            sum+=1; //ChunkSeq
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Severity = (MavSeverity)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/50 - Math.Max(0,((/*PayloadByteSize*/54 - payloadSize - /*ExtendedFieldsLength*/3)/1 /*FieldTypeByteSize*/));
            Text = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Text)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Text.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'Id' can be empty
            if (buffer.IsEmpty) return;
            Id = BinSerialize.ReadUShort(ref buffer);
            // extended field 'ChunkSeq' can be empty
            if (buffer.IsEmpty) return;
            ChunkSeq = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)Severity);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Text)
                {
                    Encoding.ASCII.GetBytes(charPointer, Text.Length, bytePointer, Text.Length);
                }
            }
            buffer = buffer.Slice(Text.Length);
            
            BinSerialize.WriteUShort(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)ChunkSeq);
            /* PayloadByteSize = 54 */;
        }
        
        



        /// <summary>
        /// Severity of status. Relies on the definitions within RFC-5424.
        /// OriginName: severity, Units: , IsExtended: false
        /// </summary>
        public MavSeverity Severity { get; set; }
        /// <summary>
        /// Status text message, without null termination character
        /// OriginName: text, Units: , IsExtended: false
        /// </summary>
        public const int TextMaxItemsCount = 50;
        public char[] Text { get; set; } = new char[50];
        [Obsolete("This method is deprecated. Use GetTextMaxItemsCount instead.")]
        public byte GetTextMaxItemsCount() => 50;
        /// <summary>
        /// Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately.
        /// OriginName: id, Units: , IsExtended: true
        /// </summary>
        public ushort Id { get; set; }
        /// <summary>
        /// This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk.
        /// OriginName: chunk_seq, Units: , IsExtended: true
        /// </summary>
        public byte ChunkSeq { get; set; }
    }
    /// <summary>
    /// Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
    ///  DEBUG
    /// </summary>
    public class DebugPacket: PacketV2<DebugPayload>
    {
	    public const int PacketMessageId = 254;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 46;
        public override bool WrapToV2Extension => false;

        public override DebugPayload Payload { get; } = new DebugPayload();

        public override string Name => "DEBUG";
    }

    /// <summary>
    ///  DEBUG
    /// </summary>
    public class DebugPayload : IPayload
    {
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Value
            sum+=1; //Ind
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Value = BinSerialize.ReadFloat(ref buffer);
            Ind = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Value);
            BinSerialize.WriteByte(ref buffer,(byte)Ind);
            /* PayloadByteSize = 9 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// DEBUG value
        /// OriginName: value, Units: , IsExtended: false
        /// </summary>
        public float Value { get; set; }
        /// <summary>
        /// index of debug variable
        /// OriginName: ind, Units: , IsExtended: false
        /// </summary>
        public byte Ind { get; set; }
    }
    /// <summary>
    /// Setup a MAVLink2 signing key. If called with secret_key of all zero and zero initial_timestamp will disable signing
    ///  SETUP_SIGNING
    /// </summary>
    public class SetupSigningPacket: PacketV2<SetupSigningPayload>
    {
	    public const int PacketMessageId = 256;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 71;
        public override bool WrapToV2Extension => false;

        public override SetupSigningPayload Payload { get; } = new SetupSigningPayload();

        public override string Name => "SETUP_SIGNING";
    }

    /// <summary>
    ///  SETUP_SIGNING
    /// </summary>
    public class SetupSigningPayload : IPayload
    {
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //InitialTimestamp
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=SecretKey.Length; //SecretKey
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            InitialTimestamp = BinSerialize.ReadULong(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/42 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            SecretKey = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                SecretKey[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,InitialTimestamp);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<SecretKey.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)SecretKey[i]);
            }
            /* PayloadByteSize = 42 */;
        }
        
        



        /// <summary>
        /// initial timestamp
        /// OriginName: initial_timestamp, Units: , IsExtended: false
        /// </summary>
        public ulong InitialTimestamp { get; set; }
        /// <summary>
        /// system id of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// signing key
        /// OriginName: secret_key, Units: , IsExtended: false
        /// </summary>
        public const int SecretKeyMaxItemsCount = 32;
        public byte[] SecretKey { get; set; } = new byte[32];
        [Obsolete("This method is deprecated. Use GetSecretKeyMaxItemsCount instead.")]
        public byte GetSecretKeyMaxItemsCount() => 32;
    }
    /// <summary>
    /// Report button state change.
    ///  BUTTON_CHANGE
    /// </summary>
    public class ButtonChangePacket: PacketV2<ButtonChangePayload>
    {
	    public const int PacketMessageId = 257;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 131;
        public override bool WrapToV2Extension => false;

        public override ButtonChangePayload Payload { get; } = new ButtonChangePayload();

        public override string Name => "BUTTON_CHANGE";
    }

    /// <summary>
    ///  BUTTON_CHANGE
    /// </summary>
    public class ButtonChangePayload : IPayload
    {
        public byte GetMaxByteSize() => 9; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 9; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //LastChangeMs
            sum+=1; //State
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LastChangeMs = BinSerialize.ReadUInt(ref buffer);
            State = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,LastChangeMs);
            BinSerialize.WriteByte(ref buffer,(byte)State);
            /* PayloadByteSize = 9 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Time of last change of button state.
        /// OriginName: last_change_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint LastChangeMs { get; set; }
        /// <summary>
        /// Bitmap for state of buttons.
        /// OriginName: state, Units: , IsExtended: false
        /// </summary>
        public byte State { get; set; }
    }
    /// <summary>
    /// Control vehicle tone generation (buzzer).
    ///  PLAY_TUNE
    /// </summary>
    public class PlayTunePacket: PacketV2<PlayTunePayload>
    {
	    public const int PacketMessageId = 258;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 187;
        public override bool WrapToV2Extension => false;

        public override PlayTunePayload Payload { get; } = new PlayTunePayload();

        public override string Name => "PLAY_TUNE";
    }

    /// <summary>
    ///  PLAY_TUNE
    /// </summary>
    public class PlayTunePayload : IPayload
    {
        public byte GetMaxByteSize() => 232; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 232; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=Tune.Length; //Tune
            sum+=Tune2.Length; //Tune2
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/30 - Math.Max(0,((/*PayloadByteSize*/232 - payloadSize - /*ExtendedFieldsLength*/200)/1 /*FieldTypeByteSize*/));
            Tune = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Tune.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'Tune2' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 200;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune2)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Tune2.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetBytes(charPointer, Tune.Length, bytePointer, Tune.Length);
                }
            }
            buffer = buffer.Slice(Tune.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune2)
                {
                    Encoding.ASCII.GetBytes(charPointer, Tune2.Length, bytePointer, Tune2.Length);
                }
            }
            buffer = buffer.Slice(Tune2.Length);
            
            /* PayloadByteSize = 232 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// tune in board specific format
        /// OriginName: tune, Units: , IsExtended: false
        /// </summary>
        public const int TuneMaxItemsCount = 30;
        public char[] Tune { get; set; } = new char[30];
        [Obsolete("This method is deprecated. Use GetTuneMaxItemsCount instead.")]
        public byte GetTuneMaxItemsCount() => 30;
        /// <summary>
        /// tune extension (appended to tune)
        /// OriginName: tune2, Units: , IsExtended: true
        /// </summary>
        public const int Tune2MaxItemsCount = 200;
        public char[] Tune2 { get; } = new char[200];
    }
    /// <summary>
    /// Information about a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_INFORMATION
    /// </summary>
    public class CameraInformationPacket: PacketV2<CameraInformationPayload>
    {
	    public const int PacketMessageId = 259;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 92;
        public override bool WrapToV2Extension => false;

        public override CameraInformationPayload Payload { get; } = new CameraInformationPayload();

        public override string Name => "CAMERA_INFORMATION";
    }

    /// <summary>
    ///  CAMERA_INFORMATION
    /// </summary>
    public class CameraInformationPayload : IPayload
    {
        public byte GetMaxByteSize() => 236; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 236; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //FirmwareVersion
            sum+=4; //FocalLength
            sum+=4; //SensorSizeH
            sum+=4; //SensorSizeV
            sum+= 4; // Flags
            sum+=2; //ResolutionH
            sum+=2; //ResolutionV
            sum+=2; //CamDefinitionVersion
            sum+=VendorName.Length; //VendorName
            sum+=ModelName.Length; //ModelName
            sum+=1; //LensId
            sum+=CamDefinitionUri.Length; //CamDefinitionUri
            sum+=1; //GimbalDeviceId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            FirmwareVersion = BinSerialize.ReadUInt(ref buffer);
            FocalLength = BinSerialize.ReadFloat(ref buffer);
            SensorSizeH = BinSerialize.ReadFloat(ref buffer);
            SensorSizeV = BinSerialize.ReadFloat(ref buffer);
            Flags = (CameraCapFlags)BinSerialize.ReadUInt(ref buffer);
            ResolutionH = BinSerialize.ReadUShort(ref buffer);
            ResolutionV = BinSerialize.ReadUShort(ref buffer);
            CamDefinitionVersion = BinSerialize.ReadUShort(ref buffer);
            arraySize = 32;
            for(var i=0;i<arraySize;i++)
            {
                VendorName[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 32;
            for(var i=0;i<arraySize;i++)
            {
                ModelName[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            LensId = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/140 - Math.Max(0,((/*PayloadByteSize*/236 - payloadSize - /*ExtendedFieldsLength*/1)/1 /*FieldTypeByteSize*/));
            CamDefinitionUri = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CamDefinitionUri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, CamDefinitionUri.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'GimbalDeviceId' can be empty
            if (buffer.IsEmpty) return;
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,FirmwareVersion);
            BinSerialize.WriteFloat(ref buffer,FocalLength);
            BinSerialize.WriteFloat(ref buffer,SensorSizeH);
            BinSerialize.WriteFloat(ref buffer,SensorSizeV);
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteUShort(ref buffer,ResolutionH);
            BinSerialize.WriteUShort(ref buffer,ResolutionV);
            BinSerialize.WriteUShort(ref buffer,CamDefinitionVersion);
            for(var i=0;i<VendorName.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)VendorName[i]);
            }
            for(var i=0;i<ModelName.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)ModelName[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)LensId);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CamDefinitionUri)
                {
                    Encoding.ASCII.GetBytes(charPointer, CamDefinitionUri.Length, bytePointer, CamDefinitionUri.Length);
                }
            }
            buffer = buffer.Slice(CamDefinitionUri.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 236 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Version of the camera firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff). Use 0 if not known.
        /// OriginName: firmware_version, Units: , IsExtended: false
        /// </summary>
        public uint FirmwareVersion { get; set; }
        /// <summary>
        /// Focal length. Use NaN if not known.
        /// OriginName: focal_length, Units: mm, IsExtended: false
        /// </summary>
        public float FocalLength { get; set; }
        /// <summary>
        /// Image sensor size horizontal. Use NaN if not known.
        /// OriginName: sensor_size_h, Units: mm, IsExtended: false
        /// </summary>
        public float SensorSizeH { get; set; }
        /// <summary>
        /// Image sensor size vertical. Use NaN if not known.
        /// OriginName: sensor_size_v, Units: mm, IsExtended: false
        /// </summary>
        public float SensorSizeV { get; set; }
        /// <summary>
        /// Bitmap of camera capability flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public CameraCapFlags Flags { get; set; }
        /// <summary>
        /// Horizontal image resolution. Use 0 if not known.
        /// OriginName: resolution_h, Units: pix, IsExtended: false
        /// </summary>
        public ushort ResolutionH { get; set; }
        /// <summary>
        /// Vertical image resolution. Use 0 if not known.
        /// OriginName: resolution_v, Units: pix, IsExtended: false
        /// </summary>
        public ushort ResolutionV { get; set; }
        /// <summary>
        /// Camera definition version (iteration).  Use 0 if not known.
        /// OriginName: cam_definition_version, Units: , IsExtended: false
        /// </summary>
        public ushort CamDefinitionVersion { get; set; }
        /// <summary>
        /// Name of the camera vendor
        /// OriginName: vendor_name, Units: , IsExtended: false
        /// </summary>
        public const int VendorNameMaxItemsCount = 32;
        public byte[] VendorName { get; } = new byte[32];
        /// <summary>
        /// Name of the camera model
        /// OriginName: model_name, Units: , IsExtended: false
        /// </summary>
        public const int ModelNameMaxItemsCount = 32;
        public byte[] ModelName { get; } = new byte[32];
        /// <summary>
        /// Reserved for a lens ID.  Use 0 if not known.
        /// OriginName: lens_id, Units: , IsExtended: false
        /// </summary>
        public byte LensId { get; set; }
        /// <summary>
        /// Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol). The definition file may be xz compressed, which will be indicated by the file extension .xml.xz (a GCS that implements the protocol must support decompressing the file). The string needs to be zero terminated.  Use a zero-length string if not known.
        /// OriginName: cam_definition_uri, Units: , IsExtended: false
        /// </summary>
        public const int CamDefinitionUriMaxItemsCount = 140;
        public char[] CamDefinitionUri { get; set; } = new char[140];
        [Obsolete("This method is deprecated. Use GetCamDefinitionUriMaxItemsCount instead.")]
        public byte GetCamDefinitionUriMaxItemsCount() => 140;
        /// <summary>
        /// Gimbal id of a gimbal associated with this camera. This is the component id of the gimbal device, or 1-6 for non mavlink gimbals. Use 0 if no gimbal is associated with the camera.
        /// OriginName: gimbal_device_id, Units: , IsExtended: true
        /// </summary>
        public byte GimbalDeviceId { get; set; }
    }
    /// <summary>
    /// Settings of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_SETTINGS
    /// </summary>
    public class CameraSettingsPacket: PacketV2<CameraSettingsPayload>
    {
	    public const int PacketMessageId = 260;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 146;
        public override bool WrapToV2Extension => false;

        public override CameraSettingsPayload Payload { get; } = new CameraSettingsPayload();

        public override string Name => "CAMERA_SETTINGS";
    }

    /// <summary>
    ///  CAMERA_SETTINGS
    /// </summary>
    public class CameraSettingsPayload : IPayload
    {
        public byte GetMaxByteSize() => 13; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 13; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+= 1; // ModeId
            sum+=4; //Zoomlevel
            sum+=4; //Focuslevel
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            ModeId = (CameraMode)BinSerialize.ReadByte(ref buffer);
            // extended field 'Zoomlevel' can be empty
            if (buffer.IsEmpty) return;
            Zoomlevel = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Focuslevel' can be empty
            if (buffer.IsEmpty) return;
            Focuslevel = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteByte(ref buffer,(byte)ModeId);
            BinSerialize.WriteFloat(ref buffer,Zoomlevel);
            BinSerialize.WriteFloat(ref buffer,Focuslevel);
            /* PayloadByteSize = 13 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Camera mode
        /// OriginName: mode_id, Units: , IsExtended: false
        /// </summary>
        public CameraMode ModeId { get; set; }
        /// <summary>
        /// Current zoom level as a percentage of the full range (0.0 to 100.0, NaN if not known)
        /// OriginName: zoomLevel, Units: , IsExtended: true
        /// </summary>
        public float Zoomlevel { get; set; }
        /// <summary>
        /// Current focus level as a percentage of the full range (0.0 to 100.0, NaN if not known)
        /// OriginName: focusLevel, Units: , IsExtended: true
        /// </summary>
        public float Focuslevel { get; set; }
    }
    /// <summary>
    /// Information about a storage medium. This message is sent in response to a request with MAV_CMD_REQUEST_MESSAGE and whenever the status of the storage changes (STORAGE_STATUS). Use MAV_CMD_REQUEST_MESSAGE.param2 to indicate the index/id of requested storage: 0 for all, 1 for first, 2 for second, etc.
    ///  STORAGE_INFORMATION
    /// </summary>
    public class StorageInformationPacket: PacketV2<StorageInformationPayload>
    {
	    public const int PacketMessageId = 261;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 179;
        public override bool WrapToV2Extension => false;

        public override StorageInformationPayload Payload { get; } = new StorageInformationPayload();

        public override string Name => "STORAGE_INFORMATION";
    }

    /// <summary>
    ///  STORAGE_INFORMATION
    /// </summary>
    public class StorageInformationPayload : IPayload
    {
        public byte GetMaxByteSize() => 61; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 61; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //TotalCapacity
            sum+=4; //UsedCapacity
            sum+=4; //AvailableCapacity
            sum+=4; //ReadSpeed
            sum+=4; //WriteSpeed
            sum+=1; //StorageId
            sum+=1; //StorageCount
            sum+= 1; // Status
            sum+= 1; // Type
            sum+=Name.Length; //Name
            sum+= 1; // StorageUsage
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            TotalCapacity = BinSerialize.ReadFloat(ref buffer);
            UsedCapacity = BinSerialize.ReadFloat(ref buffer);
            AvailableCapacity = BinSerialize.ReadFloat(ref buffer);
            ReadSpeed = BinSerialize.ReadFloat(ref buffer);
            WriteSpeed = BinSerialize.ReadFloat(ref buffer);
            StorageId = (byte)BinSerialize.ReadByte(ref buffer);
            StorageCount = (byte)BinSerialize.ReadByte(ref buffer);
            Status = (StorageStatus)BinSerialize.ReadByte(ref buffer);
            // extended field 'Type' can be empty
            if (buffer.IsEmpty) return;
            Type = (StorageType)BinSerialize.ReadByte(ref buffer);
            // extended field 'Name' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'StorageUsage' can be empty
            if (buffer.IsEmpty) return;
            StorageUsage = (StorageUsageFlag)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,TotalCapacity);
            BinSerialize.WriteFloat(ref buffer,UsedCapacity);
            BinSerialize.WriteFloat(ref buffer,AvailableCapacity);
            BinSerialize.WriteFloat(ref buffer,ReadSpeed);
            BinSerialize.WriteFloat(ref buffer,WriteSpeed);
            BinSerialize.WriteByte(ref buffer,(byte)StorageId);
            BinSerialize.WriteByte(ref buffer,(byte)StorageCount);
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)StorageUsage);
            /* PayloadByteSize = 61 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// OriginName: total_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public float TotalCapacity { get; set; }
        /// <summary>
        /// Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// OriginName: used_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public float UsedCapacity { get; set; }
        /// <summary>
        /// Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// OriginName: available_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public float AvailableCapacity { get; set; }
        /// <summary>
        /// Read speed.
        /// OriginName: read_speed, Units: MiB/s, IsExtended: false
        /// </summary>
        public float ReadSpeed { get; set; }
        /// <summary>
        /// Write speed.
        /// OriginName: write_speed, Units: MiB/s, IsExtended: false
        /// </summary>
        public float WriteSpeed { get; set; }
        /// <summary>
        /// Storage ID (1 for first, 2 for second, etc.)
        /// OriginName: storage_id, Units: , IsExtended: false
        /// </summary>
        public byte StorageId { get; set; }
        /// <summary>
        /// Number of storage devices
        /// OriginName: storage_count, Units: , IsExtended: false
        /// </summary>
        public byte StorageCount { get; set; }
        /// <summary>
        /// Status of storage
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public StorageStatus Status { get; set; }
        /// <summary>
        /// Type of storage
        /// OriginName: type, Units: , IsExtended: true
        /// </summary>
        public StorageType Type { get; set; }
        /// <summary>
        /// Textual storage name to be used in UI (microSD 1, Internal Memory, etc.) This is a NULL terminated string. If it is exactly 32 characters long, add a terminating NULL. If this string is empty, the generic type is shown to the user.
        /// OriginName: name, Units: , IsExtended: true
        /// </summary>
        public const int NameMaxItemsCount = 32;
        public char[] Name { get; } = new char[32];
        /// <summary>
        /// Flags indicating whether this instance is preferred storage for photos, videos, etc.
        ///         Note: Implementations should initially set the flags on the system-default storage id used for saving media (if possible/supported).
        ///         This setting can then be overridden using MAV_CMD_SET_STORAGE_USAGE.
        ///         If the media usage flags are not set, a GCS may assume storage ID 1 is the default storage for all media types.
        /// OriginName: storage_usage, Units: , IsExtended: true
        /// </summary>
        public StorageUsageFlag StorageUsage { get; set; }
    }
    /// <summary>
    /// Information about the status of a capture. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_CAPTURE_STATUS
    /// </summary>
    public class CameraCaptureStatusPacket: PacketV2<CameraCaptureStatusPayload>
    {
	    public const int PacketMessageId = 262;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 12;
        public override bool WrapToV2Extension => false;

        public override CameraCaptureStatusPayload Payload { get; } = new CameraCaptureStatusPayload();

        public override string Name => "CAMERA_CAPTURE_STATUS";
    }

    /// <summary>
    ///  CAMERA_CAPTURE_STATUS
    /// </summary>
    public class CameraCaptureStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 22; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 22; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //ImageInterval
            sum+=4; //RecordingTimeMs
            sum+=4; //AvailableCapacity
            sum+=1; //ImageStatus
            sum+=1; //VideoStatus
            sum+=4; //ImageCount
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            ImageInterval = BinSerialize.ReadFloat(ref buffer);
            RecordingTimeMs = BinSerialize.ReadUInt(ref buffer);
            AvailableCapacity = BinSerialize.ReadFloat(ref buffer);
            ImageStatus = (byte)BinSerialize.ReadByte(ref buffer);
            VideoStatus = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'ImageCount' can be empty
            if (buffer.IsEmpty) return;
            ImageCount = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,ImageInterval);
            BinSerialize.WriteUInt(ref buffer,RecordingTimeMs);
            BinSerialize.WriteFloat(ref buffer,AvailableCapacity);
            BinSerialize.WriteByte(ref buffer,(byte)ImageStatus);
            BinSerialize.WriteByte(ref buffer,(byte)VideoStatus);
            BinSerialize.WriteInt(ref buffer,ImageCount);
            /* PayloadByteSize = 22 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Image capture interval
        /// OriginName: image_interval, Units: s, IsExtended: false
        /// </summary>
        public float ImageInterval { get; set; }
        /// <summary>
        /// Elapsed time since recording started (0: Not supported/available). A GCS should compute recording time and use non-zero values of this field to correct any discrepancy.
        /// OriginName: recording_time_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint RecordingTimeMs { get; set; }
        /// <summary>
        /// Available storage capacity.
        /// OriginName: available_capacity, Units: MiB, IsExtended: false
        /// </summary>
        public float AvailableCapacity { get; set; }
        /// <summary>
        /// Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress)
        /// OriginName: image_status, Units: , IsExtended: false
        /// </summary>
        public byte ImageStatus { get; set; }
        /// <summary>
        /// Current status of video capturing (0: idle, 1: capture in progress)
        /// OriginName: video_status, Units: , IsExtended: false
        /// </summary>
        public byte VideoStatus { get; set; }
        /// <summary>
        /// Total number of images captured ('forever', or until reset using MAV_CMD_STORAGE_FORMAT).
        /// OriginName: image_count, Units: , IsExtended: true
        /// </summary>
        public int ImageCount { get; set; }
    }
    /// <summary>
    /// Information about a captured image. This is emitted every time a message is captured.
    ///         MAV_CMD_REQUEST_MESSAGE can be used to (re)request this message for a specific sequence number or range of sequence numbers:
    ///         MAV_CMD_REQUEST_MESSAGE.param2 indicates the sequence number the first image to send, or set to -1 to send the message for all sequence numbers.
    ///         MAV_CMD_REQUEST_MESSAGE.param3 is used to specify a range of messages to send:
    ///         set to 0 (default) to send just the the message for the sequence number in param 2,
    ///         set to -1 to send the message for the sequence number in param 2 and all the following sequence numbers,
    ///         set to the sequence number of the final message in the range.
    ///  CAMERA_IMAGE_CAPTURED
    /// </summary>
    public class CameraImageCapturedPacket: PacketV2<CameraImageCapturedPayload>
    {
	    public const int PacketMessageId = 263;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 133;
        public override bool WrapToV2Extension => false;

        public override CameraImageCapturedPayload Payload { get; } = new CameraImageCapturedPayload();

        public override string Name => "CAMERA_IMAGE_CAPTURED";
    }

    /// <summary>
    ///  CAMERA_IMAGE_CAPTURED
    /// </summary>
    public class CameraImageCapturedPayload : IPayload
    {
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUtc
            sum+=4; //TimeBootMs
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //RelativeAlt
            sum+=Q.Length * 4; //Q
            sum+=4; //ImageIndex
            sum+=1; //CameraId
            sum+=1; //CaptureResult
            sum+=FileUrl.Length; //FileUrl
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUtc = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ImageIndex = BinSerialize.ReadInt(ref buffer);
            CameraId = (byte)BinSerialize.ReadByte(ref buffer);
            CaptureResult = (sbyte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/205 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            FileUrl = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = FileUrl)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, FileUrl.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUtc);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteInt(ref buffer,ImageIndex);
            BinSerialize.WriteByte(ref buffer,(byte)CameraId);
            BinSerialize.WriteByte(ref buffer,(byte)CaptureResult);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = FileUrl)
                {
                    Encoding.ASCII.GetBytes(charPointer, FileUrl.Length, bytePointer, FileUrl.Length);
                }
            }
            buffer = buffer.Slice(FileUrl.Length);
            
            /* PayloadByteSize = 255 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since UNIX epoch) in UTC. 0 for unknown.
        /// OriginName: time_utc, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUtc { get; set; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Latitude where image was taken
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude where capture was taken
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (MSL) where image was taken
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public int RelativeAlt { get; set; }
        /// <summary>
        /// Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1)
        /// OriginName: image_index, Units: , IsExtended: false
        /// </summary>
        public int ImageIndex { get; set; }
        /// <summary>
        /// Deprecated/unused. Component IDs are used to differentiate multiple cameras.
        /// OriginName: camera_id, Units: , IsExtended: false
        /// </summary>
        public byte CameraId { get; set; }
        /// <summary>
        /// Boolean indicating success (1) or failure (0) while capturing this image.
        /// OriginName: capture_result, Units: , IsExtended: false
        /// </summary>
        public sbyte CaptureResult { get; set; }
        /// <summary>
        /// URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.
        /// OriginName: file_url, Units: , IsExtended: false
        /// </summary>
        public const int FileUrlMaxItemsCount = 205;
        public char[] FileUrl { get; set; } = new char[205];
        [Obsolete("This method is deprecated. Use GetFileUrlMaxItemsCount instead.")]
        public byte GetFileUrlMaxItemsCount() => 205;
    }
    /// <summary>
    /// Information about flight since last arming.
    ///         This can be requested using MAV_CMD_REQUEST_MESSAGE.
    ///       
    ///  FLIGHT_INFORMATION
    /// </summary>
    public class FlightInformationPacket: PacketV2<FlightInformationPayload>
    {
	    public const int PacketMessageId = 264;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 49;
        public override bool WrapToV2Extension => false;

        public override FlightInformationPayload Payload { get; } = new FlightInformationPayload();

        public override string Name => "FLIGHT_INFORMATION";
    }

    /// <summary>
    ///  FLIGHT_INFORMATION
    /// </summary>
    public class FlightInformationPayload : IPayload
    {
        public byte GetMaxByteSize() => 28; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 28; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //ArmingTimeUtc
            sum+=8; //TakeoffTimeUtc
            sum+=8; //FlightUuid
            sum+=4; //TimeBootMs
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            ArmingTimeUtc = BinSerialize.ReadULong(ref buffer);
            TakeoffTimeUtc = BinSerialize.ReadULong(ref buffer);
            FlightUuid = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,ArmingTimeUtc);
            BinSerialize.WriteULong(ref buffer,TakeoffTimeUtc);
            BinSerialize.WriteULong(ref buffer,FlightUuid);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            /* PayloadByteSize = 28 */;
        }
        
        



        /// <summary>
        /// Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown
        /// OriginName: arming_time_utc, Units: us, IsExtended: false
        /// </summary>
        public ulong ArmingTimeUtc { get; set; }
        /// <summary>
        /// Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown
        /// OriginName: takeoff_time_utc, Units: us, IsExtended: false
        /// </summary>
        public ulong TakeoffTimeUtc { get; set; }
        /// <summary>
        /// Universally unique identifier (UUID) of flight, should correspond to name of log files
        /// OriginName: flight_uuid, Units: , IsExtended: false
        /// </summary>
        public ulong FlightUuid { get; set; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
    }
    /// <summary>
    /// Orientation of a mount
    ///  MOUNT_ORIENTATION
    /// </summary>
    public class MountOrientationPacket: PacketV2<MountOrientationPayload>
    {
	    public const int PacketMessageId = 265;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 26;
        public override bool WrapToV2Extension => false;

        public override MountOrientationPayload Payload { get; } = new MountOrientationPayload();

        public override string Name => "MOUNT_ORIENTATION";
    }

    /// <summary>
    ///  MOUNT_ORIENTATION
    /// </summary>
    public class MountOrientationPayload : IPayload
    {
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //Roll
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=4; //YawAbsolute
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Roll = BinSerialize.ReadFloat(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'YawAbsolute' can be empty
            if (buffer.IsEmpty) return;
            YawAbsolute = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteFloat(ref buffer,Roll);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,YawAbsolute);
            /* PayloadByteSize = 20 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Roll in global frame (set to NaN for invalid).
        /// OriginName: roll, Units: deg, IsExtended: false
        /// </summary>
        public float Roll { get; set; }
        /// <summary>
        /// Pitch in global frame (set to NaN for invalid).
        /// OriginName: pitch, Units: deg, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw relative to vehicle (set to NaN for invalid).
        /// OriginName: yaw, Units: deg, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid).
        /// OriginName: yaw_absolute, Units: deg, IsExtended: true
        /// </summary>
        public float YawAbsolute { get; set; }
    }
    /// <summary>
    /// A message containing logged data (see also MAV_CMD_LOGGING_START)
    ///  LOGGING_DATA
    /// </summary>
    public class LoggingDataPacket: PacketV2<LoggingDataPayload>
    {
	    public const int PacketMessageId = 266;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 193;
        public override bool WrapToV2Extension => false;

        public override LoggingDataPayload Payload { get; } = new LoggingDataPayload();

        public override string Name => "LOGGING_DATA";
    }

    /// <summary>
    ///  LOGGING_DATA
    /// </summary>
    public class LoggingDataPayload : IPayload
    {
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Sequence
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //Length
            sum+=1; //FirstMessageOffset
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Sequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Length = (byte)BinSerialize.ReadByte(ref buffer);
            FirstMessageOffset = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/249 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Length);
            BinSerialize.WriteByte(ref buffer,(byte)FirstMessageOffset);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 255 */;
        }
        
        



        /// <summary>
        /// sequence number (can wrap)
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public ushort Sequence { get; set; }
        /// <summary>
        /// system ID of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// data length
        /// OriginName: length, Units: bytes, IsExtended: false
        /// </summary>
        public byte Length { get; set; }
        /// <summary>
        /// offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to UINT8_MAX if no start exists).
        /// OriginName: first_message_offset, Units: bytes, IsExtended: false
        /// </summary>
        public byte FirstMessageOffset { get; set; }
        /// <summary>
        /// logged data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 249;
        public byte[] Data { get; set; } = new byte[249];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 249;
    }
    /// <summary>
    /// A message containing logged data which requires a LOGGING_ACK to be sent back
    ///  LOGGING_DATA_ACKED
    /// </summary>
    public class LoggingDataAckedPacket: PacketV2<LoggingDataAckedPayload>
    {
	    public const int PacketMessageId = 267;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 35;
        public override bool WrapToV2Extension => false;

        public override LoggingDataAckedPayload Payload { get; } = new LoggingDataAckedPayload();

        public override string Name => "LOGGING_DATA_ACKED";
    }

    /// <summary>
    ///  LOGGING_DATA_ACKED
    /// </summary>
    public class LoggingDataAckedPayload : IPayload
    {
        public byte GetMaxByteSize() => 255; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 255; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Sequence
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //Length
            sum+=1; //FirstMessageOffset
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Sequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Length = (byte)BinSerialize.ReadByte(ref buffer);
            FirstMessageOffset = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/249 - Math.Max(0,((/*PayloadByteSize*/255 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Length);
            BinSerialize.WriteByte(ref buffer,(byte)FirstMessageOffset);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 255 */;
        }
        
        



        /// <summary>
        /// sequence number (can wrap)
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public ushort Sequence { get; set; }
        /// <summary>
        /// system ID of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// data length
        /// OriginName: length, Units: bytes, IsExtended: false
        /// </summary>
        public byte Length { get; set; }
        /// <summary>
        /// offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to UINT8_MAX if no start exists).
        /// OriginName: first_message_offset, Units: bytes, IsExtended: false
        /// </summary>
        public byte FirstMessageOffset { get; set; }
        /// <summary>
        /// logged data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 249;
        public byte[] Data { get; set; } = new byte[249];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 249;
    }
    /// <summary>
    /// An ack for a LOGGING_DATA_ACKED message
    ///  LOGGING_ACK
    /// </summary>
    public class LoggingAckPacket: PacketV2<LoggingAckPayload>
    {
	    public const int PacketMessageId = 268;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 14;
        public override bool WrapToV2Extension => false;

        public override LoggingAckPayload Payload { get; } = new LoggingAckPayload();

        public override string Name => "LOGGING_ACK";
    }

    /// <summary>
    ///  LOGGING_ACK
    /// </summary>
    public class LoggingAckPayload : IPayload
    {
        public byte GetMaxByteSize() => 4; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 4; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Sequence
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Sequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 4 */;
        }
        
        



        /// <summary>
        /// sequence number (must match the one in LOGGING_DATA_ACKED)
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public ushort Sequence { get; set; }
        /// <summary>
        /// system ID of the target
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// component ID of the target
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Information about video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE, where param2 indicates the video stream id: 0 for all streams, 1 for first, 2 for second, etc.
    ///  VIDEO_STREAM_INFORMATION
    /// </summary>
    public class VideoStreamInformationPacket: PacketV2<VideoStreamInformationPayload>
    {
	    public const int PacketMessageId = 269;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 109;
        public override bool WrapToV2Extension => false;

        public override VideoStreamInformationPayload Payload { get; } = new VideoStreamInformationPayload();

        public override string Name => "VIDEO_STREAM_INFORMATION";
    }

    /// <summary>
    ///  VIDEO_STREAM_INFORMATION
    /// </summary>
    public class VideoStreamInformationPayload : IPayload
    {
        public byte GetMaxByteSize() => 213; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 213; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Framerate
            sum+=4; //Bitrate
            sum+= 2; // Flags
            sum+=2; //ResolutionH
            sum+=2; //ResolutionV
            sum+=2; //Rotation
            sum+=2; //Hfov
            sum+=1; //StreamId
            sum+=1; //Count
            sum+= 1; // Type
            sum+=Name.Length; //Name
            sum+=Uri.Length; //Uri
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Framerate = BinSerialize.ReadFloat(ref buffer);
            Bitrate = BinSerialize.ReadUInt(ref buffer);
            Flags = (VideoStreamStatusFlags)BinSerialize.ReadUShort(ref buffer);
            ResolutionH = BinSerialize.ReadUShort(ref buffer);
            ResolutionV = BinSerialize.ReadUShort(ref buffer);
            Rotation = BinSerialize.ReadUShort(ref buffer);
            Hfov = BinSerialize.ReadUShort(ref buffer);
            StreamId = (byte)BinSerialize.ReadByte(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            Type = (VideoStreamType)BinSerialize.ReadByte(ref buffer);
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/160 - Math.Max(0,((/*PayloadByteSize*/213 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Uri = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Uri.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Framerate);
            BinSerialize.WriteUInt(ref buffer,Bitrate);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteUShort(ref buffer,ResolutionH);
            BinSerialize.WriteUShort(ref buffer,ResolutionV);
            BinSerialize.WriteUShort(ref buffer,Rotation);
            BinSerialize.WriteUShort(ref buffer,Hfov);
            BinSerialize.WriteByte(ref buffer,(byte)StreamId);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetBytes(charPointer, Uri.Length, bytePointer, Uri.Length);
                }
            }
            buffer = buffer.Slice(Uri.Length);
            
            /* PayloadByteSize = 213 */;
        }
        
        



        /// <summary>
        /// Frame rate.
        /// OriginName: framerate, Units: Hz, IsExtended: false
        /// </summary>
        public float Framerate { get; set; }
        /// <summary>
        /// Bit rate.
        /// OriginName: bitrate, Units: bits/s, IsExtended: false
        /// </summary>
        public uint Bitrate { get; set; }
        /// <summary>
        /// Bitmap of stream status flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public VideoStreamStatusFlags Flags { get; set; }
        /// <summary>
        /// Horizontal resolution.
        /// OriginName: resolution_h, Units: pix, IsExtended: false
        /// </summary>
        public ushort ResolutionH { get; set; }
        /// <summary>
        /// Vertical resolution.
        /// OriginName: resolution_v, Units: pix, IsExtended: false
        /// </summary>
        public ushort ResolutionV { get; set; }
        /// <summary>
        /// Video image rotation clockwise.
        /// OriginName: rotation, Units: deg, IsExtended: false
        /// </summary>
        public ushort Rotation { get; set; }
        /// <summary>
        /// Horizontal Field of view.
        /// OriginName: hfov, Units: deg, IsExtended: false
        /// </summary>
        public ushort Hfov { get; set; }
        /// <summary>
        /// Video Stream ID (1 for first, 2 for second, etc.)
        /// OriginName: stream_id, Units: , IsExtended: false
        /// </summary>
        public byte StreamId { get; set; }
        /// <summary>
        /// Number of streams available.
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public byte Count { get; set; }
        /// <summary>
        /// Type of stream.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public VideoStreamType Type { get; set; }
        /// <summary>
        /// Stream name.
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public const int NameMaxItemsCount = 32;
        public char[] Name { get; } = new char[32];
        /// <summary>
        /// Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to).
        /// OriginName: uri, Units: , IsExtended: false
        /// </summary>
        public const int UriMaxItemsCount = 160;
        public char[] Uri { get; set; } = new char[160];
        [Obsolete("This method is deprecated. Use GetUriMaxItemsCount instead.")]
        public byte GetUriMaxItemsCount() => 160;
    }
    /// <summary>
    /// Information about the status of a video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE.
    ///  VIDEO_STREAM_STATUS
    /// </summary>
    public class VideoStreamStatusPacket: PacketV2<VideoStreamStatusPayload>
    {
	    public const int PacketMessageId = 270;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 59;
        public override bool WrapToV2Extension => false;

        public override VideoStreamStatusPayload Payload { get; } = new VideoStreamStatusPayload();

        public override string Name => "VIDEO_STREAM_STATUS";
    }

    /// <summary>
    ///  VIDEO_STREAM_STATUS
    /// </summary>
    public class VideoStreamStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 19; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 19; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Framerate
            sum+=4; //Bitrate
            sum+= 2; // Flags
            sum+=2; //ResolutionH
            sum+=2; //ResolutionV
            sum+=2; //Rotation
            sum+=2; //Hfov
            sum+=1; //StreamId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Framerate = BinSerialize.ReadFloat(ref buffer);
            Bitrate = BinSerialize.ReadUInt(ref buffer);
            Flags = (VideoStreamStatusFlags)BinSerialize.ReadUShort(ref buffer);
            ResolutionH = BinSerialize.ReadUShort(ref buffer);
            ResolutionV = BinSerialize.ReadUShort(ref buffer);
            Rotation = BinSerialize.ReadUShort(ref buffer);
            Hfov = BinSerialize.ReadUShort(ref buffer);
            StreamId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Framerate);
            BinSerialize.WriteUInt(ref buffer,Bitrate);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteUShort(ref buffer,ResolutionH);
            BinSerialize.WriteUShort(ref buffer,ResolutionV);
            BinSerialize.WriteUShort(ref buffer,Rotation);
            BinSerialize.WriteUShort(ref buffer,Hfov);
            BinSerialize.WriteByte(ref buffer,(byte)StreamId);
            /* PayloadByteSize = 19 */;
        }
        
        



        /// <summary>
        /// Frame rate
        /// OriginName: framerate, Units: Hz, IsExtended: false
        /// </summary>
        public float Framerate { get; set; }
        /// <summary>
        /// Bit rate
        /// OriginName: bitrate, Units: bits/s, IsExtended: false
        /// </summary>
        public uint Bitrate { get; set; }
        /// <summary>
        /// Bitmap of stream status flags
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public VideoStreamStatusFlags Flags { get; set; }
        /// <summary>
        /// Horizontal resolution
        /// OriginName: resolution_h, Units: pix, IsExtended: false
        /// </summary>
        public ushort ResolutionH { get; set; }
        /// <summary>
        /// Vertical resolution
        /// OriginName: resolution_v, Units: pix, IsExtended: false
        /// </summary>
        public ushort ResolutionV { get; set; }
        /// <summary>
        /// Video image rotation clockwise
        /// OriginName: rotation, Units: deg, IsExtended: false
        /// </summary>
        public ushort Rotation { get; set; }
        /// <summary>
        /// Horizontal Field of view
        /// OriginName: hfov, Units: deg, IsExtended: false
        /// </summary>
        public ushort Hfov { get; set; }
        /// <summary>
        /// Video Stream ID (1 for first, 2 for second, etc.)
        /// OriginName: stream_id, Units: , IsExtended: false
        /// </summary>
        public byte StreamId { get; set; }
    }
    /// <summary>
    /// Information about the field of view of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    ///  CAMERA_FOV_STATUS
    /// </summary>
    public class CameraFovStatusPacket: PacketV2<CameraFovStatusPayload>
    {
	    public const int PacketMessageId = 271;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 22;
        public override bool WrapToV2Extension => false;

        public override CameraFovStatusPayload Payload { get; } = new CameraFovStatusPayload();

        public override string Name => "CAMERA_FOV_STATUS";
    }

    /// <summary>
    ///  CAMERA_FOV_STATUS
    /// </summary>
    public class CameraFovStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 52; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 52; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //LatCamera
            sum+=4; //LonCamera
            sum+=4; //AltCamera
            sum+=4; //LatImage
            sum+=4; //LonImage
            sum+=4; //AltImage
            sum+=Q.Length * 4; //Q
            sum+=4; //Hfov
            sum+=4; //Vfov
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            LatCamera = BinSerialize.ReadInt(ref buffer);
            LonCamera = BinSerialize.ReadInt(ref buffer);
            AltCamera = BinSerialize.ReadInt(ref buffer);
            LatImage = BinSerialize.ReadInt(ref buffer);
            LonImage = BinSerialize.ReadInt(ref buffer);
            AltImage = BinSerialize.ReadInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/52 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Hfov = BinSerialize.ReadFloat(ref buffer);
            Vfov = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteInt(ref buffer,LatCamera);
            BinSerialize.WriteInt(ref buffer,LonCamera);
            BinSerialize.WriteInt(ref buffer,AltCamera);
            BinSerialize.WriteInt(ref buffer,LatImage);
            BinSerialize.WriteInt(ref buffer,LonImage);
            BinSerialize.WriteInt(ref buffer,AltImage);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Hfov);
            BinSerialize.WriteFloat(ref buffer,Vfov);
            /* PayloadByteSize = 52 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Latitude of camera (INT32_MAX if unknown).
        /// OriginName: lat_camera, Units: degE7, IsExtended: false
        /// </summary>
        public int LatCamera { get; set; }
        /// <summary>
        /// Longitude of camera (INT32_MAX if unknown).
        /// OriginName: lon_camera, Units: degE7, IsExtended: false
        /// </summary>
        public int LonCamera { get; set; }
        /// <summary>
        /// Altitude (MSL) of camera (INT32_MAX if unknown).
        /// OriginName: alt_camera, Units: mm, IsExtended: false
        /// </summary>
        public int AltCamera { get; set; }
        /// <summary>
        /// Latitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).
        /// OriginName: lat_image, Units: degE7, IsExtended: false
        /// </summary>
        public int LatImage { get; set; }
        /// <summary>
        /// Longitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).
        /// OriginName: lon_image, Units: degE7, IsExtended: false
        /// </summary>
        public int LonImage { get; set; }
        /// <summary>
        /// Altitude (MSL) of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon).
        /// OriginName: alt_image, Units: mm, IsExtended: false
        /// </summary>
        public int AltImage { get; set; }
        /// <summary>
        /// Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Horizontal field of view (NaN if unknown).
        /// OriginName: hfov, Units: deg, IsExtended: false
        /// </summary>
        public float Hfov { get; set; }
        /// <summary>
        /// Vertical field of view (NaN if unknown).
        /// OriginName: vfov, Units: deg, IsExtended: false
        /// </summary>
        public float Vfov { get; set; }
    }
    /// <summary>
    /// Camera tracking status, sent while in active tracking. Use MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.
    ///  CAMERA_TRACKING_IMAGE_STATUS
    /// </summary>
    public class CameraTrackingImageStatusPacket: PacketV2<CameraTrackingImageStatusPayload>
    {
	    public const int PacketMessageId = 275;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 126;
        public override bool WrapToV2Extension => false;

        public override CameraTrackingImageStatusPayload Payload { get; } = new CameraTrackingImageStatusPayload();

        public override string Name => "CAMERA_TRACKING_IMAGE_STATUS";
    }

    /// <summary>
    ///  CAMERA_TRACKING_IMAGE_STATUS
    /// </summary>
    public class CameraTrackingImageStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 31; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 31; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //PointX
            sum+=4; //PointY
            sum+=4; //Radius
            sum+=4; //RecTopX
            sum+=4; //RecTopY
            sum+=4; //RecBottomX
            sum+=4; //RecBottomY
            sum+= 1; // TrackingStatus
            sum+= 1; // TrackingMode
            sum+= 1; // TargetData
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            PointX = BinSerialize.ReadFloat(ref buffer);
            PointY = BinSerialize.ReadFloat(ref buffer);
            Radius = BinSerialize.ReadFloat(ref buffer);
            RecTopX = BinSerialize.ReadFloat(ref buffer);
            RecTopY = BinSerialize.ReadFloat(ref buffer);
            RecBottomX = BinSerialize.ReadFloat(ref buffer);
            RecBottomY = BinSerialize.ReadFloat(ref buffer);
            TrackingStatus = (CameraTrackingStatusFlags)BinSerialize.ReadByte(ref buffer);
            TrackingMode = (CameraTrackingMode)BinSerialize.ReadByte(ref buffer);
            TargetData = (CameraTrackingTargetData)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,PointX);
            BinSerialize.WriteFloat(ref buffer,PointY);
            BinSerialize.WriteFloat(ref buffer,Radius);
            BinSerialize.WriteFloat(ref buffer,RecTopX);
            BinSerialize.WriteFloat(ref buffer,RecTopY);
            BinSerialize.WriteFloat(ref buffer,RecBottomX);
            BinSerialize.WriteFloat(ref buffer,RecBottomY);
            BinSerialize.WriteByte(ref buffer,(byte)TrackingStatus);
            BinSerialize.WriteByte(ref buffer,(byte)TrackingMode);
            BinSerialize.WriteByte(ref buffer,(byte)TargetData);
            /* PayloadByteSize = 31 */;
        }
        
        



        /// <summary>
        /// Current tracked point x value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is left, 1 is right), NAN if unknown
        /// OriginName: point_x, Units: , IsExtended: false
        /// </summary>
        public float PointX { get; set; }
        /// <summary>
        /// Current tracked point y value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown
        /// OriginName: point_y, Units: , IsExtended: false
        /// </summary>
        public float PointY { get; set; }
        /// <summary>
        /// Current tracked radius if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is image left, 1 is image right), NAN if unknown
        /// OriginName: radius, Units: , IsExtended: false
        /// </summary>
        public float Radius { get; set; }
        /// <summary>
        /// Current tracked rectangle top x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown
        /// OriginName: rec_top_x, Units: , IsExtended: false
        /// </summary>
        public float RecTopX { get; set; }
        /// <summary>
        /// Current tracked rectangle top y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown
        /// OriginName: rec_top_y, Units: , IsExtended: false
        /// </summary>
        public float RecTopY { get; set; }
        /// <summary>
        /// Current tracked rectangle bottom x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown
        /// OriginName: rec_bottom_x, Units: , IsExtended: false
        /// </summary>
        public float RecBottomX { get; set; }
        /// <summary>
        /// Current tracked rectangle bottom y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown
        /// OriginName: rec_bottom_y, Units: , IsExtended: false
        /// </summary>
        public float RecBottomY { get; set; }
        /// <summary>
        /// Current tracking status
        /// OriginName: tracking_status, Units: , IsExtended: false
        /// </summary>
        public CameraTrackingStatusFlags TrackingStatus { get; set; }
        /// <summary>
        /// Current tracking mode
        /// OriginName: tracking_mode, Units: , IsExtended: false
        /// </summary>
        public CameraTrackingMode TrackingMode { get; set; }
        /// <summary>
        /// Defines location of target data
        /// OriginName: target_data, Units: , IsExtended: false
        /// </summary>
        public CameraTrackingTargetData TargetData { get; set; }
    }
    /// <summary>
    /// Camera tracking status, sent while in active tracking. Use MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.
    ///  CAMERA_TRACKING_GEO_STATUS
    /// </summary>
    public class CameraTrackingGeoStatusPacket: PacketV2<CameraTrackingGeoStatusPayload>
    {
	    public const int PacketMessageId = 276;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 18;
        public override bool WrapToV2Extension => false;

        public override CameraTrackingGeoStatusPayload Payload { get; } = new CameraTrackingGeoStatusPayload();

        public override string Name => "CAMERA_TRACKING_GEO_STATUS";
    }

    /// <summary>
    ///  CAMERA_TRACKING_GEO_STATUS
    /// </summary>
    public class CameraTrackingGeoStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 49; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 49; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //HAcc
            sum+=4; //VAcc
            sum+=4; //VelN
            sum+=4; //VelE
            sum+=4; //VelD
            sum+=4; //VelAcc
            sum+=4; //Dist
            sum+=4; //Hdg
            sum+=4; //HdgAcc
            sum+= 1; // TrackingStatus
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadFloat(ref buffer);
            HAcc = BinSerialize.ReadFloat(ref buffer);
            VAcc = BinSerialize.ReadFloat(ref buffer);
            VelN = BinSerialize.ReadFloat(ref buffer);
            VelE = BinSerialize.ReadFloat(ref buffer);
            VelD = BinSerialize.ReadFloat(ref buffer);
            VelAcc = BinSerialize.ReadFloat(ref buffer);
            Dist = BinSerialize.ReadFloat(ref buffer);
            Hdg = BinSerialize.ReadFloat(ref buffer);
            HdgAcc = BinSerialize.ReadFloat(ref buffer);
            TrackingStatus = (CameraTrackingStatusFlags)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteFloat(ref buffer,Alt);
            BinSerialize.WriteFloat(ref buffer,HAcc);
            BinSerialize.WriteFloat(ref buffer,VAcc);
            BinSerialize.WriteFloat(ref buffer,VelN);
            BinSerialize.WriteFloat(ref buffer,VelE);
            BinSerialize.WriteFloat(ref buffer,VelD);
            BinSerialize.WriteFloat(ref buffer,VelAcc);
            BinSerialize.WriteFloat(ref buffer,Dist);
            BinSerialize.WriteFloat(ref buffer,Hdg);
            BinSerialize.WriteFloat(ref buffer,HdgAcc);
            BinSerialize.WriteByte(ref buffer,(byte)TrackingStatus);
            /* PayloadByteSize = 49 */;
        }
        
        



        /// <summary>
        /// Latitude of tracked object
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude of tracked object
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude of tracked object(AMSL, WGS84)
        /// OriginName: alt, Units: m, IsExtended: false
        /// </summary>
        public float Alt { get; set; }
        /// <summary>
        /// Horizontal accuracy. NAN if unknown
        /// OriginName: h_acc, Units: m, IsExtended: false
        /// </summary>
        public float HAcc { get; set; }
        /// <summary>
        /// Vertical accuracy. NAN if unknown
        /// OriginName: v_acc, Units: m, IsExtended: false
        /// </summary>
        public float VAcc { get; set; }
        /// <summary>
        /// North velocity of tracked object. NAN if unknown
        /// OriginName: vel_n, Units: m/s, IsExtended: false
        /// </summary>
        public float VelN { get; set; }
        /// <summary>
        /// East velocity of tracked object. NAN if unknown
        /// OriginName: vel_e, Units: m/s, IsExtended: false
        /// </summary>
        public float VelE { get; set; }
        /// <summary>
        /// Down velocity of tracked object. NAN if unknown
        /// OriginName: vel_d, Units: m/s, IsExtended: false
        /// </summary>
        public float VelD { get; set; }
        /// <summary>
        /// Velocity accuracy. NAN if unknown
        /// OriginName: vel_acc, Units: m/s, IsExtended: false
        /// </summary>
        public float VelAcc { get; set; }
        /// <summary>
        /// Distance between camera and tracked object. NAN if unknown
        /// OriginName: dist, Units: m, IsExtended: false
        /// </summary>
        public float Dist { get; set; }
        /// <summary>
        /// Heading in radians, in NED. NAN if unknown
        /// OriginName: hdg, Units: rad, IsExtended: false
        /// </summary>
        public float Hdg { get; set; }
        /// <summary>
        /// Accuracy of heading, in NED. NAN if unknown
        /// OriginName: hdg_acc, Units: rad, IsExtended: false
        /// </summary>
        public float HdgAcc { get; set; }
        /// <summary>
        /// Current tracking status
        /// OriginName: tracking_status, Units: , IsExtended: false
        /// </summary>
        public CameraTrackingStatusFlags TrackingStatus { get; set; }
    }
    /// <summary>
    /// Information about a high level gimbal manager. This message should be requested by a ground station using MAV_CMD_REQUEST_MESSAGE.
    ///  GIMBAL_MANAGER_INFORMATION
    /// </summary>
    public class GimbalManagerInformationPacket: PacketV2<GimbalManagerInformationPayload>
    {
	    public const int PacketMessageId = 280;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 70;
        public override bool WrapToV2Extension => false;

        public override GimbalManagerInformationPayload Payload { get; } = new GimbalManagerInformationPayload();

        public override string Name => "GIMBAL_MANAGER_INFORMATION";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_INFORMATION
    /// </summary>
    public class GimbalManagerInformationPayload : IPayload
    {
        public byte GetMaxByteSize() => 33; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 33; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+= 4; // CapFlags
            sum+=4; //RollMin
            sum+=4; //RollMax
            sum+=4; //PitchMin
            sum+=4; //PitchMax
            sum+=4; //YawMin
            sum+=4; //YawMax
            sum+=1; //GimbalDeviceId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            CapFlags = (GimbalManagerCapFlags)BinSerialize.ReadUInt(ref buffer);
            RollMin = BinSerialize.ReadFloat(ref buffer);
            RollMax = BinSerialize.ReadFloat(ref buffer);
            PitchMin = BinSerialize.ReadFloat(ref buffer);
            PitchMax = BinSerialize.ReadFloat(ref buffer);
            YawMin = BinSerialize.ReadFloat(ref buffer);
            YawMax = BinSerialize.ReadFloat(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,(uint)CapFlags);
            BinSerialize.WriteFloat(ref buffer,RollMin);
            BinSerialize.WriteFloat(ref buffer,RollMax);
            BinSerialize.WriteFloat(ref buffer,PitchMin);
            BinSerialize.WriteFloat(ref buffer,PitchMax);
            BinSerialize.WriteFloat(ref buffer,YawMin);
            BinSerialize.WriteFloat(ref buffer,YawMax);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 33 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Bitmap of gimbal capability flags.
        /// OriginName: cap_flags, Units: , IsExtended: false
        /// </summary>
        public GimbalManagerCapFlags CapFlags { get; set; }
        /// <summary>
        /// Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        /// OriginName: roll_min, Units: rad, IsExtended: false
        /// </summary>
        public float RollMin { get; set; }
        /// <summary>
        /// Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        /// OriginName: roll_max, Units: rad, IsExtended: false
        /// </summary>
        public float RollMax { get; set; }
        /// <summary>
        /// Minimum pitch angle (positive: up, negative: down)
        /// OriginName: pitch_min, Units: rad, IsExtended: false
        /// </summary>
        public float PitchMin { get; set; }
        /// <summary>
        /// Maximum pitch angle (positive: up, negative: down)
        /// OriginName: pitch_max, Units: rad, IsExtended: false
        /// </summary>
        public float PitchMax { get; set; }
        /// <summary>
        /// Minimum yaw angle (positive: to the right, negative: to the left)
        /// OriginName: yaw_min, Units: rad, IsExtended: false
        /// </summary>
        public float YawMin { get; set; }
        /// <summary>
        /// Maximum yaw angle (positive: to the right, negative: to the left)
        /// OriginName: yaw_max, Units: rad, IsExtended: false
        /// </summary>
        public float YawMax { get; set; }
        /// <summary>
        /// Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public byte GimbalDeviceId { get; set; }
    }
    /// <summary>
    /// Current status about a high level gimbal manager. This message should be broadcast at a low regular rate (e.g. 5Hz).
    ///  GIMBAL_MANAGER_STATUS
    /// </summary>
    public class GimbalManagerStatusPacket: PacketV2<GimbalManagerStatusPayload>
    {
	    public const int PacketMessageId = 281;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 48;
        public override bool WrapToV2Extension => false;

        public override GimbalManagerStatusPayload Payload { get; } = new GimbalManagerStatusPayload();

        public override string Name => "GIMBAL_MANAGER_STATUS";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_STATUS
    /// </summary>
    public class GimbalManagerStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 13; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 13; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+= 4; // Flags
            sum+=1; //GimbalDeviceId
            sum+=1; //PrimaryControlSysid
            sum+=1; //PrimaryControlCompid
            sum+=1; //SecondaryControlSysid
            sum+=1; //SecondaryControlCompid
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);
            PrimaryControlSysid = (byte)BinSerialize.ReadByte(ref buffer);
            PrimaryControlCompid = (byte)BinSerialize.ReadByte(ref buffer);
            SecondaryControlSysid = (byte)BinSerialize.ReadByte(ref buffer);
            SecondaryControlCompid = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            BinSerialize.WriteByte(ref buffer,(byte)PrimaryControlSysid);
            BinSerialize.WriteByte(ref buffer,(byte)PrimaryControlCompid);
            BinSerialize.WriteByte(ref buffer,(byte)SecondaryControlSysid);
            BinSerialize.WriteByte(ref buffer,(byte)SecondaryControlCompid);
            /* PayloadByteSize = 13 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// High level gimbal manager flags currently applied.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public GimbalManagerFlags Flags { get; set; }
        /// <summary>
        /// Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public byte GimbalDeviceId { get; set; }
        /// <summary>
        /// System ID of MAVLink component with primary control, 0 for none.
        /// OriginName: primary_control_sysid, Units: , IsExtended: false
        /// </summary>
        public byte PrimaryControlSysid { get; set; }
        /// <summary>
        /// Component ID of MAVLink component with primary control, 0 for none.
        /// OriginName: primary_control_compid, Units: , IsExtended: false
        /// </summary>
        public byte PrimaryControlCompid { get; set; }
        /// <summary>
        /// System ID of MAVLink component with secondary control, 0 for none.
        /// OriginName: secondary_control_sysid, Units: , IsExtended: false
        /// </summary>
        public byte SecondaryControlSysid { get; set; }
        /// <summary>
        /// Component ID of MAVLink component with secondary control, 0 for none.
        /// OriginName: secondary_control_compid, Units: , IsExtended: false
        /// </summary>
        public byte SecondaryControlCompid { get; set; }
    }
    /// <summary>
    /// High level message to control a gimbal's attitude. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    ///  GIMBAL_MANAGER_SET_ATTITUDE
    /// </summary>
    public class GimbalManagerSetAttitudePacket: PacketV2<GimbalManagerSetAttitudePayload>
    {
	    public const int PacketMessageId = 282;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 123;
        public override bool WrapToV2Extension => false;

        public override GimbalManagerSetAttitudePayload Payload { get; } = new GimbalManagerSetAttitudePayload();

        public override string Name => "GIMBAL_MANAGER_SET_ATTITUDE";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_SET_ATTITUDE
    /// </summary>
    public class GimbalManagerSetAttitudePayload : IPayload
    {
        public byte GetMaxByteSize() => 35; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 35; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 4; // Flags
            sum+=Q.Length * 4; //Q
            sum+=4; //AngularVelocityX
            sum+=4; //AngularVelocityY
            sum+=4; //AngularVelocityZ
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //GimbalDeviceId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/35 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            AngularVelocityX = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityY = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,AngularVelocityX);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityY);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 35 */;
        }
        
        



        /// <summary>
        /// High level gimbal manager flags to use.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public GimbalManagerFlags Flags { get; set; }
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_MANAGER_FLAGS_YAW_LOCK is set)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X component of angular velocity, positive is rolling to the right, NaN to be ignored.
        /// OriginName: angular_velocity_x, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityX { get; set; }
        /// <summary>
        /// Y component of angular velocity, positive is pitching up, NaN to be ignored.
        /// OriginName: angular_velocity_y, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityY { get; set; }
        /// <summary>
        /// Z component of angular velocity, positive is yawing to the right, NaN to be ignored.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityZ { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public byte GimbalDeviceId { get; set; }
    }
    /// <summary>
    /// Information about a low level gimbal. This message should be requested by the gimbal manager or a ground station using MAV_CMD_REQUEST_MESSAGE. The maximum angles and rates are the limits by hardware. However, the limits by software used are likely different/smaller and dependent on mode/settings/etc..
    ///  GIMBAL_DEVICE_INFORMATION
    /// </summary>
    public class GimbalDeviceInformationPacket: PacketV2<GimbalDeviceInformationPayload>
    {
	    public const int PacketMessageId = 283;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 74;
        public override bool WrapToV2Extension => false;

        public override GimbalDeviceInformationPayload Payload { get; } = new GimbalDeviceInformationPayload();

        public override string Name => "GIMBAL_DEVICE_INFORMATION";
    }

    /// <summary>
    ///  GIMBAL_DEVICE_INFORMATION
    /// </summary>
    public class GimbalDeviceInformationPayload : IPayload
    {
        public byte GetMaxByteSize() => 145; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 145; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Uid
            sum+=4; //TimeBootMs
            sum+=4; //FirmwareVersion
            sum+=4; //HardwareVersion
            sum+=4; //RollMin
            sum+=4; //RollMax
            sum+=4; //PitchMin
            sum+=4; //PitchMax
            sum+=4; //YawMin
            sum+=4; //YawMax
            sum+= 2; // CapFlags
            sum+=2; //CustomCapFlags
            sum+=VendorName.Length; //VendorName
            sum+=ModelName.Length; //ModelName
            sum+=CustomName.Length; //CustomName
            sum+=1; //GimbalDeviceId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Uid = BinSerialize.ReadULong(ref buffer);
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            FirmwareVersion = BinSerialize.ReadUInt(ref buffer);
            HardwareVersion = BinSerialize.ReadUInt(ref buffer);
            RollMin = BinSerialize.ReadFloat(ref buffer);
            RollMax = BinSerialize.ReadFloat(ref buffer);
            PitchMin = BinSerialize.ReadFloat(ref buffer);
            PitchMax = BinSerialize.ReadFloat(ref buffer);
            YawMin = BinSerialize.ReadFloat(ref buffer);
            YawMax = BinSerialize.ReadFloat(ref buffer);
            CapFlags = (GimbalDeviceCapFlags)BinSerialize.ReadUShort(ref buffer);
            CustomCapFlags = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/145 - payloadSize - /*ExtendedFieldsLength*/1)/1 /*FieldTypeByteSize*/));
            VendorName = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = VendorName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, VendorName.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ModelName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ModelName.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CustomName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, CustomName.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'GimbalDeviceId' can be empty
            if (buffer.IsEmpty) return;
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Uid);
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,FirmwareVersion);
            BinSerialize.WriteUInt(ref buffer,HardwareVersion);
            BinSerialize.WriteFloat(ref buffer,RollMin);
            BinSerialize.WriteFloat(ref buffer,RollMax);
            BinSerialize.WriteFloat(ref buffer,PitchMin);
            BinSerialize.WriteFloat(ref buffer,PitchMax);
            BinSerialize.WriteFloat(ref buffer,YawMin);
            BinSerialize.WriteFloat(ref buffer,YawMax);
            BinSerialize.WriteUShort(ref buffer,(ushort)CapFlags);
            BinSerialize.WriteUShort(ref buffer,CustomCapFlags);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = VendorName)
                {
                    Encoding.ASCII.GetBytes(charPointer, VendorName.Length, bytePointer, VendorName.Length);
                }
            }
            buffer = buffer.Slice(VendorName.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ModelName)
                {
                    Encoding.ASCII.GetBytes(charPointer, ModelName.Length, bytePointer, ModelName.Length);
                }
            }
            buffer = buffer.Slice(ModelName.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = CustomName)
                {
                    Encoding.ASCII.GetBytes(charPointer, CustomName.Length, bytePointer, CustomName.Length);
                }
            }
            buffer = buffer.Slice(CustomName.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 145 */;
        }
        
        



        /// <summary>
        /// UID of gimbal hardware (0 if unknown).
        /// OriginName: uid, Units: , IsExtended: false
        /// </summary>
        public ulong Uid { get; set; }
        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
        /// OriginName: firmware_version, Units: , IsExtended: false
        /// </summary>
        public uint FirmwareVersion { get; set; }
        /// <summary>
        /// Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
        /// OriginName: hardware_version, Units: , IsExtended: false
        /// </summary>
        public uint HardwareVersion { get; set; }
        /// <summary>
        /// Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown.
        /// OriginName: roll_min, Units: rad, IsExtended: false
        /// </summary>
        public float RollMin { get; set; }
        /// <summary>
        /// Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown.
        /// OriginName: roll_max, Units: rad, IsExtended: false
        /// </summary>
        public float RollMax { get; set; }
        /// <summary>
        /// Minimum hardware pitch angle (positive: up, negative: down). NAN if unknown.
        /// OriginName: pitch_min, Units: rad, IsExtended: false
        /// </summary>
        public float PitchMin { get; set; }
        /// <summary>
        /// Maximum hardware pitch angle (positive: up, negative: down). NAN if unknown.
        /// OriginName: pitch_max, Units: rad, IsExtended: false
        /// </summary>
        public float PitchMax { get; set; }
        /// <summary>
        /// Minimum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown.
        /// OriginName: yaw_min, Units: rad, IsExtended: false
        /// </summary>
        public float YawMin { get; set; }
        /// <summary>
        /// Maximum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown.
        /// OriginName: yaw_max, Units: rad, IsExtended: false
        /// </summary>
        public float YawMax { get; set; }
        /// <summary>
        /// Bitmap of gimbal capability flags.
        /// OriginName: cap_flags, Units: , IsExtended: false
        /// </summary>
        public GimbalDeviceCapFlags CapFlags { get; set; }
        /// <summary>
        /// Bitmap for use for gimbal-specific capability flags.
        /// OriginName: custom_cap_flags, Units: , IsExtended: false
        /// </summary>
        public ushort CustomCapFlags { get; set; }
        /// <summary>
        /// Name of the gimbal vendor.
        /// OriginName: vendor_name, Units: , IsExtended: false
        /// </summary>
        public const int VendorNameMaxItemsCount = 32;
        public char[] VendorName { get; set; } = new char[32];
        [Obsolete("This method is deprecated. Use GetVendorNameMaxItemsCount instead.")]
        public byte GetVendorNameMaxItemsCount() => 32;
        /// <summary>
        /// Name of the gimbal model.
        /// OriginName: model_name, Units: , IsExtended: false
        /// </summary>
        public const int ModelNameMaxItemsCount = 32;
        public char[] ModelName { get; } = new char[32];
        /// <summary>
        /// Custom name of the gimbal given to it by the user.
        /// OriginName: custom_name, Units: , IsExtended: false
        /// </summary>
        public const int CustomNameMaxItemsCount = 32;
        public char[] CustomName { get; } = new char[32];
        /// <summary>
        /// This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set to a number between 1-6. If the component ID is separate, this field is not required and must be set to 0.
        /// OriginName: gimbal_device_id, Units: , IsExtended: true
        /// </summary>
        public byte GimbalDeviceId { get; set; }
    }
    /// <summary>
    /// Low level message to control a gimbal device's attitude.
    /// 	  This message is to be sent from the gimbal manager to the gimbal device component.
    /// 	  The quaternion and angular velocities can be set to NaN according to use case.
    /// 	  For the angles encoded in the quaternion and the angular velocities holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME is set, then they are relative to the vehicle heading (vehicle frame).
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is set, then they are relative to absolute North (earth frame).
    /// 	  If neither of these flags are set, then (for backwards compatibility) it holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, then they are relative to absolute North (earth frame),
    /// 	  else they are relative to the vehicle heading (vehicle frame).
    /// 	  Setting both GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME and GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is not allowed.
    /// 	  These rules are to ensure backwards compatibility.
    /// 	  New implementations should always set either GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME or GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME.
    ///  GIMBAL_DEVICE_SET_ATTITUDE
    /// </summary>
    public class GimbalDeviceSetAttitudePacket: PacketV2<GimbalDeviceSetAttitudePayload>
    {
	    public const int PacketMessageId = 284;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 99;
        public override bool WrapToV2Extension => false;

        public override GimbalDeviceSetAttitudePayload Payload { get; } = new GimbalDeviceSetAttitudePayload();

        public override string Name => "GIMBAL_DEVICE_SET_ATTITUDE";
    }

    /// <summary>
    ///  GIMBAL_DEVICE_SET_ATTITUDE
    /// </summary>
    public class GimbalDeviceSetAttitudePayload : IPayload
    {
        public byte GetMaxByteSize() => 32; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 32; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=Q.Length * 4; //Q
            sum+=4; //AngularVelocityX
            sum+=4; //AngularVelocityY
            sum+=4; //AngularVelocityZ
            sum+= 2; // Flags
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/32 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            AngularVelocityX = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityY = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            Flags = (GimbalDeviceFlags)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,AngularVelocityX);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityY);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 32 */;
        }
        
        



        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description. Set fields to NaN to be ignored.
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN to be ignored.
        /// OriginName: angular_velocity_x, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityX { get; set; }
        /// <summary>
        /// Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN to be ignored.
        /// OriginName: angular_velocity_y, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityY { get; set; }
        /// <summary>
        /// Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN to be ignored.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityZ { get; set; }
        /// <summary>
        /// Low level gimbal flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public GimbalDeviceFlags Flags { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Message reporting the status of a gimbal device.
    /// 	  This message should be broadcast by a gimbal device component at a low regular rate (e.g. 5 Hz).
    /// 	  For the angles encoded in the quaternion and the angular velocities holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME is set, then they are relative to the vehicle heading (vehicle frame).
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is set, then they are relative to absolute North (earth frame).
    /// 	  If neither of these flags are set, then (for backwards compatibility) it holds:
    /// 	  If the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, then they are relative to absolute North (earth frame),
    /// 	  else they are relative to the vehicle heading (vehicle frame).
    /// 	  Other conditions of the flags are not allowed.
    /// 	  The quaternion and angular velocities in the other frame can be calculated from delta_yaw and delta_yaw_velocity as
    /// 	  q_earth = q_delta_yaw * q_vehicle and w_earth = w_delta_yaw_velocity + w_vehicle (if not NaN).
    /// 	  If neither the GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME nor the GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME flag is set,
    /// 	  then (for backwards compatibility) the data in the delta_yaw and delta_yaw_velocity fields are to be ignored.
    /// 	  New implementations should always set either GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME or GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME,
    /// 	  and always should set delta_yaw and delta_yaw_velocity either to the proper value or NaN.
    ///  GIMBAL_DEVICE_ATTITUDE_STATUS
    /// </summary>
    public class GimbalDeviceAttitudeStatusPacket: PacketV2<GimbalDeviceAttitudeStatusPayload>
    {
	    public const int PacketMessageId = 285;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 137;
        public override bool WrapToV2Extension => false;

        public override GimbalDeviceAttitudeStatusPayload Payload { get; } = new GimbalDeviceAttitudeStatusPayload();

        public override string Name => "GIMBAL_DEVICE_ATTITUDE_STATUS";
    }

    /// <summary>
    ///  GIMBAL_DEVICE_ATTITUDE_STATUS
    /// </summary>
    public class GimbalDeviceAttitudeStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 49; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 49; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=Q.Length * 4; //Q
            sum+=4; //AngularVelocityX
            sum+=4; //AngularVelocityY
            sum+=4; //AngularVelocityZ
            sum+= 4; // FailureFlags
            sum+= 2; // Flags
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=4; //DeltaYaw
            sum+=4; //DeltaYawVelocity
            sum+=1; //GimbalDeviceId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/49 - payloadSize - /*ExtendedFieldsLength*/9)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            AngularVelocityX = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityY = BinSerialize.ReadFloat(ref buffer);
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            FailureFlags = (GimbalDeviceErrorFlags)BinSerialize.ReadUInt(ref buffer);
            Flags = (GimbalDeviceFlags)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'DeltaYaw' can be empty
            if (buffer.IsEmpty) return;
            DeltaYaw = BinSerialize.ReadFloat(ref buffer);
            // extended field 'DeltaYawVelocity' can be empty
            if (buffer.IsEmpty) return;
            DeltaYawVelocity = BinSerialize.ReadFloat(ref buffer);
            // extended field 'GimbalDeviceId' can be empty
            if (buffer.IsEmpty) return;
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,AngularVelocityX);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityY);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            BinSerialize.WriteUInt(ref buffer,(uint)FailureFlags);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteFloat(ref buffer,DeltaYaw);
            BinSerialize.WriteFloat(ref buffer,DeltaYawVelocity);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 49 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description.
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN if unknown.
        /// OriginName: angular_velocity_x, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityX { get; set; }
        /// <summary>
        /// Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN if unknown.
        /// OriginName: angular_velocity_y, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityY { get; set; }
        /// <summary>
        /// Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN if unknown.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public float AngularVelocityZ { get; set; }
        /// <summary>
        /// Failure flags (0 for no failure)
        /// OriginName: failure_flags, Units: , IsExtended: false
        /// </summary>
        public GimbalDeviceErrorFlags FailureFlags { get; set; }
        /// <summary>
        /// Current gimbal flags set.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public GimbalDeviceFlags Flags { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Yaw angle relating the quaternions in earth and body frames (see message description). NaN if unknown.
        /// OriginName: delta_yaw, Units: rad, IsExtended: true
        /// </summary>
        public float DeltaYaw { get; set; }
        /// <summary>
        /// Yaw angular velocity relating the angular velocities in earth and body frames (see message description). NaN if unknown.
        /// OriginName: delta_yaw_velocity, Units: rad/s, IsExtended: true
        /// </summary>
        public float DeltaYawVelocity { get; set; }
        /// <summary>
        /// This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set a number between 1-6. If the component ID is separate, this field is not required and must be set to 0.
        /// OriginName: gimbal_device_id, Units: , IsExtended: true
        /// </summary>
        public byte GimbalDeviceId { get; set; }
    }
    /// <summary>
    /// Low level message containing autopilot state relevant for a gimbal device. This message is to be sent from the autopilot to the gimbal device component. The data of this message are for the gimbal device's estimator corrections, in particular horizon compensation, as well as indicates autopilot control intentions, e.g. feed forward angular control in the z-axis.
    ///  AUTOPILOT_STATE_FOR_GIMBAL_DEVICE
    /// </summary>
    public class AutopilotStateForGimbalDevicePacket: PacketV2<AutopilotStateForGimbalDevicePayload>
    {
	    public const int PacketMessageId = 286;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 210;
        public override bool WrapToV2Extension => false;

        public override AutopilotStateForGimbalDevicePayload Payload { get; } = new AutopilotStateForGimbalDevicePayload();

        public override string Name => "AUTOPILOT_STATE_FOR_GIMBAL_DEVICE";
    }

    /// <summary>
    ///  AUTOPILOT_STATE_FOR_GIMBAL_DEVICE
    /// </summary>
    public class AutopilotStateForGimbalDevicePayload : IPayload
    {
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeBootUs
            sum+=Q.Length * 4; //Q
            sum+=4; //QEstimatedDelayUs
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=4; //VEstimatedDelayUs
            sum+=4; //FeedForwardAngularVelocityZ
            sum+= 2; // EstimatorStatus
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // LandedState
            sum+=4; //AngularVelocityZ
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootUs = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/57 - payloadSize - /*ExtendedFieldsLength*/4)/4 /*FieldTypeByteSize*/));
            Q = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            QEstimatedDelayUs = BinSerialize.ReadUInt(ref buffer);
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            VEstimatedDelayUs = BinSerialize.ReadUInt(ref buffer);
            FeedForwardAngularVelocityZ = BinSerialize.ReadFloat(ref buffer);
            EstimatorStatus = (EstimatorStatusFlags)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            LandedState = (MavLandedState)BinSerialize.ReadByte(ref buffer);
            // extended field 'AngularVelocityZ' can be empty
            if (buffer.IsEmpty) return;
            AngularVelocityZ = BinSerialize.ReadFloat(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeBootUs);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteUInt(ref buffer,QEstimatedDelayUs);
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteUInt(ref buffer,VEstimatedDelayUs);
            BinSerialize.WriteFloat(ref buffer,FeedForwardAngularVelocityZ);
            BinSerialize.WriteUShort(ref buffer,(ushort)EstimatorStatus);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)LandedState);
            BinSerialize.WriteFloat(ref buffer,AngularVelocityZ);
            /* PayloadByteSize = 57 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_us, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeBootUs { get; set; }
        /// <summary>
        /// Quaternion components of autopilot attitude: w, x, y, z (1 0 0 0 is the null-rotation, Hamilton convention).
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; set; } = new float[4];
        [Obsolete("This method is deprecated. Use GetQMaxItemsCount instead.")]
        public byte GetQMaxItemsCount() => 4;
        /// <summary>
        /// Estimated delay of the attitude data. 0 if unknown.
        /// OriginName: q_estimated_delay_us, Units: us, IsExtended: false
        /// </summary>
        public uint QEstimatedDelayUs { get; set; }
        /// <summary>
        /// X Speed in NED (North, East, Down). NAN if unknown.
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y Speed in NED (North, East, Down). NAN if unknown.
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z Speed in NED (North, East, Down). NAN if unknown.
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// Estimated delay of the speed data. 0 if unknown.
        /// OriginName: v_estimated_delay_us, Units: us, IsExtended: false
        /// </summary>
        public uint VEstimatedDelayUs { get; set; }
        /// <summary>
        /// Feed forward Z component of angular velocity (positive: yawing to the right). NaN to be ignored. This is to indicate if the autopilot is actively yawing.
        /// OriginName: feed_forward_angular_velocity_z, Units: rad/s, IsExtended: false
        /// </summary>
        public float FeedForwardAngularVelocityZ { get; set; }
        /// <summary>
        /// Bitmap indicating which estimator outputs are valid.
        /// OriginName: estimator_status, Units: , IsExtended: false
        /// </summary>
        public EstimatorStatusFlags EstimatorStatus { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// OriginName: landed_state, Units: , IsExtended: false
        /// </summary>
        public MavLandedState LandedState { get; set; }
        /// <summary>
        /// Z component of angular velocity in NED (North, East, Down). NaN if unknown.
        /// OriginName: angular_velocity_z, Units: rad/s, IsExtended: true
        /// </summary>
        public float AngularVelocityZ { get; set; }
    }
    /// <summary>
    /// Set gimbal manager pitch and yaw angles (high rate message). This message is to be sent to the gimbal manager (e.g. from a ground station) and will be ignored by gimbal devices. Angles and rates can be set to NaN according to use case. Use MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW for low-rate adjustments that require confirmation.
    ///  GIMBAL_MANAGER_SET_PITCHYAW
    /// </summary>
    public class GimbalManagerSetPitchyawPacket: PacketV2<GimbalManagerSetPitchyawPayload>
    {
	    public const int PacketMessageId = 287;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 1;
        public override bool WrapToV2Extension => false;

        public override GimbalManagerSetPitchyawPayload Payload { get; } = new GimbalManagerSetPitchyawPayload();

        public override string Name => "GIMBAL_MANAGER_SET_PITCHYAW";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_SET_PITCHYAW
    /// </summary>
    public class GimbalManagerSetPitchyawPayload : IPayload
    {
        public byte GetMaxByteSize() => 23; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 23; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 4; // Flags
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=4; //PitchRate
            sum+=4; //YawRate
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //GimbalDeviceId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            PitchRate = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,PitchRate);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 23 */;
        }
        
        



        /// <summary>
        /// High level gimbal manager flags to use.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public GimbalManagerFlags Flags { get; set; }
        /// <summary>
        /// Pitch angle (positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch, Units: rad, IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw angle (positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw, Units: rad, IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Pitch angular rate (positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float PitchRate { get; set; }
        /// <summary>
        /// Yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw_rate, Units: rad/s, IsExtended: false
        /// </summary>
        public float YawRate { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public byte GimbalDeviceId { get; set; }
    }
    /// <summary>
    /// High level message to control a gimbal manually. The angles or angular rates are unitless; the actual rates will depend on internal gimbal manager settings/configuration (e.g. set by parameters). This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    ///  GIMBAL_MANAGER_SET_MANUAL_CONTROL
    /// </summary>
    public class GimbalManagerSetManualControlPacket: PacketV2<GimbalManagerSetManualControlPayload>
    {
	    public const int PacketMessageId = 288;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 20;
        public override bool WrapToV2Extension => false;

        public override GimbalManagerSetManualControlPayload Payload { get; } = new GimbalManagerSetManualControlPayload();

        public override string Name => "GIMBAL_MANAGER_SET_MANUAL_CONTROL";
    }

    /// <summary>
    ///  GIMBAL_MANAGER_SET_MANUAL_CONTROL
    /// </summary>
    public class GimbalManagerSetManualControlPayload : IPayload
    {
        public byte GetMaxByteSize() => 23; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 23; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 4; // Flags
            sum+=4; //Pitch
            sum+=4; //Yaw
            sum+=4; //PitchRate
            sum+=4; //YawRate
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //GimbalDeviceId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Flags = (GimbalManagerFlags)BinSerialize.ReadUInt(ref buffer);
            Pitch = BinSerialize.ReadFloat(ref buffer);
            Yaw = BinSerialize.ReadFloat(ref buffer);
            PitchRate = BinSerialize.ReadFloat(ref buffer);
            YawRate = BinSerialize.ReadFloat(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            GimbalDeviceId = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Flags);
            BinSerialize.WriteFloat(ref buffer,Pitch);
            BinSerialize.WriteFloat(ref buffer,Yaw);
            BinSerialize.WriteFloat(ref buffer,PitchRate);
            BinSerialize.WriteFloat(ref buffer,YawRate);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)GimbalDeviceId);
            /* PayloadByteSize = 23 */;
        }
        
        



        /// <summary>
        /// High level gimbal manager flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public GimbalManagerFlags Flags { get; set; }
        /// <summary>
        /// Pitch angle unitless (-1..1, positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch, Units: , IsExtended: false
        /// </summary>
        public float Pitch { get; set; }
        /// <summary>
        /// Yaw angle unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw, Units: , IsExtended: false
        /// </summary>
        public float Yaw { get; set; }
        /// <summary>
        /// Pitch angular rate unitless (-1..1, positive: up, negative: down, NaN to be ignored).
        /// OriginName: pitch_rate, Units: , IsExtended: false
        /// </summary>
        public float PitchRate { get; set; }
        /// <summary>
        /// Yaw angular rate unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored).
        /// OriginName: yaw_rate, Units: , IsExtended: false
        /// </summary>
        public float YawRate { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals).
        /// OriginName: gimbal_device_id, Units: , IsExtended: false
        /// </summary>
        public byte GimbalDeviceId { get; set; }
    }
    /// <summary>
    /// ESC information for lower rate streaming. Recommended streaming rate 1Hz. See ESC_STATUS for higher-rate ESC data.
    ///  ESC_INFO
    /// </summary>
    public class EscInfoPacket: PacketV2<EscInfoPayload>
    {
	    public const int PacketMessageId = 290;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 251;
        public override bool WrapToV2Extension => false;

        public override EscInfoPayload Payload { get; } = new EscInfoPayload();

        public override string Name => "ESC_INFO";
    }

    /// <summary>
    ///  ESC_INFO
    /// </summary>
    public class EscInfoPayload : IPayload
    {
        public byte GetMaxByteSize() => 46; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 46; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=ErrorCount.Length * 4; //ErrorCount
            sum+=2; //Counter
            sum+= FailureFlags.Length * 2; // FailureFlags
            
            sum+=Temperature.Length * 2; //Temperature
            sum+=1; //Index
            sum+=1; //Count
            sum+= 1; // ConnectionType
            sum+=1; //Info
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/46 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            ErrorCount = new uint[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                ErrorCount[i] = BinSerialize.ReadUInt(ref buffer);
            }
            Counter = BinSerialize.ReadUShort(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                FailureFlags[i] = (EscFailureFlags)BinSerialize.ReadUShort(ref buffer);
            }

            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Temperature[i] = BinSerialize.ReadShort(ref buffer);
            }
            Index = (byte)BinSerialize.ReadByte(ref buffer);
            Count = (byte)BinSerialize.ReadByte(ref buffer);
            ConnectionType = (EscConnectionType)BinSerialize.ReadByte(ref buffer);
            Info = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<ErrorCount.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,ErrorCount[i]);
            }
            BinSerialize.WriteUShort(ref buffer,Counter);
            for(var i=0;i<FailureFlags.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,(ushort)FailureFlags[i]);
            }
            for(var i=0;i<Temperature.Length;i++)
            {
                BinSerialize.WriteShort(ref buffer,Temperature[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Index);
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            BinSerialize.WriteByte(ref buffer,(byte)ConnectionType);
            BinSerialize.WriteByte(ref buffer,(byte)Info);
            /* PayloadByteSize = 46 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Number of reported errors by each ESC since boot.
        /// OriginName: error_count, Units: , IsExtended: false
        /// </summary>
        public const int ErrorCountMaxItemsCount = 4;
        public uint[] ErrorCount { get; set; } = new uint[4];
        [Obsolete("This method is deprecated. Use GetErrorCountMaxItemsCount instead.")]
        public byte GetErrorCountMaxItemsCount() => 4;
        /// <summary>
        /// Counter of data packets received.
        /// OriginName: counter, Units: , IsExtended: false
        /// </summary>
        public ushort Counter { get; set; }
        /// <summary>
        /// Bitmap of ESC failure flags.
        /// OriginName: failure_flags, Units: , IsExtended: false
        /// </summary>
        public const int FailureFlagsMaxItemsCount = 4;
        public EscFailureFlags[] FailureFlags { get; } = new EscFailureFlags[4];
        /// <summary>
        /// Temperature of each ESC. INT16_MAX: if data not supplied by ESC.
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public const int TemperatureMaxItemsCount = 4;
        public short[] Temperature { get; } = new short[4];
        /// <summary>
        /// Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.
        /// OriginName: index, Units: , IsExtended: false
        /// </summary>
        public byte Index { get; set; }
        /// <summary>
        /// Total number of ESCs in all messages of this type. Message fields with an index higher than this should be ignored because they contain invalid data.
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public byte Count { get; set; }
        /// <summary>
        /// Connection type protocol for all ESC.
        /// OriginName: connection_type, Units: , IsExtended: false
        /// </summary>
        public EscConnectionType ConnectionType { get; set; }
        /// <summary>
        /// Information regarding online/offline status of each ESC.
        /// OriginName: info, Units: , IsExtended: false
        /// </summary>
        public byte Info { get; set; }
    }
    /// <summary>
    /// ESC information for higher rate streaming. Recommended streaming rate is ~10 Hz. Information that changes more slowly is sent in ESC_INFO. It should typically only be streamed on high-bandwidth links (i.e. to a companion computer).
    ///  ESC_STATUS
    /// </summary>
    public class EscStatusPacket: PacketV2<EscStatusPayload>
    {
	    public const int PacketMessageId = 291;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 10;
        public override bool WrapToV2Extension => false;

        public override EscStatusPayload Payload { get; } = new EscStatusPayload();

        public override string Name => "ESC_STATUS";
    }

    /// <summary>
    ///  ESC_STATUS
    /// </summary>
    public class EscStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 57; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 57; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=Rpm.Length * 4; //Rpm
            sum+=Voltage.Length * 4; //Voltage
            sum+=Current.Length * 4; //Current
            sum+=1; //Index
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/4 - Math.Max(0,((/*PayloadByteSize*/57 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Rpm = new int[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Rpm[i] = BinSerialize.ReadInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Voltage[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Current[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Index = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Rpm.Length;i++)
            {
                BinSerialize.WriteInt(ref buffer,Rpm[i]);
            }
            for(var i=0;i<Voltage.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Voltage[i]);
            }
            for(var i=0;i<Current.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Current[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Index);
            /* PayloadByteSize = 57 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Reported motor RPM from each ESC (negative for reverse rotation).
        /// OriginName: rpm, Units: rpm, IsExtended: false
        /// </summary>
        public const int RpmMaxItemsCount = 4;
        public int[] Rpm { get; set; } = new int[4];
        [Obsolete("This method is deprecated. Use GetRpmMaxItemsCount instead.")]
        public byte GetRpmMaxItemsCount() => 4;
        /// <summary>
        /// Voltage measured from each ESC.
        /// OriginName: voltage, Units: V, IsExtended: false
        /// </summary>
        public const int VoltageMaxItemsCount = 4;
        public float[] Voltage { get; } = new float[4];
        /// <summary>
        /// Current measured from each ESC.
        /// OriginName: current, Units: A, IsExtended: false
        /// </summary>
        public const int CurrentMaxItemsCount = 4;
        public float[] Current { get; } = new float[4];
        /// <summary>
        /// Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.
        /// OriginName: index, Units: , IsExtended: false
        /// </summary>
        public byte Index { get; set; }
    }
    /// <summary>
    /// Configure WiFi AP SSID, password, and mode. This message is re-emitted as an acknowledgement by the AP. The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE
    ///  WIFI_CONFIG_AP
    /// </summary>
    public class WifiConfigApPacket: PacketV2<WifiConfigApPayload>
    {
	    public const int PacketMessageId = 299;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 19;
        public override bool WrapToV2Extension => false;

        public override WifiConfigApPayload Payload { get; } = new WifiConfigApPayload();

        public override string Name => "WIFI_CONFIG_AP";
    }

    /// <summary>
    ///  WIFI_CONFIG_AP
    /// </summary>
    public class WifiConfigApPayload : IPayload
    {
        public byte GetMaxByteSize() => 98; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 98; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=Ssid.Length; //Ssid
            sum+=Password.Length; //Password
            sum+= 1; // Mode
            sum+= 1; // Response
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = 32;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Ssid)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Ssid.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/64 - Math.Max(0,((/*PayloadByteSize*/98 - payloadSize - /*ExtendedFieldsLength*/2)/1 /*FieldTypeByteSize*/));
            Password = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Password)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Password.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'Mode' can be empty
            if (buffer.IsEmpty) return;
            Mode = (WifiConfigApMode)BinSerialize.ReadByte(ref buffer);
            // extended field 'Response' can be empty
            if (buffer.IsEmpty) return;
            Response = (WifiConfigApResponse)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Ssid)
                {
                    Encoding.ASCII.GetBytes(charPointer, Ssid.Length, bytePointer, Ssid.Length);
                }
            }
            buffer = buffer.Slice(Ssid.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Password)
                {
                    Encoding.ASCII.GetBytes(charPointer, Password.Length, bytePointer, Password.Length);
                }
            }
            buffer = buffer.Slice(Password.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteByte(ref buffer,(byte)Response);
            /* PayloadByteSize = 98 */;
        }
        
        



        /// <summary>
        /// Name of Wi-Fi network (SSID). Blank to leave it unchanged when setting. Current SSID when sent back as a response.
        /// OriginName: ssid, Units: , IsExtended: false
        /// </summary>
        public const int SsidMaxItemsCount = 32;
        public char[] Ssid { get; } = new char[32];
        /// <summary>
        /// Password. Blank for an open AP. MD5 hash when message is sent back as a response.
        /// OriginName: password, Units: , IsExtended: false
        /// </summary>
        public const int PasswordMaxItemsCount = 64;
        public char[] Password { get; set; } = new char[64];
        [Obsolete("This method is deprecated. Use GetPasswordMaxItemsCount instead.")]
        public byte GetPasswordMaxItemsCount() => 64;
        /// <summary>
        /// WiFi Mode.
        /// OriginName: mode, Units: , IsExtended: true
        /// </summary>
        public WifiConfigApMode Mode { get; set; }
        /// <summary>
        /// Message acceptance response (sent back to GS).
        /// OriginName: response, Units: , IsExtended: true
        /// </summary>
        public WifiConfigApResponse Response { get; set; }
    }
    /// <summary>
    /// The location and information of an AIS vessel
    ///  AIS_VESSEL
    /// </summary>
    public class AisVesselPacket: PacketV2<AisVesselPayload>
    {
	    public const int PacketMessageId = 301;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 243;
        public override bool WrapToV2Extension => false;

        public override AisVesselPayload Payload { get; } = new AisVesselPayload();

        public override string Name => "AIS_VESSEL";
    }

    /// <summary>
    ///  AIS_VESSEL
    /// </summary>
    public class AisVesselPayload : IPayload
    {
        public byte GetMaxByteSize() => 58; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 58; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Mmsi
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=2; //Cog
            sum+=2; //Heading
            sum+=2; //Velocity
            sum+=2; //DimensionBow
            sum+=2; //DimensionStern
            sum+=2; //Tslc
            sum+= 2; // Flags
            sum+=1; //TurnRate
            sum+= 1; // NavigationalStatus
            sum+= 1; // Type
            sum+=1; //DimensionPort
            sum+=1; //DimensionStarboard
            sum+=Callsign.Length; //Callsign
            sum+=Name.Length; //Name
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Mmsi = BinSerialize.ReadUInt(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Cog = BinSerialize.ReadUShort(ref buffer);
            Heading = BinSerialize.ReadUShort(ref buffer);
            Velocity = BinSerialize.ReadUShort(ref buffer);
            DimensionBow = BinSerialize.ReadUShort(ref buffer);
            DimensionStern = BinSerialize.ReadUShort(ref buffer);
            Tslc = BinSerialize.ReadUShort(ref buffer);
            Flags = (AisFlags)BinSerialize.ReadUShort(ref buffer);
            TurnRate = (sbyte)BinSerialize.ReadByte(ref buffer);
            NavigationalStatus = (AisNavStatus)BinSerialize.ReadByte(ref buffer);
            Type = (AisType)BinSerialize.ReadByte(ref buffer);
            DimensionPort = (byte)BinSerialize.ReadByte(ref buffer);
            DimensionStarboard = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 7;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Callsign.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/58 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Name = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Mmsi);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteUShort(ref buffer,Cog);
            BinSerialize.WriteUShort(ref buffer,Heading);
            BinSerialize.WriteUShort(ref buffer,Velocity);
            BinSerialize.WriteUShort(ref buffer,DimensionBow);
            BinSerialize.WriteUShort(ref buffer,DimensionStern);
            BinSerialize.WriteUShort(ref buffer,Tslc);
            BinSerialize.WriteUShort(ref buffer,(ushort)Flags);
            BinSerialize.WriteByte(ref buffer,(byte)TurnRate);
            BinSerialize.WriteByte(ref buffer,(byte)NavigationalStatus);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)DimensionPort);
            BinSerialize.WriteByte(ref buffer,(byte)DimensionStarboard);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Callsign)
                {
                    Encoding.ASCII.GetBytes(charPointer, Callsign.Length, bytePointer, Callsign.Length);
                }
            }
            buffer = buffer.Slice(Callsign.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            /* PayloadByteSize = 58 */;
        }
        
        



        /// <summary>
        /// Mobile Marine Service Identifier, 9 decimal digits
        /// OriginName: MMSI, Units: , IsExtended: false
        /// </summary>
        public uint Mmsi { get; set; }
        /// <summary>
        /// Latitude
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Course over ground
        /// OriginName: COG, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Cog { get; set; }
        /// <summary>
        /// True heading
        /// OriginName: heading, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Heading { get; set; }
        /// <summary>
        /// Speed over ground
        /// OriginName: velocity, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort Velocity { get; set; }
        /// <summary>
        /// Distance from lat/lon location to bow
        /// OriginName: dimension_bow, Units: m, IsExtended: false
        /// </summary>
        public ushort DimensionBow { get; set; }
        /// <summary>
        /// Distance from lat/lon location to stern
        /// OriginName: dimension_stern, Units: m, IsExtended: false
        /// </summary>
        public ushort DimensionStern { get; set; }
        /// <summary>
        /// Time since last communication in seconds
        /// OriginName: tslc, Units: s, IsExtended: false
        /// </summary>
        public ushort Tslc { get; set; }
        /// <summary>
        /// Bitmask to indicate various statuses including valid data fields
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public AisFlags Flags { get; set; }
        /// <summary>
        /// Turn rate
        /// OriginName: turn_rate, Units: cdeg/s, IsExtended: false
        /// </summary>
        public sbyte TurnRate { get; set; }
        /// <summary>
        /// Navigational status
        /// OriginName: navigational_status, Units: , IsExtended: false
        /// </summary>
        public AisNavStatus NavigationalStatus { get; set; }
        /// <summary>
        /// Type of vessels
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public AisType Type { get; set; }
        /// <summary>
        /// Distance from lat/lon location to port side
        /// OriginName: dimension_port, Units: m, IsExtended: false
        /// </summary>
        public byte DimensionPort { get; set; }
        /// <summary>
        /// Distance from lat/lon location to starboard side
        /// OriginName: dimension_starboard, Units: m, IsExtended: false
        /// </summary>
        public byte DimensionStarboard { get; set; }
        /// <summary>
        /// The vessel callsign
        /// OriginName: callsign, Units: , IsExtended: false
        /// </summary>
        public const int CallsignMaxItemsCount = 7;
        public char[] Callsign { get; } = new char[7];
        /// <summary>
        /// The vessel name
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public const int NameMaxItemsCount = 20;
        public char[] Name { get; set; } = new char[20];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 20;
    }
    /// <summary>
    /// General status information of an UAVCAN node. Please refer to the definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the background information. The UAVCAN specification is available at http://uavcan.org.
    ///  UAVCAN_NODE_STATUS
    /// </summary>
    public class UavcanNodeStatusPacket: PacketV2<UavcanNodeStatusPayload>
    {
	    public const int PacketMessageId = 310;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 28;
        public override bool WrapToV2Extension => false;

        public override UavcanNodeStatusPayload Payload { get; } = new UavcanNodeStatusPayload();

        public override string Name => "UAVCAN_NODE_STATUS";
    }

    /// <summary>
    ///  UAVCAN_NODE_STATUS
    /// </summary>
    public class UavcanNodeStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 17; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 17; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //UptimeSec
            sum+=2; //VendorSpecificStatusCode
            sum+= 1; // Health
            sum+= 1; // Mode
            sum+=1; //SubMode
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            UptimeSec = BinSerialize.ReadUInt(ref buffer);
            VendorSpecificStatusCode = BinSerialize.ReadUShort(ref buffer);
            Health = (UavcanNodeHealth)BinSerialize.ReadByte(ref buffer);
            Mode = (UavcanNodeMode)BinSerialize.ReadByte(ref buffer);
            SubMode = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,UptimeSec);
            BinSerialize.WriteUShort(ref buffer,VendorSpecificStatusCode);
            BinSerialize.WriteByte(ref buffer,(byte)Health);
            BinSerialize.WriteByte(ref buffer,(byte)Mode);
            BinSerialize.WriteByte(ref buffer,(byte)SubMode);
            /* PayloadByteSize = 17 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Time since the start-up of the node.
        /// OriginName: uptime_sec, Units: s, IsExtended: false
        /// </summary>
        public uint UptimeSec { get; set; }
        /// <summary>
        /// Vendor-specific status information.
        /// OriginName: vendor_specific_status_code, Units: , IsExtended: false
        /// </summary>
        public ushort VendorSpecificStatusCode { get; set; }
        /// <summary>
        /// Generalized node health status.
        /// OriginName: health, Units: , IsExtended: false
        /// </summary>
        public UavcanNodeHealth Health { get; set; }
        /// <summary>
        /// Generalized operating mode.
        /// OriginName: mode, Units: , IsExtended: false
        /// </summary>
        public UavcanNodeMode Mode { get; set; }
        /// <summary>
        /// Not used currently.
        /// OriginName: sub_mode, Units: , IsExtended: false
        /// </summary>
        public byte SubMode { get; set; }
    }
    /// <summary>
    /// General information describing a particular UAVCAN node. Please refer to the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo" for the background information. This message should be emitted by the system whenever a new node appears online, or an existing node reboots. Additionally, it can be emitted upon request from the other end of the MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not prohibited to emit this message unconditionally at a low frequency. The UAVCAN specification is available at http://uavcan.org.
    ///  UAVCAN_NODE_INFO
    /// </summary>
    public class UavcanNodeInfoPacket: PacketV2<UavcanNodeInfoPayload>
    {
	    public const int PacketMessageId = 311;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 95;
        public override bool WrapToV2Extension => false;

        public override UavcanNodeInfoPayload Payload { get; } = new UavcanNodeInfoPayload();

        public override string Name => "UAVCAN_NODE_INFO";
    }

    /// <summary>
    ///  UAVCAN_NODE_INFO
    /// </summary>
    public class UavcanNodeInfoPayload : IPayload
    {
        public byte GetMaxByteSize() => 116; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 116; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //UptimeSec
            sum+=4; //SwVcsCommit
            sum+=Name.Length; //Name
            sum+=1; //HwVersionMajor
            sum+=1; //HwVersionMinor
            sum+=HwUniqueId.Length; //HwUniqueId
            sum+=1; //SwVersionMajor
            sum+=1; //SwVersionMinor
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            UptimeSec = BinSerialize.ReadUInt(ref buffer);
            SwVcsCommit = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/80 - Math.Max(0,((/*PayloadByteSize*/116 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Name = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            HwVersionMajor = (byte)BinSerialize.ReadByte(ref buffer);
            HwVersionMinor = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            for(var i=0;i<arraySize;i++)
            {
                HwUniqueId[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            SwVersionMajor = (byte)BinSerialize.ReadByte(ref buffer);
            SwVersionMinor = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,UptimeSec);
            BinSerialize.WriteUInt(ref buffer,SwVcsCommit);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)HwVersionMajor);
            BinSerialize.WriteByte(ref buffer,(byte)HwVersionMinor);
            for(var i=0;i<HwUniqueId.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)HwUniqueId[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)SwVersionMajor);
            BinSerialize.WriteByte(ref buffer,(byte)SwVersionMinor);
            /* PayloadByteSize = 116 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Time since the start-up of the node.
        /// OriginName: uptime_sec, Units: s, IsExtended: false
        /// </summary>
        public uint UptimeSec { get; set; }
        /// <summary>
        /// Version control system (VCS) revision identifier (e.g. git short commit hash). 0 if unknown.
        /// OriginName: sw_vcs_commit, Units: , IsExtended: false
        /// </summary>
        public uint SwVcsCommit { get; set; }
        /// <summary>
        /// Node name string. For example, "sapog.px4.io".
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public const int NameMaxItemsCount = 80;
        public char[] Name { get; set; } = new char[80];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 80;
        /// <summary>
        /// Hardware major version number.
        /// OriginName: hw_version_major, Units: , IsExtended: false
        /// </summary>
        public byte HwVersionMajor { get; set; }
        /// <summary>
        /// Hardware minor version number.
        /// OriginName: hw_version_minor, Units: , IsExtended: false
        /// </summary>
        public byte HwVersionMinor { get; set; }
        /// <summary>
        /// Hardware unique 128-bit ID.
        /// OriginName: hw_unique_id, Units: , IsExtended: false
        /// </summary>
        public const int HwUniqueIdMaxItemsCount = 16;
        public byte[] HwUniqueId { get; } = new byte[16];
        /// <summary>
        /// Software major version number.
        /// OriginName: sw_version_major, Units: , IsExtended: false
        /// </summary>
        public byte SwVersionMajor { get; set; }
        /// <summary>
        /// Software minor version number.
        /// OriginName: sw_version_minor, Units: , IsExtended: false
        /// </summary>
        public byte SwVersionMinor { get; set; }
    }
    /// <summary>
    /// Request to read the value of a parameter with either the param_id string id or param_index. PARAM_EXT_VALUE should be emitted in response.
    ///  PARAM_EXT_REQUEST_READ
    /// </summary>
    public class ParamExtRequestReadPacket: PacketV2<ParamExtRequestReadPayload>
    {
	    public const int PacketMessageId = 320;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 243;
        public override bool WrapToV2Extension => false;

        public override ParamExtRequestReadPayload Payload { get; } = new ParamExtRequestReadPayload();

        public override string Name => "PARAM_EXT_REQUEST_READ";
    }

    /// <summary>
    ///  PARAM_EXT_REQUEST_READ
    /// </summary>
    public class ParamExtRequestReadPayload : IPayload
    {
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //ParamIndex
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=ParamId.Length; //ParamId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamIndex = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/20 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamId = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,ParamIndex);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            /* PayloadByteSize = 20 */;
        }
        
        



        /// <summary>
        /// Parameter index. Set to -1 to use the Parameter ID field as identifier (else param_id will be ignored)
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public short ParamIndex { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; set; } = new char[16];
        [Obsolete("This method is deprecated. Use GetParamIdMaxItemsCount instead.")]
        public byte GetParamIdMaxItemsCount() => 16;
    }
    /// <summary>
    /// Request all parameters of this component. All parameters should be emitted in response as PARAM_EXT_VALUE.
    ///  PARAM_EXT_REQUEST_LIST
    /// </summary>
    public class ParamExtRequestListPacket: PacketV2<ParamExtRequestListPayload>
    {
	    public const int PacketMessageId = 321;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 88;
        public override bool WrapToV2Extension => false;

        public override ParamExtRequestListPayload Payload { get; } = new ParamExtRequestListPayload();

        public override string Name => "PARAM_EXT_REQUEST_LIST";
    }

    /// <summary>
    ///  PARAM_EXT_REQUEST_LIST
    /// </summary>
    public class ParamExtRequestListPayload : IPayload
    {
        public byte GetMaxByteSize() => 2; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 2; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 2 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Emit the value of a parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows them to re-request missing parameters after a loss or timeout.
    ///  PARAM_EXT_VALUE
    /// </summary>
    public class ParamExtValuePacket: PacketV2<ParamExtValuePayload>
    {
	    public const int PacketMessageId = 322;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 243;
        public override bool WrapToV2Extension => false;

        public override ParamExtValuePayload Payload { get; } = new ParamExtValuePayload();

        public override string Name => "PARAM_EXT_VALUE";
    }

    /// <summary>
    ///  PARAM_EXT_VALUE
    /// </summary>
    public class ParamExtValuePayload : IPayload
    {
        public byte GetMaxByteSize() => 149; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 149; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //ParamCount
            sum+=2; //ParamIndex
            sum+=ParamId.Length; //ParamId
            sum+=ParamValue.Length; //ParamValue
            sum+= 1; // ParamType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            ParamCount = BinSerialize.ReadUShort(ref buffer);
            ParamIndex = BinSerialize.ReadUShort(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/149 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamValue = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            ParamType = (MavParamExtType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,ParamCount);
            BinSerialize.WriteUShort(ref buffer,ParamIndex);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamValue.Length, bytePointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(ParamValue.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 149 */;
        }
        
        



        /// <summary>
        /// Total number of parameters
        /// OriginName: param_count, Units: , IsExtended: false
        /// </summary>
        public ushort ParamCount { get; set; }
        /// <summary>
        /// Index of this parameter
        /// OriginName: param_index, Units: , IsExtended: false
        /// </summary>
        public ushort ParamIndex { get; set; }
        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        /// <summary>
        /// Parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public const int ParamValueMaxItemsCount = 128;
        public char[] ParamValue { get; set; } = new char[128];
        [Obsolete("This method is deprecated. Use GetParamValueMaxItemsCount instead.")]
        public byte GetParamValueMaxItemsCount() => 128;
        /// <summary>
        /// Parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public MavParamExtType ParamType { get; set; }
    }
    /// <summary>
    /// Set a parameter value. In order to deal with message loss (and retransmission of PARAM_EXT_SET), when setting a parameter value and the new value is the same as the current value, you will immediately get a PARAM_ACK_ACCEPTED response. If the current state is PARAM_ACK_IN_PROGRESS, you will accordingly receive a PARAM_ACK_IN_PROGRESS in response.
    ///  PARAM_EXT_SET
    /// </summary>
    public class ParamExtSetPacket: PacketV2<ParamExtSetPayload>
    {
	    public const int PacketMessageId = 323;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 78;
        public override bool WrapToV2Extension => false;

        public override ParamExtSetPayload Payload { get; } = new ParamExtSetPayload();

        public override string Name => "PARAM_EXT_SET";
    }

    /// <summary>
    ///  PARAM_EXT_SET
    /// </summary>
    public class ParamExtSetPayload : IPayload
    {
        public byte GetMaxByteSize() => 147; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 147; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=ParamId.Length; //ParamId
            sum+=ParamValue.Length; //ParamValue
            sum+= 1; // ParamType
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/147 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamValue = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            ParamType = (MavParamExtType)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamValue.Length, bytePointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(ParamValue.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            /* PayloadByteSize = 147 */;
        }
        
        



        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        /// <summary>
        /// Parameter value
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public const int ParamValueMaxItemsCount = 128;
        public char[] ParamValue { get; set; } = new char[128];
        [Obsolete("This method is deprecated. Use GetParamValueMaxItemsCount instead.")]
        public byte GetParamValueMaxItemsCount() => 128;
        /// <summary>
        /// Parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public MavParamExtType ParamType { get; set; }
    }
    /// <summary>
    /// Response from a PARAM_EXT_SET message.
    ///  PARAM_EXT_ACK
    /// </summary>
    public class ParamExtAckPacket: PacketV2<ParamExtAckPayload>
    {
	    public const int PacketMessageId = 324;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 132;
        public override bool WrapToV2Extension => false;

        public override ParamExtAckPayload Payload { get; } = new ParamExtAckPayload();

        public override string Name => "PARAM_EXT_ACK";
    }

    /// <summary>
    ///  PARAM_EXT_ACK
    /// </summary>
    public class ParamExtAckPayload : IPayload
    {
        public byte GetMaxByteSize() => 146; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 146; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=ParamId.Length; //ParamId
            sum+=ParamValue.Length; //ParamValue
            sum+= 1; // ParamType
            sum+= 1; // ParamResult
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/146 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            ParamValue = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            ParamType = (MavParamExtType)BinSerialize.ReadByte(ref buffer);
            ParamResult = (ParamAck)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamId)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamId.Length, bytePointer, ParamId.Length);
                }
            }
            buffer = buffer.Slice(ParamId.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ParamValue)
                {
                    Encoding.ASCII.GetBytes(charPointer, ParamValue.Length, bytePointer, ParamValue.Length);
                }
            }
            buffer = buffer.Slice(ParamValue.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)ParamType);
            BinSerialize.WriteByte(ref buffer,(byte)ParamResult);
            /* PayloadByteSize = 146 */;
        }
        
        



        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// OriginName: param_id, Units: , IsExtended: false
        /// </summary>
        public const int ParamIdMaxItemsCount = 16;
        public char[] ParamId { get; } = new char[16];
        /// <summary>
        /// Parameter value (new value if PARAM_ACK_ACCEPTED, current value otherwise)
        /// OriginName: param_value, Units: , IsExtended: false
        /// </summary>
        public const int ParamValueMaxItemsCount = 128;
        public char[] ParamValue { get; set; } = new char[128];
        [Obsolete("This method is deprecated. Use GetParamValueMaxItemsCount instead.")]
        public byte GetParamValueMaxItemsCount() => 128;
        /// <summary>
        /// Parameter type.
        /// OriginName: param_type, Units: , IsExtended: false
        /// </summary>
        public MavParamExtType ParamType { get; set; }
        /// <summary>
        /// Result code.
        /// OriginName: param_result, Units: , IsExtended: false
        /// </summary>
        public ParamAck ParamResult { get; set; }
    }
    /// <summary>
    /// Obstacle distances in front of the sensor, starting from the left in increment degrees to the right
    ///  OBSTACLE_DISTANCE
    /// </summary>
    public class ObstacleDistancePacket: PacketV2<ObstacleDistancePayload>
    {
	    public const int PacketMessageId = 330;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 23;
        public override bool WrapToV2Extension => false;

        public override ObstacleDistancePayload Payload { get; } = new ObstacleDistancePayload();

        public override string Name => "OBSTACLE_DISTANCE";
    }

    /// <summary>
    ///  OBSTACLE_DISTANCE
    /// </summary>
    public class ObstacleDistancePayload : IPayload
    {
        public byte GetMaxByteSize() => 167; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 167; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=Distances.Length * 2; //Distances
            sum+=2; //MinDistance
            sum+=2; //MaxDistance
            sum+= 1; // SensorType
            sum+=1; //Increment
            sum+=4; //IncrementF
            sum+=4; //AngleOffset
            sum+= 1; // Frame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/72 - Math.Max(0,((/*PayloadByteSize*/167 - payloadSize - /*ExtendedFieldsLength*/9)/2 /*FieldTypeByteSize*/));
            Distances = new ushort[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Distances[i] = BinSerialize.ReadUShort(ref buffer);
            }
            MinDistance = BinSerialize.ReadUShort(ref buffer);
            MaxDistance = BinSerialize.ReadUShort(ref buffer);
            SensorType = (MavDistanceSensor)BinSerialize.ReadByte(ref buffer);
            Increment = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'IncrementF' can be empty
            if (buffer.IsEmpty) return;
            IncrementF = BinSerialize.ReadFloat(ref buffer);
            // extended field 'AngleOffset' can be empty
            if (buffer.IsEmpty) return;
            AngleOffset = BinSerialize.ReadFloat(ref buffer);
            // extended field 'Frame' can be empty
            if (buffer.IsEmpty) return;
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Distances.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,Distances[i]);
            }
            BinSerialize.WriteUShort(ref buffer,MinDistance);
            BinSerialize.WriteUShort(ref buffer,MaxDistance);
            BinSerialize.WriteByte(ref buffer,(byte)SensorType);
            BinSerialize.WriteByte(ref buffer,(byte)Increment);
            BinSerialize.WriteFloat(ref buffer,IncrementF);
            BinSerialize.WriteFloat(ref buffer,AngleOffset);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 167 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.
        /// OriginName: distances, Units: cm, IsExtended: false
        /// </summary>
        public const int DistancesMaxItemsCount = 72;
        public ushort[] Distances { get; set; } = new ushort[72];
        [Obsolete("This method is deprecated. Use GetDistancesMaxItemsCount instead.")]
        public byte GetDistancesMaxItemsCount() => 72;
        /// <summary>
        /// Minimum distance the sensor can measure.
        /// OriginName: min_distance, Units: cm, IsExtended: false
        /// </summary>
        public ushort MinDistance { get; set; }
        /// <summary>
        /// Maximum distance the sensor can measure.
        /// OriginName: max_distance, Units: cm, IsExtended: false
        /// </summary>
        public ushort MaxDistance { get; set; }
        /// <summary>
        /// Class id of the distance sensor type.
        /// OriginName: sensor_type, Units: , IsExtended: false
        /// </summary>
        public MavDistanceSensor SensorType { get; set; }
        /// <summary>
        /// Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero.
        /// OriginName: increment, Units: deg, IsExtended: false
        /// </summary>
        public byte Increment { get; set; }
        /// <summary>
        /// Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise.
        /// OriginName: increment_f, Units: deg, IsExtended: true
        /// </summary>
        public float IncrementF { get; set; }
        /// <summary>
        /// Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.
        /// OriginName: angle_offset, Units: deg, IsExtended: true
        /// </summary>
        public float AngleOffset { get; set; }
        /// <summary>
        /// Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.
        /// OriginName: frame, Units: , IsExtended: true
        /// </summary>
        public MavFrame Frame { get; set; }
    }
    /// <summary>
    /// Odometry message to communicate odometry information with an external interface. Fits ROS REP 147 standard for aerial vehicles (http://www.ros.org/reps/rep-0147.html).
    ///  ODOMETRY
    /// </summary>
    public class OdometryPacket: PacketV2<OdometryPayload>
    {
	    public const int PacketMessageId = 331;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 91;
        public override bool WrapToV2Extension => false;

        public override OdometryPayload Payload { get; } = new OdometryPayload();

        public override string Name => "ODOMETRY";
    }

    /// <summary>
    ///  ODOMETRY
    /// </summary>
    public class OdometryPayload : IPayload
    {
        public byte GetMaxByteSize() => 233; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 233; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+=Q.Length * 4; //Q
            sum+=4; //Vx
            sum+=4; //Vy
            sum+=4; //Vz
            sum+=4; //Rollspeed
            sum+=4; //Pitchspeed
            sum+=4; //Yawspeed
            sum+=PoseCovariance.Length * 4; //PoseCovariance
            sum+=VelocityCovariance.Length * 4; //VelocityCovariance
            sum+= 1; // FrameId
            sum+= 1; // ChildFrameId
            sum+=1; //ResetCounter
            sum+= 1; // EstimatorType
            sum+=1; //Quality
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            X = BinSerialize.ReadFloat(ref buffer);
            Y = BinSerialize.ReadFloat(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                Q[i] = BinSerialize.ReadFloat(ref buffer);
            }
            Vx = BinSerialize.ReadFloat(ref buffer);
            Vy = BinSerialize.ReadFloat(ref buffer);
            Vz = BinSerialize.ReadFloat(ref buffer);
            Rollspeed = BinSerialize.ReadFloat(ref buffer);
            Pitchspeed = BinSerialize.ReadFloat(ref buffer);
            Yawspeed = BinSerialize.ReadFloat(ref buffer);
            arraySize = /*ArrayLength*/21 - Math.Max(0,((/*PayloadByteSize*/233 - payloadSize - /*ExtendedFieldsLength*/3)/4 /*FieldTypeByteSize*/));
            PoseCovariance = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                PoseCovariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 21;
            for(var i=0;i<arraySize;i++)
            {
                VelocityCovariance[i] = BinSerialize.ReadFloat(ref buffer);
            }
            FrameId = (MavFrame)BinSerialize.ReadByte(ref buffer);
            ChildFrameId = (MavFrame)BinSerialize.ReadByte(ref buffer);
            // extended field 'ResetCounter' can be empty
            if (buffer.IsEmpty) return;
            ResetCounter = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'EstimatorType' can be empty
            if (buffer.IsEmpty) return;
            EstimatorType = (MavEstimatorType)BinSerialize.ReadByte(ref buffer);
            // extended field 'Quality' can be empty
            if (buffer.IsEmpty) return;
            Quality = (sbyte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,X);
            BinSerialize.WriteFloat(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            for(var i=0;i<Q.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Q[i]);
            }
            BinSerialize.WriteFloat(ref buffer,Vx);
            BinSerialize.WriteFloat(ref buffer,Vy);
            BinSerialize.WriteFloat(ref buffer,Vz);
            BinSerialize.WriteFloat(ref buffer,Rollspeed);
            BinSerialize.WriteFloat(ref buffer,Pitchspeed);
            BinSerialize.WriteFloat(ref buffer,Yawspeed);
            for(var i=0;i<PoseCovariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PoseCovariance[i]);
            }
            for(var i=0;i<VelocityCovariance.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelocityCovariance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)FrameId);
            BinSerialize.WriteByte(ref buffer,(byte)ChildFrameId);
            BinSerialize.WriteByte(ref buffer,(byte)ResetCounter);
            BinSerialize.WriteByte(ref buffer,(byte)EstimatorType);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 233 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X Position
        /// OriginName: x, Units: m, IsExtended: false
        /// </summary>
        public float X { get; set; }
        /// <summary>
        /// Y Position
        /// OriginName: y, Units: m, IsExtended: false
        /// </summary>
        public float Y { get; set; }
        /// <summary>
        /// Z Position
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
        /// OriginName: q, Units: , IsExtended: false
        /// </summary>
        public const int QMaxItemsCount = 4;
        public float[] Q { get; } = new float[4];
        /// <summary>
        /// X linear speed
        /// OriginName: vx, Units: m/s, IsExtended: false
        /// </summary>
        public float Vx { get; set; }
        /// <summary>
        /// Y linear speed
        /// OriginName: vy, Units: m/s, IsExtended: false
        /// </summary>
        public float Vy { get; set; }
        /// <summary>
        /// Z linear speed
        /// OriginName: vz, Units: m/s, IsExtended: false
        /// </summary>
        public float Vz { get; set; }
        /// <summary>
        /// Roll angular speed
        /// OriginName: rollspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Rollspeed { get; set; }
        /// <summary>
        /// Pitch angular speed
        /// OriginName: pitchspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Pitchspeed { get; set; }
        /// <summary>
        /// Yaw angular speed
        /// OriginName: yawspeed, Units: rad/s, IsExtended: false
        /// </summary>
        public float Yawspeed { get; set; }
        /// <summary>
        /// Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: pose_covariance, Units: , IsExtended: false
        /// </summary>
        public const int PoseCovarianceMaxItemsCount = 21;
        public float[] PoseCovariance { get; set; } = new float[21];
        [Obsolete("This method is deprecated. Use GetPoseCovarianceMaxItemsCount instead.")]
        public byte GetPoseCovarianceMaxItemsCount() => 21;
        /// <summary>
        /// Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// OriginName: velocity_covariance, Units: , IsExtended: false
        /// </summary>
        public const int VelocityCovarianceMaxItemsCount = 21;
        public float[] VelocityCovariance { get; } = new float[21];
        /// <summary>
        /// Coordinate frame of reference for the pose data.
        /// OriginName: frame_id, Units: , IsExtended: false
        /// </summary>
        public MavFrame FrameId { get; set; }
        /// <summary>
        /// Coordinate frame of reference for the velocity in free space (twist) data.
        /// OriginName: child_frame_id, Units: , IsExtended: false
        /// </summary>
        public MavFrame ChildFrameId { get; set; }
        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// OriginName: reset_counter, Units: , IsExtended: true
        /// </summary>
        public byte ResetCounter { get; set; }
        /// <summary>
        /// Type of estimator that is providing the odometry.
        /// OriginName: estimator_type, Units: , IsExtended: true
        /// </summary>
        public MavEstimatorType EstimatorType { get; set; }
        /// <summary>
        /// Optional odometry quality metric as a percentage. -1 = odometry has failed, 0 = unknown/unset quality, 1 = worst quality, 100 = best quality
        /// OriginName: quality, Units: %, IsExtended: true
        /// </summary>
        public sbyte Quality { get; set; }
    }
    /// <summary>
    /// Describe a trajectory using an array of up-to 5 waypoints in the local frame (MAV_FRAME_LOCAL_NED).
    ///  TRAJECTORY_REPRESENTATION_WAYPOINTS
    /// </summary>
    public class TrajectoryRepresentationWaypointsPacket: PacketV2<TrajectoryRepresentationWaypointsPayload>
    {
	    public const int PacketMessageId = 332;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 236;
        public override bool WrapToV2Extension => false;

        public override TrajectoryRepresentationWaypointsPayload Payload { get; } = new TrajectoryRepresentationWaypointsPayload();

        public override string Name => "TRAJECTORY_REPRESENTATION_WAYPOINTS";
    }

    /// <summary>
    ///  TRAJECTORY_REPRESENTATION_WAYPOINTS
    /// </summary>
    public class TrajectoryRepresentationWaypointsPayload : IPayload
    {
        public byte GetMaxByteSize() => 239; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 239; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=PosX.Length * 4; //PosX
            sum+=PosY.Length * 4; //PosY
            sum+=PosZ.Length * 4; //PosZ
            sum+=VelX.Length * 4; //VelX
            sum+=VelY.Length * 4; //VelY
            sum+=VelZ.Length * 4; //VelZ
            sum+=AccX.Length * 4; //AccX
            sum+=AccY.Length * 4; //AccY
            sum+=AccZ.Length * 4; //AccZ
            sum+=PosYaw.Length * 4; //PosYaw
            sum+=VelYaw.Length * 4; //VelYaw
            sum+= Command.Length * 2; // Command
            
            sum+=1; //ValidPoints
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/5 - Math.Max(0,((/*PayloadByteSize*/239 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            PosX = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                PosX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                AccX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                AccY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                AccZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosYaw[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                VelYaw[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                Command[i] = (MavCmd)BinSerialize.ReadUShort(ref buffer);
            }

            ValidPoints = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<PosX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosX[i]);
            }
            for(var i=0;i<PosY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosY[i]);
            }
            for(var i=0;i<PosZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosZ[i]);
            }
            for(var i=0;i<VelX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelX[i]);
            }
            for(var i=0;i<VelY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelY[i]);
            }
            for(var i=0;i<VelZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelZ[i]);
            }
            for(var i=0;i<AccX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AccX[i]);
            }
            for(var i=0;i<AccY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AccY[i]);
            }
            for(var i=0;i<AccZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,AccZ[i]);
            }
            for(var i=0;i<PosYaw.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosYaw[i]);
            }
            for(var i=0;i<VelYaw.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,VelYaw[i]);
            }
            for(var i=0;i<Command.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,(ushort)Command[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ValidPoints);
            /* PayloadByteSize = 239 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X-coordinate of waypoint, set to NaN if not being used
        /// OriginName: pos_x, Units: m, IsExtended: false
        /// </summary>
        public const int PosXMaxItemsCount = 5;
        public float[] PosX { get; set; } = new float[5];
        [Obsolete("This method is deprecated. Use GetPosXMaxItemsCount instead.")]
        public byte GetPosXMaxItemsCount() => 5;
        /// <summary>
        /// Y-coordinate of waypoint, set to NaN if not being used
        /// OriginName: pos_y, Units: m, IsExtended: false
        /// </summary>
        public const int PosYMaxItemsCount = 5;
        public float[] PosY { get; } = new float[5];
        /// <summary>
        /// Z-coordinate of waypoint, set to NaN if not being used
        /// OriginName: pos_z, Units: m, IsExtended: false
        /// </summary>
        public const int PosZMaxItemsCount = 5;
        public float[] PosZ { get; } = new float[5];
        /// <summary>
        /// X-velocity of waypoint, set to NaN if not being used
        /// OriginName: vel_x, Units: m/s, IsExtended: false
        /// </summary>
        public const int VelXMaxItemsCount = 5;
        public float[] VelX { get; } = new float[5];
        /// <summary>
        /// Y-velocity of waypoint, set to NaN if not being used
        /// OriginName: vel_y, Units: m/s, IsExtended: false
        /// </summary>
        public const int VelYMaxItemsCount = 5;
        public float[] VelY { get; } = new float[5];
        /// <summary>
        /// Z-velocity of waypoint, set to NaN if not being used
        /// OriginName: vel_z, Units: m/s, IsExtended: false
        /// </summary>
        public const int VelZMaxItemsCount = 5;
        public float[] VelZ { get; } = new float[5];
        /// <summary>
        /// X-acceleration of waypoint, set to NaN if not being used
        /// OriginName: acc_x, Units: m/s/s, IsExtended: false
        /// </summary>
        public const int AccXMaxItemsCount = 5;
        public float[] AccX { get; } = new float[5];
        /// <summary>
        /// Y-acceleration of waypoint, set to NaN if not being used
        /// OriginName: acc_y, Units: m/s/s, IsExtended: false
        /// </summary>
        public const int AccYMaxItemsCount = 5;
        public float[] AccY { get; } = new float[5];
        /// <summary>
        /// Z-acceleration of waypoint, set to NaN if not being used
        /// OriginName: acc_z, Units: m/s/s, IsExtended: false
        /// </summary>
        public const int AccZMaxItemsCount = 5;
        public float[] AccZ { get; } = new float[5];
        /// <summary>
        /// Yaw angle, set to NaN if not being used
        /// OriginName: pos_yaw, Units: rad, IsExtended: false
        /// </summary>
        public const int PosYawMaxItemsCount = 5;
        public float[] PosYaw { get; } = new float[5];
        /// <summary>
        /// Yaw rate, set to NaN if not being used
        /// OriginName: vel_yaw, Units: rad/s, IsExtended: false
        /// </summary>
        public const int VelYawMaxItemsCount = 5;
        public float[] VelYaw { get; } = new float[5];
        /// <summary>
        /// MAV_CMD command id of waypoint, set to UINT16_MAX if not being used.
        /// OriginName: command, Units: , IsExtended: false
        /// </summary>
        public const int CommandMaxItemsCount = 5;
        public MavCmd[] Command { get; } = new MavCmd[5];
        /// <summary>
        /// Number of valid points (up-to 5 waypoints are possible)
        /// OriginName: valid_points, Units: , IsExtended: false
        /// </summary>
        public byte ValidPoints { get; set; }
    }
    /// <summary>
    /// Describe a trajectory using an array of up-to 5 bezier control points in the local frame (MAV_FRAME_LOCAL_NED).
    ///  TRAJECTORY_REPRESENTATION_BEZIER
    /// </summary>
    public class TrajectoryRepresentationBezierPacket: PacketV2<TrajectoryRepresentationBezierPayload>
    {
	    public const int PacketMessageId = 333;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 231;
        public override bool WrapToV2Extension => false;

        public override TrajectoryRepresentationBezierPayload Payload { get; } = new TrajectoryRepresentationBezierPayload();

        public override string Name => "TRAJECTORY_REPRESENTATION_BEZIER";
    }

    /// <summary>
    ///  TRAJECTORY_REPRESENTATION_BEZIER
    /// </summary>
    public class TrajectoryRepresentationBezierPayload : IPayload
    {
        public byte GetMaxByteSize() => 109; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 109; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=PosX.Length * 4; //PosX
            sum+=PosY.Length * 4; //PosY
            sum+=PosZ.Length * 4; //PosZ
            sum+=Delta.Length * 4; //Delta
            sum+=PosYaw.Length * 4; //PosYaw
            sum+=1; //ValidPoints
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/5 - Math.Max(0,((/*PayloadByteSize*/109 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            PosX = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                PosX[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosY[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosZ[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                Delta[i] = BinSerialize.ReadFloat(ref buffer);
            }
            arraySize = 5;
            for(var i=0;i<arraySize;i++)
            {
                PosYaw[i] = BinSerialize.ReadFloat(ref buffer);
            }
            ValidPoints = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<PosX.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosX[i]);
            }
            for(var i=0;i<PosY.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosY[i]);
            }
            for(var i=0;i<PosZ.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosZ[i]);
            }
            for(var i=0;i<Delta.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Delta[i]);
            }
            for(var i=0;i<PosYaw.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,PosYaw[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)ValidPoints);
            /* PayloadByteSize = 109 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// X-coordinate of bezier control points. Set to NaN if not being used
        /// OriginName: pos_x, Units: m, IsExtended: false
        /// </summary>
        public const int PosXMaxItemsCount = 5;
        public float[] PosX { get; set; } = new float[5];
        [Obsolete("This method is deprecated. Use GetPosXMaxItemsCount instead.")]
        public byte GetPosXMaxItemsCount() => 5;
        /// <summary>
        /// Y-coordinate of bezier control points. Set to NaN if not being used
        /// OriginName: pos_y, Units: m, IsExtended: false
        /// </summary>
        public const int PosYMaxItemsCount = 5;
        public float[] PosY { get; } = new float[5];
        /// <summary>
        /// Z-coordinate of bezier control points. Set to NaN if not being used
        /// OriginName: pos_z, Units: m, IsExtended: false
        /// </summary>
        public const int PosZMaxItemsCount = 5;
        public float[] PosZ { get; } = new float[5];
        /// <summary>
        /// Bezier time horizon. Set to NaN if velocity/acceleration should not be incorporated
        /// OriginName: delta, Units: s, IsExtended: false
        /// </summary>
        public const int DeltaMaxItemsCount = 5;
        public float[] Delta { get; } = new float[5];
        /// <summary>
        /// Yaw. Set to NaN for unchanged
        /// OriginName: pos_yaw, Units: rad, IsExtended: false
        /// </summary>
        public const int PosYawMaxItemsCount = 5;
        public float[] PosYaw { get; } = new float[5];
        /// <summary>
        /// Number of valid control points (up-to 5 points are possible)
        /// OriginName: valid_points, Units: , IsExtended: false
        /// </summary>
        public byte ValidPoints { get; set; }
    }
    /// <summary>
    /// Report current used cellular network status
    ///  CELLULAR_STATUS
    /// </summary>
    public class CellularStatusPacket: PacketV2<CellularStatusPayload>
    {
	    public const int PacketMessageId = 334;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 72;
        public override bool WrapToV2Extension => false;

        public override CellularStatusPayload Payload { get; } = new CellularStatusPayload();

        public override string Name => "CELLULAR_STATUS";
    }

    /// <summary>
    ///  CELLULAR_STATUS
    /// </summary>
    public class CellularStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 10; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 10; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Mcc
            sum+=2; //Mnc
            sum+=2; //Lac
            sum+= 1; // Status
            sum+= 1; // FailureReason
            sum+= 1; // Type
            sum+=1; //Quality
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Mcc = BinSerialize.ReadUShort(ref buffer);
            Mnc = BinSerialize.ReadUShort(ref buffer);
            Lac = BinSerialize.ReadUShort(ref buffer);
            Status = (CellularStatusFlag)BinSerialize.ReadByte(ref buffer);
            FailureReason = (CellularNetworkFailedReason)BinSerialize.ReadByte(ref buffer);
            Type = (CellularNetworkRadioType)BinSerialize.ReadByte(ref buffer);
            Quality = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Mcc);
            BinSerialize.WriteUShort(ref buffer,Mnc);
            BinSerialize.WriteUShort(ref buffer,Lac);
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            BinSerialize.WriteByte(ref buffer,(byte)FailureReason);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            BinSerialize.WriteByte(ref buffer,(byte)Quality);
            /* PayloadByteSize = 10 */;
        }
        
        



        /// <summary>
        /// Mobile country code. If unknown, set to UINT16_MAX
        /// OriginName: mcc, Units: , IsExtended: false
        /// </summary>
        public ushort Mcc { get; set; }
        /// <summary>
        /// Mobile network code. If unknown, set to UINT16_MAX
        /// OriginName: mnc, Units: , IsExtended: false
        /// </summary>
        public ushort Mnc { get; set; }
        /// <summary>
        /// Location area code. If unknown, set to 0
        /// OriginName: lac, Units: , IsExtended: false
        /// </summary>
        public ushort Lac { get; set; }
        /// <summary>
        /// Cellular modem status
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public CellularStatusFlag Status { get; set; }
        /// <summary>
        /// Failure reason when status in in CELLULAR_STATUS_FLAG_FAILED
        /// OriginName: failure_reason, Units: , IsExtended: false
        /// </summary>
        public CellularNetworkFailedReason FailureReason { get; set; }
        /// <summary>
        /// Cellular network radio type: gsm, cdma, lte...
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public CellularNetworkRadioType Type { get; set; }
        /// <summary>
        /// Signal quality in percent. If unknown, set to UINT8_MAX
        /// OriginName: quality, Units: , IsExtended: false
        /// </summary>
        public byte Quality { get; set; }
    }
    /// <summary>
    /// Status of the Iridium SBD link.
    ///  ISBD_LINK_STATUS
    /// </summary>
    public class IsbdLinkStatusPacket: PacketV2<IsbdLinkStatusPayload>
    {
	    public const int PacketMessageId = 335;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 225;
        public override bool WrapToV2Extension => false;

        public override IsbdLinkStatusPayload Payload { get; } = new IsbdLinkStatusPayload();

        public override string Name => "ISBD_LINK_STATUS";
    }

    /// <summary>
    ///  ISBD_LINK_STATUS
    /// </summary>
    public class IsbdLinkStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 24; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 24; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Timestamp
            sum+=8; //LastHeartbeat
            sum+=2; //FailedSessions
            sum+=2; //SuccessfulSessions
            sum+=1; //SignalQuality
            sum+=1; //RingPending
            sum+=1; //TxSessionPending
            sum+=1; //RxSessionPending
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Timestamp = BinSerialize.ReadULong(ref buffer);
            LastHeartbeat = BinSerialize.ReadULong(ref buffer);
            FailedSessions = BinSerialize.ReadUShort(ref buffer);
            SuccessfulSessions = BinSerialize.ReadUShort(ref buffer);
            SignalQuality = (byte)BinSerialize.ReadByte(ref buffer);
            RingPending = (byte)BinSerialize.ReadByte(ref buffer);
            TxSessionPending = (byte)BinSerialize.ReadByte(ref buffer);
            RxSessionPending = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Timestamp);
            BinSerialize.WriteULong(ref buffer,LastHeartbeat);
            BinSerialize.WriteUShort(ref buffer,FailedSessions);
            BinSerialize.WriteUShort(ref buffer,SuccessfulSessions);
            BinSerialize.WriteByte(ref buffer,(byte)SignalQuality);
            BinSerialize.WriteByte(ref buffer,(byte)RingPending);
            BinSerialize.WriteByte(ref buffer,(byte)TxSessionPending);
            BinSerialize.WriteByte(ref buffer,(byte)RxSessionPending);
            /* PayloadByteSize = 24 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: timestamp, Units: us, IsExtended: false
        /// </summary>
        public ulong Timestamp { get; set; }
        /// <summary>
        /// Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: last_heartbeat, Units: us, IsExtended: false
        /// </summary>
        public ulong LastHeartbeat { get; set; }
        /// <summary>
        /// Number of failed SBD sessions.
        /// OriginName: failed_sessions, Units: , IsExtended: false
        /// </summary>
        public ushort FailedSessions { get; set; }
        /// <summary>
        /// Number of successful SBD sessions.
        /// OriginName: successful_sessions, Units: , IsExtended: false
        /// </summary>
        public ushort SuccessfulSessions { get; set; }
        /// <summary>
        /// Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength.
        /// OriginName: signal_quality, Units: , IsExtended: false
        /// </summary>
        public byte SignalQuality { get; set; }
        /// <summary>
        /// 1: Ring call pending, 0: No call pending.
        /// OriginName: ring_pending, Units: , IsExtended: false
        /// </summary>
        public byte RingPending { get; set; }
        /// <summary>
        /// 1: Transmission session pending, 0: No transmission session pending.
        /// OriginName: tx_session_pending, Units: , IsExtended: false
        /// </summary>
        public byte TxSessionPending { get; set; }
        /// <summary>
        /// 1: Receiving session pending, 0: No receiving session pending.
        /// OriginName: rx_session_pending, Units: , IsExtended: false
        /// </summary>
        public byte RxSessionPending { get; set; }
    }
    /// <summary>
    /// Configure cellular modems.
    ///         This message is re-emitted as an acknowledgement by the modem.
    ///         The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE.
    ///  CELLULAR_CONFIG
    /// </summary>
    public class CellularConfigPacket: PacketV2<CellularConfigPayload>
    {
	    public const int PacketMessageId = 336;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 245;
        public override bool WrapToV2Extension => false;

        public override CellularConfigPayload Payload { get; } = new CellularConfigPayload();

        public override string Name => "CELLULAR_CONFIG";
    }

    /// <summary>
    ///  CELLULAR_CONFIG
    /// </summary>
    public class CellularConfigPayload : IPayload
    {
        public byte GetMaxByteSize() => 84; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 84; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //EnableLte
            sum+=1; //EnablePin
            sum+=Pin.Length; //Pin
            sum+=NewPin.Length; //NewPin
            sum+=Apn.Length; //Apn
            sum+=Puk.Length; //Puk
            sum+=1; //Roaming
            sum+= 1; // Response
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            EnableLte = (byte)BinSerialize.ReadByte(ref buffer);
            EnablePin = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Pin)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Pin.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = NewPin)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, NewPin.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/84 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Apn = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Apn)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Apn.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Puk)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Puk.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            Roaming = (byte)BinSerialize.ReadByte(ref buffer);
            Response = (CellularConfigResponse)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)EnableLte);
            BinSerialize.WriteByte(ref buffer,(byte)EnablePin);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Pin)
                {
                    Encoding.ASCII.GetBytes(charPointer, Pin.Length, bytePointer, Pin.Length);
                }
            }
            buffer = buffer.Slice(Pin.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = NewPin)
                {
                    Encoding.ASCII.GetBytes(charPointer, NewPin.Length, bytePointer, NewPin.Length);
                }
            }
            buffer = buffer.Slice(NewPin.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Apn)
                {
                    Encoding.ASCII.GetBytes(charPointer, Apn.Length, bytePointer, Apn.Length);
                }
            }
            buffer = buffer.Slice(Apn.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Puk)
                {
                    Encoding.ASCII.GetBytes(charPointer, Puk.Length, bytePointer, Puk.Length);
                }
            }
            buffer = buffer.Slice(Puk.Length);
            
            BinSerialize.WriteByte(ref buffer,(byte)Roaming);
            BinSerialize.WriteByte(ref buffer,(byte)Response);
            /* PayloadByteSize = 84 */;
        }
        
        



        /// <summary>
        /// Enable/disable LTE. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.
        /// OriginName: enable_lte, Units: , IsExtended: false
        /// </summary>
        public byte EnableLte { get; set; }
        /// <summary>
        /// Enable/disable PIN on the SIM card. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.
        /// OriginName: enable_pin, Units: , IsExtended: false
        /// </summary>
        public byte EnablePin { get; set; }
        /// <summary>
        /// PIN sent to the SIM card. Blank when PIN is disabled. Empty when message is sent back as a response.
        /// OriginName: pin, Units: , IsExtended: false
        /// </summary>
        public const int PinMaxItemsCount = 16;
        public char[] Pin { get; } = new char[16];
        /// <summary>
        /// New PIN when changing the PIN. Blank to leave it unchanged. Empty when message is sent back as a response.
        /// OriginName: new_pin, Units: , IsExtended: false
        /// </summary>
        public const int NewPinMaxItemsCount = 16;
        public char[] NewPin { get; } = new char[16];
        /// <summary>
        /// Name of the cellular APN. Blank to leave it unchanged. Current APN when sent back as a response.
        /// OriginName: apn, Units: , IsExtended: false
        /// </summary>
        public const int ApnMaxItemsCount = 32;
        public char[] Apn { get; set; } = new char[32];
        [Obsolete("This method is deprecated. Use GetApnMaxItemsCount instead.")]
        public byte GetApnMaxItemsCount() => 32;
        /// <summary>
        /// Required PUK code in case the user failed to authenticate 3 times with the PIN. Empty when message is sent back as a response.
        /// OriginName: puk, Units: , IsExtended: false
        /// </summary>
        public const int PukMaxItemsCount = 16;
        public char[] Puk { get; } = new char[16];
        /// <summary>
        /// Enable/disable roaming. 0: setting unchanged, 1: disabled, 2: enabled. Current setting when sent back as a response.
        /// OriginName: roaming, Units: , IsExtended: false
        /// </summary>
        public byte Roaming { get; set; }
        /// <summary>
        /// Message acceptance response (sent back to GS).
        /// OriginName: response, Units: , IsExtended: false
        /// </summary>
        public CellularConfigResponse Response { get; set; }
    }
    /// <summary>
    /// RPM sensor data message.
    ///  RAW_RPM
    /// </summary>
    public class RawRpmPacket: PacketV2<RawRpmPayload>
    {
	    public const int PacketMessageId = 339;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 199;
        public override bool WrapToV2Extension => false;

        public override RawRpmPayload Payload { get; } = new RawRpmPayload();

        public override string Name => "RAW_RPM";
    }

    /// <summary>
    ///  RAW_RPM
    /// </summary>
    public class RawRpmPayload : IPayload
    {
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Frequency
            sum+=1; //Index
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Frequency = BinSerialize.ReadFloat(ref buffer);
            Index = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteFloat(ref buffer,Frequency);
            BinSerialize.WriteByte(ref buffer,(byte)Index);
            /* PayloadByteSize = 5 */;
        }
        
        



        /// <summary>
        /// Indicated rate
        /// OriginName: frequency, Units: rpm, IsExtended: false
        /// </summary>
        public float Frequency { get; set; }
        /// <summary>
        /// Index of this RPM sensor (0-indexed)
        /// OriginName: index, Units: , IsExtended: false
        /// </summary>
        public byte Index { get; set; }
    }
    /// <summary>
    /// The global position resulting from GPS and sensor fusion.
    ///  UTM_GLOBAL_POSITION
    /// </summary>
    public class UtmGlobalPositionPacket: PacketV2<UtmGlobalPositionPayload>
    {
	    public const int PacketMessageId = 340;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 99;
        public override bool WrapToV2Extension => false;

        public override UtmGlobalPositionPayload Payload { get; } = new UtmGlobalPositionPayload();

        public override string Name => "UTM_GLOBAL_POSITION";
    }

    /// <summary>
    ///  UTM_GLOBAL_POSITION
    /// </summary>
    public class UtmGlobalPositionPayload : IPayload
    {
        public byte GetMaxByteSize() => 70; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 70; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //Time
            sum+=4; //Lat
            sum+=4; //Lon
            sum+=4; //Alt
            sum+=4; //RelativeAlt
            sum+=4; //NextLat
            sum+=4; //NextLon
            sum+=4; //NextAlt
            sum+=2; //Vx
            sum+=2; //Vy
            sum+=2; //Vz
            sum+=2; //HAcc
            sum+=2; //VAcc
            sum+=2; //VelAcc
            sum+=2; //UpdateRate
            sum+=UasId.Length; //UasId
            sum+= 1; // FlightState
            sum+= 1; // Flags
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Time = BinSerialize.ReadULong(ref buffer);
            Lat = BinSerialize.ReadInt(ref buffer);
            Lon = BinSerialize.ReadInt(ref buffer);
            Alt = BinSerialize.ReadInt(ref buffer);
            RelativeAlt = BinSerialize.ReadInt(ref buffer);
            NextLat = BinSerialize.ReadInt(ref buffer);
            NextLon = BinSerialize.ReadInt(ref buffer);
            NextAlt = BinSerialize.ReadInt(ref buffer);
            Vx = BinSerialize.ReadShort(ref buffer);
            Vy = BinSerialize.ReadShort(ref buffer);
            Vz = BinSerialize.ReadShort(ref buffer);
            HAcc = BinSerialize.ReadUShort(ref buffer);
            VAcc = BinSerialize.ReadUShort(ref buffer);
            VelAcc = BinSerialize.ReadUShort(ref buffer);
            UpdateRate = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/18 - Math.Max(0,((/*PayloadByteSize*/70 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            UasId = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                UasId[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            FlightState = (UtmFlightState)BinSerialize.ReadByte(ref buffer);
            Flags = (UtmDataAvailFlags)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,Time);
            BinSerialize.WriteInt(ref buffer,Lat);
            BinSerialize.WriteInt(ref buffer,Lon);
            BinSerialize.WriteInt(ref buffer,Alt);
            BinSerialize.WriteInt(ref buffer,RelativeAlt);
            BinSerialize.WriteInt(ref buffer,NextLat);
            BinSerialize.WriteInt(ref buffer,NextLon);
            BinSerialize.WriteInt(ref buffer,NextAlt);
            BinSerialize.WriteShort(ref buffer,Vx);
            BinSerialize.WriteShort(ref buffer,Vy);
            BinSerialize.WriteShort(ref buffer,Vz);
            BinSerialize.WriteUShort(ref buffer,HAcc);
            BinSerialize.WriteUShort(ref buffer,VAcc);
            BinSerialize.WriteUShort(ref buffer,VelAcc);
            BinSerialize.WriteUShort(ref buffer,UpdateRate);
            for(var i=0;i<UasId.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)UasId[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)FlightState);
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            /* PayloadByteSize = 70 */;
        }
        
        



        /// <summary>
        /// Time of applicability of position (microseconds since UNIX epoch).
        /// OriginName: time, Units: us, IsExtended: false
        /// </summary>
        public ulong Time { get; set; }
        /// <summary>
        /// Latitude (WGS84)
        /// OriginName: lat, Units: degE7, IsExtended: false
        /// </summary>
        public int Lat { get; set; }
        /// <summary>
        /// Longitude (WGS84)
        /// OriginName: lon, Units: degE7, IsExtended: false
        /// </summary>
        public int Lon { get; set; }
        /// <summary>
        /// Altitude (WGS84)
        /// OriginName: alt, Units: mm, IsExtended: false
        /// </summary>
        public int Alt { get; set; }
        /// <summary>
        /// Altitude above ground
        /// OriginName: relative_alt, Units: mm, IsExtended: false
        /// </summary>
        public int RelativeAlt { get; set; }
        /// <summary>
        /// Next waypoint, latitude (WGS84)
        /// OriginName: next_lat, Units: degE7, IsExtended: false
        /// </summary>
        public int NextLat { get; set; }
        /// <summary>
        /// Next waypoint, longitude (WGS84)
        /// OriginName: next_lon, Units: degE7, IsExtended: false
        /// </summary>
        public int NextLon { get; set; }
        /// <summary>
        /// Next waypoint, altitude (WGS84)
        /// OriginName: next_alt, Units: mm, IsExtended: false
        /// </summary>
        public int NextAlt { get; set; }
        /// <summary>
        /// Ground X speed (latitude, positive north)
        /// OriginName: vx, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vx { get; set; }
        /// <summary>
        /// Ground Y speed (longitude, positive east)
        /// OriginName: vy, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vy { get; set; }
        /// <summary>
        /// Ground Z speed (altitude, positive down)
        /// OriginName: vz, Units: cm/s, IsExtended: false
        /// </summary>
        public short Vz { get; set; }
        /// <summary>
        /// Horizontal position uncertainty (standard deviation)
        /// OriginName: h_acc, Units: mm, IsExtended: false
        /// </summary>
        public ushort HAcc { get; set; }
        /// <summary>
        /// Altitude uncertainty (standard deviation)
        /// OriginName: v_acc, Units: mm, IsExtended: false
        /// </summary>
        public ushort VAcc { get; set; }
        /// <summary>
        /// Speed uncertainty (standard deviation)
        /// OriginName: vel_acc, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort VelAcc { get; set; }
        /// <summary>
        /// Time until next update. Set to 0 if unknown or in data driven mode.
        /// OriginName: update_rate, Units: cs, IsExtended: false
        /// </summary>
        public ushort UpdateRate { get; set; }
        /// <summary>
        /// Unique UAS ID.
        /// OriginName: uas_id, Units: , IsExtended: false
        /// </summary>
        public const int UasIdMaxItemsCount = 18;
        public byte[] UasId { get; set; } = new byte[18];
        [Obsolete("This method is deprecated. Use GetUasIdMaxItemsCount instead.")]
        public byte GetUasIdMaxItemsCount() => 18;
        /// <summary>
        /// Flight state
        /// OriginName: flight_state, Units: , IsExtended: false
        /// </summary>
        public UtmFlightState FlightState { get; set; }
        /// <summary>
        /// Bitwise OR combination of the data available flags.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public UtmDataAvailFlags Flags { get; set; }
    }
    /// <summary>
    /// Large debug/prototyping array. The message uses the maximum available payload for data. The array_id and name fields are used to discriminate between messages in code and in user interfaces (respectively). Do not use in production code.
    ///  DEBUG_FLOAT_ARRAY
    /// </summary>
    public class DebugFloatArrayPacket: PacketV2<DebugFloatArrayPayload>
    {
	    public const int PacketMessageId = 350;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 232;
        public override bool WrapToV2Extension => false;

        public override DebugFloatArrayPayload Payload { get; } = new DebugFloatArrayPayload();

        public override string Name => "DEBUG_FLOAT_ARRAY";
    }

    /// <summary>
    ///  DEBUG_FLOAT_ARRAY
    /// </summary>
    public class DebugFloatArrayPayload : IPayload
    {
        public byte GetMaxByteSize() => 252; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 252; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=2; //ArrayId
            sum+=Name.Length; //Name
            sum+=Data.Length * 4; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            ArrayId = BinSerialize.ReadUShort(ref buffer);
            arraySize = /*ArrayLength*/10 - Math.Max(0,((/*PayloadByteSize*/252 - payloadSize - /*ExtendedFieldsLength*/232)/1 /*FieldTypeByteSize*/));
            Name = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Name.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'Data' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 58;
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUShort(ref buffer,ArrayId);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Name)
                {
                    Encoding.ASCII.GetBytes(charPointer, Name.Length, bytePointer, Name.Length);
                }
            }
            buffer = buffer.Slice(Name.Length);
            
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Data[i]);
            }
            /* PayloadByteSize = 252 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Unique ID used to discriminate between arrays
        /// OriginName: array_id, Units: , IsExtended: false
        /// </summary>
        public ushort ArrayId { get; set; }
        /// <summary>
        /// Name, for human-friendly display in a Ground Control Station
        /// OriginName: name, Units: , IsExtended: false
        /// </summary>
        public const int NameMaxItemsCount = 10;
        public char[] Name { get; set; } = new char[10];
        [Obsolete("This method is deprecated. Use GetNameMaxItemsCount instead.")]
        public byte GetNameMaxItemsCount() => 10;
        /// <summary>
        /// data
        /// OriginName: data, Units: , IsExtended: true
        /// </summary>
        public const int DataMaxItemsCount = 58;
        public float[] Data { get; } = new float[58];
    }
    /// <summary>
    /// Vehicle status report that is sent out while orbit execution is in progress (see MAV_CMD_DO_ORBIT).
    ///  ORBIT_EXECUTION_STATUS
    /// </summary>
    public class OrbitExecutionStatusPacket: PacketV2<OrbitExecutionStatusPayload>
    {
	    public const int PacketMessageId = 360;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 11;
        public override bool WrapToV2Extension => false;

        public override OrbitExecutionStatusPayload Payload { get; } = new OrbitExecutionStatusPayload();

        public override string Name => "ORBIT_EXECUTION_STATUS";
    }

    /// <summary>
    ///  ORBIT_EXECUTION_STATUS
    /// </summary>
    public class OrbitExecutionStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 25; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 25; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Radius
            sum+=4; //X
            sum+=4; //Y
            sum+=4; //Z
            sum+= 1; // Frame
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Radius = BinSerialize.ReadFloat(ref buffer);
            X = BinSerialize.ReadInt(ref buffer);
            Y = BinSerialize.ReadInt(ref buffer);
            Z = BinSerialize.ReadFloat(ref buffer);
            Frame = (MavFrame)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,Radius);
            BinSerialize.WriteInt(ref buffer,X);
            BinSerialize.WriteInt(ref buffer,Y);
            BinSerialize.WriteFloat(ref buffer,Z);
            BinSerialize.WriteByte(ref buffer,(byte)Frame);
            /* PayloadByteSize = 25 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Radius of the orbit circle. Positive values orbit clockwise, negative values orbit counter-clockwise.
        /// OriginName: radius, Units: m, IsExtended: false
        /// </summary>
        public float Radius { get; set; }
        /// <summary>
        /// X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
        /// OriginName: x, Units: , IsExtended: false
        /// </summary>
        public int X { get; set; }
        /// <summary>
        /// Y coordinate of center point.  Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
        /// OriginName: y, Units: , IsExtended: false
        /// </summary>
        public int Y { get; set; }
        /// <summary>
        /// Altitude of center point. Coordinate system depends on frame field.
        /// OriginName: z, Units: m, IsExtended: false
        /// </summary>
        public float Z { get; set; }
        /// <summary>
        /// The coordinate system of the fields: x, y, z.
        /// OriginName: frame, Units: , IsExtended: false
        /// </summary>
        public MavFrame Frame { get; set; }
    }
    /// <summary>
    /// Smart Battery information (static/infrequent update). Use for updates from: smart battery to flight stack, flight stack to GCS. Use BATTERY_STATUS for smart battery frequent updates.
    ///  SMART_BATTERY_INFO
    /// </summary>
    public class SmartBatteryInfoPacket: PacketV2<SmartBatteryInfoPayload>
    {
	    public const int PacketMessageId = 370;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 75;
        public override bool WrapToV2Extension => false;

        public override SmartBatteryInfoPayload Payload { get; } = new SmartBatteryInfoPayload();

        public override string Name => "SMART_BATTERY_INFO";
    }

    /// <summary>
    ///  SMART_BATTERY_INFO
    /// </summary>
    public class SmartBatteryInfoPayload : IPayload
    {
        public byte GetMaxByteSize() => 109; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 109; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //CapacityFullSpecification
            sum+=4; //CapacityFull
            sum+=2; //CycleCount
            sum+=2; //Weight
            sum+=2; //DischargeMinimumVoltage
            sum+=2; //ChargingMinimumVoltage
            sum+=2; //RestingMinimumVoltage
            sum+=1; //Id
            sum+= 1; // BatteryFunction
            sum+= 1; // Type
            sum+=SerialNumber.Length; //SerialNumber
            sum+=DeviceName.Length; //DeviceName
            sum+=2; //ChargingMaximumVoltage
            sum+=1; //CellsInSeries
            sum+=4; //DischargeMaximumCurrent
            sum+=4; //DischargeMaximumBurstCurrent
            sum+=ManufactureDate.Length; //ManufactureDate
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            CapacityFullSpecification = BinSerialize.ReadInt(ref buffer);
            CapacityFull = BinSerialize.ReadInt(ref buffer);
            CycleCount = BinSerialize.ReadUShort(ref buffer);
            Weight = BinSerialize.ReadUShort(ref buffer);
            DischargeMinimumVoltage = BinSerialize.ReadUShort(ref buffer);
            ChargingMinimumVoltage = BinSerialize.ReadUShort(ref buffer);
            RestingMinimumVoltage = BinSerialize.ReadUShort(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);
            BatteryFunction = (MavBatteryFunction)BinSerialize.ReadByte(ref buffer);
            Type = (MavBatteryType)BinSerialize.ReadByte(ref buffer);
            arraySize = 16;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = SerialNumber)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, SerialNumber.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = /*ArrayLength*/50 - Math.Max(0,((/*PayloadByteSize*/109 - payloadSize - /*ExtendedFieldsLength*/22)/1 /*FieldTypeByteSize*/));
            DeviceName = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = DeviceName)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, DeviceName.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            // extended field 'ChargingMaximumVoltage' can be empty
            if (buffer.IsEmpty) return;
            ChargingMaximumVoltage = BinSerialize.ReadUShort(ref buffer);
            // extended field 'CellsInSeries' can be empty
            if (buffer.IsEmpty) return;
            CellsInSeries = (byte)BinSerialize.ReadByte(ref buffer);
            // extended field 'DischargeMaximumCurrent' can be empty
            if (buffer.IsEmpty) return;
            DischargeMaximumCurrent = BinSerialize.ReadUInt(ref buffer);
            // extended field 'DischargeMaximumBurstCurrent' can be empty
            if (buffer.IsEmpty) return;
            DischargeMaximumBurstCurrent = BinSerialize.ReadUInt(ref buffer);
            // extended field 'ManufactureDate' can be empty
            if (buffer.IsEmpty) return;
            arraySize = 11;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ManufactureDate)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, ManufactureDate.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,CapacityFullSpecification);
            BinSerialize.WriteInt(ref buffer,CapacityFull);
            BinSerialize.WriteUShort(ref buffer,CycleCount);
            BinSerialize.WriteUShort(ref buffer,Weight);
            BinSerialize.WriteUShort(ref buffer,DischargeMinimumVoltage);
            BinSerialize.WriteUShort(ref buffer,ChargingMinimumVoltage);
            BinSerialize.WriteUShort(ref buffer,RestingMinimumVoltage);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            BinSerialize.WriteByte(ref buffer,(byte)BatteryFunction);
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = SerialNumber)
                {
                    Encoding.ASCII.GetBytes(charPointer, SerialNumber.Length, bytePointer, SerialNumber.Length);
                }
            }
            buffer = buffer.Slice(SerialNumber.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = DeviceName)
                {
                    Encoding.ASCII.GetBytes(charPointer, DeviceName.Length, bytePointer, DeviceName.Length);
                }
            }
            buffer = buffer.Slice(DeviceName.Length);
            
            BinSerialize.WriteUShort(ref buffer,ChargingMaximumVoltage);
            BinSerialize.WriteByte(ref buffer,(byte)CellsInSeries);
            BinSerialize.WriteUInt(ref buffer,DischargeMaximumCurrent);
            BinSerialize.WriteUInt(ref buffer,DischargeMaximumBurstCurrent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = ManufactureDate)
                {
                    Encoding.ASCII.GetBytes(charPointer, ManufactureDate.Length, bytePointer, ManufactureDate.Length);
                }
            }
            buffer = buffer.Slice(ManufactureDate.Length);
            
            /* PayloadByteSize = 109 */;
        }
        
        



        /// <summary>
        /// Capacity when full according to manufacturer, -1: field not provided.
        /// OriginName: capacity_full_specification, Units: mAh, IsExtended: false
        /// </summary>
        public int CapacityFullSpecification { get; set; }
        /// <summary>
        /// Capacity when full (accounting for battery degradation), -1: field not provided.
        /// OriginName: capacity_full, Units: mAh, IsExtended: false
        /// </summary>
        public int CapacityFull { get; set; }
        /// <summary>
        /// Charge/discharge cycle count. UINT16_MAX: field not provided.
        /// OriginName: cycle_count, Units: , IsExtended: false
        /// </summary>
        public ushort CycleCount { get; set; }
        /// <summary>
        /// Battery weight. 0: field not provided.
        /// OriginName: weight, Units: g, IsExtended: false
        /// </summary>
        public ushort Weight { get; set; }
        /// <summary>
        /// Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value.
        /// OriginName: discharge_minimum_voltage, Units: mV, IsExtended: false
        /// </summary>
        public ushort DischargeMinimumVoltage { get; set; }
        /// <summary>
        /// Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value.
        /// OriginName: charging_minimum_voltage, Units: mV, IsExtended: false
        /// </summary>
        public ushort ChargingMinimumVoltage { get; set; }
        /// <summary>
        /// Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value.
        /// OriginName: resting_minimum_voltage, Units: mV, IsExtended: false
        /// </summary>
        public ushort RestingMinimumVoltage { get; set; }
        /// <summary>
        /// Battery ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public byte Id { get; set; }
        /// <summary>
        /// Function of the battery
        /// OriginName: battery_function, Units: , IsExtended: false
        /// </summary>
        public MavBatteryFunction BatteryFunction { get; set; }
        /// <summary>
        /// Type (chemistry) of the battery
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public MavBatteryType Type { get; set; }
        /// <summary>
        /// Serial number in ASCII characters, 0 terminated. All 0: field not provided.
        /// OriginName: serial_number, Units: , IsExtended: false
        /// </summary>
        public const int SerialNumberMaxItemsCount = 16;
        public char[] SerialNumber { get; } = new char[16];
        /// <summary>
        /// Static device name in ASCII characters, 0 terminated. All 0: field not provided. Encode as manufacturer name then product name separated using an underscore.
        /// OriginName: device_name, Units: , IsExtended: false
        /// </summary>
        public const int DeviceNameMaxItemsCount = 50;
        public char[] DeviceName { get; set; } = new char[50];
        [Obsolete("This method is deprecated. Use GetDeviceNameMaxItemsCount instead.")]
        public byte GetDeviceNameMaxItemsCount() => 50;
        /// <summary>
        /// Maximum per-cell voltage when charged. 0: field not provided.
        /// OriginName: charging_maximum_voltage, Units: mV, IsExtended: true
        /// </summary>
        public ushort ChargingMaximumVoltage { get; set; }
        /// <summary>
        /// Number of battery cells in series. 0: field not provided.
        /// OriginName: cells_in_series, Units: , IsExtended: true
        /// </summary>
        public byte CellsInSeries { get; set; }
        /// <summary>
        /// Maximum pack discharge current. 0: field not provided.
        /// OriginName: discharge_maximum_current, Units: mA, IsExtended: true
        /// </summary>
        public uint DischargeMaximumCurrent { get; set; }
        /// <summary>
        /// Maximum pack discharge burst current. 0: field not provided.
        /// OriginName: discharge_maximum_burst_current, Units: mA, IsExtended: true
        /// </summary>
        public uint DischargeMaximumBurstCurrent { get; set; }
        /// <summary>
        /// Manufacture date (DD/MM/YYYY) in ASCII characters, 0 terminated. All 0: field not provided.
        /// OriginName: manufacture_date, Units: , IsExtended: true
        /// </summary>
        public const int ManufactureDateMaxItemsCount = 11;
        public char[] ManufactureDate { get; } = new char[11];
    }
    /// <summary>
    /// Telemetry of power generation system. Alternator or mechanical generator.
    ///  GENERATOR_STATUS
    /// </summary>
    public class GeneratorStatusPacket: PacketV2<GeneratorStatusPayload>
    {
	    public const int PacketMessageId = 373;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 117;
        public override bool WrapToV2Extension => false;

        public override GeneratorStatusPayload Payload { get; } = new GeneratorStatusPayload();

        public override string Name => "GENERATOR_STATUS";
    }

    /// <summary>
    ///  GENERATOR_STATUS
    /// </summary>
    public class GeneratorStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 42; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 42; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 8; // Status
            sum+=4; //BatteryCurrent
            sum+=4; //LoadCurrent
            sum+=4; //PowerGenerated
            sum+=4; //BusVoltage
            sum+=4; //BatCurrentSetpoint
            sum+=4; //Runtime
            sum+=4; //TimeUntilMaintenance
            sum+=2; //GeneratorSpeed
            sum+=2; //RectifierTemperature
            sum+=2; //GeneratorTemperature
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Status = (MavGeneratorStatusFlag)BinSerialize.ReadULong(ref buffer);
            BatteryCurrent = BinSerialize.ReadFloat(ref buffer);
            LoadCurrent = BinSerialize.ReadFloat(ref buffer);
            PowerGenerated = BinSerialize.ReadFloat(ref buffer);
            BusVoltage = BinSerialize.ReadFloat(ref buffer);
            BatCurrentSetpoint = BinSerialize.ReadFloat(ref buffer);
            Runtime = BinSerialize.ReadUInt(ref buffer);
            TimeUntilMaintenance = BinSerialize.ReadInt(ref buffer);
            GeneratorSpeed = BinSerialize.ReadUShort(ref buffer);
            RectifierTemperature = BinSerialize.ReadShort(ref buffer);
            GeneratorTemperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,(ulong)Status);
            BinSerialize.WriteFloat(ref buffer,BatteryCurrent);
            BinSerialize.WriteFloat(ref buffer,LoadCurrent);
            BinSerialize.WriteFloat(ref buffer,PowerGenerated);
            BinSerialize.WriteFloat(ref buffer,BusVoltage);
            BinSerialize.WriteFloat(ref buffer,BatCurrentSetpoint);
            BinSerialize.WriteUInt(ref buffer,Runtime);
            BinSerialize.WriteInt(ref buffer,TimeUntilMaintenance);
            BinSerialize.WriteUShort(ref buffer,GeneratorSpeed);
            BinSerialize.WriteShort(ref buffer,RectifierTemperature);
            BinSerialize.WriteShort(ref buffer,GeneratorTemperature);
            /* PayloadByteSize = 42 */;
        }
        
        



        /// <summary>
        /// Status flags.
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public MavGeneratorStatusFlag Status { get; set; }
        /// <summary>
        /// Current into/out of battery. Positive for out. Negative for in. NaN: field not provided.
        /// OriginName: battery_current, Units: A, IsExtended: false
        /// </summary>
        public float BatteryCurrent { get; set; }
        /// <summary>
        /// Current going to the UAV. If battery current not available this is the DC current from the generator. Positive for out. Negative for in. NaN: field not provided
        /// OriginName: load_current, Units: A, IsExtended: false
        /// </summary>
        public float LoadCurrent { get; set; }
        /// <summary>
        /// The power being generated. NaN: field not provided
        /// OriginName: power_generated, Units: W, IsExtended: false
        /// </summary>
        public float PowerGenerated { get; set; }
        /// <summary>
        /// Voltage of the bus seen at the generator, or battery bus if battery bus is controlled by generator and at a different voltage to main bus.
        /// OriginName: bus_voltage, Units: V, IsExtended: false
        /// </summary>
        public float BusVoltage { get; set; }
        /// <summary>
        /// The target battery current. Positive for out. Negative for in. NaN: field not provided
        /// OriginName: bat_current_setpoint, Units: A, IsExtended: false
        /// </summary>
        public float BatCurrentSetpoint { get; set; }
        /// <summary>
        /// Seconds this generator has run since it was rebooted. UINT32_MAX: field not provided.
        /// OriginName: runtime, Units: s, IsExtended: false
        /// </summary>
        public uint Runtime { get; set; }
        /// <summary>
        /// Seconds until this generator requires maintenance.  A negative value indicates maintenance is past-due. INT32_MAX: field not provided.
        /// OriginName: time_until_maintenance, Units: s, IsExtended: false
        /// </summary>
        public int TimeUntilMaintenance { get; set; }
        /// <summary>
        /// Speed of electrical generator or alternator. UINT16_MAX: field not provided.
        /// OriginName: generator_speed, Units: rpm, IsExtended: false
        /// </summary>
        public ushort GeneratorSpeed { get; set; }
        /// <summary>
        /// The temperature of the rectifier or power converter. INT16_MAX: field not provided.
        /// OriginName: rectifier_temperature, Units: degC, IsExtended: false
        /// </summary>
        public short RectifierTemperature { get; set; }
        /// <summary>
        /// The temperature of the mechanical motor, fuel cell core or generator. INT16_MAX: field not provided.
        /// OriginName: generator_temperature, Units: degC, IsExtended: false
        /// </summary>
        public short GeneratorTemperature { get; set; }
    }
    /// <summary>
    /// The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN, AUX ports). This message supersedes SERVO_OUTPUT_RAW.
    ///  ACTUATOR_OUTPUT_STATUS
    /// </summary>
    public class ActuatorOutputStatusPacket: PacketV2<ActuatorOutputStatusPayload>
    {
	    public const int PacketMessageId = 375;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 251;
        public override bool WrapToV2Extension => false;

        public override ActuatorOutputStatusPayload Payload { get; } = new ActuatorOutputStatusPayload();

        public override string Name => "ACTUATOR_OUTPUT_STATUS";
    }

    /// <summary>
    ///  ACTUATOR_OUTPUT_STATUS
    /// </summary>
    public class ActuatorOutputStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 140; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 140; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Active
            sum+=Actuator.Length * 4; //Actuator
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Active = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/32 - Math.Max(0,((/*PayloadByteSize*/140 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            Actuator = new float[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Actuator[i] = BinSerialize.ReadFloat(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Active);
            for(var i=0;i<Actuator.Length;i++)
            {
                BinSerialize.WriteFloat(ref buffer,Actuator[i]);
            }
            /* PayloadByteSize = 140 */;
        }
        
        



        /// <summary>
        /// Timestamp (since system boot).
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Active outputs
        /// OriginName: active, Units: , IsExtended: false
        /// </summary>
        public uint Active { get; set; }
        /// <summary>
        /// Servo / motor output array values. Zero values indicate unused channels.
        /// OriginName: actuator, Units: , IsExtended: false
        /// </summary>
        public const int ActuatorMaxItemsCount = 32;
        public float[] Actuator { get; set; } = new float[32];
        [Obsolete("This method is deprecated. Use GetActuatorMaxItemsCount instead.")]
        public byte GetActuatorMaxItemsCount() => 32;
    }
    /// <summary>
    /// Time/duration estimates for various events and actions given the current vehicle state and position.
    ///  TIME_ESTIMATE_TO_TARGET
    /// </summary>
    public class TimeEstimateToTargetPacket: PacketV2<TimeEstimateToTargetPayload>
    {
	    public const int PacketMessageId = 380;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 232;
        public override bool WrapToV2Extension => false;

        public override TimeEstimateToTargetPayload Payload { get; } = new TimeEstimateToTargetPayload();

        public override string Name => "TIME_ESTIMATE_TO_TARGET";
    }

    /// <summary>
    ///  TIME_ESTIMATE_TO_TARGET
    /// </summary>
    public class TimeEstimateToTargetPayload : IPayload
    {
        public byte GetMaxByteSize() => 20; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 20; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //SafeReturn
            sum+=4; //Land
            sum+=4; //MissionNextItem
            sum+=4; //MissionEnd
            sum+=4; //CommandedAction
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            SafeReturn = BinSerialize.ReadInt(ref buffer);
            Land = BinSerialize.ReadInt(ref buffer);
            MissionNextItem = BinSerialize.ReadInt(ref buffer);
            MissionEnd = BinSerialize.ReadInt(ref buffer);
            CommandedAction = BinSerialize.ReadInt(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,SafeReturn);
            BinSerialize.WriteInt(ref buffer,Land);
            BinSerialize.WriteInt(ref buffer,MissionNextItem);
            BinSerialize.WriteInt(ref buffer,MissionEnd);
            BinSerialize.WriteInt(ref buffer,CommandedAction);
            /* PayloadByteSize = 20 */;
        }
        
        



        /// <summary>
        /// Estimated time to complete the vehicle's configured "safe return" action from its current position (e.g. RTL, Smart RTL, etc.). -1 indicates that the vehicle is landed, or that no time estimate available.
        /// OriginName: safe_return, Units: s, IsExtended: false
        /// </summary>
        public int SafeReturn { get; set; }
        /// <summary>
        /// Estimated time for vehicle to complete the LAND action from its current position. -1 indicates that the vehicle is landed, or that no time estimate available.
        /// OriginName: land, Units: s, IsExtended: false
        /// </summary>
        public int Land { get; set; }
        /// <summary>
        /// Estimated time for reaching/completing the currently active mission item. -1 means no time estimate available.
        /// OriginName: mission_next_item, Units: s, IsExtended: false
        /// </summary>
        public int MissionNextItem { get; set; }
        /// <summary>
        /// Estimated time for completing the current mission. -1 means no mission active and/or no estimate available.
        /// OriginName: mission_end, Units: s, IsExtended: false
        /// </summary>
        public int MissionEnd { get; set; }
        /// <summary>
        /// Estimated time for completing the current commanded action (i.e. Go To, Takeoff, Land, etc.). -1 means no action active and/or no estimate available.
        /// OriginName: commanded_action, Units: s, IsExtended: false
        /// </summary>
        public int CommandedAction { get; set; }
    }
    /// <summary>
    /// Message for transporting "arbitrary" variable-length data from one component to another (broadcast is not forbidden, but discouraged). The encoding of the data is usually extension specific, i.e. determined by the source, and is usually not documented as part of the MAVLink specification.
    ///  TUNNEL
    /// </summary>
    public class TunnelPacket: PacketV2<TunnelPayload>
    {
	    public const int PacketMessageId = 385;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 147;
        public override bool WrapToV2Extension => false;

        public override TunnelPayload Payload { get; } = new TunnelPayload();

        public override string Name => "TUNNEL";
    }

    /// <summary>
    ///  TUNNEL
    /// </summary>
    public class TunnelPayload : IPayload
    {
        public byte GetMaxByteSize() => 133; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 133; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 2; // PayloadType
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //PayloadLength
            sum+=Payload.Length; //Payload
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            PayloadType = (MavTunnelPayloadType)BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            PayloadLength = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/128 - Math.Max(0,((/*PayloadByteSize*/133 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Payload = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Payload[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,(ushort)PayloadType);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)PayloadLength);
            for(var i=0;i<Payload.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Payload[i]);
            }
            /* PayloadByteSize = 133 */;
        }
        
        



        /// <summary>
        /// A code that identifies the content of the payload (0 for unknown, which is the default). If this code is less than 32768, it is a 'registered' payload type and the corresponding code should be added to the MAV_TUNNEL_PAYLOAD_TYPE enum. Software creators can register blocks of types as needed. Codes greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// OriginName: payload_type, Units: , IsExtended: false
        /// </summary>
        public MavTunnelPayloadType PayloadType { get; set; }
        /// <summary>
        /// System ID (can be 0 for broadcast, but this is discouraged)
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (can be 0 for broadcast, but this is discouraged)
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Length of the data transported in payload
        /// OriginName: payload_length, Units: , IsExtended: false
        /// </summary>
        public byte PayloadLength { get; set; }
        /// <summary>
        /// Variable length payload. The payload length is defined by payload_length. The entire content of this block is opaque unless you understand the encoding specified by payload_type.
        /// OriginName: payload, Units: , IsExtended: false
        /// </summary>
        public const int PayloadMaxItemsCount = 128;
        public byte[] Payload { get; set; } = new byte[128];
        [Obsolete("This method is deprecated. Use GetPayloadMaxItemsCount instead.")]
        public byte GetPayloadMaxItemsCount() => 128;
    }
    /// <summary>
    /// A forwarded CAN frame as requested by MAV_CMD_CAN_FORWARD.
    ///  CAN_FRAME
    /// </summary>
    public class CanFramePacket: PacketV2<CanFramePayload>
    {
	    public const int PacketMessageId = 386;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 132;
        public override bool WrapToV2Extension => false;

        public override CanFramePayload Payload { get; } = new CanFramePayload();

        public override string Name => "CAN_FRAME";
    }

    /// <summary>
    ///  CAN_FRAME
    /// </summary>
    public class CanFramePayload : IPayload
    {
        public byte GetMaxByteSize() => 16; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 16; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Id
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //Bus
            sum+=1; //Len
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Id = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Bus = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/8 - Math.Max(0,((/*PayloadByteSize*/16 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Bus);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 16 */;
        }
        
        



        /// <summary>
        /// Frame ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public uint Id { get; set; }
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Bus number
        /// OriginName: bus, Units: , IsExtended: false
        /// </summary>
        public byte Bus { get; set; }
        /// <summary>
        /// Frame length
        /// OriginName: len, Units: , IsExtended: false
        /// </summary>
        public byte Len { get; set; }
        /// <summary>
        /// Frame data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 8;
        public byte[] Data { get; set; } = new byte[8];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 8;
    }
    /// <summary>
    /// Hardware status sent by an onboard computer.
    ///  ONBOARD_COMPUTER_STATUS
    /// </summary>
    public class OnboardComputerStatusPacket: PacketV2<OnboardComputerStatusPayload>
    {
	    public const int PacketMessageId = 390;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 156;
        public override bool WrapToV2Extension => false;

        public override OnboardComputerStatusPayload Payload { get; } = new OnboardComputerStatusPayload();

        public override string Name => "ONBOARD_COMPUTER_STATUS";
    }

    /// <summary>
    ///  ONBOARD_COMPUTER_STATUS
    /// </summary>
    public class OnboardComputerStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 238; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 238; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //Uptime
            sum+=4; //RamUsage
            sum+=4; //RamTotal
            sum+=StorageType.Length * 4; //StorageType
            sum+=StorageUsage.Length * 4; //StorageUsage
            sum+=StorageTotal.Length * 4; //StorageTotal
            sum+=LinkType.Length * 4; //LinkType
            sum+=LinkTxRate.Length * 4; //LinkTxRate
            sum+=LinkRxRate.Length * 4; //LinkRxRate
            sum+=LinkTxMax.Length * 4; //LinkTxMax
            sum+=LinkRxMax.Length * 4; //LinkRxMax
            sum+=FanSpeed.Length * 2; //FanSpeed
            sum+=1; //Type
            sum+=CpuCores.Length; //CpuCores
            sum+=CpuCombined.Length; //CpuCombined
            sum+=GpuCores.Length; //GpuCores
            sum+=GpuCombined.Length; //GpuCombined
            sum+=1; //TemperatureBoard
            sum+=TemperatureCore.Length; //TemperatureCore
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            Uptime = BinSerialize.ReadUInt(ref buffer);
            RamUsage = BinSerialize.ReadUInt(ref buffer);
            RamTotal = BinSerialize.ReadUInt(ref buffer);
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                StorageType[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                StorageUsage[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                StorageTotal[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = /*ArrayLength*/6 - Math.Max(0,((/*PayloadByteSize*/238 - payloadSize - /*ExtendedFieldsLength*/0)/4 /*FieldTypeByteSize*/));
            LinkType = new uint[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                LinkType[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkTxRate[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkRxRate[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkTxMax[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 6;
            for(var i=0;i<arraySize;i++)
            {
                LinkRxMax[i] = BinSerialize.ReadUInt(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                FanSpeed[i] = BinSerialize.ReadShort(ref buffer);
            }
            Type = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                CpuCores[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 10;
            for(var i=0;i<arraySize;i++)
            {
                CpuCombined[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 4;
            for(var i=0;i<arraySize;i++)
            {
                GpuCores[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            arraySize = 10;
            for(var i=0;i<arraySize;i++)
            {
                GpuCombined[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            TemperatureBoard = (sbyte)BinSerialize.ReadByte(ref buffer);
            arraySize = 8;
            for(var i=0;i<arraySize;i++)
            {
                TemperatureCore[i] = (sbyte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteUInt(ref buffer,Uptime);
            BinSerialize.WriteUInt(ref buffer,RamUsage);
            BinSerialize.WriteUInt(ref buffer,RamTotal);
            for(var i=0;i<StorageType.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,StorageType[i]);
            }
            for(var i=0;i<StorageUsage.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,StorageUsage[i]);
            }
            for(var i=0;i<StorageTotal.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,StorageTotal[i]);
            }
            for(var i=0;i<LinkType.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkType[i]);
            }
            for(var i=0;i<LinkTxRate.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkTxRate[i]);
            }
            for(var i=0;i<LinkRxRate.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkRxRate[i]);
            }
            for(var i=0;i<LinkTxMax.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkTxMax[i]);
            }
            for(var i=0;i<LinkRxMax.Length;i++)
            {
                BinSerialize.WriteUInt(ref buffer,LinkRxMax[i]);
            }
            for(var i=0;i<FanSpeed.Length;i++)
            {
                BinSerialize.WriteShort(ref buffer,FanSpeed[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Type);
            for(var i=0;i<CpuCores.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)CpuCores[i]);
            }
            for(var i=0;i<CpuCombined.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)CpuCombined[i]);
            }
            for(var i=0;i<GpuCores.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)GpuCores[i]);
            }
            for(var i=0;i<GpuCombined.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)GpuCombined[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TemperatureBoard);
            for(var i=0;i<TemperatureCore.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)TemperatureCore[i]);
            }
            /* PayloadByteSize = 238 */;
        }
        
        



        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Time since system boot.
        /// OriginName: uptime, Units: ms, IsExtended: false
        /// </summary>
        public uint Uptime { get; set; }
        /// <summary>
        /// Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: ram_usage, Units: MiB, IsExtended: false
        /// </summary>
        public uint RamUsage { get; set; }
        /// <summary>
        /// Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: ram_total, Units: MiB, IsExtended: false
        /// </summary>
        public uint RamTotal { get; set; }
        /// <summary>
        /// Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.
        /// OriginName: storage_type, Units: , IsExtended: false
        /// </summary>
        public const int StorageTypeMaxItemsCount = 4;
        public uint[] StorageType { get; } = new uint[4];
        /// <summary>
        /// Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: storage_usage, Units: MiB, IsExtended: false
        /// </summary>
        public const int StorageUsageMaxItemsCount = 4;
        public uint[] StorageUsage { get; } = new uint[4];
        /// <summary>
        /// Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: storage_total, Units: MiB, IsExtended: false
        /// </summary>
        public const int StorageTotalMaxItemsCount = 4;
        public uint[] StorageTotal { get; } = new uint[4];
        /// <summary>
        /// Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary
        /// OriginName: link_type, Units: , IsExtended: false
        /// </summary>
        public const int LinkTypeMaxItemsCount = 6;
        public uint[] LinkType { get; set; } = new uint[6];
        [Obsolete("This method is deprecated. Use GetLinkTypeMaxItemsCount instead.")]
        public byte GetLinkTypeMaxItemsCount() => 6;
        /// <summary>
        /// Network traffic from the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_tx_rate, Units: KiB/s, IsExtended: false
        /// </summary>
        public const int LinkTxRateMaxItemsCount = 6;
        public uint[] LinkTxRate { get; } = new uint[6];
        /// <summary>
        /// Network traffic to the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_rx_rate, Units: KiB/s, IsExtended: false
        /// </summary>
        public const int LinkRxRateMaxItemsCount = 6;
        public uint[] LinkRxRate { get; } = new uint[6];
        /// <summary>
        /// Network capacity from the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_tx_max, Units: KiB/s, IsExtended: false
        /// </summary>
        public const int LinkTxMaxMaxItemsCount = 6;
        public uint[] LinkTxMax { get; } = new uint[6];
        /// <summary>
        /// Network capacity to the component system. A value of UINT32_MAX implies the field is unused.
        /// OriginName: link_rx_max, Units: KiB/s, IsExtended: false
        /// </summary>
        public const int LinkRxMaxMaxItemsCount = 6;
        public uint[] LinkRxMax { get; } = new uint[6];
        /// <summary>
        /// Fan speeds. A value of INT16_MAX implies the field is unused.
        /// OriginName: fan_speed, Units: rpm, IsExtended: false
        /// </summary>
        public const int FanSpeedMaxItemsCount = 4;
        public short[] FanSpeed { get; } = new short[4];
        /// <summary>
        /// Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.
        /// OriginName: type, Units: , IsExtended: false
        /// </summary>
        public byte Type { get; set; }
        /// <summary>
        /// CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
        /// OriginName: cpu_cores, Units: , IsExtended: false
        /// </summary>
        public const int CpuCoresMaxItemsCount = 8;
        public byte[] CpuCores { get; } = new byte[8];
        /// <summary>
        /// Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
        /// OriginName: cpu_combined, Units: , IsExtended: false
        /// </summary>
        public const int CpuCombinedMaxItemsCount = 10;
        public byte[] CpuCombined { get; } = new byte[10];
        /// <summary>
        /// GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
        /// OriginName: gpu_cores, Units: , IsExtended: false
        /// </summary>
        public const int GpuCoresMaxItemsCount = 4;
        public byte[] GpuCores { get; } = new byte[4];
        /// <summary>
        /// Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
        /// OriginName: gpu_combined, Units: , IsExtended: false
        /// </summary>
        public const int GpuCombinedMaxItemsCount = 10;
        public byte[] GpuCombined { get; } = new byte[10];
        /// <summary>
        /// Temperature of the board. A value of INT8_MAX implies the field is unused.
        /// OriginName: temperature_board, Units: degC, IsExtended: false
        /// </summary>
        public sbyte TemperatureBoard { get; set; }
        /// <summary>
        /// Temperature of the CPU core. A value of INT8_MAX implies the field is unused.
        /// OriginName: temperature_core, Units: degC, IsExtended: false
        /// </summary>
        public const int TemperatureCoreMaxItemsCount = 8;
        public sbyte[] TemperatureCore { get; } = new sbyte[8];
    }
    /// <summary>
    /// 
    ///         Component information message, which may be requested using MAV_CMD_REQUEST_MESSAGE.
    ///       
    ///  COMPONENT_INFORMATION
    /// </summary>
    public class ComponentInformationPacket: PacketV2<ComponentInformationPayload>
    {
	    public const int PacketMessageId = 395;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 0;
        public override bool WrapToV2Extension => false;

        public override ComponentInformationPayload Payload { get; } = new ComponentInformationPayload();

        public override string Name => "COMPONENT_INFORMATION";
    }

    /// <summary>
    ///  COMPONENT_INFORMATION
    /// </summary>
    public class ComponentInformationPayload : IPayload
    {
        public byte GetMaxByteSize() => 212; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 212; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //GeneralMetadataFileCrc
            sum+=4; //PeripheralsMetadataFileCrc
            sum+=GeneralMetadataUri.Length; //GeneralMetadataUri
            sum+=PeripheralsMetadataUri.Length; //PeripheralsMetadataUri
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            GeneralMetadataFileCrc = BinSerialize.ReadUInt(ref buffer);
            PeripheralsMetadataFileCrc = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/100 - Math.Max(0,((/*PayloadByteSize*/212 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            GeneralMetadataUri = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = GeneralMetadataUri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, GeneralMetadataUri.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           
            arraySize = 100;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = PeripheralsMetadataUri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, PeripheralsMetadataUri.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,GeneralMetadataFileCrc);
            BinSerialize.WriteUInt(ref buffer,PeripheralsMetadataFileCrc);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = GeneralMetadataUri)
                {
                    Encoding.ASCII.GetBytes(charPointer, GeneralMetadataUri.Length, bytePointer, GeneralMetadataUri.Length);
                }
            }
            buffer = buffer.Slice(GeneralMetadataUri.Length);
            
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = PeripheralsMetadataUri)
                {
                    Encoding.ASCII.GetBytes(charPointer, PeripheralsMetadataUri.Length, bytePointer, PeripheralsMetadataUri.Length);
                }
            }
            buffer = buffer.Slice(PeripheralsMetadataUri.Length);
            
            /* PayloadByteSize = 212 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// CRC32 of the general metadata file (general_metadata_uri).
        /// OriginName: general_metadata_file_crc, Units: , IsExtended: false
        /// </summary>
        public uint GeneralMetadataFileCrc { get; set; }
        /// <summary>
        /// CRC32 of peripherals metadata file (peripherals_metadata_uri).
        /// OriginName: peripherals_metadata_file_crc, Units: , IsExtended: false
        /// </summary>
        public uint PeripheralsMetadataFileCrc { get; set; }
        /// <summary>
        /// MAVLink FTP URI for the general metadata file (COMP_METADATA_TYPE_GENERAL), which may be compressed with xz. The file contains general component metadata, and may contain URI links for additional metadata (see COMP_METADATA_TYPE). The information is static from boot, and may be generated at compile time. The string needs to be zero terminated.
        /// OriginName: general_metadata_uri, Units: , IsExtended: false
        /// </summary>
        public const int GeneralMetadataUriMaxItemsCount = 100;
        public char[] GeneralMetadataUri { get; set; } = new char[100];
        [Obsolete("This method is deprecated. Use GetGeneralMetadataUriMaxItemsCount instead.")]
        public byte GetGeneralMetadataUriMaxItemsCount() => 100;
        /// <summary>
        /// (Optional) MAVLink FTP URI for the peripherals metadata file (COMP_METADATA_TYPE_PERIPHERALS), which may be compressed with xz. This contains data about "attached components" such as UAVCAN nodes. The peripherals are in a separate file because the information must be generated dynamically at runtime. The string needs to be zero terminated.
        /// OriginName: peripherals_metadata_uri, Units: , IsExtended: false
        /// </summary>
        public const int PeripheralsMetadataUriMaxItemsCount = 100;
        public char[] PeripheralsMetadataUri { get; } = new char[100];
    }
    /// <summary>
    /// 
    ///         Component metadata message, which may be requested using MAV_CMD_REQUEST_MESSAGE.
    /// 
    ///         This contains the MAVLink FTP URI and CRC for the component's general metadata file.
    ///         The file must be hosted on the component, and may be xz compressed.
    ///         The file CRC can be used for file caching.
    /// 
    ///         The general metadata file can be read to get the locations of other metadata files (COMP_METADATA_TYPE) and translations, which may be hosted either on the vehicle or the internet.
    ///         For more information see: https://mavlink.io/en/services/component_information.html.
    /// 
    ///         Note: Camera components should use CAMERA_INFORMATION instead, and autopilots may use both this message and AUTOPILOT_VERSION.
    ///       
    ///  COMPONENT_METADATA
    /// </summary>
    public class ComponentMetadataPacket: PacketV2<ComponentMetadataPayload>
    {
	    public const int PacketMessageId = 397;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 182;
        public override bool WrapToV2Extension => false;

        public override ComponentMetadataPayload Payload { get; } = new ComponentMetadataPayload();

        public override string Name => "COMPONENT_METADATA";
    }

    /// <summary>
    ///  COMPONENT_METADATA
    /// </summary>
    public class ComponentMetadataPayload : IPayload
    {
        public byte GetMaxByteSize() => 108; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 108; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //TimeBootMs
            sum+=4; //FileCrc
            sum+=Uri.Length; //Uri
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeBootMs = BinSerialize.ReadUInt(ref buffer);
            FileCrc = BinSerialize.ReadUInt(ref buffer);
            arraySize = /*ArrayLength*/100 - Math.Max(0,((/*PayloadByteSize*/108 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Uri = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Uri.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,TimeBootMs);
            BinSerialize.WriteUInt(ref buffer,FileCrc);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Uri)
                {
                    Encoding.ASCII.GetBytes(charPointer, Uri.Length, bytePointer, Uri.Length);
                }
            }
            buffer = buffer.Slice(Uri.Length);
            
            /* PayloadByteSize = 108 */;
        }
        
        



        /// <summary>
        /// Timestamp (time since system boot).
        /// OriginName: time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint TimeBootMs { get; set; }
        /// <summary>
        /// CRC32 of the general metadata file.
        /// OriginName: file_crc, Units: , IsExtended: false
        /// </summary>
        public uint FileCrc { get; set; }
        /// <summary>
        /// MAVLink FTP URI for the general metadata file (COMP_METADATA_TYPE_GENERAL), which may be compressed with xz. The file contains general component metadata, and may contain URI links for additional metadata (see COMP_METADATA_TYPE). The information is static from boot, and may be generated at compile time. The string needs to be zero terminated.
        /// OriginName: uri, Units: , IsExtended: false
        /// </summary>
        public const int UriMaxItemsCount = 100;
        public char[] Uri { get; set; } = new char[100];
        [Obsolete("This method is deprecated. Use GetUriMaxItemsCount instead.")]
        public byte GetUriMaxItemsCount() => 100;
    }
    /// <summary>
    /// Play vehicle tone/tune (buzzer). Supersedes message PLAY_TUNE.
    ///  PLAY_TUNE_V2
    /// </summary>
    public class PlayTuneV2Packet: PacketV2<PlayTuneV2Payload>
    {
	    public const int PacketMessageId = 400;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 110;
        public override bool WrapToV2Extension => false;

        public override PlayTuneV2Payload Payload { get; } = new PlayTuneV2Payload();

        public override string Name => "PLAY_TUNE_V2";
    }

    /// <summary>
    ///  PLAY_TUNE_V2
    /// </summary>
    public class PlayTuneV2Payload : IPayload
    {
        public byte GetMaxByteSize() => 254; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 254; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 4; // Format
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=Tune.Length; //Tune
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Format = (TuneFormat)BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/248 - Math.Max(0,((/*PayloadByteSize*/254 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Tune = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Tune.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Format);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Tune)
                {
                    Encoding.ASCII.GetBytes(charPointer, Tune.Length, bytePointer, Tune.Length);
                }
            }
            buffer = buffer.Slice(Tune.Length);
            
            /* PayloadByteSize = 254 */;
        }
        
        



        /// <summary>
        /// Tune format
        /// OriginName: format, Units: , IsExtended: false
        /// </summary>
        public TuneFormat Format { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Tune definition as a NULL-terminated string.
        /// OriginName: tune, Units: , IsExtended: false
        /// </summary>
        public const int TuneMaxItemsCount = 248;
        public char[] Tune { get; set; } = new char[248];
        [Obsolete("This method is deprecated. Use GetTuneMaxItemsCount instead.")]
        public byte GetTuneMaxItemsCount() => 248;
    }
    /// <summary>
    /// Tune formats supported by vehicle. This should be emitted as response to MAV_CMD_REQUEST_MESSAGE.
    ///  SUPPORTED_TUNES
    /// </summary>
    public class SupportedTunesPacket: PacketV2<SupportedTunesPayload>
    {
	    public const int PacketMessageId = 401;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 183;
        public override bool WrapToV2Extension => false;

        public override SupportedTunesPayload Payload { get; } = new SupportedTunesPayload();

        public override string Name => "SUPPORTED_TUNES";
    }

    /// <summary>
    ///  SUPPORTED_TUNES
    /// </summary>
    public class SupportedTunesPayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 4; // Format
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Format = (TuneFormat)BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,(uint)Format);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// Bitfield of supported tune formats.
        /// OriginName: format, Units: , IsExtended: false
        /// </summary>
        public TuneFormat Format { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Event message. Each new event from a particular component gets a new sequence number. The same message might be sent multiple times if (re-)requested. Most events are broadcast, some can be specific to a target component (as receivers keep track of the sequence for missed events, all events need to be broadcast. Thus we use destination_component instead of target_component).
    ///  EVENT
    /// </summary>
    public class EventPacket: PacketV2<EventPayload>
    {
	    public const int PacketMessageId = 410;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 160;
        public override bool WrapToV2Extension => false;

        public override EventPayload Payload { get; } = new EventPayload();

        public override string Name => "EVENT";
    }

    /// <summary>
    ///  EVENT
    /// </summary>
    public class EventPayload : IPayload
    {
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Id
            sum+=4; //EventTimeBootMs
            sum+=2; //Sequence
            sum+=1; //DestinationComponent
            sum+=1; //DestinationSystem
            sum+=1; //LogLevels
            sum+=Arguments.Length; //Arguments
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Id = BinSerialize.ReadUInt(ref buffer);
            EventTimeBootMs = BinSerialize.ReadUInt(ref buffer);
            Sequence = BinSerialize.ReadUShort(ref buffer);
            DestinationComponent = (byte)BinSerialize.ReadByte(ref buffer);
            DestinationSystem = (byte)BinSerialize.ReadByte(ref buffer);
            LogLevels = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/40 - Math.Max(0,((/*PayloadByteSize*/53 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Arguments = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Arguments[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteUInt(ref buffer,EventTimeBootMs);
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)DestinationComponent);
            BinSerialize.WriteByte(ref buffer,(byte)DestinationSystem);
            BinSerialize.WriteByte(ref buffer,(byte)LogLevels);
            for(var i=0;i<Arguments.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Arguments[i]);
            }
            /* PayloadByteSize = 53 */;
        }
        
        



        /// <summary>
        /// Event ID (as defined in the component metadata)
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public uint Id { get; set; }
        /// <summary>
        /// Timestamp (time since system boot when the event happened).
        /// OriginName: event_time_boot_ms, Units: ms, IsExtended: false
        /// </summary>
        public uint EventTimeBootMs { get; set; }
        /// <summary>
        /// Sequence number.
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public ushort Sequence { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: destination_component, Units: , IsExtended: false
        /// </summary>
        public byte DestinationComponent { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: destination_system, Units: , IsExtended: false
        /// </summary>
        public byte DestinationSystem { get; set; }
        /// <summary>
        /// Log levels: 4 bits MSB: internal (for logging purposes), 4 bits LSB: external. Levels: Emergency = 0, Alert = 1, Critical = 2, Error = 3, Warning = 4, Notice = 5, Info = 6, Debug = 7, Protocol = 8, Disabled = 9
        /// OriginName: log_levels, Units: , IsExtended: false
        /// </summary>
        public byte LogLevels { get; set; }
        /// <summary>
        /// Arguments (depend on event ID).
        /// OriginName: arguments, Units: , IsExtended: false
        /// </summary>
        public const int ArgumentsMaxItemsCount = 40;
        public byte[] Arguments { get; set; } = new byte[40];
        [Obsolete("This method is deprecated. Use GetArgumentsMaxItemsCount instead.")]
        public byte GetArgumentsMaxItemsCount() => 40;
    }
    /// <summary>
    /// Regular broadcast for the current latest event sequence number for a component. This is used to check for dropped events.
    ///  CURRENT_EVENT_SEQUENCE
    /// </summary>
    public class CurrentEventSequencePacket: PacketV2<CurrentEventSequencePayload>
    {
	    public const int PacketMessageId = 411;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 106;
        public override bool WrapToV2Extension => false;

        public override CurrentEventSequencePayload Payload { get; } = new CurrentEventSequencePayload();

        public override string Name => "CURRENT_EVENT_SEQUENCE";
    }

    /// <summary>
    ///  CURRENT_EVENT_SEQUENCE
    /// </summary>
    public class CurrentEventSequencePayload : IPayload
    {
        public byte GetMaxByteSize() => 3; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 3; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Sequence
            sum+= 1; // Flags
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Sequence = BinSerialize.ReadUShort(ref buffer);
            Flags = (MavEventCurrentSequenceFlags)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteByte(ref buffer,(byte)Flags);
            /* PayloadByteSize = 3 */;
        }
        
        



        /// <summary>
        /// Sequence number.
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public ushort Sequence { get; set; }
        /// <summary>
        /// Flag bitset.
        /// OriginName: flags, Units: , IsExtended: false
        /// </summary>
        public MavEventCurrentSequenceFlags Flags { get; set; }
    }
    /// <summary>
    /// Request one or more events to be (re-)sent. If first_sequence==last_sequence, only a single event is requested. Note that first_sequence can be larger than last_sequence (because the sequence number can wrap). Each sequence will trigger an EVENT or EVENT_ERROR response.
    ///  REQUEST_EVENT
    /// </summary>
    public class RequestEventPacket: PacketV2<RequestEventPayload>
    {
	    public const int PacketMessageId = 412;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 33;
        public override bool WrapToV2Extension => false;

        public override RequestEventPayload Payload { get; } = new RequestEventPayload();

        public override string Name => "REQUEST_EVENT";
    }

    /// <summary>
    ///  REQUEST_EVENT
    /// </summary>
    public class RequestEventPayload : IPayload
    {
        public byte GetMaxByteSize() => 6; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 6; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //FirstSequence
            sum+=2; //LastSequence
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            FirstSequence = BinSerialize.ReadUShort(ref buffer);
            LastSequence = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,FirstSequence);
            BinSerialize.WriteUShort(ref buffer,LastSequence);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 6 */;
        }
        
        



        /// <summary>
        /// First sequence number of the requested event.
        /// OriginName: first_sequence, Units: , IsExtended: false
        /// </summary>
        public ushort FirstSequence { get; set; }
        /// <summary>
        /// Last sequence number of the requested event.
        /// OriginName: last_sequence, Units: , IsExtended: false
        /// </summary>
        public ushort LastSequence { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Response to a REQUEST_EVENT in case of an error (e.g. the event is not available anymore).
    ///  RESPONSE_EVENT_ERROR
    /// </summary>
    public class ResponseEventErrorPacket: PacketV2<ResponseEventErrorPayload>
    {
	    public const int PacketMessageId = 413;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 77;
        public override bool WrapToV2Extension => false;

        public override ResponseEventErrorPayload Payload { get; } = new ResponseEventErrorPayload();

        public override string Name => "RESPONSE_EVENT_ERROR";
    }

    /// <summary>
    ///  RESPONSE_EVENT_ERROR
    /// </summary>
    public class ResponseEventErrorPayload : IPayload
    {
        public byte GetMaxByteSize() => 7; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 7; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Sequence
            sum+=2; //SequenceOldestAvailable
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+= 1; // Reason
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Sequence = BinSerialize.ReadUShort(ref buffer);
            SequenceOldestAvailable = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Reason = (MavEventErrorReason)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUShort(ref buffer,Sequence);
            BinSerialize.WriteUShort(ref buffer,SequenceOldestAvailable);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Reason);
            /* PayloadByteSize = 7 */;
        }
        
        



        /// <summary>
        /// Sequence number.
        /// OriginName: sequence, Units: , IsExtended: false
        /// </summary>
        public ushort Sequence { get; set; }
        /// <summary>
        /// Oldest Sequence number that is still available after the sequence set in REQUEST_EVENT.
        /// OriginName: sequence_oldest_available, Units: , IsExtended: false
        /// </summary>
        public ushort SequenceOldestAvailable { get; set; }
        /// <summary>
        /// System ID
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Error reason.
        /// OriginName: reason, Units: , IsExtended: false
        /// </summary>
        public MavEventErrorReason Reason { get; set; }
    }
    /// <summary>
    /// A forwarded CANFD frame as requested by MAV_CMD_CAN_FORWARD. These are separated from CAN_FRAME as they need different handling (eg. TAO handling)
    ///  CANFD_FRAME
    /// </summary>
    public class CanfdFramePacket: PacketV2<CanfdFramePayload>
    {
	    public const int PacketMessageId = 387;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 4;
        public override bool WrapToV2Extension => false;

        public override CanfdFramePayload Payload { get; } = new CanfdFramePayload();

        public override string Name => "CANFD_FRAME";
    }

    /// <summary>
    ///  CANFD_FRAME
    /// </summary>
    public class CanfdFramePayload : IPayload
    {
        public byte GetMaxByteSize() => 72; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 72; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Id
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //Bus
            sum+=1; //Len
            sum+=Data.Length; //Data
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Id = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Bus = (byte)BinSerialize.ReadByte(ref buffer);
            Len = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/64 - Math.Max(0,((/*PayloadByteSize*/72 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Data = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Data[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Id);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Bus);
            BinSerialize.WriteByte(ref buffer,(byte)Len);
            for(var i=0;i<Data.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Data[i]);
            }
            /* PayloadByteSize = 72 */;
        }
        
        



        /// <summary>
        /// Frame ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public uint Id { get; set; }
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// bus number
        /// OriginName: bus, Units: , IsExtended: false
        /// </summary>
        public byte Bus { get; set; }
        /// <summary>
        /// Frame length
        /// OriginName: len, Units: , IsExtended: false
        /// </summary>
        public byte Len { get; set; }
        /// <summary>
        /// Frame data
        /// OriginName: data, Units: , IsExtended: false
        /// </summary>
        public const int DataMaxItemsCount = 64;
        public byte[] Data { get; set; } = new byte[64];
        [Obsolete("This method is deprecated. Use GetDataMaxItemsCount instead.")]
        public byte GetDataMaxItemsCount() => 64;
    }
    /// <summary>
    /// Modify the filter of what CAN messages to forward over the mavlink. This can be used to make CAN forwarding work well on low bandwidth links. The filtering is applied on bits 8 to 24 of the CAN id (2nd and 3rd bytes) which corresponds to the DroneCAN message ID for DroneCAN. Filters with more than 16 IDs can be constructed by sending multiple CAN_FILTER_MODIFY messages.
    ///  CAN_FILTER_MODIFY
    /// </summary>
    public class CanFilterModifyPacket: PacketV2<CanFilterModifyPayload>
    {
	    public const int PacketMessageId = 388;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 8;
        public override bool WrapToV2Extension => false;

        public override CanFilterModifyPayload Payload { get; } = new CanFilterModifyPayload();

        public override string Name => "CAN_FILTER_MODIFY";
    }

    /// <summary>
    ///  CAN_FILTER_MODIFY
    /// </summary>
    public class CanFilterModifyPayload : IPayload
    {
        public byte GetMaxByteSize() => 37; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 37; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=Ids.Length * 2; //Ids
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=1; //Bus
            sum+= 1; // Operation
            sum+=1; //NumIds
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/37 - payloadSize - /*ExtendedFieldsLength*/0)/2 /*FieldTypeByteSize*/));
            Ids = new ushort[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Ids[i] = BinSerialize.ReadUShort(ref buffer);
            }
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            Bus = (byte)BinSerialize.ReadByte(ref buffer);
            Operation = (CanFilterOp)BinSerialize.ReadByte(ref buffer);
            NumIds = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            for(var i=0;i<Ids.Length;i++)
            {
                BinSerialize.WriteUShort(ref buffer,Ids[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            BinSerialize.WriteByte(ref buffer,(byte)Bus);
            BinSerialize.WriteByte(ref buffer,(byte)Operation);
            BinSerialize.WriteByte(ref buffer,(byte)NumIds);
            /* PayloadByteSize = 37 */;
        }
        
        



        /// <summary>
        /// filter IDs, length num_ids
        /// OriginName: ids, Units: , IsExtended: false
        /// </summary>
        public const int IdsMaxItemsCount = 16;
        public ushort[] Ids { get; set; } = new ushort[16];
        [Obsolete("This method is deprecated. Use GetIdsMaxItemsCount instead.")]
        public byte GetIdsMaxItemsCount() => 16;
        /// <summary>
        /// System ID.
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID.
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// bus number
        /// OriginName: bus, Units: , IsExtended: false
        /// </summary>
        public byte Bus { get; set; }
        /// <summary>
        /// what operation to perform on the filter list. See CAN_FILTER_OP enum.
        /// OriginName: operation, Units: , IsExtended: false
        /// </summary>
        public CanFilterOp Operation { get; set; }
        /// <summary>
        /// number of IDs in filter list
        /// OriginName: num_ids, Units: , IsExtended: false
        /// </summary>
        public byte NumIds { get; set; }
    }
    /// <summary>
    /// Cumulative distance traveled for each reported wheel.
    ///  WHEEL_DISTANCE
    /// </summary>
    public class WheelDistancePacket: PacketV2<WheelDistancePayload>
    {
	    public const int PacketMessageId = 9000;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 113;
        public override bool WrapToV2Extension => false;

        public override WheelDistancePayload Payload { get; } = new WheelDistancePayload();

        public override string Name => "WHEEL_DISTANCE";
    }

    /// <summary>
    ///  WHEEL_DISTANCE
    /// </summary>
    public class WheelDistancePayload : IPayload
    {
        public byte GetMaxByteSize() => 137; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 137; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=Distance.Length * 8; //Distance
            sum+=1; //Count
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            arraySize = /*ArrayLength*/16 - Math.Max(0,((/*PayloadByteSize*/137 - payloadSize - /*ExtendedFieldsLength*/0)/8 /*FieldTypeByteSize*/));
            Distance = new double[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Distance[i] = BinSerialize.ReadDouble(ref buffer);
            }
            Count = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            for(var i=0;i<Distance.Length;i++)
            {
                BinSerialize.WriteDouble(ref buffer,Distance[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Count);
            /* PayloadByteSize = 137 */;
        }
        
        



        /// <summary>
        /// Timestamp (synced to UNIX time or since system boot).
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints.
        /// OriginName: distance, Units: m, IsExtended: false
        /// </summary>
        public const int DistanceMaxItemsCount = 16;
        public double[] Distance { get; set; } = new double[16];
        [Obsolete("This method is deprecated. Use GetDistanceMaxItemsCount instead.")]
        public byte GetDistanceMaxItemsCount() => 16;
        /// <summary>
        /// Number of wheels reported.
        /// OriginName: count, Units: , IsExtended: false
        /// </summary>
        public byte Count { get; set; }
    }
    /// <summary>
    /// Winch status.
    ///  WINCH_STATUS
    /// </summary>
    public class WinchStatusPacket: PacketV2<WinchStatusPayload>
    {
	    public const int PacketMessageId = 9005;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 117;
        public override bool WrapToV2Extension => false;

        public override WinchStatusPayload Payload { get; } = new WinchStatusPayload();

        public override string Name => "WINCH_STATUS";
    }

    /// <summary>
    ///  WINCH_STATUS
    /// </summary>
    public class WinchStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 34; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 34; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=8; //TimeUsec
            sum+=4; //LineLength
            sum+=4; //Speed
            sum+=4; //Tension
            sum+=4; //Voltage
            sum+=4; //Current
            sum+= 4; // Status
            sum+=2; //Temperature
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            TimeUsec = BinSerialize.ReadULong(ref buffer);
            LineLength = BinSerialize.ReadFloat(ref buffer);
            Speed = BinSerialize.ReadFloat(ref buffer);
            Tension = BinSerialize.ReadFloat(ref buffer);
            Voltage = BinSerialize.ReadFloat(ref buffer);
            Current = BinSerialize.ReadFloat(ref buffer);
            Status = (MavWinchStatusFlag)BinSerialize.ReadUInt(ref buffer);
            Temperature = BinSerialize.ReadShort(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteULong(ref buffer,TimeUsec);
            BinSerialize.WriteFloat(ref buffer,LineLength);
            BinSerialize.WriteFloat(ref buffer,Speed);
            BinSerialize.WriteFloat(ref buffer,Tension);
            BinSerialize.WriteFloat(ref buffer,Voltage);
            BinSerialize.WriteFloat(ref buffer,Current);
            BinSerialize.WriteUInt(ref buffer,(uint)Status);
            BinSerialize.WriteShort(ref buffer,Temperature);
            /* PayloadByteSize = 34 */;
        }
        
        



        /// <summary>
        /// Timestamp (synced to UNIX time or since system boot).
        /// OriginName: time_usec, Units: us, IsExtended: false
        /// </summary>
        public ulong TimeUsec { get; set; }
        /// <summary>
        /// Length of line released. NaN if unknown
        /// OriginName: line_length, Units: m, IsExtended: false
        /// </summary>
        public float LineLength { get; set; }
        /// <summary>
        /// Speed line is being released or retracted. Positive values if being released, negative values if being retracted, NaN if unknown
        /// OriginName: speed, Units: m/s, IsExtended: false
        /// </summary>
        public float Speed { get; set; }
        /// <summary>
        /// Tension on the line. NaN if unknown
        /// OriginName: tension, Units: kg, IsExtended: false
        /// </summary>
        public float Tension { get; set; }
        /// <summary>
        /// Voltage of the battery supplying the winch. NaN if unknown
        /// OriginName: voltage, Units: V, IsExtended: false
        /// </summary>
        public float Voltage { get; set; }
        /// <summary>
        /// Current draw from the winch. NaN if unknown
        /// OriginName: current, Units: A, IsExtended: false
        /// </summary>
        public float Current { get; set; }
        /// <summary>
        /// Status flags
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public MavWinchStatusFlag Status { get; set; }
        /// <summary>
        /// Temperature of the motor. INT16_MAX if unknown
        /// OriginName: temperature, Units: degC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
    }
    /// <summary>
    /// Data for filling the OpenDroneID Basic ID message. This and the below messages are primarily meant for feeding data to/from an OpenDroneID implementation. E.g. https://github.com/opendroneid/opendroneid-core-c. These messages are compatible with the ASTM F3411 Remote ID standard and the ASD-STAN prEN 4709-002 Direct Remote ID standard. Additional information and usage of these messages is documented at https://mavlink.io/en/services/opendroneid.html.
    ///  OPEN_DRONE_ID_BASIC_ID
    /// </summary>
    public class OpenDroneIdBasicIdPacket: PacketV2<OpenDroneIdBasicIdPayload>
    {
	    public const int PacketMessageId = 12900;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 114;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdBasicIdPayload Payload { get; } = new OpenDroneIdBasicIdPayload();

        public override string Name => "OPEN_DRONE_ID_BASIC_ID";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_BASIC_ID
    /// </summary>
    public class OpenDroneIdBasicIdPayload : IPayload
    {
        public byte GetMaxByteSize() => 44; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 44; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=IdOrMac.Length; //IdOrMac
            sum+= 1; // IdType
            sum+= 1; // UaType
            sum+=UasId.Length; //UasId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/44 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            IdOrMac = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            IdType = (MavOdidIdType)BinSerialize.ReadByte(ref buffer);
            UaType = (MavOdidUaType)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                UasId[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)IdType);
            BinSerialize.WriteByte(ref buffer,(byte)UaType);
            for(var i=0;i<UasId.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)UasId[i]);
            }
            /* PayloadByteSize = 44 */;
        }
        
        



        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; set; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Indicates the format for the uas_id field of this message.
        /// OriginName: id_type, Units: , IsExtended: false
        /// </summary>
        public MavOdidIdType IdType { get; set; }
        /// <summary>
        /// Indicates the type of UA (Unmanned Aircraft).
        /// OriginName: ua_type, Units: , IsExtended: false
        /// </summary>
        public MavOdidUaType UaType { get; set; }
        /// <summary>
        /// UAS (Unmanned Aircraft System) ID following the format specified by id_type. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: uas_id, Units: , IsExtended: false
        /// </summary>
        public const int UasIdMaxItemsCount = 20;
        public byte[] UasId { get; } = new byte[20];
    }
    /// <summary>
    /// Data for filling the OpenDroneID Location message. The float data types are 32-bit IEEE 754. The Location message provides the location, altitude, direction and speed of the aircraft.
    ///  OPEN_DRONE_ID_LOCATION
    /// </summary>
    public class OpenDroneIdLocationPacket: PacketV2<OpenDroneIdLocationPayload>
    {
	    public const int PacketMessageId = 12901;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 254;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdLocationPayload Payload { get; } = new OpenDroneIdLocationPayload();

        public override string Name => "OPEN_DRONE_ID_LOCATION";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_LOCATION
    /// </summary>
    public class OpenDroneIdLocationPayload : IPayload
    {
        public byte GetMaxByteSize() => 59; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 59; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Latitude
            sum+=4; //Longitude
            sum+=4; //AltitudeBarometric
            sum+=4; //AltitudeGeodetic
            sum+=4; //Height
            sum+=4; //Timestamp
            sum+=2; //Direction
            sum+=2; //SpeedHorizontal
            sum+=2; //SpeedVertical
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=IdOrMac.Length; //IdOrMac
            sum+= 1; // Status
            sum+= 1; // HeightReference
            sum+= 1; // HorizontalAccuracy
            sum+= 1; // VerticalAccuracy
            sum+= 1; // BarometerAccuracy
            sum+= 1; // SpeedAccuracy
            sum+= 1; // TimestampAccuracy
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Latitude = BinSerialize.ReadInt(ref buffer);
            Longitude = BinSerialize.ReadInt(ref buffer);
            AltitudeBarometric = BinSerialize.ReadFloat(ref buffer);
            AltitudeGeodetic = BinSerialize.ReadFloat(ref buffer);
            Height = BinSerialize.ReadFloat(ref buffer);
            Timestamp = BinSerialize.ReadFloat(ref buffer);
            Direction = BinSerialize.ReadUShort(ref buffer);
            SpeedHorizontal = BinSerialize.ReadUShort(ref buffer);
            SpeedVertical = BinSerialize.ReadShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/59 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            IdOrMac = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            Status = (MavOdidStatus)BinSerialize.ReadByte(ref buffer);
            HeightReference = (MavOdidHeightRef)BinSerialize.ReadByte(ref buffer);
            HorizontalAccuracy = (MavOdidHorAcc)BinSerialize.ReadByte(ref buffer);
            VerticalAccuracy = (MavOdidVerAcc)BinSerialize.ReadByte(ref buffer);
            BarometerAccuracy = (MavOdidVerAcc)BinSerialize.ReadByte(ref buffer);
            SpeedAccuracy = (MavOdidSpeedAcc)BinSerialize.ReadByte(ref buffer);
            TimestampAccuracy = (MavOdidTimeAcc)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,Latitude);
            BinSerialize.WriteInt(ref buffer,Longitude);
            BinSerialize.WriteFloat(ref buffer,AltitudeBarometric);
            BinSerialize.WriteFloat(ref buffer,AltitudeGeodetic);
            BinSerialize.WriteFloat(ref buffer,Height);
            BinSerialize.WriteFloat(ref buffer,Timestamp);
            BinSerialize.WriteUShort(ref buffer,Direction);
            BinSerialize.WriteUShort(ref buffer,SpeedHorizontal);
            BinSerialize.WriteShort(ref buffer,SpeedVertical);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            BinSerialize.WriteByte(ref buffer,(byte)HeightReference);
            BinSerialize.WriteByte(ref buffer,(byte)HorizontalAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)VerticalAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)BarometerAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)SpeedAccuracy);
            BinSerialize.WriteByte(ref buffer,(byte)TimestampAccuracy);
            /* PayloadByteSize = 59 */;
        }
        
        



        /// <summary>
        /// Current latitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).
        /// OriginName: latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Latitude { get; set; }
        /// <summary>
        /// Current longitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).
        /// OriginName: longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int Longitude { get; set; }
        /// <summary>
        /// The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.
        /// OriginName: altitude_barometric, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeBarometric { get; set; }
        /// <summary>
        /// The geodetic altitude as defined by WGS84. If unknown: -1000 m.
        /// OriginName: altitude_geodetic, Units: m, IsExtended: false
        /// </summary>
        public float AltitudeGeodetic { get; set; }
        /// <summary>
        /// The current height of the unmanned aircraft above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m.
        /// OriginName: height, Units: m, IsExtended: false
        /// </summary>
        public float Height { get; set; }
        /// <summary>
        /// Seconds after the full hour with reference to UTC time. Typically the GPS outputs a time-of-week value in milliseconds. First convert that to UTC and then convert for this field using ((float) (time_week_ms % (60*60*1000))) / 1000. If unknown: 0xFFFF.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public float Timestamp { get; set; }
        /// <summary>
        /// Direction over ground (not heading, but direction of movement) measured clockwise from true North: 0 - 35999 centi-degrees. If unknown: 36100 centi-degrees.
        /// OriginName: direction, Units: cdeg, IsExtended: false
        /// </summary>
        public ushort Direction { get; set; }
        /// <summary>
        /// Ground speed. Positive only. If unknown: 25500 cm/s. If speed is larger than 25425 cm/s, use 25425 cm/s.
        /// OriginName: speed_horizontal, Units: cm/s, IsExtended: false
        /// </summary>
        public ushort SpeedHorizontal { get; set; }
        /// <summary>
        /// The vertical speed. Up is positive. If unknown: 6300 cm/s. If speed is larger than 6200 cm/s, use 6200 cm/s. If lower than -6200 cm/s, use -6200 cm/s.
        /// OriginName: speed_vertical, Units: cm/s, IsExtended: false
        /// </summary>
        public short SpeedVertical { get; set; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; set; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Indicates whether the unmanned aircraft is on the ground or in the air.
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public MavOdidStatus Status { get; set; }
        /// <summary>
        /// Indicates the reference point for the height field.
        /// OriginName: height_reference, Units: , IsExtended: false
        /// </summary>
        public MavOdidHeightRef HeightReference { get; set; }
        /// <summary>
        /// The accuracy of the horizontal position.
        /// OriginName: horizontal_accuracy, Units: , IsExtended: false
        /// </summary>
        public MavOdidHorAcc HorizontalAccuracy { get; set; }
        /// <summary>
        /// The accuracy of the vertical position.
        /// OriginName: vertical_accuracy, Units: , IsExtended: false
        /// </summary>
        public MavOdidVerAcc VerticalAccuracy { get; set; }
        /// <summary>
        /// The accuracy of the barometric altitude.
        /// OriginName: barometer_accuracy, Units: , IsExtended: false
        /// </summary>
        public MavOdidVerAcc BarometerAccuracy { get; set; }
        /// <summary>
        /// The accuracy of the horizontal and vertical speed.
        /// OriginName: speed_accuracy, Units: , IsExtended: false
        /// </summary>
        public MavOdidSpeedAcc SpeedAccuracy { get; set; }
        /// <summary>
        /// The accuracy of the timestamps.
        /// OriginName: timestamp_accuracy, Units: , IsExtended: false
        /// </summary>
        public MavOdidTimeAcc TimestampAccuracy { get; set; }
    }
    /// <summary>
    /// Data for filling the OpenDroneID Authentication message. The Authentication Message defines a field that can provide a means of authenticity for the identity of the UAS (Unmanned Aircraft System). The Authentication message can have two different formats. For data page 0, the fields PageCount, Length and TimeStamp are present and AuthData is only 17 bytes. For data page 1 through 15, PageCount, Length and TimeStamp are not present and the size of AuthData is 23 bytes.
    ///  OPEN_DRONE_ID_AUTHENTICATION
    /// </summary>
    public class OpenDroneIdAuthenticationPacket: PacketV2<OpenDroneIdAuthenticationPayload>
    {
	    public const int PacketMessageId = 12902;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 140;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdAuthenticationPayload Payload { get; } = new OpenDroneIdAuthenticationPayload();

        public override string Name => "OPEN_DRONE_ID_AUTHENTICATION";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_AUTHENTICATION
    /// </summary>
    public class OpenDroneIdAuthenticationPayload : IPayload
    {
        public byte GetMaxByteSize() => 53; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 53; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //Timestamp
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=IdOrMac.Length; //IdOrMac
            sum+= 1; // AuthenticationType
            sum+=1; //DataPage
            sum+=1; //LastPageIndex
            sum+=1; //Length
            sum+=AuthenticationData.Length; //AuthenticationData
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            AuthenticationType = (MavOdidAuthType)BinSerialize.ReadByte(ref buffer);
            DataPage = (byte)BinSerialize.ReadByte(ref buffer);
            LastPageIndex = (byte)BinSerialize.ReadByte(ref buffer);
            Length = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/23 - Math.Max(0,((/*PayloadByteSize*/53 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            AuthenticationData = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                AuthenticationData[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)AuthenticationType);
            BinSerialize.WriteByte(ref buffer,(byte)DataPage);
            BinSerialize.WriteByte(ref buffer,(byte)LastPageIndex);
            BinSerialize.WriteByte(ref buffer,(byte)Length);
            for(var i=0;i<AuthenticationData.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)AuthenticationData[i]);
            }
            /* PayloadByteSize = 53 */;
        }
        
        



        /// <summary>
        /// This field is only present for page 0. 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public uint Timestamp { get; set; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        /// <summary>
        /// Indicates the type of authentication.
        /// OriginName: authentication_type, Units: , IsExtended: false
        /// </summary>
        public MavOdidAuthType AuthenticationType { get; set; }
        /// <summary>
        /// Allowed range is 0 - 15.
        /// OriginName: data_page, Units: , IsExtended: false
        /// </summary>
        public byte DataPage { get; set; }
        /// <summary>
        /// This field is only present for page 0. Allowed range is 0 - 15. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h.
        /// OriginName: last_page_index, Units: , IsExtended: false
        /// </summary>
        public byte LastPageIndex { get; set; }
        /// <summary>
        /// This field is only present for page 0. Total bytes of authentication_data from all data pages. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h.
        /// OriginName: length, Units: bytes, IsExtended: false
        /// </summary>
        public byte Length { get; set; }
        /// <summary>
        /// Opaque authentication data. For page 0, the size is only 17 bytes. For other pages, the size is 23 bytes. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: authentication_data, Units: , IsExtended: false
        /// </summary>
        public const int AuthenticationDataMaxItemsCount = 23;
        public byte[] AuthenticationData { get; set; } = new byte[23];
        [Obsolete("This method is deprecated. Use GetAuthenticationDataMaxItemsCount instead.")]
        public byte GetAuthenticationDataMaxItemsCount() => 23;
    }
    /// <summary>
    /// Data for filling the OpenDroneID Self ID message. The Self ID Message is an opportunity for the operator to (optionally) declare their identity and purpose of the flight. This message can provide additional information that could reduce the threat profile of a UA (Unmanned Aircraft) flying in a particular area or manner. This message can also be used to provide optional additional clarification in an emergency/remote ID system failure situation.
    ///  OPEN_DRONE_ID_SELF_ID
    /// </summary>
    public class OpenDroneIdSelfIdPacket: PacketV2<OpenDroneIdSelfIdPayload>
    {
	    public const int PacketMessageId = 12903;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 249;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdSelfIdPayload Payload { get; } = new OpenDroneIdSelfIdPayload();

        public override string Name => "OPEN_DRONE_ID_SELF_ID";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_SELF_ID
    /// </summary>
    public class OpenDroneIdSelfIdPayload : IPayload
    {
        public byte GetMaxByteSize() => 46; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 46; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=IdOrMac.Length; //IdOrMac
            sum+= 1; // DescriptionType
            sum+=Description.Length; //Description
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            DescriptionType = (MavOdidDescType)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/23 - Math.Max(0,((/*PayloadByteSize*/46 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Description = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Description)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Description.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)DescriptionType);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Description)
                {
                    Encoding.ASCII.GetBytes(charPointer, Description.Length, bytePointer, Description.Length);
                }
            }
            buffer = buffer.Slice(Description.Length);
            
            /* PayloadByteSize = 46 */;
        }
        
        



        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        /// <summary>
        /// Indicates the type of the description field.
        /// OriginName: description_type, Units: , IsExtended: false
        /// </summary>
        public MavOdidDescType DescriptionType { get; set; }
        /// <summary>
        /// Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: description, Units: , IsExtended: false
        /// </summary>
        public const int DescriptionMaxItemsCount = 23;
        public char[] Description { get; set; } = new char[23];
        [Obsolete("This method is deprecated. Use GetDescriptionMaxItemsCount instead.")]
        public byte GetDescriptionMaxItemsCount() => 23;
    }
    /// <summary>
    /// Data for filling the OpenDroneID System message. The System Message contains general system information including the operator location/altitude and possible aircraft group and/or category/class information.
    ///  OPEN_DRONE_ID_SYSTEM
    /// </summary>
    public class OpenDroneIdSystemPacket: PacketV2<OpenDroneIdSystemPayload>
    {
	    public const int PacketMessageId = 12904;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 77;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdSystemPayload Payload { get; } = new OpenDroneIdSystemPayload();

        public override string Name => "OPEN_DRONE_ID_SYSTEM";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_SYSTEM
    /// </summary>
    public class OpenDroneIdSystemPayload : IPayload
    {
        public byte GetMaxByteSize() => 54; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 54; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //OperatorLatitude
            sum+=4; //OperatorLongitude
            sum+=4; //AreaCeiling
            sum+=4; //AreaFloor
            sum+=4; //OperatorAltitudeGeo
            sum+=4; //Timestamp
            sum+=2; //AreaCount
            sum+=2; //AreaRadius
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=IdOrMac.Length; //IdOrMac
            sum+= 1; // OperatorLocationType
            sum+= 1; // ClassificationType
            sum+= 1; // CategoryEu
            sum+= 1; // ClassEu
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            OperatorLatitude = BinSerialize.ReadInt(ref buffer);
            OperatorLongitude = BinSerialize.ReadInt(ref buffer);
            AreaCeiling = BinSerialize.ReadFloat(ref buffer);
            AreaFloor = BinSerialize.ReadFloat(ref buffer);
            OperatorAltitudeGeo = BinSerialize.ReadFloat(ref buffer);
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            AreaCount = BinSerialize.ReadUShort(ref buffer);
            AreaRadius = BinSerialize.ReadUShort(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/54 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            IdOrMac = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            OperatorLocationType = (MavOdidOperatorLocationType)BinSerialize.ReadByte(ref buffer);
            ClassificationType = (MavOdidClassificationType)BinSerialize.ReadByte(ref buffer);
            CategoryEu = (MavOdidCategoryEu)BinSerialize.ReadByte(ref buffer);
            ClassEu = (MavOdidClassEu)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,OperatorLatitude);
            BinSerialize.WriteInt(ref buffer,OperatorLongitude);
            BinSerialize.WriteFloat(ref buffer,AreaCeiling);
            BinSerialize.WriteFloat(ref buffer,AreaFloor);
            BinSerialize.WriteFloat(ref buffer,OperatorAltitudeGeo);
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteUShort(ref buffer,AreaCount);
            BinSerialize.WriteUShort(ref buffer,AreaRadius);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)OperatorLocationType);
            BinSerialize.WriteByte(ref buffer,(byte)ClassificationType);
            BinSerialize.WriteByte(ref buffer,(byte)CategoryEu);
            BinSerialize.WriteByte(ref buffer,(byte)ClassEu);
            /* PayloadByteSize = 54 */;
        }
        
        



        /// <summary>
        /// Latitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int OperatorLatitude { get; set; }
        /// <summary>
        /// Longitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int OperatorLongitude { get; set; }
        /// <summary>
        /// Area Operations Ceiling relative to WGS84. If unknown: -1000 m. Used only for swarms/multiple UA.
        /// OriginName: area_ceiling, Units: m, IsExtended: false
        /// </summary>
        public float AreaCeiling { get; set; }
        /// <summary>
        /// Area Operations Floor relative to WGS84. If unknown: -1000 m. Used only for swarms/multiple UA.
        /// OriginName: area_floor, Units: m, IsExtended: false
        /// </summary>
        public float AreaFloor { get; set; }
        /// <summary>
        /// Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m.
        /// OriginName: operator_altitude_geo, Units: m, IsExtended: false
        /// </summary>
        public float OperatorAltitudeGeo { get; set; }
        /// <summary>
        /// 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public uint Timestamp { get; set; }
        /// <summary>
        /// Number of aircraft in the area, group or formation (default 1). Used only for swarms/multiple UA.
        /// OriginName: area_count, Units: , IsExtended: false
        /// </summary>
        public ushort AreaCount { get; set; }
        /// <summary>
        /// Radius of the cylindrical area of the group or formation (default 0). Used only for swarms/multiple UA.
        /// OriginName: area_radius, Units: m, IsExtended: false
        /// </summary>
        public ushort AreaRadius { get; set; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; set; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Specifies the operator location type.
        /// OriginName: operator_location_type, Units: , IsExtended: false
        /// </summary>
        public MavOdidOperatorLocationType OperatorLocationType { get; set; }
        /// <summary>
        /// Specifies the classification type of the UA.
        /// OriginName: classification_type, Units: , IsExtended: false
        /// </summary>
        public MavOdidClassificationType ClassificationType { get; set; }
        /// <summary>
        /// When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the category of the UA.
        /// OriginName: category_eu, Units: , IsExtended: false
        /// </summary>
        public MavOdidCategoryEu CategoryEu { get; set; }
        /// <summary>
        /// When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the class of the UA.
        /// OriginName: class_eu, Units: , IsExtended: false
        /// </summary>
        public MavOdidClassEu ClassEu { get; set; }
    }
    /// <summary>
    /// Data for filling the OpenDroneID Operator ID message, which contains the CAA (Civil Aviation Authority) issued operator ID.
    ///  OPEN_DRONE_ID_OPERATOR_ID
    /// </summary>
    public class OpenDroneIdOperatorIdPacket: PacketV2<OpenDroneIdOperatorIdPayload>
    {
	    public const int PacketMessageId = 12905;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 49;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdOperatorIdPayload Payload { get; } = new OpenDroneIdOperatorIdPayload();

        public override string Name => "OPEN_DRONE_ID_OPERATOR_ID";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_OPERATOR_ID
    /// </summary>
    public class OpenDroneIdOperatorIdPayload : IPayload
    {
        public byte GetMaxByteSize() => 43; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 43; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=IdOrMac.Length; //IdOrMac
            sum+= 1; // OperatorIdType
            sum+=OperatorId.Length; //OperatorId
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/20 - Math.Max(0,((/*PayloadByteSize*/43 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            IdOrMac = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            OperatorIdType = (MavOdidOperatorIdType)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = OperatorId)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, OperatorId.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)OperatorIdType);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = OperatorId)
                {
                    Encoding.ASCII.GetBytes(charPointer, OperatorId.Length, bytePointer, OperatorId.Length);
                }
            }
            buffer = buffer.Slice(OperatorId.Length);
            
            /* PayloadByteSize = 43 */;
        }
        
        



        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; set; } = new byte[20];
        [Obsolete("This method is deprecated. Use GetIdOrMacMaxItemsCount instead.")]
        public byte GetIdOrMacMaxItemsCount() => 20;
        /// <summary>
        /// Indicates the type of the operator_id field.
        /// OriginName: operator_id_type, Units: , IsExtended: false
        /// </summary>
        public MavOdidOperatorIdType OperatorIdType { get; set; }
        /// <summary>
        /// Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: operator_id, Units: , IsExtended: false
        /// </summary>
        public const int OperatorIdMaxItemsCount = 20;
        public char[] OperatorId { get; } = new char[20];
    }
    /// <summary>
    /// An OpenDroneID message pack is a container for multiple encoded OpenDroneID messages (i.e. not in the format given for the above message descriptions but after encoding into the compressed OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0 Long Range/Extended Advertising or on WiFi Neighbor Aware Networking or on WiFi Beacon.
    ///  OPEN_DRONE_ID_MESSAGE_PACK
    /// </summary>
    public class OpenDroneIdMessagePackPacket: PacketV2<OpenDroneIdMessagePackPayload>
    {
	    public const int PacketMessageId = 12915;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 94;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdMessagePackPayload Payload { get; } = new OpenDroneIdMessagePackPayload();

        public override string Name => "OPEN_DRONE_ID_MESSAGE_PACK";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_MESSAGE_PACK
    /// </summary>
    public class OpenDroneIdMessagePackPayload : IPayload
    {
        public byte GetMaxByteSize() => 249; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 249; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            sum+=IdOrMac.Length; //IdOrMac
            sum+=1; //SingleMessageSize
            sum+=1; //MsgPackSize
            sum+=Messages.Length; //Messages
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = 20;
            for(var i=0;i<arraySize;i++)
            {
                IdOrMac[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }
            SingleMessageSize = (byte)BinSerialize.ReadByte(ref buffer);
            MsgPackSize = (byte)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/225 - Math.Max(0,((/*PayloadByteSize*/249 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Messages = new byte[arraySize];
            for(var i=0;i<arraySize;i++)
            {
                Messages[i] = (byte)BinSerialize.ReadByte(ref buffer);
            }

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            for(var i=0;i<IdOrMac.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)IdOrMac[i]);
            }
            BinSerialize.WriteByte(ref buffer,(byte)SingleMessageSize);
            BinSerialize.WriteByte(ref buffer,(byte)MsgPackSize);
            for(var i=0;i<Messages.Length;i++)
            {
                BinSerialize.WriteByte(ref buffer,(byte)Messages[i]);
            }
            /* PayloadByteSize = 249 */;
        }
        
        



        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
        /// <summary>
        /// Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
        /// OriginName: id_or_mac, Units: , IsExtended: false
        /// </summary>
        public const int IdOrMacMaxItemsCount = 20;
        public byte[] IdOrMac { get; } = new byte[20];
        /// <summary>
        /// This field must currently always be equal to 25 (bytes), since all encoded OpenDroneID messages are specified to have this length.
        /// OriginName: single_message_size, Units: bytes, IsExtended: false
        /// </summary>
        public byte SingleMessageSize { get; set; }
        /// <summary>
        /// Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 9.
        /// OriginName: msg_pack_size, Units: , IsExtended: false
        /// </summary>
        public byte MsgPackSize { get; set; }
        /// <summary>
        /// Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field.
        /// OriginName: messages, Units: , IsExtended: false
        /// </summary>
        public const int MessagesMaxItemsCount = 225;
        public byte[] Messages { get; set; } = new byte[225];
        [Obsolete("This method is deprecated. Use GetMessagesMaxItemsCount instead.")]
        public byte GetMessagesMaxItemsCount() => 225;
    }
    /// <summary>
    /// Transmitter (remote ID system) is enabled and ready to start sending location and other required information. This is streamed by transmitter. A flight controller uses it as a condition to arm.
    ///  OPEN_DRONE_ID_ARM_STATUS
    /// </summary>
    public class OpenDroneIdArmStatusPacket: PacketV2<OpenDroneIdArmStatusPayload>
    {
	    public const int PacketMessageId = 12918;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 139;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdArmStatusPayload Payload { get; } = new OpenDroneIdArmStatusPayload();

        public override string Name => "OPEN_DRONE_ID_ARM_STATUS";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_ARM_STATUS
    /// </summary>
    public class OpenDroneIdArmStatusPayload : IPayload
    {
        public byte GetMaxByteSize() => 51; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 51; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+= 1; // Status
            sum+=Error.Length; //Error
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            var arraySize = 0;
            var payloadSize = buffer.Length;
            Status = (MavOdidArmStatus)BinSerialize.ReadByte(ref buffer);
            arraySize = /*ArrayLength*/50 - Math.Max(0,((/*PayloadByteSize*/51 - payloadSize - /*ExtendedFieldsLength*/0)/1 /*FieldTypeByteSize*/));
            Error = new char[arraySize];
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Error)
                {
                    Encoding.ASCII.GetChars(bytePointer, arraySize, charPointer, Error.Length);
                }
            }
            buffer = buffer.Slice(arraySize);
           

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteByte(ref buffer,(byte)Status);
            unsafe
            {
                fixed (byte* bytePointer = buffer)
                fixed (char* charPointer = Error)
                {
                    Encoding.ASCII.GetBytes(charPointer, Error.Length, bytePointer, Error.Length);
                }
            }
            buffer = buffer.Slice(Error.Length);
            
            /* PayloadByteSize = 51 */;
        }
        
        



        /// <summary>
        /// Status level indicating if arming is allowed.
        /// OriginName: status, Units: , IsExtended: false
        /// </summary>
        public MavOdidArmStatus Status { get; set; }
        /// <summary>
        /// Text error message, should be empty if status is good to arm. Fill with nulls in unused portion.
        /// OriginName: error, Units: , IsExtended: false
        /// </summary>
        public const int ErrorMaxItemsCount = 50;
        public char[] Error { get; set; } = new char[50];
        [Obsolete("This method is deprecated. Use GetErrorMaxItemsCount instead.")]
        public byte GetErrorMaxItemsCount() => 50;
    }
    /// <summary>
    /// Update the data in the OPEN_DRONE_ID_SYSTEM message with new location information. This can be sent to update the location information for the operator when no other information in the SYSTEM message has changed. This message allows for efficient operation on radio links which have limited uplink bandwidth while meeting requirements for update frequency of the operator location.
    ///  OPEN_DRONE_ID_SYSTEM_UPDATE
    /// </summary>
    public class OpenDroneIdSystemUpdatePacket: PacketV2<OpenDroneIdSystemUpdatePayload>
    {
	    public const int PacketMessageId = 12919;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 7;
        public override bool WrapToV2Extension => false;

        public override OpenDroneIdSystemUpdatePayload Payload { get; } = new OpenDroneIdSystemUpdatePayload();

        public override string Name => "OPEN_DRONE_ID_SYSTEM_UPDATE";
    }

    /// <summary>
    ///  OPEN_DRONE_ID_SYSTEM_UPDATE
    /// </summary>
    public class OpenDroneIdSystemUpdatePayload : IPayload
    {
        public byte GetMaxByteSize() => 18; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 18; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=4; //OperatorLatitude
            sum+=4; //OperatorLongitude
            sum+=4; //OperatorAltitudeGeo
            sum+=4; //Timestamp
            sum+=1; //TargetSystem
            sum+=1; //TargetComponent
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            OperatorLatitude = BinSerialize.ReadInt(ref buffer);
            OperatorLongitude = BinSerialize.ReadInt(ref buffer);
            OperatorAltitudeGeo = BinSerialize.ReadFloat(ref buffer);
            Timestamp = BinSerialize.ReadUInt(ref buffer);
            TargetSystem = (byte)BinSerialize.ReadByte(ref buffer);
            TargetComponent = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteInt(ref buffer,OperatorLatitude);
            BinSerialize.WriteInt(ref buffer,OperatorLongitude);
            BinSerialize.WriteFloat(ref buffer,OperatorAltitudeGeo);
            BinSerialize.WriteUInt(ref buffer,Timestamp);
            BinSerialize.WriteByte(ref buffer,(byte)TargetSystem);
            BinSerialize.WriteByte(ref buffer,(byte)TargetComponent);
            /* PayloadByteSize = 18 */;
        }
        
        



        /// <summary>
        /// Latitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_latitude, Units: degE7, IsExtended: false
        /// </summary>
        public int OperatorLatitude { get; set; }
        /// <summary>
        /// Longitude of the operator. If unknown: 0 (both Lat/Lon).
        /// OriginName: operator_longitude, Units: degE7, IsExtended: false
        /// </summary>
        public int OperatorLongitude { get; set; }
        /// <summary>
        /// Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m.
        /// OriginName: operator_altitude_geo, Units: m, IsExtended: false
        /// </summary>
        public float OperatorAltitudeGeo { get; set; }
        /// <summary>
        /// 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
        /// OriginName: timestamp, Units: s, IsExtended: false
        /// </summary>
        public uint Timestamp { get; set; }
        /// <summary>
        /// System ID (0 for broadcast).
        /// OriginName: target_system, Units: , IsExtended: false
        /// </summary>
        public byte TargetSystem { get; set; }
        /// <summary>
        /// Component ID (0 for broadcast).
        /// OriginName: target_component, Units: , IsExtended: false
        /// </summary>
        public byte TargetComponent { get; set; }
    }
    /// <summary>
    /// Temperature and humidity from hygrometer.
    ///  HYGROMETER_SENSOR
    /// </summary>
    public class HygrometerSensorPacket: PacketV2<HygrometerSensorPayload>
    {
	    public const int PacketMessageId = 12920;
        public override int MessageId => PacketMessageId;
        public override byte GetCrcEtra() => 20;
        public override bool WrapToV2Extension => false;

        public override HygrometerSensorPayload Payload { get; } = new HygrometerSensorPayload();

        public override string Name => "HYGROMETER_SENSOR";
    }

    /// <summary>
    ///  HYGROMETER_SENSOR
    /// </summary>
    public class HygrometerSensorPayload : IPayload
    {
        public byte GetMaxByteSize() => 5; // Sum of byte sized of all fields (include extended)
        public byte GetMinByteSize() => 5; // of byte sized of fields (exclude extended)
        public int GetByteSize()
        {
            var sum = 0;
            sum+=2; //Temperature
            sum+=2; //Humidity
            sum+=1; //Id
            return (byte)sum;
        }



        public void Deserialize(ref ReadOnlySpan<byte> buffer)
        {
            Temperature = BinSerialize.ReadShort(ref buffer);
            Humidity = BinSerialize.ReadUShort(ref buffer);
            Id = (byte)BinSerialize.ReadByte(ref buffer);

        }

        public void Serialize(ref Span<byte> buffer)
        {
            BinSerialize.WriteShort(ref buffer,Temperature);
            BinSerialize.WriteUShort(ref buffer,Humidity);
            BinSerialize.WriteByte(ref buffer,(byte)Id);
            /* PayloadByteSize = 5 */;
        }
        
        



        /// <summary>
        /// Temperature
        /// OriginName: temperature, Units: cdegC, IsExtended: false
        /// </summary>
        public short Temperature { get; set; }
        /// <summary>
        /// Humidity
        /// OriginName: humidity, Units: c%, IsExtended: false
        /// </summary>
        public ushort Humidity { get; set; }
        /// <summary>
        /// Hygrometer ID
        /// OriginName: id, Units: , IsExtended: false
        /// </summary>
        public byte Id { get; set; }
    }


#endregion


}
